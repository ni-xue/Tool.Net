<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tool.Net</name>
    </assembly>
    <members>
        <member name="T:Tool.Net.Explains">
            <summary>
            包相关信息说明类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Net.Explains.PackageName">
            <summary>
            包体名称
            </summary>
        </member>
        <member name="F:Tool.Net.Explains.AuthorName">
            <summary>
            作者名称
            </summary>
        </member>
        <member name="F:Tool.Net.Explains.Description">
            <summary>
            作者开发说明
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.EnClientEventDrive">
            <summary>
            事件控制抽象类（客户端版）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.#ctor">
            <summary>
            默认构造（公共模板信息）
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.OnInterceptor(Tool.Sockets.Kernels.EnClient,System.Boolean)">
            <summary>
            设置开启或关闭不想收到的消息事件
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <param name="state">等于true时生效，将关闭一切的相关事件</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.OnIsQueue(Tool.Sockets.Kernels.EnClient,System.Boolean)">
            <summary>
            设置将<see cref="T:Tool.Sockets.Kernels.EnClient"/>事件，载入或不载入
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <param name="state">等于true时，事件由队列线程完成，false时交由任务线程自行完成</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.IsEvent(Tool.Sockets.Kernels.EnClient)">
            <summary>
            获取该事件是否会触发
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.IsQueue(Tool.Sockets.Kernels.EnClient)">
            <summary>
            获取该事件是否在队列任务中运行
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.OpenAllEvent">
            <summary>
            开启全部事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.OpenAllQueue">
            <summary>
            全部事件都设置成队列事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.CloseAllEvent">
            <summary>
            关闭全部事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnClientEventDrive.CloseAllQueue">
            <summary>
            全部事件都设置成主要事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.EnServerEventDrive">
            <summary>
            事件控制抽象类（服务端版）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.#ctor">
            <summary>
            默认构造（公共模板信息）
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.OnInterceptor(Tool.Sockets.Kernels.EnServer,System.Boolean)">
            <summary>
            设置开启或关闭不想收到的消息事件
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <param name="state">等于true时生效，将关闭一切的相关事件</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.OnIsQueue(Tool.Sockets.Kernels.EnServer,System.Boolean)">
            <summary>
            设置将<see cref="T:Tool.Sockets.Kernels.EnServer"/>事件，载入或不载入
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <param name="state">等于true时，事件由队列线程完成，false时交由任务线程自行完成</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.IsEvent(Tool.Sockets.Kernels.EnServer)">
            <summary>
            获取该事件是否会触发
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.IsQueue(Tool.Sockets.Kernels.EnServer)">
            <summary>
            获取该事件是否在队列任务中运行
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.OpenAllEvent">
            <summary>
            开启全部事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.OpenAllQueue">
            <summary>
            全部事件都设置成队列事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.CloseAllEvent">
            <summary>
            关闭全部事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnServerEventDrive.CloseAllQueue">
            <summary>
            全部事件都设置成主要事件
            </summary>
            <returns>返回当前对象，快速配置</returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.NetworkConnect`1">
            <summary>
            通信公共模板抽象类（客户端版）
            </summary>
            <typeparam name="ISocket"></typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.#ctor">
            <summary>
            默认构造（公共模板信息）
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkConnect`1.LocalPoint">
            <summary>
            当前设备的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkConnect`1.Connected">
            <summary>
            获取一个值，该值指示 Client 的基础 Socket 是否已连接到远程主机。
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkConnect`1.Server">
            <summary>
            服务器的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkConnect`1.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkConnect`1.IsClose">
            <summary>
            标识客户端是否关闭，改状态为调用关闭方法后的状态。
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkConnect`1.IsThreadPool">
            <summary>
            是否使用线程池调度接收后的数据
            默认 true 开启
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkConnect`1.BufferSize">
            <summary>
            表示通讯的包大小
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.Close">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.ConnectAsync(System.String,System.Int32)">
            <summary>
            异步连接
            </summary>
            <param name="ip">要连接的服务器的ip地址</param>
            <param name="port">要连接的服务器的端口</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.CreateSendBytes(System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="length">数据大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.Dispose">
            <summary>
            关闭连接，回收相关资源
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnClient)">
            <summary>
            可供开发重写的事件方法
            </summary>
            <param name="key">IP：端口</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.Reconnection">
            <summary>
            重连，返回是否重连，如果没有断开是不会重连的
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.SendAsync(Tool.Sockets.Kernels.SendBytes{`0})">
            <summary>
            异步发送消息
            </summary>
            <param name="sendBytes">数据包</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnClient})">
            <summary>
            连接、发送、关闭事件
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkConnect`1.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{`0})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="T:Tool.Sockets.Kernels.NetworkListener`1">
            <summary>
            通信公共模板抽象类（服务端版）
            </summary>
            <typeparam name="ISocket"></typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.#ctor">
            <summary>
            默认构造（公共模板信息）
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkListener`1.ListClient">
            <summary>
            已建立连接的集合
            key:UserKey
            value:Socket
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkListener`1.Server">
            <summary>
            服务器创建时的信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkListener`1.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkListener`1.IsClose">
            <summary>
            标识服务端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkListener`1.IsThreadPool">
            <summary>
            是否使用线程池调度接收后的数据
            默认 true 开启
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.NetworkListener`1.BufferSize">
            <summary>
            表示通讯的包大小
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.CreateSendBytes(`0,System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="client">收数据的对象</param>
            <param name="length">数据大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.Dispose">
            <summary>
            关闭连接，回收相关资源
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnServer)">
            <summary>
            可供开发重写的事件方法
            </summary>
            <param name="key">指定发送对象</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.SendAsync(Tool.Sockets.Kernels.SendBytes{`0})">
            <summary>
            异步发送消息
            </summary>
            <param name="sendBytes">数据包</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnServer})">
            <summary>
            连接、发送、关闭事件
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{`0})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.StartAsync(System.String,System.Int32)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.Stop">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.NetworkListener`1.TrySocket(Tool.Sockets.Kernels.UserKey@,`0@)">
            <summary>
            根据IP:Port获取对应的连接对象
            </summary>
            <param name="key">IP:Port</param>
            <param name="client">连接对象</param>
            <returns>返回成功状态</returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.EnumEventQueue">
            <summary>
            一个Net连接公共的事件消息体
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnumEventQueue._messageQueue">
            <summary>
            Net事件核心
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnumEventQueue._eventthread">
            <summary>
            Net连接公共的事件线程
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnumEventQueue._mre">
            信号
        </member>
        <member name="F:Tool.Sockets.Kernels.EnumEventQueue._que">
            事件消息Queue
        </member>
        <member name="F:Tool.Sockets.Kernels.EnumEventQueue.noEnClient">
            当前锁
        </member>
        <member name="P:Tool.Sockets.Kernels.EnumEventQueue.Instance">
            <summary>
            实现单例,不建议直接调用。
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnumEventQueue.Complete``1(Tool.Sockets.Kernels.UserKey@,``0,System.Boolean,Tool.Sockets.Kernels.CompletedEvent{``0})">
            <summary>
            调用TCP事件队列线程
            </summary>
            <param name="key">IP</param>
            <param name="enAction">事件枚举</param>
            <param name="isQueue">是否采用队列处理</param>
            <param name="action">委托事件</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnumEventQueue.OnInterceptor(Tool.Sockets.Kernels.EnClient,System.Boolean)">
            <summary>
            设置开启或关闭不想收到的消息事件（当前设置仅在 <see cref="T:Tool.Sockets.Kernels.INetworkCore"/> 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置）
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <param name="state">等于true时生效，将关闭一切的相关事件</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnumEventQueue.OnInterceptor(Tool.Sockets.Kernels.EnServer,System.Boolean)">
            <summary>
            设置开启或关闭不想收到的消息事件（当前设置仅在 <see cref="T:Tool.Sockets.Kernels.INetworkCore"/> 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置）
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <param name="state">等于true时生效，将关闭一切的相关事件</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnumEventQueue.OnIsQueue(Tool.Sockets.Kernels.EnClient,System.Boolean)">
            <summary>
            设置将<see cref="T:Tool.Sockets.Kernels.EnClient"/>事件，载入或不载入，队列池（当前设置仅在 <see cref="T:Tool.Sockets.Kernels.INetworkCore"/> 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置）
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <param name="state">等于true时，事件由队列线程完成，false时交由任务线程自行完成</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.EnumEventQueue.OnIsQueue(Tool.Sockets.Kernels.EnServer,System.Boolean)">
            <summary>
            设置将<see cref="T:Tool.Sockets.Kernels.EnServer"/>事件，载入或不载入，队列池（当前设置仅在 <see cref="T:Tool.Sockets.Kernels.INetworkCore"/> 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置）
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <param name="state">等于true时，事件由队列线程完成，false时交由任务线程自行完成</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.EnClient">
            <summary>
            Client客户端枚举
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnClient.Connect">
            <summary>
            连接服务器成功时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnClient.Fail">
            <summary>
            连接服务器失败时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnClient.SendMsg">
            <summary>
            向服务器发送数据时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnClient.Receive">
            <summary>
            收到服务器数据时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnClient.Close">
            <summary>
            与服务器断开连接时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnClient.HeartBeat">
            <summary>
            心跳包事件（推送后触发）
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnClient.Reconnect">
            <summary>
            （断线后/连接失败）需要重连时触发
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.EnServer">
            <summary>
            Server服务器枚举
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.Create">
            <summary>
            服务器创建成功时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.Fail">
            <summary>
            服务器创建失败时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.Connect">
            <summary>
            客户端连接服务器成功时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.SendMsg">
            <summary>
            向客户端发送数据时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.Receive">
            <summary>
            收到客户端数据时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.ClientClose">
            <summary>
            当处于连接状态的客户端断开时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.Close">
            <summary>
            服务端关闭时发生
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.EnServer.HeartBeat">
            <summary>
            心跳包事件（接收后触发）
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.NetBufferSize">
            <summary>
            设置传输大小
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Default">
            <summary>
            默认有系统分配大小
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size8K">
            <summary>
            8KB=8192字节（带宽小于1Mbps）建议使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size16K">
            <summary>
            16KB=16384字节（带宽在1Mbps----100Mbps）建议使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size32K">
            <summary>
            32KB=32768字节（带宽大于50Mbps）建议使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size64K">
            <summary>
            64KB=65536字节（带宽大于100Mbps）建议使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size128K">
            <summary>
            128KB=131072 字节（带宽大于200Mbps）建议使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size256K">
            <summary>
            256KB=262144 字节（带宽大于400Mbps）建议使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size512K">
            <summary>
            512KB=524288 字节（带宽大于800Mbps）建议使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size1024K">
            <summary>
            1024KB=1048576 字节（带宽大于1000Mbps）谨慎使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size2048K">
            <summary>
            2048KB=2097152 字节（带宽大于2000Mbps）谨慎使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size4096K">
            <summary>
            4096KB=4194304 字节（带宽大于4000Mbps）谨慎使用
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetBufferSize.Size8192K">
            <summary>
            8192KB=8388608 字节（带宽大于8000Mbps）谨慎使用
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.NetFrameState">
            <summary>
            对NetFrame响应的状态
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetFrameState.Default">
            <summary>
            表示，无任何动作！
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetFrameState.OnlyID">
            <summary>
            表示，因出现新的相同的消息ID，前一个将被强制关闭，以保证唯一性！
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetFrameState.Success">
            <summary>
            表示，被触发了！
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetFrameState.SendFail">
            <summary>
            数据发送失败，请查看详细错误。
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetFrameState.Timeout">
            <summary>
            表示，超时了！
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.NetFrameState.Exception">
            <summary>
            表示，发生异常！
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.IGetQueOnEnum">
            <summary>
            事件处理接口
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IGetQueOnEnum.Success">
            <summary>
            获取默认完成的事件结果
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IGetQueOnEnum.SuccessAsync">
            <summary>
            获取默认完成的事件结果
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IGetQueOnEnum.IsSuccess">
            <summary>
            获取当前任务是否完成
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IGetQueOnEnum.Error">
            <summary>
            获取当前任务可能发生的错误
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.IGetQueOnEnum.Wait">
            <summary>
            等待任务完成！
            </summary>
            <returns>采用自旋模式</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.IGetQueOnEnum.Completed">
            <summary>
            事件触发器
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.GetQueOnEnum.IsSuccess">
            <summary>
            获取当前任务是否完成
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.GetQueOnEnum.Tool#Sockets#Kernels#IGetQueOnEnum#Completed">
            <summary>
            事件触发器
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.GetQueOnEnum`1">
            <summary>
            存储事件队列的类
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.GetQueOnEnum`1.#ctor(Tool.Sockets.Kernels.UserKey,`0,Tool.Sockets.Kernels.CompletedEvent{`0})">
            <summary>
            构造服务端或客户端事件
            </summary>
            <param name="Key">IP+端口</param>
            <param name="EnumAction">事件枚举</param>
            <param name="Completed">委托事件</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.GetQueOnEnum`1.Tool#Sockets#Kernels#IGetQueOnEnum#Completed">
            <summary>
            启动指定方法
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.GetQueOnEnum`1.Key">
            <summary>
            IP+端口
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.GetQueOnEnum`1.Time">
            <summary>
            消息发生时间
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.GetQueOnEnum`1.EnCompleted">
            <summary>
            回调函数
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.GetQueOnEnum`1.EnumAction">
            <summary>
            客户端或服务器枚举
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.GetQueOnEnum`1.IsSuccess">
            <summary>
            获取当前任务是否完成
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.GetQueOnEnum`1.Error">
            <summary>
            获取当前任务可能发生的错误
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.Handshake">
            <summary>
            UDP/TCP 协议模式 保证数据 握手模式，验证双方是否满足条件
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.Handshake.Bytes">
            <summary>
            描述UDP可靠传输验证协议
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.Handshake.Ready">
            <summary>
            描述UDP可靠传输完成协议
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.Handshake.MillisecondsDelay">
            <summary>
            验证等待时长
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.Handshake.UdpAuthenticAtion(System.Net.Sockets.Socket,Tool.Sockets.UdpHelper.UdpEndPoint,System.Boolean)">
            <summary>
            认证
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Handshake.UdpAutograph(System.Net.Sockets.Socket,Tool.Sockets.UdpHelper.UdpEndPoint,System.Memory{System.Byte})">
            <summary>
            签名（认证对方信息，并签名返回）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Handshake.TcpAuthenticAtion(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            认证
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Handshake.TcpAutograph(System.Net.Sockets.Socket)">
            <summary>
            签名（认证对方信息，并签名返回）
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.IBytesCore">
            <summary>
            内存管理对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IBytesCore.OnlyData">
            <summary>
            仅标记作用
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IBytesCore.Length">
            <summary>
            流长度
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IBytesCore.Span">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IBytesCore.Memory">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IBytesCore.Array">
            <summary>
            获取连续内存
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.IBytesCore.TransferByte">
            <summary>
            移交内存器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.IBytesCore.GetIMemoryOwner">
            <summary>
            获取内存器核心
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tool.Sockets.Kernels.IBytesCore.IsDispose">
            <summary>
            获取是否被回收
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.IDataPacket">
            <summary>
            通讯协议模型
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.IsRelay">
            <summary>
            是否转发数据，默认不转发
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.BufferSize">
            当前规定大小
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.ActionKey">
            <summary>
            获取对应消息Key
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.OnlyId">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.ClassID">
            <summary>
            通道ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.ActionID">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.IsSend">
            <summary>
            当前包是发包还是回复
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.IsErr">
            <summary>
            当前包是否发生异常
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.IsServer">
            <summary>
            消息是发送给那一端
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.IsReply">
            <summary>
            是否需要有回复消息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.Text">
            <summary>
            文本数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.TextBytes">
            <summary>
            文本流数据包
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.Bytes">
            <summary>
            携带字节包
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IDataPacket.IpPort">
            <summary>
            当为转发时，转发给谁的IpPort
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.IDataPacket.TotalSize(System.Int32@)">
            <summary>
            获取包总大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.IDataPacket.ByteData``1(Tool.Sockets.Kernels.SendBytes{``0}@,System.Int32)">
            <summary>
            获取完整字节流
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sendBytes"></param>
            <param name="textSize"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.IDataPacket.CopyTo(System.Boolean,System.Boolean)">
            <summary>
            拷贝当前数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.IDataPacket.Clone">
            <summary>
            克隆完整副本
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tool.Sockets.Kernels.IDataPacket.SetErr(System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.IDataPacket.ResetValue(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Tool.Sockets.Kernels.Ipv4Port})">
            <summary>
            设置发送状态
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.IDataPacket.GetAgentBytes``1(``0)">
            <summary>
            获取转发模式下专用数据对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Tool.Sockets.Kernels.INetworkConnect">
            <summary>
            连接通信模型
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkConnect.LocalPoint">
            <summary>
            本机通信IP
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkConnect.Connected">
            <summary>
            是否连接中
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnClient})">
            <summary>
            相关事件委托
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.ConnectAsync(System.String,System.Int32)">
            <summary>
            连接服务器
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.Reconnection">
            <summary>
            重连
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnClient)">
            <summary>
            可重写的事件
            </summary>
            <param name="key"></param>
            <param name="enAction"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.OnInterceptor(Tool.Sockets.Kernels.EnClient,System.Boolean)">
            <summary>
            设置开启或关闭不想收到的消息事件
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <param name="state">等于true时生效，将关闭一切的相关事件</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.OnIsQueue(Tool.Sockets.Kernels.EnClient,System.Boolean)">
            <summary>
            设置将<see cref="T:Tool.Sockets.Kernels.EnClient"/>事件，载入或不载入
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <param name="state">等于true时，事件由队列线程完成，false时交由任务线程自行完成</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.IsEvent(Tool.Sockets.Kernels.EnClient)">
            <summary>
            获取该事件是否会触发
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.IsQueue(Tool.Sockets.Kernels.EnClient)">
            <summary>
            获取该事件是否在队列任务中运行
            </summary>
            <param name="enClient"><see cref="T:Tool.Sockets.Kernels.EnClient"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect.Close">
            <summary>
            关闭当前连接
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.INetworkConnect`1">
            <summary>
            连接通信模型二
            </summary>
            <typeparam name="ISocket"></typeparam>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect`1.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{`0})">
            <summary>
            接收数据委托
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect`1.SendAsync(Tool.Sockets.Kernels.SendBytes{`0})">
            <summary>
            发送数据
            </summary>
            <param name="sendBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkConnect`1.CreateSendBytes(System.Int32)">
            <summary>
            创建发送数据需要用的容器
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.INetworkCore">
            <summary>
            连接协议顶层接口
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkCore.Server">
            <summary>
            服务器信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkCore.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkCore.IsClose">
            <summary>
            是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkCore.IsThreadPool">
            <summary>
            是否启用线程池处理接收数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkCore.BufferSize">
            <summary>
            表示通讯的包大小
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.INetworkListener">
            <summary>
            服务端模型
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnServer})">
            <summary>
            相关事件委托
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.StartAsync(System.String,System.Int32)">
            <summary>
            创建服务器
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnServer)">
            <summary>
            可重写的事件
            </summary>
            <param name="key"></param>
            <param name="enAction"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.OnInterceptor(Tool.Sockets.Kernels.EnServer,System.Boolean)">
            <summary>
            设置开启或关闭不想收到的消息事件
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <param name="state">等于true时生效，将关闭一切的相关事件</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.OnIsQueue(Tool.Sockets.Kernels.EnServer,System.Boolean)">
            <summary>
            设置将<see cref="T:Tool.Sockets.Kernels.EnServer"/>事件，载入或不载入，队列池
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <param name="state">等于true时，事件由队列线程完成，false时交由任务线程自行完成</param>
            <returns>返回true时表示设置成功！</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.IsEvent(Tool.Sockets.Kernels.EnServer)">
            <summary>
            获取该事件是否会触发
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.IsQueue(Tool.Sockets.Kernels.EnServer)">
            <summary>
            获取该事件是否在队列任务中运行
            </summary>
            <param name="enServer"><see cref="T:Tool.Sockets.Kernels.EnServer"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener.Stop">
            <summary>
            关闭服务器
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.INetworkListener`1">
            <summary>
            服务器模型二
            </summary>
            <typeparam name="ISocket"></typeparam>
        </member>
        <member name="P:Tool.Sockets.Kernels.INetworkListener`1.ListClient">
            <summary>
            当前连接的用户池
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener`1.SendAsync(Tool.Sockets.Kernels.SendBytes{`0})">
            <summary>
            发送数据
            </summary>
            <param name="sendBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener`1.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{`0})">
            <summary>
            接收数据委托
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener`1.TrySocket(Tool.Sockets.Kernels.UserKey@,`0@)">
            <summary>
            根据key获取连接池中的用户
            </summary>
            <param name="key"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.INetworkListener`1.CreateSendBytes(`0,System.Int32)">
            <summary>
            创建发送数据需要用的容器
            </summary>
            <param name="client"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.KeepAlive">
            <summary>
            用于长连接的心跳模型
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Sockets.Kernels.KeepAlive.TcpKeepObj">
            <summary>
            获取完整心跳协议（Tcp）
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.KeepAlive.KeepAliveObj">
            <summary>
            获取持久连接协议
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tool.Sockets.Kernels.KeepAlive.TimeDelay">
            <summary>
            检查率
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.KeepAlive.#ctor(System.Byte,System.Func{System.Threading.Tasks.Task})">
            <summary>
            创建心跳对象
            </summary>
            <param name="TimeInterval">心跳频率</param>
            <param name="OnStart">心跳触发器内部捕获了异常</param>
        </member>
        <member name="P:Tool.Sockets.Kernels.KeepAlive.OnStart">
            <summary>
            开始心跳事件
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.KeepAlive.TimeInterval">
            <summary>
            间隔时间，不能小于1秒
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.KeepAlive.ElapsedTicks">
            <summary>
            逝去的时间
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.KeepAlive.TimeDifference">
            <summary>
            时间差
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.KeepAlive.IsTimeInterval">
            <summary>
            判断是否满足心跳事件
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.KeepAlive.ResetTime">
            <summary>
            重置计数器
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.KeepAlive.Close">
            <summary>
            关闭心跳系统
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.SocketEventPool">
            <summary>
            Socket异步传输池
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.SocketEventPool.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.QuicStateObject">
            <summary>
            对异步接收时的对象状态的封装，将Websocket与接收到的数据封装在一起
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicStateObject.#ctor(Tool.Sockets.Kernels.QuicSocket,System.Int32,System.Boolean,Tool.Sockets.Kernels.ReceiveEvent{Tool.Sockets.Kernels.QuicSocket})">
            <summary>
            有参构造
            </summary>
            <param name="Client">对象</param>
            <param name="DataLength">包的大小</param>
            <param name="OnlyData">是否确保数据有效</param>
            <param name="received">任务事件</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicStateObject.IsConnected">
            <summary>
            根据 <see cref="T:Tool.Sockets.Kernels.QuicSocket"/> 获取当前连接是否已经断开
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicStateObject.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicStateObject.Client">
            <summary>
            为 Quic 网络服务提供客户端连接。
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicStateObject.DataLength">
            <summary>
            包长度
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicStateObject.SocketKey">
            <summary>
            当前对象唯一的连接票据
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicStateObject.CloseAsync">
            <summary>
            回收对象所以资源
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicStateObject.IsConnected(Tool.Sockets.Kernels.QuicSocket)">
            <summary>
            根据 <see cref="T:Tool.Sockets.Kernels.QuicSocket"/> 获取当前连接是否已经断开
            </summary>
            <param name="Client"><see cref="T:Tool.Sockets.Kernels.QuicSocket"/></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicStateObject.GetIpPort(Tool.Sockets.Kernels.QuicSocket)">
            <summary>
            根据QuicSocket获取IP加端口
            </summary>
            <param name="Client"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicStateObject.GenerateManualCertificate(System.String)">
            <summary>
            生成证书《本地证书》
            </summary>
            <param name="name">域名</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.QuicSocket">
            <summary>
            QuicSocket通信模块
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicSocket.QuicSocketAsync(System.Net.Quic.QuicConnection,System.Boolean)">
            <summary>
            使用连接信息创建或获取流
            </summary>
            <param name="connection">连接信息</param>
            <param name="isServer">发起方</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicSocket.OutOrInStreamAsync">
            <summary>
            获取服务端或客户端的new流对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicSocket.IsServer">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicSocket.Connection">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicSocket.Stream">
            <summary>
            Quic默认流信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicSocket.Connected">
            <summary>
            当前Quic是否连接
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicSocket.RemoteEndPoint">
            <summary>
            用于此连接的远程终结点。
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.QuicSocket.LocalEndPoint">
            <summary>
            用于此连接的本地终结点。
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicSocket.SendAsync(System.Memory{System.Byte})">
            <summary>
            向当前默认流发送数据
            </summary>
            <param name="listData">数据</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicSocket.ReceiveAsync">
            <summary>
            获取从当前流中获取新的数据
            </summary>
            <returns>结果</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicSocket.AdvanceTo(System.Buffers.ReadOnlySequence{System.Byte}@)">
            <summary>
            标记已使用数据的位置
            </summary>
            <param name="buffer">位置</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.QuicSocket.CloseAsync">
            <summary>
            关闭Quic连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.ReceiveEvent`1">
            <summary>
            Socket接收数据委托
            </summary>
            <typeparam name="T">连接对象</typeparam>
            <param name="age0">数据包</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.CompletedEvent`1">
            <summary>
            Socket事件委托
            </summary>
            <typeparam name="T">连接对象</typeparam>
            <param name="age0">事件key</param>
            <param name="age1">事件枚举</param>
            <param name="age2">发生时间</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.IpParserEvent">
            <summary>
            Socket IpPort 解释器委托
            </summary>
            <param name="age0">带验证信息</param>
            <param name="age1">发送者信息</param>
            <returns>有效的<see cref="T:Tool.Sockets.Kernels.Ipv4Port"/></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.StateObject">
            <summary>
            通信公共基础类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Sockets.Kernels.StateObject.EmptyIpv4Port">
            <summary>
            默认IP信息
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.StateObject.Lock">
            <summary>
            用于提供锁服务
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.StateObject.HeadSize">
            <summary>
            默认大小
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.StateObject.KeepAliveObj">
            <summary>
            获取持久连接协议
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.CreateSocket(System.Boolean,Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建用于连接的 <see cref="T:System.Net.Sockets.Socket"/> 对象
            </summary>
            <param name="isTcp">是否是Tcp</param>
            <param name="bufferSize">缓冲区枚举</param>
            <returns><see cref="T:System.Net.Sockets.Socket"/> 对象</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.SocketIsDispose(System.Net.Sockets.Socket)">
            <summary>
            获取<see cref="T:System.Net.Sockets.Socket"/> Disposed 属性
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.HashCodeByte(System.Memory{System.Byte}@)">
            <summary>
            根据字节获取哈希值
            </summary>
            <param name="bytes">字节</param>
            <returns>哈希值</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.QueueUserWorkItem``1(Tool.Sockets.Kernels.ReceiveEvent{``0},Tool.Sockets.Kernels.ReceiveBytes{``0})">
            <summary>
            任务事件线程池
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="receive">委托</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.ReceivedAsync``1(Tool.Sockets.Kernels.ReceiveEvent{``0},Tool.Sockets.Kernels.ReceiveBytes{``0})">
            <summary>
            任务事件单实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="receive">委托</param>
            <param name="data">数据</param>
            <returns>任务结果</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.GetDataHeadTcp(System.ReadOnlySpan{System.Byte}@)">
            给包加头保证其数据完整性
            headby 数据头
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.GetDataHeadUdp(System.ReadOnlySpan{System.Byte}@,Tool.Sockets.Kernels.ProtocolTop@)">
            给包加头保证其数据完整性
            headby 数据头
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.SetDataHeadTcp(System.Span{System.Byte}@,System.Int32,System.Int32)">
            给包加头保证其数据完整性(内置)
            listData 数据
            datalength 限制数据量
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.SetDataHeadUdp(System.Span{System.Byte}@,System.UInt32,System.Int32,System.Byte)">
            给包加头保证其数据完整性(内置)
            listData 数据
            datalength 限制数据量
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.SetIpPort(System.Span{System.Byte}@,Tool.Sockets.Kernels.Ipv4Port)">
            给内存地址写入IP信息(内置)
            listData 数据
            IpPort IP信息
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.GetIpPort(System.Net.HttpListenerContext)">
            <summary>
            根据HttpListenerContext获取IP加端口
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.GetIpPort(System.Net.Sockets.Socket)">
            <summary>
            根据Socket获取IP加端口
            </summary>
            <param name="Client"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.GetIpPort(System.Net.EndPoint)">
            <summary>
            根据EndPoint获取IP加端口
            </summary>
            <param name="iep"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.StateObject.IsIpPort(System.String,Tool.Sockets.Kernels.Ipv4Port@)">
            <summary>
            根据传入字符串验证是否是IP加端口
            </summary>
            <param name="IpPort">IP+端口</param>
            <param name="ipnum"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.TcpStateObject">
            <summary>
            对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.TcpStateObject.#ctor(System.Net.Sockets.Socket)">
            <summary>
            构造包信息
            </summary>
            <param name="Client">对象</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.TcpStateObject.#ctor(System.Net.Sockets.Socket,System.Int32,System.Boolean,Tool.Sockets.Kernels.ReceiveEvent{System.Net.Sockets.Socket})">
            <summary>
            有参构造
            </summary>
            <param name="Client">对象</param>
            <param name="DataLength">包的大小</param>
            <param name="OnlyData">数据唯一标识</param>
            <param name="received">委托函数</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.TcpStateObject.GetBuffers(System.Int32,System.ArraySegment{System.Byte}[])">
            <summary>
            将包重新封装打包
            </summary>
            <param name="dataLength"></param>
            <param name="buffers"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.TcpStateObject.IsConnected(System.Net.Sockets.Socket)">
            <summary>
            根据Socket获取当前连接是否已经断开
            </summary>
            <param name="Client"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.TcpStateObject.IsConnected">
            <summary>
            根据Socket获取当前连接是否已经断开
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tool.Sockets.Kernels.TcpStateObject.Client">
            <summary>
            为 TCP 网络服务提供客户端连接。
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.TcpStateObject.WriteIndex">
            写入索引
        </member>
        <member name="F:Tool.Sockets.Kernels.TcpStateObject.Count">
            表示当前一共接收到了多少
        </member>
        <member name="F:Tool.Sockets.Kernels.TcpStateObject.MemoryData">
            一个连续的内存块
        </member>
        <member name="F:Tool.Sockets.Kernels.TcpStateObject.WriteHeap">
            意料外的数据模板
        </member>
        <member name="P:Tool.Sockets.Kernels.TcpStateObject.IpPort">
            <summary>
            当前对象唯一的IP：端口
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.TcpStateObject.DataLength">
            <summary>
            可用最大空间
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.TcpStateObject.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.TcpStateObject.ClientClose">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.TcpStateObject.Close">
            <summary>
            回收对象所以资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.UdpStateObject">
            <summary>
            对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.UdpStateObject.#ctor(Tool.Sockets.UdpHelper.IUdpCore,System.Int32,System.Boolean,Tool.Sockets.Kernels.ReceiveEvent{Tool.Sockets.UdpHelper.IUdpCore})">
            <summary>
            有参构造
            </summary>
            <param name="udp">udp信息</param>
            <param name="DataLength">包的大小</param>
            <param name="OnlyData">是否保证有效</param>
            <param name="Received">完成时事件</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.UdpStateObject.IsConnected(System.Net.Sockets.Socket)">
            <summary>
            根据Socket获取当前连接是否已经断开
            </summary>
            <param name="Client"></param>
            <returns></returns>
        </member>
        <member name="P:Tool.Sockets.Kernels.UdpStateObject.Udp">
            <summary>
            当前有个通信信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.UdpStateObject.IpPort">
            <summary>
            当前对象唯一的IP：端口
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.UdpStateObject.DataLength">
            <summary>
            可用最大空间
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.UdpStateObject.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.UdpStateObject.IsOnLine(System.Int32)">
            <summary>
            当前连接是否在线
            </summary>
            <param name="receiveTimeout">参数为超时最大值</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.UdpStateObject.Close">
            <summary>
            回收对象所以资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.WebStateObject">
            <summary>
            对异步接收时的对象状态的封装，将Websocket与接收到的数据封装在一起
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.Kernels.WebStateObject.#ctor(System.Net.WebSockets.WebSocketContext,System.Int32)">
            <summary>
            服务商构造
            </summary>
            <param name="context">对象</param>
            <param name="DataLength">包的大小</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.WebStateObject.#ctor(Tool.Sockets.Kernels.UserKey@,System.Net.WebSockets.WebSocket,System.Int32)">
            <summary>
            连接者构造
            </summary>
            <param name="Client">对象</param>
            <param name="DataLength">包的大小</param>
            <param name="SocketKey">连接标识</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.WebStateObject.IsConnected(System.Net.WebSockets.WebSocket)">
            <summary>
            根据WebContext获取当前连接是否已经断开
            </summary>
            <param name="Client"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.WebStateObject.IsConnected">
            <summary>
            根据WebContext获取当前连接是否已经断开
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.WebStateObject.IsWebIpEffective(System.String)">
            <summary>
            返回可用的IP信息
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.WebStateObject.AbortAsync">
            <summary>
            关闭当前用户连接以及数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.WebStateObject.WebSocketContext">
            <summary>
            握手后的重要数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.WebStateObject.Client">
            <summary>
            为 WebSocket 网络服务提供客户端连接。
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.WebStateObject.State">
            <summary>
            返回 WebSocket 连接的当前状态。
            </summary>
            <remarks>WebSocket 连接的当前状态。</remarks>
        </member>
        <member name="P:Tool.Sockets.Kernels.WebStateObject.SocketKey">
            <summary>
            当前对象唯一的连接票据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.WebStateObject.ListData">
            <summary>
            接收的数据
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.WebStateObject.Count">
            表示当前一共接收到了多少
        </member>
        <member name="F:Tool.Sockets.Kernels.WebStateObject.WriteHeap">
            <summary>
            接收的数据
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.WebStateObject.Close">
            <summary>
            回收对象所以资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.BytesCore">
            <summary>
             资源 对象（必须回收，丢失风险大）
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.BytesCore.Length">
            <summary>
            流长度
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.#ctor(System.Int32)">
            <summary>
            创建一个内存资源对象
            </summary>
            <param name="length">内存大小</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.#ctor(System.Buffers.IMemoryOwner{System.Byte},System.Int32)">
            <summary>
            资源对象
            </summary>
            <param name="dataOwner">可回收数据对象</param>
            <param name="length">包含长度</param>
        </member>
        <member name="P:Tool.Sockets.Kernels.BytesCore.Span">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.BytesCore.Memory">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.BytesCore.Array">
            <summary>
            获取连续内存
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.TransferByte">
            <summary>
            移交内存器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.GetIMemoryOwner">
            <summary>
            获取内存器核心
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.SetMemory(System.Memory{System.Byte}@)">
            <summary>
            写入有效的数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.SetMemory(System.Memory{System.Byte}@,System.Int32)">
            <summary>
            写入有效的数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.SetMemory(System.Span{System.Byte}@)">
            <summary>
            写入有效的数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.SetMemory(System.Span{System.Byte}@,System.Int32)">
            <summary>
            写入有效的数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.BytesCore.Dispose">
            <summary>
            使用完后及时回收
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.BytesCore.IsDispose">
            <summary>
            获取是否被回收
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.BytesCore.IsEmpty">
            <summary>
            是否为空对象
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.BytesCore.Empty">
            <summary>
            获取空对象
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.DataPacket">
            数据接收对象
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.ActionKey">
            <summary>
            获取对应消息Key
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.ClassID">
            通道ID
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.ActionID">
            事件ID
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.OnlyId">
            唯一ID流
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.Many">
            消息是否是一部分
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.NotIsMany">
            消息是否是完整的
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.IsSend">
            当前包是发包还是回复
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.IsErr">
            当前包是否发生异常
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.IsServer">
            消息是发送给那一端
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.IsAsync">
            是否异步，默认异步
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.IsIpIdea">
            是否转发数据，默认不转发
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.IsObj">
            是否携带数据包 0 = 不携带， 1 = 携带字符串， 2 = 携带字节流， 3 = 携带字符串加字节流
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.Text">
            文本数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.TextBytes">
            文本流数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.Bytes">
            携带数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.IpPort">
            当为转发时，转发给谁的IpPort
        </member>
        <member name="P:Tool.Sockets.Kernels.DataPacket.BufferSize">
            当前规定大小
        </member>
        <member name="M:Tool.Sockets.Kernels.DataPacket.SetMany(System.Int32)">
            判定是否需要分包
        </member>
        <member name="M:Tool.Sockets.Kernels.DataPacket.EmptyMany">
            清空分包
        </member>
        <member name="M:Tool.Sockets.Kernels.DataPacket.ByteData">
            将对象转为数据包
        </member>
        <member name="M:Tool.Sockets.Kernels.DataPacket.DataByte(System.Span{System.Byte})">
            将字节流转为原对象
        </member>
        <member name="M:Tool.Sockets.Kernels.DataPacket.GetCount(System.ArraySegment{System.Byte},System.Int32,System.Int32,System.Int32)">
            返回指定的部分数据包
        </member>
        <member name="T:Tool.Sockets.Kernels.IApiResult">
            <summary>
            接口协议
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IApiResult.Keys">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.IApiResult.Stream">
            <summary>
            流资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.ApiValue">
            <summary>
            存储对象
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.Empty">
            <summary>
            空值原型
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ApiValue.Value">
            <summary>
            原始类型值
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ApiValue.Type">
            <summary>
            当前对象原型
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.#ctor(System.Object)">
            <summary>
            初始化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.GetVar``1">
            <summary>
            将对象还原成 特定值
            </summary>
            <typeparam name="T">转换的值</typeparam>
            <returns>得到的值</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.GetValueType(System.Type)">
            <summary>
            根据 类型获取对应的枚举
            </summary>
            <param name="type">类型</param>
            <returns>对应的枚举</returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.ApiValue.ValueType">
            <summary>
            用于表示当前类型的实际值
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.String">
            <summary>
            <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.Int">
            <summary>
            <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.Long">
            <summary>
            <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.Double">
            <summary>
            <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.Decimal">
            <summary>
            <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.Byte">
            <summary>
            <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.DateTime">
            <summary>
            <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.List">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="F:Tool.Sockets.Kernels.ApiValue.ValueType.Dictionary">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.ToString">
            <summary>
            获取值的结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.String)~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.String">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.DateTime)~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.DateTime">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.Byte)~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.Byte">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.Int32)~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.Int32">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.Int64)~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.Int64">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.Double)~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.Double">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.Decimal)~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.Decimal">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.Collections.Generic.List{Tool.Sockets.Kernels.ApiValue})~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.Collections.Generic.List{Tool.Sockets.Kernels.ApiValue}">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(System.Collections.Generic.Dictionary{System.String,Tool.Sockets.Kernels.ApiValue})~Tool.Sockets.Kernels.ApiValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ApiValue.op_Implicit(Tool.Sockets.Kernels.ApiValue)~System.Collections.Generic.Dictionary{System.String,Tool.Sockets.Kernels.ApiValue}">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket">
            数据转发对象
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.BufferSize">
            当前规定大小
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.Text">
            <summary>
            文本数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.ActionKey">
            获取对应消息Key
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.OnlyId">
            唯一ID流
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.ClassID">
            通道ID
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.ActionID">
            事件ID
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.IsSend">
            当前包是发包还是回复
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.IsErr">
            当前包是否发生异常
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.IsServer">
            消息是发送给那一端
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.IsReply">
            是否需要有回复消息
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.TextBytes">
            文本流数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.Bytes">
            携带数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.Struct.IpIdeaDataPacket.IpPort">
            当为转发时，转发给谁的IpPort
        </member>
        <member name="T:Tool.Sockets.Kernels.Ipv4Port">
            <summary>
            用于IP:Port信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.Ipv4Port.Empty">
            <summary>
            获取一个空类型
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.Ipv4Port.Span">
            <summary>
            当前IP:Port信息内存数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.Ipv4Port.IsEmpty">
            <summary>
            判断当前值是否为空
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.Ipv4Port.Ip">
            <summary>
            获取 <see cref="T:System.Net.IPAddress"/> 对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.Ipv4Port.Port">
            <summary>
            获取端口号
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.#ctor(System.Memory{System.Byte}@)">
            <summary>
            将已有内存数据转换成IP:Port信息
            </summary>
            <param name="bytes">内存数据</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.CopyTo(System.Span{System.Byte})">
            <summary>
            将IP:Port信息拷贝到内存
            </summary>
            <param name="destination">内存数据</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.ToString">
            <summary>
            获取IP:Port信息
            </summary>
            <returns>结果</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.Equals(Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            判断是否一致
            </summary>
            <param name="other">比较值</param>
            <returns>是或否</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.Equals(System.Object)">
            <summary>
            比较两个值是否一致
            </summary>
            <param name="obj">比较值</param>
            <returns>是或否</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.op_Inequality(Tool.Sockets.Kernels.Ipv4Port,Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            指示两个 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 结构是否不相等。
            </summary>
            <param name="a">不等运算符左侧的结构</param>
            <param name="b">不等运算符右侧的结构</param>
            <returns>如果 true 不等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.op_Equality(Tool.Sockets.Kernels.Ipv4Port,Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            指示两个 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 结构是否相等。
            </summary>
            <param name="a">相等运算符左侧的结构</param>
            <param name="b">相等运算符右侧的结构</param>
            <returns>如果 true 等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.op_Implicit(System.String)~Tool.Sockets.Kernels.Ipv4Port">
            <summary>
             定义从 <see cref="T:System.String"/> 对象到 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 对象的隐式转换。
            </summary>
            <param name="ipport">要转换的对象。</param>
            <returns>转换的 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 对象。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.op_Implicit(Tool.Sockets.Kernels.UserKey)~Tool.Sockets.Kernels.Ipv4Port">
            <summary>
             定义从 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 对象到 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 对象的隐式转换。
            </summary>
            <param name="ipport">要转换的对象。</param>
            <returns>转换的 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 对象。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.Ipv4Port.op_Implicit(Tool.Sockets.Kernels.Ipv4Port)~System.String">
            <summary>
             定义从 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 对象到 <see cref="T:System.String"/> 对象的隐式转换。
            </summary>
            <param name="ipport">要转换的对象。</param>
            <returns>转换的 <see cref="T:System.String"/> 对象。</returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.MemoryWriteHeap">
            <summary>
            用于处理超过缓冲区大小的包体
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.MemoryWriteHeap.#ctor(System.Int32,System.Memory{System.Byte})">
            <summary>
            创建一个内存资源对象
            </summary>
            <param name="length">内存大小</param>
            <param name="memory">缓冲内存移动</param>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.WriteIndex">
            <summary>
            写入索引
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.SpareSize">
            <summary>
            剩余大小
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.IsSuccess">
            <summary>
            表示是否完全读取完成
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.Length">
            <summary>
            流长度
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.Span">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.Memory">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.Array">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.EmptyData">
            <summary>
            一个连续的空内存
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.MemoryWriteHeap.TransferByte">
            <summary>
            移交内存器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.MemoryWriteHeap.GetIMemoryOwner">
            <summary>
            获取内存器核心
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.MemoryWriteHeap.SetCount(System.Int32)">
            <summary>
            写入有效的接收数据包长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.MemoryWriteHeap.GetReceiveBytes``1(Tool.Sockets.Kernels.UserKey@,``0)">
            <summary>
            获取完整包返回
            </summary>
            <typeparam name="T">连接对象</typeparam>
            <param name="IpPort">Key</param>
            <param name="Client">连接对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.MemoryWriteHeap.Empty">
            <summary>
            清空标记
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.IsEmpty">
            <summary>
            获取是否被清空
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.MemoryWriteHeap.Dispose">
            <summary>
            使用完后及时回收
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.MemoryWriteHeap.IsDispose">
            <summary>
            获取是否被回收
            </summary>
        </member>
        <member name="T:Tool.Sockets.Kernels.ReceiveBytes`1">
            <summary>
            Socket 通讯资源 对象（必须回收，丢失风险大）
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.#ctor(Tool.Sockets.Kernels.UserKey@,`0,System.Int32,System.Boolean)">
            <summary>
            资源对象
            </summary>
            <param name="key">IP端口</param>
            <param name="client">连接对象</param>
            <param name="length">包含长度</param>
            <param name="onlydata">数据包完整</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.#ctor(Tool.Sockets.Kernels.UserKey@,`0,System.Buffers.IMemoryOwner{System.Byte},System.Int32,System.Boolean)">
            <summary>
            资源对象
            </summary>
            <param name="key">IP端口</param>
            <param name="client">连接对象</param>
            <param name="dataOwner">可回收数据对象</param>
            <param name="length">包含长度</param>
            <param name="onlydata">数据包完整</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.#ctor(Tool.Sockets.Kernels.UserKey@,`0,Tool.Sockets.Kernels.BytesCore@,System.Boolean)">
            <summary>
            资源对象
            </summary>
            <param name="key">IP端口</param>
            <param name="client">连接对象</param>
            <param name="bytesCore">可回收数据对象</param>
            <param name="onlydata">数据包完整</param>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.OnlyData">
            <summary>
            表示是否需要验证数据包
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.Key">
            <summary>
            身份标识或IP端口
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.Client">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.Length">
            <summary>
            流长度
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.Span">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.Memory">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.Array">
            <summary>
            获取连续内存
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.OrderCount">
            <summary>
            获取一个仅在测试时有用的数据
            <list type="table">TCP模式下为包的长度</list>
            <list type="table">UDP模式下为当前包的编码，核心层整包和拆分包编码不一致</list>
            <list type="table">超文报包拥有独立ID,文报包会与超文报包公用ID</list>
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.SetMemory(System.Memory{System.Byte}@)">
            <summary>
            写入有效的接收数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.SetMemory(System.Span{System.Byte}@)">
            <summary>
            写入有效的发送数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.SetMemory(System.Buffers.ReadOnlySequence{System.Byte}@)">
            <summary>
            写入有效的发送数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.TransferByte">
            <summary>
            移交内存器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.GetIMemoryOwner">
            <summary>
            获取内存器核心
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.Dispose">
            <summary>
            使用完后及时回收
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveBytes`1.IsDispose">
            <summary>
            获取是否被回收
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.ReceiveBytes`1.ToString">
            <summary>
            文本信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.ReceiveDataPacket">
            数据接收对象
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.BufferSize">
            当前规定大小
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.Text">
            <summary>
            文本数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.ActionKey">
            获取对应消息Key
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.OnlyId">
            唯一ID流
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.ClassID">
            通道ID
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.ActionID">
            事件ID
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.IsSend">
            当前包是发包还是回复
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.IsErr">
            当前包是否发生异常
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.IsServer">
            消息是发送给那一端
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.IsReply">
            是否需要有回复消息
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.TextBytes">
            文本流数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.Bytes">
            携带数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.ReceiveDataPacket.IpPort">
            当为转发时，转发给谁的IpPort
        </member>
        <member name="T:Tool.Sockets.Kernels.SendBytes`1">
            <summary>
            Socket 通讯资源 对象（必须回收，丢失风险大）
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.#ctor(`0,System.Int32,System.Boolean)">
            <summary>
            资源对象
            </summary>
            <param name="client">连接对象</param>
            <param name="length">包含长度</param>
            <param name="onlydata">数据包完整</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.#ctor(`0,System.Buffers.IMemoryOwner{System.Byte},System.Int32,System.Boolean)">
            <summary>
            资源对象
            </summary>
            <param name="client">连接对象</param>
            <param name="dataOwner">可回收数据对象</param>
            <param name="length">包含长度</param>
            <param name="onlydata">数据包完整</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.#ctor(`0,Tool.Sockets.Kernels.BytesCore@,System.Boolean)">
            <summary>
            资源对象
            </summary>
            <param name="client">连接对象</param>
            <param name="bytesCore">可回收数据对象</param>
            <param name="onlydata">数据包完整</param>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendBytes`1.OnlyData">
            <summary>
            表示是否需要验证数据包
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendBytes`1.Client">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendBytes`1.Length">
            <summary>
            流长度
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendBytes`1.Span">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendBytes`1.Memory">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendBytes`1.Array">
            <summary>
            获取连续内存
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.GetMemory">
            <summary>
            获取有效的发送数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.GetMemory(System.UInt32,System.Byte)">
            <summary>
            获取有效的发送数据包(UDP协议版)
            </summary>
            <param name="orderCount">序列ID</param>
            <param name="code">协议代号</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.SetMemory(System.Memory{System.Byte}@,System.Int32)">
            <summary>
            写入有效的发送数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.SetMemory(System.Span{System.Byte}@,System.Int32)">
            <summary>
            写入有效的发送数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.SetMemory(System.ArraySegment{System.Byte}@,System.Int32)">
            <summary>
            写入有效的发送数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.Slice(System.Int32,System.Int32)">
            <summary>
            用于进行输出缩减包大小
            </summary>
            <param name="start">只能是0</param>
            <param name="length">小于总大小的数</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.TransferByte">
            <summary>
            移交内存器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.GetIMemoryOwner">
            <summary>
            获取内存器核心
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.Dispose">
            <summary>
            使用完后及时回收
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendBytes`1.IsDispose">
            <summary>
            获取是否被回收
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.SendBytes`1.ToString">
            <summary>
            文本信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.Kernels.SendDataPacket">
            数据接收对象
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.ActionKey">
            <summary>
            获取对应消息Key
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.Text">
            <summary>
            文本数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.BufferSize">
            当前规定大小
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.ClassID">
            通道ID
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.ActionID">
            事件ID
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.OnlyId">
            唯一ID流
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.IsSend">
            当前包是发包还是回复
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.IsErr">
            当前包是否发生异常
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.IsServer">
            消息是发送给那一端
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.IsReply">
            是否需要有回复消息
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.TextBytes">
            文本流数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.Bytes">
            携带数据包
        </member>
        <member name="P:Tool.Sockets.Kernels.SendDataPacket.IpPort">
            当为转发时，转发给谁的IpPort
        </member>
        <member name="T:Tool.Sockets.Kernels.UserKey">
            <summary>
            用于通信模块Key数据模型
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.UserKey.Empty">
            <summary>
            获取一个空类型
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.UserKey.Span">
            <summary>
            当前Key信息内存数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.UserKey.IsEmpty">
            <summary>
            判断当前值是否为空
            </summary>
        </member>
        <member name="P:Tool.Sockets.Kernels.UserKey.IsIpv4Port">
            <summary>
            判断当前值是否是<see cref="T:Tool.Sockets.Kernels.Ipv4Port"/>值
            </summary>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.#ctor(Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            将常见Key值转换成可用的<see cref="T:Tool.Sockets.Kernels.UserKey"/>
            </summary>
            <param name="ipv4Port"><see cref="T:Tool.Sockets.Kernels.UserKey"/>值</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.#ctor(System.String)">
            <summary>
            将常见Key值转换成可用的<see cref="T:Tool.Sockets.Kernels.UserKey"/>
            </summary>
            <param name="key"><see cref="T:System.String"/>值</param>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.ToString">
            <summary>
            获取UserKey信息
            </summary>
            <returns>结果</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.Equals(Tool.Sockets.Kernels.UserKey)">
            <summary>
            判断是否一致
            </summary>
            <param name="other">比较值</param>
            <returns>是或否</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.Equals(System.Object)">
            <summary>
            比较两个值是否一致
            </summary>
            <param name="obj">比较值</param>
            <returns>是或否</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.op_Inequality(Tool.Sockets.Kernels.UserKey,Tool.Sockets.Kernels.UserKey)">
            <summary>
            指示两个 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 结构是否不相等。
            </summary>
            <param name="a">不等运算符左侧的结构</param>
            <param name="b">不等运算符右侧的结构</param>
            <returns>如果 true 不等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.op_Equality(Tool.Sockets.Kernels.UserKey,Tool.Sockets.Kernels.UserKey)">
            <summary>
            指示两个 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 结构是否相等。
            </summary>
            <param name="a">相等运算符左侧的结构</param>
            <param name="b">相等运算符右侧的结构</param>
            <returns>如果 true 等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.op_Inequality(Tool.Sockets.Kernels.UserKey,Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            指示<see cref="T:Tool.Sockets.Kernels.UserKey"/> 和 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 结构是否不相等。
            </summary>
            <param name="a">不等运算符左侧的结构</param>
            <param name="b">不等运算符右侧的结构</param>
            <returns>如果 true 不等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.op_Equality(Tool.Sockets.Kernels.UserKey,Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            指示<see cref="T:Tool.Sockets.Kernels.UserKey"/> 和 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 结构是否相等。
            </summary>
            <param name="a">相等运算符左侧的结构</param>
            <param name="b">相等运算符右侧的结构</param>
            <returns>如果 true 等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.op_Implicit(System.String)~Tool.Sockets.Kernels.UserKey">
            <summary>
             定义从 <see cref="T:System.String"/> 对象到 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 对象的隐式转换。
            </summary>
            <param name="ipport">要转换的对象。</param>
            <returns>转换的 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 对象。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.op_Implicit(Tool.Sockets.Kernels.Ipv4Port)~Tool.Sockets.Kernels.UserKey">
            <summary>
             定义从 <see cref="T:Tool.Sockets.Kernels.Ipv4Port"/> 对象到 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 对象的隐式转换。
            </summary>
            <param name="ipport">要转换的对象。</param>
            <returns>转换的 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 对象。</returns>
        </member>
        <member name="M:Tool.Sockets.Kernels.UserKey.op_Implicit(Tool.Sockets.Kernels.UserKey)~System.String">
            <summary>
             定义从 <see cref="T:Tool.Sockets.Kernels.UserKey"/> 对象到 <see cref="T:System.String"/> 对象的隐式转换。
            </summary>
            <param name="ipport">要转换的对象。</param>
            <returns>转换的 <see cref="T:System.String"/> 对象。</returns>
        </member>
        <member name="T:Tool.Sockets.NetFrame.ClientFrame">
            <summary>
            封装的一个TCP框架（客户端）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ClientFrame.threadUuIdObj">
            当前要同步等待的线程组信息
        </member>
        <member name="F:Tool.Sockets.NetFrame.ClientFrame.clientAsync">
            调用TCP长连接
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrame.Server">
            <summary>
            服务器的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrame.LocalPoint">
            <summary>
            当前设备的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrame.IsClose">
            <summary>
            标识客户端是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrame.Connected">
            <summary>
            获取一个值，该值指示 Client 的基础 Socket 是否已连接到远程主机。
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrame.IsThreadPool">
            <summary>
            是否使用线程池调度接收后的数据（允许使用者初始化时设置，消息是否有序获取）
            默认 true 开启
            <list type="table">不使用线程池处理消息时，会使每个连接的接收线程去调度任务。</list>
            <list type="table">适用于需要保证通信流顺序的场景</list>
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            初始化包
            </summary>
            <param name="bufferSize">收包规范</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            初始化包
            </summary>
            <param name="bufferSize">收包规范</param>
            <param name="IsReconnect">是否在与服务器断开后主动重连？ </param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnClient})">
            <summary>
            连接、发送、关闭事件 <see cref="T:Tool.Sockets.Kernels.EnClient"/>
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.ConnectAsync(System.Int32)">
            <summary>
            异步连接，连接ip地址为127.0.0.1
            </summary>
            <param name="port">要连接的服务器的端口</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.ConnectAsync(System.String,System.Int32)">
            <summary>
            异步连接
            </summary>
            <param name="ip">要连接的服务器的ip地址</param>
            <param name="port">要连接的服务器的端口</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.Reconnection">
            <summary>
            重连，返回是否重连，如果没有断开是不会重连的
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.SendAsync(Tool.Sockets.Kernels.IDataPacket)">
            异步或同步发送消息
            dataPacket 数据包
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.SendAsync(Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            异步发送消息
            </summary>
            <param name="api">接口调用信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.SendRelayAsync(System.String,Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            异步发送消息（转发给指定客户端）
            </summary>
            <param name="IpPort">事件处理的服务器</param>
            <param name="api">接口调用信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.Send(Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            同步发送消息
            </summary>
            <param name="api">接口调用信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.SendRelay(System.String,Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            同步发送消息（转发给指定客户端）
            </summary>
            <param name="IpPort">事件处理的服务器</param>
            <param name="api">接口调用信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.AddKeepAlive(System.Byte)">
            <summary>
            添加持久化消息（心跳），防止特殊情况下的断开连接
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.Client_Received(Tool.Sockets.Kernels.ReceiveBytes{System.Net.Sockets.Socket})">
            回调包信息
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.Client_Received(Tool.Sockets.Kernels.PoolData)">
            有效包处理
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnClient)">
            消息发送类
            key 指定发送对象
            enAction 消息类型
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrame.Close">
            <summary>
            关闭连接，断开处于连接状态的服务器
            </summary>
        </member>
        <member name="T:Tool.Sockets.NetFrame.ClientFrameList">
            <summary>
            用于连接多服务器，分发消息的客户端帮助类，可以保证线程安全，均衡分发数据包。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="E:Tool.Sockets.NetFrame.ClientFrameList.Completed">
            <summary>
            绑定多服务器队列统一消息
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ClientFrameList._lock">
            <summary>
            原子锁
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ClientFrameList.LockCount">
            <summary>
            lock 安全锁
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrameList.ClientFrames">
            <summary>
            当前分发消息的服务器服务器队列
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrameList.ClientCount">
            <summary>
            当前拥有的队列数
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ClientFrameList.Item(System.Int32)">
            <summary>
            返回加入的ClientFrame对象
            </summary>
            <param name="i">下标</param>
            <returns>位于指定索引处的元素。</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.#ctor(System.Collections.Generic.IList{Tool.Sockets.NetFrame.ClientFrame})">
            <summary>
            初始化一次性加入队列服务器
            </summary>
            <param name="clientFrames">队列服务器</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.#ctor(System.Collections.Generic.IEnumerable{Tool.Sockets.NetFrame.ClientFrame})">
            <summary>
            初始化一次性加入队列服务器
            </summary>
            <param name="clientFrames">队列服务器</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.#ctor(Tool.Sockets.NetFrame.ClientFrame[])">
            <summary>
            初始化一次性加入队列服务器
            </summary>
            <param name="clientFrames">队列服务器</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.#ctor(System.Int32)">
            <summary>
            初始化 可为空
            </summary>
            <param name="capacity">默认大小</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.AddClientFrame(Tool.Sockets.NetFrame.ClientFrame)">
            <summary>
            主动添加客户端服务
            </summary>
            <param name="clientFrame">客户端</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.Send(Tool.Sockets.NetFrame.ApiPacket,System.Int32@)">
            <summary>
            同步发送消息（多服务器协调发送）
            </summary>
            <param name="api">接口调用信息</param>
            <param name="i">返回成功发送包的下标</param>
            <returns>返回数据包</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.SendAsync(Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            异步发送消息（多服务器协调发送）
            </summary>
            <param name="api">接口调用信息</param>
            <returns>返回数据包，以及下标</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.SendRelay(System.String,Tool.Sockets.NetFrame.ApiPacket,System.Int32@)">
            <summary>
            同步发送消息（多服务器协调发送+转发给指定客户端）
            </summary>
            <param name="IpPort">事件处理的服务器</param>
            <param name="api">接口调用信息</param>
            <param name="i">返回成功发送包的下标</param>
            <returns>返回数据包</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.SendRelayAsync(System.String,Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            异步发送消息（多服务器协调发送+转发给指定客户端）
            </summary>
            <param name="IpPort">事件处理的服务器</param>
            <param name="api">接口调用信息</param>
            <returns>返回数据包，以及下标</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.Reconnection(System.Int32)">
            <summary>
            重连，返回是否重连，如果没有断开是不会重连的
            </summary>
            <param name="i">要重连的下标</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.Send(System.Int32,Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            同步发送消息（多服务器协调发送）
            </summary>
            <param name="i">向那个服务器端口发包</param>
            <param name="api">接口调用信息</param>
            <returns>返回数据包</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.SendAsync(System.Int32,Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            异步发送消息（多服务器协调发送）
            </summary>
            <param name="i">向那个服务器端口发包</param>
            <param name="api">接口调用信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ClientFrameList.Dispose">
            <summary>
            回收连接对象池，释放相关的全部连接
            </summary>
        </member>
        <member name="T:Tool.Sockets.NetFrame.ApiPacket">
            <summary>
            接口请求数据包
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.#ctor(System.Byte,System.Byte)">
            <summary>
            数据包初始化
            </summary>
            <param name="ClassID">类ID</param>
            <param name="ActionID">方法ID</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.#ctor(System.Byte,System.Byte,System.Int32)">
            <summary>
            数据包初始化
            </summary>
            <param name="ClassID">类ID</param>
            <param name="ActionID">方法ID</param>
            <param name="Millisecond">请求等待的毫秒</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.#ctor(System.Byte,System.Byte,System.Int32,System.Boolean)">
            <summary>
            数据包初始化
            </summary>
            <param name="ClassID">类ID</param>
            <param name="ActionID">方法ID</param>
            <param name="Millisecond">请求等待的毫秒</param>
            <param name="IsReply">是否需要有回复消息</param>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ApiPacket.ClassID">
            <summary>
            请求的类ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ApiPacket.ActionID">
            <summary>
            请求的方法ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ApiPacket.Millisecond">
            <summary>
            默认等待超时时间为60秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ApiPacket.IsReply">
            <summary>
            是否需要有回复消息
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ApiPacket.Bytes">
            <summary>
            当前消息携带的数据流
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ApiPacket.Data">
            发送的参数
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.Set(System.String,System.Object)">
            <summary>
            加入数据（如果有则修改）
            </summary>
            <param name="key">键</param>
            <param name="value">值（支持传输转义）</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.Set(System.Object)">
            <summary>
            加入数据,如果有则修改（以虚构对象参数传入，请确保已认真读注释。）（支持传输转义）
            </summary>
            <param name="dictionary">虚构对象</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.TryGet(System.String,System.String@)">
            <summary>
            获取键的值
            </summary>
            <param name="key">键</param>
            <param name="value">要返回的值</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.Remove(System.String)">
            <summary>
            从发送数据中移除所指定的键的值
            </summary>
            <param name="key">键</param>
            <returns>是否成功移除</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ApiPacket.FormatData">
            返回 Format 表单提交
        </member>
        <member name="T:Tool.Sockets.NetFrame.DataBase">
            <summary>
            提供的唯一数据包接口类，必须实现
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.GetForm(Tool.Utils.ActionDelegate.Parameter[])">
            获取方法调用参数
            parameters 参数信息
            参数值
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.IPEndPoint">
            <summary>
            数据交互的方
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.Form">
            <summary>
            发送的参数
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.OnlyID">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.OnlyId">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.IsReply">
            <summary>
            是否需要有回复消息
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.Array">
            <summary>
            消息接收的字节流数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.Bytes">
            <summary>
            消息接收的字节流数据
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataBase.MemoryBytes">
            <summary>
            消息接收的字节流数据
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.Initialize(Tool.Sockets.NetFrame.DataNet)">
            <summary>
            当消息真实有效时被执行，默认返回执行。（该方法是用于给使用者重写的）
            </summary>
            <param name="dataTcp">调用方法信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.Ok">
            <summary>
            默认完成结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.Ok(System.String,System.ArraySegment{System.Byte})">
            <summary>
            完成结果,并输出类容
            </summary>
            <param name="text">文本类容</param>
            <param name="bytes">字节流类容</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.Write(System.String)">
            <summary>
            完成结果,并输出文本类容
            </summary>
            <param name="text">文本类容</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.Write(System.ArraySegment{System.Byte})">
            <summary>
            完成结果,并输出字节流类容
            </summary>
            <param name="bytes">字节流类容</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.Json(System.Object)">
            <summary>
            完成结果,返回Json格式数据
            </summary>
            <param name="json">Json格式数据</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.OkAsync">
            <summary>
            默认完成结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.OkAsync(System.String,System.ArraySegment{System.Byte})">
            <summary>
            完成结果,并输出类容
            </summary>
            <param name="text">文本类容</param>
            <param name="bytes">字节流类容</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.WriteAsync(System.String)">
            <summary>
            完成结果,并输出文本类容
            </summary>
            <param name="text">文本类容</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.WriteAsync(System.ArraySegment{System.Byte})">
            <summary>
            完成结果,并输出字节流类容
            </summary>
            <param name="bytes">字节流类容</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.JsonAsync(System.Object)">
            <summary>
            完成结果,返回Json格式数据
            </summary>
            <param name="json">Json格式数据</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.NetException(System.Exception)">
            <summary>
            当前API消息发生异常时触发
            </summary>
            <param name="ex">异常信息</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.Dispose">
            <summary>
            用于开发者重写的回收（可回收使用的非托管资源）
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataBase.System#IDisposable#Dispose">
            添加此代码以正确实现可处置模式。
        </member>
        <member name="T:Tool.Sockets.NetFrame.DataNet">
            <summary>
            针对于一般处理程序，备注一般处理程序必须继承于（<see cref="T:Tool.Sockets.NetFrame.DataBase"/> 类才会生效） 所有状态（用于更好的使用 自定义通讯协议规范，实现Api接口）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataNet.#ctor(System.Byte)">
            <summary>
            用于实现构造(带默认参数)
            </summary>
            <param name="ID">此处Id,与绑定函数有关，绑定在方法上，为方法ID，构造函数上为类ID</param>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.IsRelay">
            <summary>
            表示当前类或接口是否允许转发协议访问
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.ClassID">
            <summary>
            表示为该方法指定了一个名称，用于对外的访问安全
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.ActionID">
            <summary>
            表示为该方法指定了一个名称，用于对外的访问安全
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.Methods">
            <summary>
            表示该方法的名称
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.Parameters">
            <summary>
            表示该方法所包含的访问参数
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.Pethod">
            <summary>
            表示该方法的详细信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.Action">
            当前方法的执行信息,目前只支持 <see cref="T:Tool.Sockets.NetFrame.DataBase"/> 对象
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.NewClass">
            当前主消息的类委托,目前只支持 <see cref="T:Tool.Sockets.NetFrame.DataBase"/> 对象
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.IsTask">
            <summary>
            当前是函数是否支持异步
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.DataNet.DicDataTcps">
            当前请求方法
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataNet.GetAttribute``1">
            <summary>
            根据指定的自定义类获取当前接口对象上的<see cref="T:System.Attribute"/>（自定义类）
            </summary>
            <typeparam name="T">指定的<see cref="T:System.Attribute"/>（自定义类）</typeparam>
            <returns>返回<see cref="T:System.Attribute"/>（自定义类）</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataNet.GetAttributes">
            <summary>
            获取当前接口对象上的所有<see cref="T:System.Attribute"/>（自定义类）
            </summary>
            <returns>返回所有的<see cref="T:System.Attribute"/>（自定义类）</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataNet.InitDicDataTcps``1">
            获取所有接口
        </member>
        <member name="M:Tool.Sockets.NetFrame.DataNet.AddDataTcps(System.Reflection.Assembly)">
            <summary>
            给<see cref="T:Tool.Sockets.NetFrame.DataBase"/>相关业务追加新的服务，如果ID相同，将采用替换方式
            </summary>
            <param name="assembly">需要验证接口的程序集</param>
            <returns>程序集中存在接口，为[true/false]</returns>
        </member>
        <member name="T:Tool.Sockets.NetFrame.IGoOut">
            <summary>
            实现<see cref="T:Tool.Sockets.NetFrame.DataBase"/>协议，接口输出规范
            <para>两种数据格式可一起使用。</para>
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.IGoOut.Bytes">
            <summary>
            返回的数据流
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.IGoOut.Text">
            <summary>
            返回的文本类容
            </summary>
        </member>
        <member name="T:Tool.Sockets.NetFrame.GoOut">
            <summary>
            默认实现
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.GoOut.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.GoOut.#ctor(System.String)">
            <summary>
            初始化输出结果
            </summary>
            <param name="text">字符串类容</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.GoOut.#ctor(System.ArraySegment{System.Byte})">
            <summary>
            初始化输出结果
            </summary>
            <param name="bytes">字节流类容</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.GoOut.#ctor(System.ArraySegment{System.Byte},System.String)">
            <summary>
            初始化输出结果
            </summary>
            <param name="bytes">字节流类容</param>
            <param name="text">字符串类容</param>
        </member>
        <member name="P:Tool.Sockets.NetFrame.GoOut.Bytes">
            <summary>
            返回的数据流
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.GoOut.Text">
            <summary>
            返回的文本类容
            </summary>
        </member>
        <member name="T:Tool.Sockets.NetFrame.NetResponse">
            <summary>
            请求服务器返回的数据包信息类（请务必回收资源！！！）
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.NetResponse.#ctor(System.Guid@,System.Boolean,Tool.Sockets.Kernels.NetFrameState,System.Exception)">
            <summary>
            未完成时
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.NetResponse.#ctor(Tool.Sockets.Kernels.IDataPacket@)">
            <summary>
            完成后
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.OnlyId">
            <summary>
            消息唯一ID
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.State">
            <summary>
            用于表示当前数据包的执行情况
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.IsReply">
            <summary>
            是否需要有回复消息
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.Text">
            <summary>
            数据包（文字类型的数据）
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.Bytes">
            <summary>
            当前消息携带的数据流
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.Span">
            <summary>
            当前消息携带的数据流
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.Array">
            <summary>
            当前消息携带的数据流
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.NetResponse.Error">
            <summary>
            当前发生的异常
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.NetResponse.Dispose">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.NetFrame.ProtocolStatus">
            <summary>
            通信状态
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ProtocolStatus.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ProtocolStatus.Connect">
            <summary>
            已连接
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ProtocolStatus.Fail">
            <summary>
            连接失败
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ProtocolStatus.Close">
            <summary>
            已断开
            </summary>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ProtocolStatus.Reconnect">
            <summary>
            重连中
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.Internal.FrameCommon.TryProtocolStatus(Tool.Sockets.NetFrame.ProtocolStatus,System.Guid@,System.Boolean,Tool.Sockets.NetFrame.NetResponse@)">
            **
        </member>
        <member name="M:Tool.Sockets.NetFrame.Internal.FrameCommon.IsComplete(System.Boolean,Tool.Sockets.Kernels.DataPacket@)">
            <summary>
            验证并确保包100%完整
            </summary>
            <param name="isSorC">验证差异</param>
            <param name="packet">原始包</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.Internal.FrameCommon.Receiveds(Tool.Sockets.Kernels.ReceiveBytes{System.Net.Sockets.Socket}@,Tool.Sockets.Kernels.IDataPacket@)">
            根据一次性回复数据包解析成一个或多个包
        </member>
        <member name="T:Tool.Sockets.NetFrame.Internal.NetByteObjs">
            内部多包处理
        </member>
        <member name="T:Tool.Sockets.NetFrame.Internal.ThreadObj">
            内部包
        </member>
        <member name="M:Tool.Sockets.NetFrame.Internal.ThreadObj.Dispose">
            回收资源
        </member>
        <member name="F:Tool.Sockets.NetFrame.Internal.ThreadUuIdObj.pairs">
            当前要同步等待的线程组信息
        </member>
        <member name="F:Tool.Sockets.NetFrame.Internal.ThreadKeyObj.pairs">
            当前要同步等待的线程组信息
        </member>
        <member name="T:Tool.Sockets.NetFrame.ServerFrame">
            <summary>
            封装的一个TCP框架（服务端）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Sockets.NetFrame.ServerFrame.threadKeyObj">
            当前要同步等待的线程组信息
        </member>
        <member name="F:Tool.Sockets.NetFrame.ServerFrame.serverAsync">
            调用TCP长连接
        </member>
        <member name="F:Tool.Sockets.NetFrame.ServerFrame.Completed">
            各种发生的事件
        </member>
        <member name="F:Tool.Sockets.NetFrame.ServerFrame.IpParser">
            Ip:Port解释器
        </member>
        <member name="P:Tool.Sockets.NetFrame.ServerFrame.Server">
            <summary>
            服务器创建时的信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ServerFrame.IsClose">
            <summary>
            标识服务端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ServerFrame.IsThreadPool">
            <summary>
            是否使用线程池调度接收后的数据（允许使用者初始化时设置，消息是否有序获取）
            默认 true 开启
            <list type="table">不使用线程池处理消息时，会使每个连接的接收线程去调度任务。</list>
            <list type="table">适用于需要保证通信流顺序的场景</list>
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ServerFrame.ListClient">
            <summary>
            已建立连接的集合
            key:ip:port
            value:Socket
            </summary>
        </member>
        <member name="P:Tool.Sockets.NetFrame.ServerFrame.IsAllowRelay">
            <summary>
            表示服务器是否接受转发消息（默认接受）
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            初始化包
            </summary>
            <param name="bufferSize">收包规范</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnServer})">
            <summary>
            连接、发送、关闭事件 <see cref="T:Tool.Sockets.Kernels.EnServer"/>
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.SetIpParser(Tool.Sockets.Kernels.IpParserEvent)">
            <summary>
            实现IP:Port解释器 （返回有效的IP:Port,返回空使用原值）
            参数1：发起方信息空表示无发起方，参数2：接收方信息
            </summary>
            <param name="IpParser"></param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.StartAsync(System.Int32)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.StartAsync(System.String,System.Int32)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.ClientClose(Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            关闭存在的连接用户
            </summary>
            <param name="ipv4">IpV4</param>
            <returns>成功/失败</returns>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.SendAsync(Tool.Sockets.Kernels.IDataPacket,System.Net.Sockets.Socket)">
            异步或同步发送消息
            key 发送人的IP
            dataPacket 数据包
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.AgentSendAsync(Tool.Sockets.Kernels.IDataPacket,Tool.Sockets.Kernels.Ipv4Port,Tool.Sockets.Kernels.Ipv4Port)">
            异步代理发送消息
            key 发送人的IP
            dataPacket 数据包
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.AgentSendAsync(Tool.Sockets.Kernels.IDataPacket,System.Net.Sockets.Socket)">
            异步代理发送消息
            key 发送人的IP
            dataPacket 数据包
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.SendAsync(Tool.Sockets.Kernels.Ipv4Port,Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            异步发送消息
            </summary>
            <param name="key">发送人的IP</param>
            <param name="api">接口调用信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.Send(Tool.Sockets.Kernels.Ipv4Port@,Tool.Sockets.NetFrame.ApiPacket)">
            <summary>
            同步发送消息
            </summary>
            <param name="key">发送人的IP</param>
            <param name="api">接口调用信息</param>
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.Server_Received(Tool.Sockets.Kernels.ReceiveBytes{System.Net.Sockets.Socket})">
            回调包信息
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.Server_Received(Tool.Sockets.Kernels.PoolData)">
            有效包处理
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnServer)">
            消息发送类
            key 指定发送对象
            enAction 消息类型
        </member>
        <member name="M:Tool.Sockets.NetFrame.ServerFrame.Close">
            <summary>
            关闭服务器并断开所有连接的客户端
            </summary>
        </member>
        <member name="T:Tool.Sockets.P2PHelpr.P2pClientAsync">
            <summary>
            封装一个可用的P2P打洞实现
            帮助实现P2P打洞
            </summary>
        </member>
        <member name="F:Tool.Sockets.P2PHelpr.P2pClientAsync.Bytes">
            <summary>
            描述P2P验证协议
            </summary>
        </member>
        <member name="F:Tool.Sockets.P2PHelpr.P2pClientAsync.Ready">
            <summary>
            描述P2P完成协议
            </summary>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pClientAsync.P2PConnectAsync(Tool.Sockets.TcpHelper.TcpClientAsync,Tool.Sockets.Kernels.Ipv4Port,Tool.Sockets.Kernels.Ipv4Port,System.Int32)">
            <summary>
            尝试使用TCP模式进行P2P
            </summary>
            <param name="tcpClient">调起方</param>
            <param name="localEP">尝试绑定的IP端口</param>
            <param name="RemoteEP">尝试连接的IP端口</param>
            <param name="TimedDelay">P2P超时等待时长（默认5秒）</param>
            <returns>任务</returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pClientAsync.P2PConnectAsync(Tool.Sockets.UdpHelper.UdpClientAsync,Tool.Sockets.Kernels.Ipv4Port,Tool.Sockets.Kernels.Ipv4Port,System.Int32)">
            <summary>
            尝试使用UDP模式进行P2P
            </summary>
            <param name="udpClient">调起方</param>
            <param name="localEP">尝试绑定的IP端口</param>
            <param name="RemoteEP">尝试连接的IP端口</param>
            <param name="TimedDelay">P2P超时等待时长（默认5秒）</param>
            <returns>任务</returns>
        </member>
        <member name="T:Tool.Sockets.P2PHelpr.P2pServerAsync">
            <summary>
            开放用于P2P模块化的支持类
            可以获取免费开放的打洞公网服务器支持
            </summary>
        </member>
        <member name="P:Tool.Sockets.P2PHelpr.P2pServerAsync.TcpTop">
            <summary>
            TCP验证头
            </summary>
        </member>
        <member name="P:Tool.Sockets.P2PHelpr.P2pServerAsync.UdpTop">
            <summary>
            UDP验证头
            </summary>
        </member>
        <member name="P:Tool.Sockets.P2PHelpr.P2pServerAsync.LocalEP">
            <summary>
            用于本地绑定的IP:Port
            </summary>
        </member>
        <member name="P:Tool.Sockets.P2PHelpr.P2pServerAsync.RemoteEP">
            <summary>
            用于P2P绑定的IP:Port
            </summary>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.IsP2pAuth(System.Span{System.Byte},Tool.Sockets.Kernels.Ipv4Port@)">
            <summary>
            验证一个数据流，确定它是否是符合协议的P2P（发起）协议
            </summary>
            <param name="span"></param>
            <param name="localEP"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.IsP2pWait(System.Span{System.Byte},Tool.Sockets.Kernels.Ipv4Port@)">
            <summary>
            验证一个数据流，确定它是否是符合协议的P2P（等待）协议
            </summary>
            <param name="span"></param>
            <param name="localEP"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.GetFreeTcp">
            <summary>
            获取公共的P2PServer服务器的通信消息 TCP版本
            <list type="table">提供方：p2p.nixue.top</list>
            </summary>
            <returns>成功后的结果</returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.GetFreeUdp">
            <summary>
            获取公共的P2PServer服务器的通信消息 UDP版本
            <list type="table">提供方：p2p.nixue.top</list>
            </summary>
            <returns>成功后的结果</returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.GetFree(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            用于获取私有P2PServer服务器的通信消息
            </summary>
            <param name="endPoint">服务器IP端口</param>
            <param name="isTcp">获取的P2P类型</param>
            <returns>成功后的结果</returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.Dispose">
            <summary>
            回收相关资源
            </summary>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.IsSuccess">
            <summary>
            判断是否P2P是否可用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.OkWait(System.Threading.CancellationToken)">
            <summary>
            判断是否通过双方等待验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.P2PConnectAsync(Tool.Sockets.TcpHelper.TcpClientAsync,Tool.Sockets.Kernels.Ipv4Port,System.Int32)">
            <summary>
            尝试发起P2P连接，通过服务器验证确保可以更可靠的完成连接
            </summary>
            <param name="clientAsync">要建立连接的对象</param>
            <param name="RemoteEP">连接的对方设备</param>
            <param name="timedDelay">尝试等待超时时间（不能小于1000ms）</param>
            <returns>结果</returns>
            <exception cref="T:System.Exception">不可用 或 模式不一致 或 超时！</exception>
        </member>
        <member name="M:Tool.Sockets.P2PHelpr.P2pServerAsync.P2PConnectAsync(Tool.Sockets.UdpHelper.UdpClientAsync,Tool.Sockets.Kernels.Ipv4Port,System.Int32)">
            <summary>
            尝试发起P2P连接，通过服务器验证确保可以更可靠的完成连接
            </summary>
            <param name="clientAsync">要建立连接的对象</param>
            <param name="RemoteEP">连接的对方设备</param>
            <param name="timedDelay">尝试等待超时时间（不能小于1000ms）</param>
            <returns>结果</returns>
            <exception cref="T:System.Exception">不可用 或 模式不一致 或 超时！</exception>
        </member>
        <member name="T:Tool.Sockets.QuicHelper.QuicClientAsync">
            <summary>
            封装一个底层异步Quic对象（客户端）写了但属于预览物无法使用
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.Keep">
            <summary>
            获取当前心跳信息
            </summary>
        </member>
        <member name="F:Tool.Sockets.QuicHelper.QuicClientAsync.Completed">
            连接、发送、关闭事件
        </member>
        <member name="F:Tool.Sockets.QuicHelper.QuicClientAsync.Received">
            接收到数据事件
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.IsClose">
            <summary>
            标识客户端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.Server">
            <summary>
            服务器的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.LocalPoint">
            <summary>
            当前设备的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.Connected">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.ApplicationProtocols">
            <summary>
            设置支持的HTTP协议
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnClient})">
            <summary>
            连接、发送、关闭事件
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{Tool.Sockets.Kernels.QuicSocket})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicClientAsync.IsReconnect">
            <summary>
            是否在与服务器断开后主动重连？ 
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.QuicHelper.QuicClientAsync"/> 客户端类
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.QuicHelper.QuicClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.QuicHelper.QuicClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
            <param name="OnlyData">是否启动框架模式</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.QuicHelper.QuicClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
            <param name="OnlyData">是否启动框架模式</param>
            <param name="IsReconnect">是否在与服务器断开后主动重连？ </param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.ConnectAsync(System.Int32)">
            <summary>
            异步连接，连接ip地址为127.0.0.1
            </summary>
            <param name="port">要连接服务端的端口</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.ConnectAsync(System.String,System.Int32)">
            <summary>
            异步连接
            </summary>
            <param name="ip">要连接的服务器的ip地址</param>
            <param name="port">要连接的服务器的端口</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.ConnectAsync(System.Net.DnsEndPoint)">
            <summary>
            异步连接
            </summary>
            <param name="dnsEndPoint">域名:端口</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.SendAsync(System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.SendAsync(System.ArraySegment{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="listData">数据包</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{Tool.Sockets.Kernels.QuicSocket})">
            <summary>
            异步发送消息
            </summary>
            <param name="sendBytes">数据包</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">OnlyData验证失败</exception>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.ConnectCallBack">
            异步接收连接的回调函数
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.StartReceive(Tool.Sockets.Kernels.QuicSocket)">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.ReceiveAsync(Tool.Sockets.Kernels.QuicStateObject)">
            开始异步接收数据
            obj 要接收的客户端包体
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.Reconnection">
            <summary>
            重连，返回是否重连，如果没有断开是不会重连的
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.AddKeepAlive(System.Byte)">
            <summary>
            添加持久化消息（心跳），防止特殊情况下的断开连接
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnClient)">
            <summary>
            可供开发重写的事件方法
            </summary>
            <param name="key">IP：端口</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.CreateSendBytes(System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.InsideClose">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.CloseAsync">
            <summary>
            异步关闭Quic
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.Close">
            <summary>
            关闭Quic
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicClientAsync.Dispose">
            <summary>
            关闭连接，回收相关资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.QuicHelper.QuicServerAsync">
            <summary>
            封装一个底层异步Quic对象（服务端）写了但属于预览物无法使用
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Sockets.QuicHelper.QuicServerAsync.Completed">
            连接、发送、关闭事件
        </member>
        <member name="F:Tool.Sockets.QuicHelper.QuicServerAsync.Received">
            接收到数据事件
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicServerAsync.IsClose">
            <summary>
            标识客户端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicServerAsync.Server">
            <summary>
            服务器的监听信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicServerAsync.ListClient">
            <summary>
            已建立连接的集合
            key:UserKey
            value:QuicSocket
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicServerAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicServerAsync.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="F:Tool.Sockets.QuicHelper.QuicServerAsync.InitCertificate">
            提供自定义设置证书的服务
        </member>
        <member name="P:Tool.Sockets.QuicHelper.QuicServerAsync.ApplicationProtocols">
            <summary>
            设置支持的HTTP协议
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SetInitCertificate(System.Func{System.Net.Quic.QuicConnection,System.Net.Security.SslClientHelloInfo,System.Threading.Tasks.ValueTask{System.Security.Cryptography.X509Certificates.X509Certificate2}})">
            <summary>
            当新连接，创建时，返回对应用于验证的证书
            </summary>
            <param name="InitCertificate"></param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnServer})">
            <summary>
            连接、发送、关闭事件 <see cref="T:Tool.Sockets.Kernels.EnServer"/>
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{Tool.Sockets.Kernels.QuicSocket})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.TrySocket(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.QuicSocket@)">
            <summary>
            根据IP:Port获取对应的连接对象
            </summary>
            <param name="key">IP:Port</param>
            <param name="client">连接对象</param>
            <returns>返回成功状态</returns>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.QuicHelper.QuicServerAsync"/> 服务器类
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.QuicHelper.QuicServerAsync"/> 服务器类，并确定是否开启框架验证模式保证数据唯一性。
            </summary>
            <param name="size">数据缓冲区大小</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.QuicHelper.QuicServerAsync"/> 服务器类，确认模式和设置流大小
            </summary>
            <param name="size">数据缓冲区大小</param>
            <param name="OnlyData">是否启动框架模式</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.StartAsync(System.Int32)">
            <summary>
            开始异步监听本机127.0.0.1的端口号
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.StartAsync(System.String,System.Int32)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SendAsync(Tool.Sockets.Kernels.Ipv4Port,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端的ip地址和端口号</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SendAsync(Tool.Sockets.Kernels.Ipv4Port,System.ArraySegment{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端的ip地址和端口号</param>
            <param name="listData">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SendAsync(Tool.Sockets.Kernels.QuicSocket,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">Socket对象</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SendAsync(Tool.Sockets.Kernels.QuicSocket,System.ArraySegment{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">Socket对象</param>
            <param name="listData">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{Tool.Sockets.Kernels.QuicSocket})">
            <summary>
            异步发送消息
            </summary>
            <param name="sendBytes">数据包</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">OnlyData验证失败</exception>
            <exception cref="T:System.Exception">连接已断开</exception>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.CreateSendBytes(Tool.Sockets.Kernels.Ipv4Port,System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="key">接收者信息</param>
            <param name="length">数据大小</param>
            <returns></returns>
            <exception cref="T:System.Exception">连接已中断</exception>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.CreateSendBytes(Tool.Sockets.Kernels.QuicSocket,System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="quicclient">收数据的对象</param>
            <param name="length">数据大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.AcceptCallBack(Tool.Sockets.Kernels.QuicSocket)">
            异步接收连接的回调函数
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.StartReceive(Tool.Sockets.Kernels.QuicSocket)">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.ReceiveAsync(Tool.Sockets.Kernels.QuicStateObject)">
            开始异步接收数据
            obj 要接收的客户端包体
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnServer)">
            <summary>
            可供开发重写的事件方法
            </summary>
            <param name="key">指定发送对象</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.Stop">
            <summary>
            不等待异步关闭Ouic
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.StopAsync">
            <summary>
            异步关闭Ouic
            </summary>
        </member>
        <member name="M:Tool.Sockets.QuicHelper.QuicServerAsync.Dispose">
            <summary>
            关闭连接，回收相关资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.TcpHelper.TcpClientAsync">
            <summary>
            封装一个底层异步TCP对象（客户端）IpV4
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.Keep">
            <summary>
            获取当前心跳信息
            </summary>
        </member>
        <member name="F:Tool.Sockets.TcpHelper.TcpClientAsync.Completed">
            客户端连接完成、发送完成、连接异常或者服务端关闭触发的事件
        </member>
        <member name="F:Tool.Sockets.TcpHelper.TcpClientAsync.Received">
            客户端接收消息触发的事件
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.IsReconnect">
            <summary>
            是否在与服务器断开后主动重连？ 
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.Server">
            <summary>
            服务器的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.LocalPoint">
            <summary>
            当前设备的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.Client">
            <summary>
            TCP 服务对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.IsClose">
            <summary>
            标识客户端是否关闭，改状态为调用关闭方法后的状态。
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.Connected">
            <summary>
            获取一个值，该值指示 Client 的基础 Socket 是否已连接到远程主机。
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpClientAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnClient})">
            <summary>
            连接、发送、关闭事件
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{System.Net.Sockets.Socket})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.TcpHelper.TcpClientAsync"/> 客户端类
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.TcpHelper.TcpClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.TcpHelper.TcpClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
            <param name="OnlyData">是否启动框架模式</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.TcpHelper.TcpClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
            <param name="OnlyData">是否启动框架模式</param>
            <param name="IsReconnect">是否在与服务器断开后主动重连？ </param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.Reconnection">
            <summary>
            重连，返回是否重连，如果没有断开是不会重连的
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.AddKeepAlive(System.Byte)">
            <summary>
            添加持久化消息（心跳），防止特殊情况下的断开连接
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.ConnectAsync(System.Int32)">
            <summary>
            异步连接，连接ip地址为127.0.0.1
            </summary>
            <param name="port">要连接服务端的端口</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.ConnectAsync(System.String,System.Int32)">
            <summary>
            异步连接
            </summary>
            <param name="ip">要连接的服务器的ip地址</param>
            <param name="port">要连接的服务器的端口</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.ConnectAsync(Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            异步连接
            </summary>
            <param name="ipv4Port">要连接的服务器的ip地址端口</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.SendAsync(System.String)">
            <summary>
            异步发送消息
            </summary>
            <param name="msg">文本数据</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.SendAsync(System.ArraySegment{System.Byte})">
            <summary>
            异步发送消息
            </summary>
            <param name="listData">数据包</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{System.Net.Sockets.Socket})">
            <summary>
            异步发送消息
            </summary>
            <param name="sendBytes">数据包</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">OnlyData验证失败</exception>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.CreateSendBytes(System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="length">数据大小</param>
            <returns></returns>
            <exception cref="T:System.Exception">连接已中断</exception>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.ConnectCallBack">
            异步连接的回调函数
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.StartReceive(System.Net.Sockets.Socket)">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.ReceiveAsync(Tool.Sockets.Kernels.TcpStateObject)">
            异步接收消息
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnClient)">
            <summary>
            可供开发重写的事件方法
            </summary>
            <param name="IpPort">IP：端口</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.InsideClose">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.Close">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpClientAsync.Dispose">
            <summary>
            关闭连接，回收相关资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.TcpHelper.TcpServerAsync">
            <summary>
            封装一个底层异步TCP对象（服务端）IpV4
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpServerAsync.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpServerAsync.IsClose">
            <summary>
            标识服务端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpServerAsync.ListClient">
            <summary>
            已建立连接的集合
            key:UserKey
            value:Socket
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpServerAsync.Server">
            <summary>
            服务器创建时的信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.TcpHelper.TcpServerAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="F:Tool.Sockets.TcpHelper.TcpServerAsync.Completed">
            连接、发送、关闭事件
        </member>
        <member name="F:Tool.Sockets.TcpHelper.TcpServerAsync.Received">
            接收到数据事件
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnServer})">
            <summary>
            连接、发送、关闭事件
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{System.Net.Sockets.Socket})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.TrySocket(Tool.Sockets.Kernels.UserKey@,System.Net.Sockets.Socket@)">
            <summary>
            根据IP:Port获取对应的连接对象
            </summary>
            <param name="key">IP:Port</param>
            <param name="client">连接对象</param>
            <returns>返回成功状态</returns>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.TcpHelper.TcpClientAsync"/> 服务器类
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.TcpHelper.TcpClientAsync"/> 服务器类，并确定是否开启框架验证模式保证数据唯一性。
            </summary>
            <param name="size">数据缓冲区大小</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.TcpHelper.TcpClientAsync"/> 服务器类，确认模式和设置流大小
            </summary>
            <param name="size">数据缓冲区大小</param>
            <param name="OnlyData">是否启动框架模式</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.StartAsync(System.Int32)">
            <summary>
            开始异步监听本机127.0.0.1的端口号
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.StartAsync(System.String,System.Int32)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.SendAsync(Tool.Sockets.Kernels.Ipv4Port,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端的ip地址和端口号</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.SendAsync(Tool.Sockets.Kernels.Ipv4Port,System.ArraySegment{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端的ip地址和端口号</param>
            <param name="listData">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.SendAsync(System.Net.Sockets.Socket,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">Socket对象</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">Socket对象</param>
            <param name="listData">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{System.Net.Sockets.Socket})">
            <summary>
            异步发送消息
            </summary>
            <param name="sendBytes">数据包</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">OnlyData验证失败</exception>
            <exception cref="T:System.Exception">连接已断开</exception>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.CreateSendBytes(Tool.Sockets.Kernels.Ipv4Port,System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="key">接收者信息</param>
            <param name="length">数据大小</param>
            <returns></returns>
            <exception cref="T:System.Exception">连接已中断</exception>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.CreateSendBytes(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="client">收数据的对象</param>
            <param name="length">数据大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.AcceptCallBack(System.Net.Sockets.Socket)">
            异步接收连接的回调函数
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.StartReceive(System.Collections.Generic.KeyValuePair{Tool.Sockets.Kernels.UserKey,System.Net.Sockets.Socket})">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.ReceiveAsync(Tool.Sockets.Kernels.TcpStateObject)">
            开始异步接收数据
            obj 要接收的客户端包体
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnServer)">
            <summary>
            可供开发重写的事件方法
            </summary>
            <param name="IpPort">指定发送对象</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.Stop">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.TcpHelper.TcpServerAsync.Dispose">
            <summary>
            关闭连接，回收相关资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.UdpHelper.IUdpCore">
            <summary>
            Udp通信核心，管理相关连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.SpinWaitTimeout">
            <summary>
            分配id最大等待时间
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.LimitingSize">
            <summary>
            控制滑动窗口大小（限制流量）备注：计算得出1000个窗口比较满足大多数环境
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.Ipv4">
            <summary>
            获取IpV4地址信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.EndPoint">
            <summary>
            连接的设备地址信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.Socket">
            <summary>
            连接的对象（请勿脱离框架使用，避免出现各种未知异常）
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.DataLength">
            <summary>
            可用最大空间
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.IUdpCore.UdpState">
            <summary>
            管理核心
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.IUdpCore.CloseAsync">
            <summary>
            尝试异步关闭连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.IUdpCore.SendAsync(System.Memory{System.Byte})">
            <summary>
            直接发送数据（警告非对内核完全了解的开发者，请谨慎，会出现各种未知异常！）
            </summary>
            <param name="memory">发送的数据</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.IUdpCore.GetUdpCore(Tool.Sockets.Kernels.INetworkCore,Tool.Sockets.UdpHelper.UdpEndPoint,System.Net.Sockets.Socket,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Func{Tool.Sockets.Kernels.UserKey,System.Byte,System.Threading.Tasks.ValueTask},Tool.Sockets.Kernels.ReceiveEvent{Tool.Sockets.UdpHelper.IUdpCore})">
            <summary>
            创建可用的公共UDP核心
            </summary>
            <param name="networkCore"></param>
            <param name="endPoint"></param>
            <param name="socket"></param>
            <param name="dataLength"></param>
            <param name="onlyData"></param>
            <param name="replyDelay"></param>
            <param name="isserver"></param>
            <param name="isp2p"></param>
            <param name="complete"></param>
            <param name="received"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.UdpHelper.UdpEndPoint">
            <summary>
            Udp通信专属模块
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpEndPoint.Address">
            <summary>
            IP地址信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpEndPoint.Port">
            <summary>
            通信端口
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpEndPoint.Ipv4">
            <summary>
            获取IpV4地址信息
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.#ctor(System.Net.IPAddress,System.UInt16)">
            <summary>
            创建一个Udp通信IP地址
            </summary>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.Serialize">
            <summary>
            获取<see cref="T:System.Net.SocketAddress"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpEndPoint.AddressFamily">
            <summary>
            IP地址类型
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.Create(System.Net.SocketAddress)">
            <summary>
            根据数据获取<see cref="T:System.Net.EndPoint"/>
            </summary>
            <param name="socketAddress"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.ToString">
            <summary>
            默认信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.Equals(System.Object)">
            <summary>
            判断是否一致
            </summary>
            <param name="obj">比较值</param>
            <returns>是或否</returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.Equals(Tool.Sockets.UdpHelper.UdpEndPoint)">
            <summary>
            判断是否一致
            </summary>
            <param name="other">比较值</param>
            <returns>是或否</returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.op_Inequality(Tool.Sockets.UdpHelper.UdpEndPoint,Tool.Sockets.UdpHelper.UdpEndPoint)">
            <summary>
            指示两个 <see cref="T:Tool.Sockets.UdpHelper.UdpEndPoint"/> 结构是否不相等。
            </summary>
            <param name="a">不等运算符左侧的结构</param>
            <param name="b">不等运算符右侧的结构</param>
            <returns>如果 true 不等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.op_Equality(Tool.Sockets.UdpHelper.UdpEndPoint,Tool.Sockets.UdpHelper.UdpEndPoint)">
            <summary>
            指示两个 <see cref="T:Tool.Sockets.UdpHelper.UdpEndPoint"/> 结构是否相等。
            </summary>
            <param name="a">相等运算符左侧的结构</param>
            <param name="b">相等运算符右侧的结构</param>
            <returns>如果 true 等于 a，则为 b；否则为 false。</returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpEndPoint.TryParse(System.String,System.Int32,Tool.Sockets.UdpHelper.UdpEndPoint@)">
            <summary>
            尝试判断是否可用的IP端口信息
            </summary>
            <param name="ip">IP信息</param>
            <param name="port">端口信息</param>
            <param name="point">返回的可用对象</param>
            <returns>是否成功</returns>
            <exception cref="T:System.Exception">失败的信息</exception>
        </member>
        <member name="F:Tool.Sockets.UdpHelper.Extend.UdpPack.MaxBuffer">
            <summary>
            UDP 文报传输最大缓冲区
            </summary>
        </member>
        <member name="T:Tool.Sockets.UdpHelper.Extend.UdpStream.Pack">
            <summary>
            保证数据完整性模式
            </summary>
        </member>
        <member name="F:Tool.Sockets.UdpHelper.Extend.UdpStream.IntranetBufferSizs">
            <summary>
            默认的缓冲区大小（用于确保在保证数据完整性模式下，滑动窗口合理设计）- 内网环境
            </summary>
        </member>
        <member name="F:Tool.Sockets.UdpHelper.Extend.UdpStream.InternetBufferSizs">
            <summary>
            Internet的缓冲区大小（用于确保在保证数据完整性模式下，滑动窗口合理设计）- 公网环境
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.Extend.UdpStream.EndPoint">
            <summary>
            连接的设备地址信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.Extend.UdpStream.Socket">
            <summary>
            连接的对象（请勿脱离框架使用，避免出现各种未知异常）
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.Extend.UdpStream.DataLength">
            <summary>
            可用最大空间
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.Extend.UdpStream.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.Extend.UdpStream.CloseAsync">
            <summary>
            尝试关闭存在的连接
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.Extend.UdpStream.ReceivePipeAsync(System.IO.Pipelines.PipeReader)">
            <summary>
            接收数据包（带丢包验证）
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Sockets.UdpHelper.UdpClientAsync">
            <summary>
            封装一个底层异步Udp对象（客户端）IpV4
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.Keep">
            <summary>
            获取当前心跳信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.IsClose">
            <summary>
            标识服务端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.ReplyDelay">
            <summary>
            回复消息延迟时间（警告：当前设置仅在开启了OnlyData模式生效，超时未回复会重发，重发最大次数10，依然没有回复将抛出异常！）小于20将不生效使用默认值
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.ReceiveTimeout">
            <summary>
            <para>监听最大等待时长（默认60秒）</para>
            <para>不得小于5秒</para>
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.Server">
            <summary>
            服务器创建时的信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.LocalPoint">
            <summary>
            当前设备的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.Client">
            <summary>
            UDP 服务对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.UdpCore">
            <summary>
            UDP 核心控制器
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpClientAsync.Connected">
            <summary>
            获取当前是否已连接到远程主机。
            </summary>
        </member>
        <member name="F:Tool.Sockets.UdpHelper.UdpClientAsync.Completed">
            客户端连接完成、发送完成、连接异常或者服务端关闭触发的事件
        </member>
        <member name="F:Tool.Sockets.UdpHelper.UdpClientAsync.Received">
            客户端接收消息触发的事件
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnClient})">
            <summary>
            连接、发送、关闭事件
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{Tool.Sockets.UdpHelper.IUdpCore})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.UdpHelper.UdpClientAsync"/> 客户端类
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.UdpHelper.UdpClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.UdpHelper.UdpClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
            <param name="OnlyData">是否启动框架模式</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.Reconnection">
            <summary>
            重连，返回是否重连，如果没有断开是不会重连的
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.AddKeepAlive(System.Byte)">
            <summary>
            添加持久化消息（心跳），防止特殊情况下的断开连接
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.ConnectAsync(System.Int32)">
            <summary>
            异步连接，连接ip地址为127.0.0.1
            </summary>
            <param name="port">要连接服务端的端口</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.ConnectAsync(System.String,System.Int32)">
            <summary>
            发送数据目标
            </summary>
            <param name="ip">要连接的服务器的ip地址</param>
            <param name="port">要连接的服务器的端口</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.ConnectAsync(Tool.Sockets.Kernels.Ipv4Port)">
            <summary>
            异步连接
            </summary>
            <param name="ipv4Port">要连接的服务器的ip地址端口</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.SendAsync(System.String)">
            <summary>
            异步发送消息
            </summary>
            <param name="msg">文本数据</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.SendAsync(System.ArraySegment{System.Byte})">
            <summary>
            异步发送消息
            </summary>
            <param name="listData">数据包</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{Tool.Sockets.UdpHelper.IUdpCore})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="sendBytes">数据包对象</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.CreateSendBytes(System.Int32)">
            <summary>
            创建数据包对象
            </summary>
            <param name="length">数据包大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.ConnectCallBack">
            异步连接的回调函数
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.StartReceive(Tool.Sockets.UdpHelper.IUdpCore)">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.ReceiveAsync(Tool.Sockets.Kernels.UdpStateObject)">
            <summary>
            异步接收消息
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnClient)">
            <summary>
            可供开发重写的实现类
            </summary>
            <param name="IpPort">IP：端口</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.Close">
            <summary>
            UDP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpClientAsync.Dispose">
            <summary>
            回收UDP相关资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.UdpHelper.UdpServerAsync">
            <summary>
            封装一个底层异步Udp对象（服务端）IpV4
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpServerAsync.OnlyData">
            <summary>
            是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接）
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpServerAsync.IsClose">
            <summary>
            标识服务端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpServerAsync.ReplyDelay">
            <summary>
            回复消息延迟时间（警告：当前设置仅在开启了OnlyData模式生效，超时未回复会重发，重发最大次数10，依然没有回复将抛出异常！）小于20将不生效使用默认值
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpServerAsync.ListClient">
            <summary>
            已建立连接的集合
            key:UserKey
            value:UdpEndPoint
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpServerAsync.Server">
            <summary>
            服务器创建时的信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpServerAsync.ReceiveTimeout">
            <summary>
            <para>监听每个连接用户的最大等待时长（默认60秒一直等待）</para>
            <para>不得小于5秒</para>
            </summary>
        </member>
        <member name="P:Tool.Sockets.UdpHelper.UdpServerAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="F:Tool.Sockets.UdpHelper.UdpServerAsync.Completed">
            连接、发送、关闭事件
        </member>
        <member name="F:Tool.Sockets.UdpHelper.UdpServerAsync.Received">
            接收到数据事件
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnServer})">
            <summary>
            连接、发送、关闭事件
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{Tool.Sockets.UdpHelper.IUdpCore})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.TrySocket(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.UdpHelper.IUdpCore@)">
            <summary>
            根据IP:Port获取对应的连接对象
            </summary>
            <param name="key">IP:Port</param>
            <param name="client">连接对象</param>
            <returns>返回成功状态</returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.UdpHelper.UdpServerAsync"/> 服务器类
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.UdpHelper.UdpServerAsync"/> 服务器类，并确定是否开启框架验证模式保证数据唯一性。
            </summary>
            <param name="size">数据缓冲区大小</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.UdpHelper.UdpServerAsync"/> 服务器类，确认模式和设置流大小
            </summary>
            <param name="size">数据缓冲区大小</param>
            <param name="OnlyData">是否启动框架模式</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.StartAsync(System.Int32)">
            <summary>
            开始异步监听本机127.0.0.1的端口号
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.StartAsync(System.String,System.Int32)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.SendAsync(Tool.Sockets.Kernels.Ipv4Port,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端的ip地址和端口号</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.SendAsync(Tool.Sockets.Kernels.Ipv4Port,System.ArraySegment{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端的ip地址和端口号</param>
            <param name="listData">要发送的内容，允许多个包</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.SendAsync(Tool.Sockets.UdpHelper.IUdpCore,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">UdpEndPoint对象</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.SendAsync(Tool.Sockets.UdpHelper.IUdpCore,System.ArraySegment{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">UdpEndPoint对象</param>
            <param name="listData">要发送的内容，允许多个包</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{Tool.Sockets.UdpHelper.IUdpCore})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="sendBytes">数据包对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.CreateSendBytes(Tool.Sockets.Kernels.Ipv4Port,System.Int32)">
            <summary>
            创建数据包对象
            </summary>
            <param name="key">通信IP:Port</param>
            <param name="length">数据包大小</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.CreateSendBytes(Tool.Sockets.UdpHelper.IUdpCore,System.Int32)">
            <summary>
            创建数据包对象
            </summary>
            <param name="client">通信对象</param>
            <param name="length">数据包大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.AcceptCallBack(System.Net.EndPoint,Tool.Sockets.UdpHelper.IUdpCore@,Tool.Sockets.Kernels.UdpStateObject@)">
            异步接收连接的回调函数 （返回是否是新连接）
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.StartReceive(Tool.Sockets.Kernels.UserKey)">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.ReceiveAsync">
            开始异步接收数据
            obj 要接收的客户端包体
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnServer)">
            <summary>
            可供开发重写的实现类
            </summary>
            <param name="key">指定发送对象</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.Stop">
            <summary>
            UDP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.UdpHelper.UdpServerAsync.Dispose">
            <summary>
            关闭连接，回收相关资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.WebHelper.WebClientAsync">
            <summary>
            WebSocket连接对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.Keep">
            <summary>
            获取当前心跳信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.IsClose">
            <summary>
            标识客户端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.IsSSL">
            <summary>
            获取指示是否使用安全套接字层 (SSL) 保护 WebSocket 连接的值。
            </summary>
            <remarks>true 如果使用 SSL; 保护 WebSocket 连接，否则为false。</remarks>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.IsReconnect">
            <summary>
            是否在与服务器断开后主动重连？ 
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.Server">
            <summary>
            服务器创建时的信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.LocalPoint">
            <summary>
            当前设备的连接信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebClientAsync.Connected">
            <summary>
            获取当前是否已连接到远程主机。
            </summary>
        </member>
        <member name="F:Tool.Sockets.WebHelper.WebClientAsync.InitWebOptions">
            提供自定义注册的服务
        </member>
        <member name="F:Tool.Sockets.WebHelper.WebClientAsync.Completed">
            连接、发送、关闭事件
        </member>
        <member name="F:Tool.Sockets.WebHelper.WebClientAsync.Received">
            接收到数据事件
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.SetInitWebContext(System.Action{System.Net.WebSockets.ClientWebSocketOptions})">
            <summary>
            在连接发送前，回调可设置的参数
            </summary>
            <param name="initWebOptions"></param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnClient})">
            <summary>
            连接、发送、关闭事件 <see cref="T:Tool.Sockets.Kernels.EnClient"/>
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{System.Net.WebSockets.WebSocket})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.WebHelper.WebClientAsync"/> 客户端类
            </summary>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.WebHelper.WebClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize,System.Boolean)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.WebHelper.WebClientAsync"/> 客户端类，确认模式和设置流大小
            </summary>
            <param name="bufferSize">包大小枚举(警告：请务必保证服务端的大小和客户端一致)</param>
            <param name="IsReconnect">是否在与服务器断开后主动重连？ </param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.ConnectAsync(System.Int32)">
            <summary>
            开始异步连接 <see cref="T:System.Net.WebSockets.WebSocket"/>
            </summary>
            <param name="port">端口号</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.ConnectAsync(System.String,System.Int32)">
            <summary>
             开始异步连接 <see cref="T:System.Net.WebSockets.WebSocket"/>
            </summary>
            <param name="ip">可以使用“*”</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.ConnectAsync(System.String)">
            <summary>
             开始异步连接 <see cref="T:System.Net.WebSockets.WebSocket"/>
            </summary>
            <param name="uriPrefix">高级定义法，例如：0.0.0.0:80/tcp，该格式适用</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.SendAsync(System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.SendAsync(System.Memory{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="listData">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{System.Net.WebSockets.WebSocket})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="sendBytes">数据包对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.CreateSendBytes(System.Int32)">
            <summary>
            创建数据包对象
            </summary>
            <param name="length">数据包大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.Reconnection">
            <summary>
            重连，返回是否重连，如果没有断开是不会重连的
            </summary>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.AddKeepAlive(System.Byte)">
            <summary>
            添加持久化消息（心跳），防止特殊情况下的断开连接
            </summary>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.ConnectCallBack">
            异步接收连接的回调函数
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.StartReceive(Tool.Sockets.Kernels.UserKey)">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.ReceiveAsync(Tool.Sockets.Kernels.WebStateObject)">
            开始异步接收数据
            obj 要接收的客户端包体
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnClient)">
            <summary>
            事件方法
            </summary>
            <param name="key">指定发送对象</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.InsideClose">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.Close">
            <summary>
            TCP关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebClientAsync.Dispose">
            <summary>
            回收UDP相关资源
            </summary>
        </member>
        <member name="T:Tool.Sockets.WebHelper.WebServerAsync">
            <summary>
            WebServer长连接对象
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebServerAsync.IsClose">
            <summary>
            标识服务端连接是否关闭
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebServerAsync.IsSSL">
            <summary>
            获取指示是否使用安全套接字层 (SSL) 保护 WebSocket 连接的值。
            </summary>
            <remarks>true 如果使用 SSL; 保护 WebSocket 连接，否则为false。</remarks>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebServerAsync.ListClient">
            <summary>
            已建立连接的集合
            key:UserKey
            value:WebSocketContext
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebServerAsync.Server">
            <summary>
            服务器创建时的信息
            </summary>
        </member>
        <member name="P:Tool.Sockets.WebHelper.WebServerAsync.Millisecond">
            <summary>
            监听控制毫秒
            </summary>
        </member>
        <member name="F:Tool.Sockets.WebHelper.WebServerAsync.InitWebContext">
            提供自定义注册的服务
        </member>
        <member name="F:Tool.Sockets.WebHelper.WebServerAsync.Completed">
            连接、发送、关闭事件
        </member>
        <member name="F:Tool.Sockets.WebHelper.WebServerAsync.Received">
            接收到数据事件
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SetInitWebContext(System.Func{System.Net.HttpListenerContext,System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}})">
            <summary>
            当新连接，创建时，可以自定义之协议，不实现走默认流程（当实现后，返回null时取消后续业务，请自行关闭连接）
            </summary>
            <param name="InitWebContext"></param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SetCompleted(Tool.Sockets.Kernels.CompletedEvent{Tool.Sockets.Kernels.EnServer})">
            <summary>
            连接、发送、关闭事件 <see cref="T:Tool.Sockets.Kernels.EnServer"/>
            </summary>
            <param name="Completed"></param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SetReceived(Tool.Sockets.Kernels.ReceiveEvent{System.Net.WebSockets.WebSocketContext})">
            <summary>
            接收到数据事件
            </summary>
            <param name="Received"></param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.TrySocket(Tool.Sockets.Kernels.UserKey@,System.Net.WebSockets.WebSocketContext@)">
            <summary>
            根据Key获取对应的连接对象
            </summary>
            <param name="key">IP:Port</param>
            <param name="client">连接对象</param>
            <returns>返回成功状态</returns>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.#ctor">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.WebHelper.WebServerAsync"/> 服务器类
            </summary>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.#ctor(Tool.Sockets.Kernels.NetBufferSize)">
            <summary>
            创建一个 <see cref="T:Tool.Sockets.WebHelper.WebServerAsync"/> 服务器类，确认模式和设置流大小
            </summary>
            <param name="size">包大小枚举(警告：请务必保证服务端的大小和客户端一致)</param>
            
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.StartAsync(System.Int32)">
            <summary>
            开始异步监听本机127.0.0.1的端口号
            </summary>
            <param name="port">端口号</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.StartAsync(System.String,System.Int32)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="ip">可以使用“*”</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.StartAsync(System.String)">
            <summary>
            开始异步监听ip地址的端口
            </summary>
            <param name="uriPrefix">高级定义法，例如：0.0.0.0:80/tcp，该格式适用</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SendAsync(Tool.Sockets.Kernels.UserKey,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端密钥</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SendAsync(System.Net.WebSockets.WebSocketContext,System.String)">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">客户端密钥</param>
            <param name="msg">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SendAsync(Tool.Sockets.Kernels.UserKey,System.Memory{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="key">客户端密钥</param>
            <param name="Data">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SendAsync(System.Net.WebSockets.WebSocketContext,System.Memory{System.Byte})">
            <summary>
            开始异步发送数据
            </summary>
            <param name="client">客户端密钥</param>
            <param name="listData">要发送的内容</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.SendAsync(Tool.Sockets.Kernels.SendBytes{System.Net.WebSockets.WebSocketContext})">
            <summary>
            异步发送消息
            </summary>
            <param name="sendBytes">数据包</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Client空 或 已断开连接</exception>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.CreateSendBytes(Tool.Sockets.Kernels.UserKey@,System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="key">接收者信息</param>
            <param name="length">数据大小</param>
            <returns></returns>
            <exception cref="T:System.Exception">连接已中断</exception>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.CreateSendBytes(System.Net.WebSockets.WebSocketContext,System.Int32)">
            <summary>
            创建数据发送空间
            </summary>
            <param name="client">收数据的对象</param>
            <param name="length">数据大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.AcceptCallBack(System.Net.HttpListenerContext)">
            异步接收连接的回调函数
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.StartReceive(System.Net.WebSockets.WebSocketContext)">
            启动新线程，用于专门接收消息
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.ReceiveAsync(Tool.Sockets.Kernels.WebStateObject)">
            开始异步接收数据
            obj 要接收的客户端包体
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.OnComplete(Tool.Sockets.Kernels.UserKey@,Tool.Sockets.Kernels.EnServer)">
            <summary>
            事件方法
            </summary>
            <param name="key">指定发送对象</param>
            <param name="enAction">消息类型</param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.WebSocketAbort(System.Net.WebSockets.WebSocketContext)">
            <summary>
            中断连接并触发事件
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.Stop">
            <summary>
            HttpListener关闭
            </summary>
        </member>
        <member name="M:Tool.Sockets.WebHelper.WebServerAsync.Dispose">
            <summary>
            回收资源，并关闭所有连接
            </summary>
        </member>
        <member name="T:Tool.SqlCore.BaseDataProvider">
            <summary>
            数据库访问底层父类，继承皆可实现高效开发访问
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.SqlCore.BaseDataProvider.ConnectionString">
            <summary>
            链接字符串
            </summary>
        </member>
        <member name="P:Tool.SqlCore.BaseDataProvider.DbProviderType">
            <summary>
            获取当前访问的数据库类型
            </summary>
        </member>
        <member name="P:Tool.SqlCore.BaseDataProvider.DbProviderName">
            <summary>
            获取当前访问的数据库类型
            </summary>
        </member>
        <member name="P:Tool.SqlCore.BaseDataProvider.Database">
            <summary>
            数据底层类
            </summary>
        </member>
        <member name="P:Tool.SqlCore.BaseDataProvider.IsSqlLog">
            <summary>
            是否启动SQL日志打印
            </summary>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.#ctor(System.String,System.String,Tool.SqlCore.IDbProvider)">
            <summary>
            初始化 底层 默认为SqlServer 数据库的访问
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="dbProviderName">数据库类型定义名称</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.#ctor(System.String,Tool.SqlCore.DbProviderType,Tool.SqlCore.IDbProvider)">
            <summary>
            初始化 底层 
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="dbProviderType">数据库类型</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.#ctor(System.String,System.String,Tool.SqlCore.IDbProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            初始化 底层 默认为SqlServer 数据库的访问
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="dbProviderName">数据库类型定义名称</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
            <param name="logger">用于打印程序日志，可以为null</param>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.#ctor(System.String,Tool.SqlCore.DbProviderType,Tool.SqlCore.IDbProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            初始化 底层 
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="dbProviderType">数据库类型</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
            <param name="logger">用于打印程序日志，可以为null</param>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.#ctor(Tool.SqlCore.DbHelper)">
            <summary>
            初始化 底层
            </summary>
            <param name="database">操作对象</param>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.GetPagerSet(Tool.SqlCore.PagerParameters)">
            <summary>
            分页，用于SQL对象的分页
            </summary>
            <param name="prams"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.GetPagerSetAsync(Tool.SqlCore.PagerParameters)">
            <summary>
            分页，用于SQL对象的分页
            </summary>
            <param name="prams"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.GetTableProvider(System.String)">
            <summary>
            表信息对象，用于对单张表的处理
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.BaseDataProvider.GetTableProvider``1(System.String)">
            <summary>
            表信息对象，用于对单张表的处理，可以通过自己实现接口来完成效果。
            </summary>
            <param name="tableName">表名</param>
            <typeparam name="T">自己实现的单表操作类</typeparam>
            <returns></returns>
        </member>
        <member name="T:Tool.SqlCore.DbProviderType">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbProviderType.Unknown">
            <summary>
            表示未知数据库类型，指特殊指定数据库
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbProviderType.SqlServer">
            <summary>
            SqlServer 数据库 （SDK:System.Data.SqlClient）
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbProviderType.SqlServer1">
            <summary>
            SqlServer 数据库 （SKD:Microsoft.Data.SqlClient）
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbProviderType.MySql">
            <summary>
            MySql 数据库
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbProviderType.Oracle">
            <summary>
            Oracle 数据库
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbProviderType.SQLite">
            <summary>
            SQLite 数据库
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbProviderType.OleDb">
            <summary>
            OleDb 数据库(例如：xls格式的文件)
            </summary>
        </member>
        <member name="T:Tool.SqlCore.DbHelper">
            <summary>
            Sql 核心 操作底层
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.SqlCore.DbHelper.LogPath">
            <summary>
            在开启数据库日志模式后，将日志打印至该路径下。
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.ConnectionString">
            <summary>
            链接Sql字符串
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.DbProviderName">
            <summary>
            获取当前访问的数据库类型
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.DbProviderType">
            <summary>
            获取当前访问的数据库类型
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.Factory">
            <summary>
            数据工厂对象
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.CommandTimeout">
            <summary>
            获取或设置 <see cref="T:System.Data.Common.DbCommand"/>.CommandTimeout 最大等待时长（秒）
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.Provider">
            <summary>
            IDB提供商
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.IsSqlLog">
            <summary>
            是否启动SQL日志打印
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.Logger">
            <summary>
            用于支持打印调试日志，必须在开启IsSqlLog 并 Logger 有值时才能使用。
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.IsSqlLogHtml">
            <summary>
            打印模式，true = 采用HTML打印模式，false = 采用txt打印模式
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.SubPath">
            <summary>
            打印日志的子路径段
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbHelper.QueryCount">
            <summary>
            查询计数（请求计数超过最大后会重新计数）
            </summary>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommand">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbCommand"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommand(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns> 的新实例。</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommand``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbCommand"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbCommand"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommand``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns> 的新实例。</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnection">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnection"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbConnection"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnection(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnection"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbConnection"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnection``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnection"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbConnection"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbConnection"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnection``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnection"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbConnection"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbConnection"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnectionStringBuilder">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnectionStringBuilder(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnectionStringBuilder``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateConnectionStringBuilder``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbConnectionStringBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateParameter">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbParameter"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateParameter(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbParameter"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateParameter``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbParameter"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbParameter"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateParameter``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbParameter"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbParameter"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSource">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSource"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbDataSource"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSource(System.String)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSource"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbDataSource"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSource``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSource"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbDataSource"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbDataSource"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSource``1(System.String)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSource"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbDataSource"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbDataSource"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatch">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatch"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbBatch"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatch(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatch"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbBatch"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatch``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatch"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbBatch"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbBatch"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatch``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatch"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbBatch"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbBatch"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatchCommand">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatchCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbBatchCommand"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatchCommand(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatchCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbBatchCommand"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatchCommand``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatchCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbBatchCommand"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbBatchCommand"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateBatchCommand``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbBatchCommand"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbBatchCommand"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbBatchCommand"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommandBuilder">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommandBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbCommandBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommandBuilder(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommandBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbCommandBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommandBuilder``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommandBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbCommandBuilder"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbCommandBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommandBuilder``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbCommandBuilder"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbCommandBuilder"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbCommandBuilder"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataAdapter">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataAdapter"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbDataAdapter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataAdapter(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataAdapter"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbDataAdapter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataAdapter``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataAdapter"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbDataAdapter"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbDataAdapter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataAdapter``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataAdapter"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbDataAdapter"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbDataAdapter"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSourceEnumerator">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSourceEnumerator(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <returns><see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSourceEnumerator``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateDataSourceEnumerator``1(System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="prams">给对象赋值提供的 字典/对象</param>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbDataSourceEnumerator"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransaction">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransaction``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbTransaction"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="isolationLevel">指定的事物类型</param>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransaction``1(System.Data.IsolationLevel)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbTransaction"/> 实现类</typeparam>
            <param name="isolationLevel">指定的事物类型</param>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransactionAsync">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransactionAsync``1">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbTransaction"/> 实现类</typeparam>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransactionAsync(System.Data.IsolationLevel)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <param name="isolationLevel">指定的事物类型</param>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateTransactionAsync``1(System.Data.IsolationLevel)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbTransaction"/> 类的提供程序类的一个新实例。
            </summary>
            <typeparam name="T">指定数据库的 <see cref="T:System.Data.Common.DbTransaction"/> 实现类</typeparam>
            <param name="isolationLevel">指定的事物类型</param>
            <returns><see cref="T:System.Data.Common.DbTransaction"/> 的新实例。</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.#ctor(System.String,Tool.SqlCore.DbProviderType,Tool.SqlCore.IDbProvider)">
            <summary>
            有参构造，创建内置包含数据库对象
            </summary>
            <param name="connString">Sql链接字符串</param>
            <param name="dbProviderType">数据库类型</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.#ctor(System.String,System.String,Tool.SqlCore.IDbProvider)">
            <summary>
            有参构造，创建自定义数据库对象
            </summary>
            <param name="connString">Sql链接字符串</param>
            <param name="dbProviderName">数据库类型定义名称</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.#ctor(System.String,Tool.SqlCore.DbProviderType,Tool.SqlCore.IDbProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            有参构造，创建内置包含数据库对象
            </summary>
            <param name="connString">Sql链接字符串</param>
            <param name="dbProviderType">数据库类型</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
            <param name="logger">用于打印程序日志，可以为null</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.#ctor(System.String,System.String,Tool.SqlCore.IDbProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            有参构造，创建自定义数据库对象
            </summary>
            <param name="connString">Sql链接字符串</param>
            <param name="dbProviderName">数据库类型定义名称</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
            <param name="logger">用于打印程序日志，可以为null</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.SetParameterList(System.Object)">
            <summary>
            将匿名对象转换成<see cref="T:System.Data.Common.DbParameter"/>[]对象集合
            </summary>
            <param name="parameter">匿名对象</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/>[]对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.SetParameterList(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            将匿名对象转换成<see cref="T:System.Data.Common.DbParameter"/>[]对象集合
            </summary>
            <param name="parameter"><see cref="T:System.Collections.Generic.IDictionary`2"/>对象</param>]
            <param name="isnull">是否允许为空</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/>[]对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.SetDictionaryParam(System.Object)">
            <summary>
            将匿名对象转换成<see cref="T:System.Collections.Generic.Dictionary`2"/>对象集合
            </summary>
            <param name="parameter">匿名对象</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/>对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.SetDictionaryParam(System.Object,System.Boolean@)">
            <summary>
            将匿名对象转换成<see cref="T:System.Collections.Generic.Dictionary`2"/>对象集合
            </summary>
            <param name="parameter">匿名对象</param>
            <param name="isnull">解析对象是否是字典，字典将保留空字典值</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/>对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.SetParameters(System.Object)">
            <summary>
            将匿名对象转换成<see cref="T:System.Data.Common.DbParameter"/>[]对象集合
            </summary>
            <param name="parameter">匿名对象</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/>[]对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.SetLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            提供一个通道用于替换日志或关闭日志。
            </summary>
            <param name="logger">用于打印程序日志，可以为null</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetAndSetConnectionString(System.String)">
            <summary>
            获取当前连接字符串或修改
            </summary>
            <param name="connectionstring">为null时，不修改。</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.BuildConnection(System.String,Tool.SqlCore.DbProviderType,System.String,Tool.SqlCore.IDbProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            建造Connection 链接Sql对象
            </summary>
            <param name="connectionString">Sql链接字符串</param>
            <param name="dbProviderType">数据库类型</param>
            <param name="dbProviderName">数据库类型定义名称</param>
            <param name="dbProvider">实现SQL对象类，具有高扩展性</param>
            <param name="logger">用于打印程序日志，可以为null</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.AttachParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            附加参数
            </summary>
            <param name="command">SQL数据对象基类</param>
            <param name="commandParameters">要附加的参数对象数组</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.SetCacheParameterSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            添加缓存参数集
            </summary>
            <param name="commandText">缓存数据集的名称</param>
            <param name="commandParameters">缓存的数据集</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetCachedParameterSet(System.String)">
            <summary>
            获取缓存的参数集，每次返回的都是克隆数据
            </summary>
            <param name="commandText">缓存数据集的名称</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.EmptyCachedParameterSet">
            <summary>
            清空缓存的参数集（会清空所有的参数信息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommand(System.Data.Common.DbConnection,System.String,System.String[])">
            <summary>
            返回SQL数据对象基类
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="spName">存储过程名</param>
            <param name="sourceColumns">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.CreateCommandAsync(System.Data.Common.DbConnection,System.String,System.String[])">
            <summary>
            返回SQL数据对象基类
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="spName">存储过程名</param>
            <param name="sourceColumns">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.DiscoverSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            获取当前存储过程执行所需要的参数
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含的返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.DiscoverSpParameterSetAsync(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            获取当前存储过程执行所需要的参数
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含的返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ResetDbProvider">
            <summary>
            回收当前数据核心对象一切资源
            </summary>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetPagerSet(Tool.SqlCore.PagerParameters)">
            <summary>
            分页函数 实现至 IDbProvider 接口 GetPagerSet 方法
            </summary>
            <param name="pager">相关参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetPagerSetAsync(Tool.SqlCore.PagerParameters)">
            <summary>
            分页函数 实现至 IDbProvider 接口 GetPagerSet 方法
            </summary>
            <param name="pager">相关参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.Query(System.String)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <param name="commandText">SQL语句</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.Query(System.String,System.Object)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parameter">SQL参数</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.Query``1(System.String)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <returns>返回一个实体</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.Query``1(System.String,System.Object)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <param name="parameter">SQL参数</param>
            <returns>返回一个实体</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryList``1(System.String)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <returns>返回一个实体数组</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryList``1(System.String,System.Object)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <param name="parameter">SQL参数</param>
            <returns>返回一个实体数组</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryAsync(System.String)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <param name="commandText">SQL语句</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryAsync(System.String,System.Object)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parameter">SQL参数</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryAsync``1(System.String)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <returns>返回一个实体</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryAsync``1(System.String,System.Object)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <param name="parameter">SQL参数</param>
            <returns>返回一个实体</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryListAsync``1(System.String)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <returns>返回一个实体数组</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.QueryListAsync``1(System.String,System.Object)">
            <summary>
            根据SQL语句，查询返回查询结果。
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="commandText">SQL语句</param>
            <param name="parameter">SQL参数</param>
            <returns>返回一个实体数组</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObject``1(System.String)">
            <summary>
            执行查询SQL返回查询结果，转换为对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObject``1(System.String,System.Object)">
            <summary>
            执行查询SQL返回查询结果，转换为对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示字符串映射参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObject``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行查询SQL返回查询结果，转换为对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectList``1(System.String)">
            <summary>
            执行查询SQL返回查询结果集合，转换为<see cref="T:System.Collections.Generic.IList`1"/>对象集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectList``1(System.String,System.Object)">
            <summary>
            执行查询SQL返回查询结果集合，转换为<see cref="T:System.Collections.Generic.IList`1"/>对象集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示字符串映射参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectList``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行查询SQL返回查询结果集合，转换为<see cref="T:System.Collections.Generic.IList`1"/>对象集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectAsync``1(System.String)">
            <summary>
            执行查询SQL返回查询结果，转换为对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectAsync``1(System.String,System.Object)">
            <summary>
            执行查询SQL返回查询结果，转换为对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示字符串映射参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectAsync``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行查询SQL返回查询结果，转换为对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectListAsync``1(System.String)">
            <summary>
            执行查询SQL返回查询结果集合，转换为<see cref="T:System.Collections.Generic.IList`1"/>对象集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectListAsync``1(System.String,System.Object)">
            <summary>
            执行查询SQL返回查询结果集合，转换为<see cref="T:System.Collections.Generic.IList`1"/>对象集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示字符串映射参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteObjectListAsync``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行查询SQL返回查询结果集合，转换为<see cref="T:System.Collections.Generic.IList`1"/>对象集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="commandText">SQL字符串</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandText">Sql字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.String,System.Object)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandText">Sql字符串</param>
            <param name="prams">对字符串进行映射</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Object)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <param name="prams">对字符串进行映射</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <param name="commandParameters">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandText">Sql字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.String,System.Object)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandText">Sql字符串</param>
            <param name="prams">对字符串进行映射</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.CommandType,System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.CommandType,System.String,System.Object)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <param name="prams">对字符串进行映射</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <param name="commandParameters">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="commandType">指定如何解释命令字符串。</param>
            <param name="commandText">Sql字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDataSetAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL获取<see cref="T:System.Data.DataSet"/>数据源
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDatasetTypedParams(System.String,System.Data.DataRow)">
            <summary>
            根据SQL获取<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDatasetTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            根据SQL获取<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDatasetTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            根据SQL获取<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDatasetTypedParamsAsync(System.String,System.Data.DataRow)">
            <summary>
            根据SQL获取<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDatasetTypedParamsAsync(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            根据SQL获取<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteDatasetTypedParamsAsync(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            根据SQL获取<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandText">SQL字符串</param>
            <param name="prams">字符串映射对象</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Object)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="prams">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,Tool.SqlCore.SqlTextParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="sqlTexts">SQL操作对象<see cref="T:Tool.SqlCore.SqlTextParameter"/>[]</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.String)">
            <summary>
            根据SQL返回受影响行数(异步等待)
            </summary>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.String,System.Object)">
            <summary>
            根据SQL返回受影响行数(异步等待)
            </summary>
            <param name="commandText">SQL字符串</param>
            <param name="prams">字符串映射对象</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数(异步等待)
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Object)">
            <summary>
            根据SQL返回受影响行数(异步等待)
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="prams">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数(异步等待)
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryAsync(System.Data.Common.DbTransaction,Tool.SqlCore.SqlTextParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="sqlTexts">SQL操作对象<see cref="T:Tool.SqlCore.SqlTextParameter"/>[]</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.TransExecuteNonQuery(System.Data.CommandType,System.String,System.Object)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType">执行类型</param>
            <param name="commandText">SQL语句</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.TransExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType">执行类型</param>
            <param name="commandText">SQL语句</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.TransExecuteNonQuery(Tool.SqlCore.SqlTextParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="sqlTexts">SQL操作对象<see cref="T:Tool.SqlCore.SqlTextParameter"/>[]</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.TransExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Object)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType">执行类型</param>
            <param name="commandText">SQL语句</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.TransExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType">执行类型</param>
            <param name="commandText">SQL语句</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.TransExecuteNonQueryAsync(Tool.SqlCore.SqlTextParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="sqlTexts">SQL操作对象<see cref="T:Tool.SqlCore.SqlTextParameter"/>[]</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Object@,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="id">返回第一行第一列的id</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Object@,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="id">返回第一行第一列的id</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Object@,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="id">返回第一行第一列的id</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Object@,System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="id">返回第一行第一列的id</param>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Object@,System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="id">返回第一行第一列的id</param>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Object@,System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="id">返回第一行第一列的id</param>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQuery(System.Object@,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="id">返回第一行第一列的id</param>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryIdAsync(System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns>返回第一行第一列的id</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryIdAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns>返回第一行第一列的id</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryIdAsync(System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="commandText">SQL字符串</param>
            <returns>返回第一行第一列的id</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryIdAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns>返回第一行第一列的id</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryIdAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns>返回第一行第一列的id</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryIdAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns>返回第一行第一列的id</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryIdAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns>返回第一行第一列的id</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryTypedParams(System.String,System.Data.DataRow)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryTypedParamsAsync(System.String,System.Data.DataRow)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryTypedParamsAsync(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteNonQueryTypedParamsAsync(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            根据SQL返回受影响行数
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            执行SQL返回数据流
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.String,System.Object[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.CommandType,System.String)">
            <summary>
            执行SQL返回数据流
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.String,System.Object[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderTypedParamsAsync(System.String,System.Data.DataRow)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderTypedParamsAsync(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteReaderTypedParamsAsync(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行存储过程返回数据流
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.CommandType,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            返回一个数据对象
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarAsync(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回一个数据对象
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarToStr(System.Data.CommandType,System.String)">
            <summary>
            执行SQL返回string类型的数据
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarToStr(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL返回string类型的数据
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarToStrAsync(System.Data.CommandType,System.String)">
            <summary>
            执行SQL返回string类型的数据
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarToStrAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL返回string类型的数据
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="commandParameters">字符串映射对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行SQL返回object类型的数据
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行SQL返回object类型的数据
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行SQL返回object类型的数据
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarTypedParamsAsync(System.String,System.Data.DataRow)">
            <summary>
            执行SQL返回object类型的数据
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarTypedParamsAsync(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行SQL返回object类型的数据
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteScalarTypedParamsAsync(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行SQL返回object类型的数据
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataRow">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames">对应的表名称</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="spName">存储过程名</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
            <param name="parameterValues">字符串映射对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
            <param name="commandParameters">字符串映射对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.Common.DbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
            <param name="parameterValues">字符串映射对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="spName">存储过程名</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
            <param name="parameterValues">字符串映射对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
            <param name="commandParameters">字符串映射对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.FillDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            通过SQL获取数据对象<see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/>对象</param>
            <param name="commandText">SQL字符串</param>
            <param name="dataSet">返回的数据对象</param>
            <param name="tableNames"><see cref="T:System.Data.DataSet"/>对象中的列名</param>
            <param name="commandParameters">字符串映射对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String)">
            <summary>
            执行存储过程返回受影响行数
            </summary>
            <param name="procName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Data.Common.DbDataReader@)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="reader">返回 <see cref="T:System.Data.Common.DbDataReader"/> 对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Data.DataSet@)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="ds">返回 <see cref="T:System.Data.DataSet"/> 对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Object@)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="obj">返回 <see cref="T:System.Object"/> 对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Data.Common.DbParameter"/>[] 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.Common.DbDataReader@)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <param name="reader">返回 <see cref="T:System.Data.Common.DbDataReader"/> 对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.DataSet@)">
            <summary>
            根据存储过程，返回<see cref="T:System.Data.DataSet"/>数据
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">参数</param>
            <param name="ds">返回<see cref="T:System.Data.DataSet"/>数据</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProc(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Object@)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <param name="obj">返回 <see cref="T:System.Object"/> 对象</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObject``1(System.String)">
            <summary>
            执行存储过程返回结果
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObject``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObjectList``1(System.String)">
            <summary>
            执行存储过程返回结果 <see cref="T:System.Collections.Generic.IList`1"/>数据集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObjectList``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果 <see cref="T:System.Collections.Generic.IList`1"/>数据集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcAsync(System.String)">
            <summary>
            执行存储过程返回受影响行数
            </summary>
            <param name="procName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcDataReaderAsync(System.String)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <remarks>返回 <see cref="T:System.Data.Common.DbDataReader"/> 对象</remarks>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcDataSetAsync(System.String)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <remarks>返回 <see cref="T:System.Data.DataSet"/> 对象</remarks>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcExecuteScalarAsync(System.String)">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <returns>返回 <see cref="T:System.Object"/> 对象</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Data.Common.DbParameter"/>[] 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcDataReaderAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns>返回 <see cref="T:System.Data.Common.DbDataReader"/> 对象</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcDataSetAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程，返回<see cref="T:System.Data.DataSet"/>数据
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">参数</param>
            <returns>返回<see cref="T:System.Data.DataSet"/>数据</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcExecuteScalarAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果
            </summary>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns>返回 <see cref="T:System.Object"/> 对象</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObjectAsync``1(System.String)">
            <summary>
            执行存储过程返回结果
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObjectAsync``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObjectListAsync``1(System.String)">
            <summary>
            执行存储过程返回结果 <see cref="T:System.Collections.Generic.IList`1"/>数据集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.RunProcObjectListAsync``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回结果 <see cref="T:System.Collections.Generic.IList`1"/>数据集合
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="procName">存储过程名</param>
            <param name="prams">表示 <see cref="T:System.Collections.Generic.List`1"/> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteCommandWithSplitter(System.String)">
            <summary>
            执行拆分命令 拆分符（\r\nGO\r\n）
            </summary>
            <param name="commandText">SQL语句</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteCommandWithSplitter(System.String,System.String)">
            <summary>
            执行拆分命令
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="splitter">拆分符</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteCommandWithSplitterAsync(System.String)">
            <summary>
            执行拆分命令 拆分符（\r\nGO\r\n）
            </summary>
            <param name="commandText">SQL语句</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.ExecuteCommandWithSplitterAsync(System.String,System.String)">
            <summary>
            执行拆分命令
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="splitter">拆分符</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.UpdateDataSet(System.Data.DataSet,System.String)">
            <summary>
            更新数据集
            </summary>
            <param name="dataSet">更改成的数据集</param>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.UpdateDataSet(System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.DataSet,System.String)">
            <summary>
            更新数据集
            </summary>
            <param name="insertCommand"></param>
            <param name="deleteCommand"></param>
            <param name="updateCommand"></param>
            <param name="dataSet"></param>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetEmptyTable(System.String)">
            <summary>
            根据表名返回当前这张表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetEmptyTableAsync(System.String)">
            <summary>
            根据表名返回当前这张表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetStopwatch">
            <summary>
            获取执行时间器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetException(System.Exception,System.Boolean@,System.String@)">
            <summary>
            获取执行时间器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.AddQueryDetail(System.String,System.Diagnostics.Stopwatch,System.Data.Common.DbParameter[],System.Boolean,System.String)">
            <summary>
            增加SQL请求日志
            </summary>
            <param name="commandText">SQL字符串</param>
            <param name="watch">时间测量器</param>
            <param name="cmdParams">执行参数</param>
            <param name="iserror">是否执行时异常</param>
            <param name="guid">有guid时异常</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.AddQueryDetail(System.Data.Common.DbBatchCommandCollection,System.Diagnostics.Stopwatch,System.Boolean,System.String)">
            <summary>
            增加SQL请求日志
            </summary>
            <param name="dbBatchCommands">批处理命令</param>
            <param name="watch">时间测量器</param>
            <param name="iserror">是否执行时异常</param>
            <param name="guid">有guid时异常</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetQueryDetail(System.String,System.Int64,System.Data.Common.DbParameter[],System.String)">
            <summary>
            SQL执行完成后的日志生成
            </summary>
            <param name="commandText">SQL字符串</param>
            <param name="ElapsedMilliseconds">执行毫秒</param>
            <param name="cmdParams">执行参数</param>
            <param name="guid">id</param>
            <returns>返回日志</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.Throw(System.String)">
            <summary>
            异常提示
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetSpParameterSet(System.String)">
            <summary>
            根据存储过程名获得存储过程所需要的参数
            </summary>
            <param name="spName">储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetSpParameterSet(System.String,System.Boolean)">
            <summary>
            根据存储过程名获得存储过程所需要的参数
            </summary>
            <param name="spName">储过程名</param>
            <param name="includeReturnValueParameter">是否包含的返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetSpParameterSetAsync(System.String)">
            <summary>
            根据存储过程名获得存储过程所需要的参数
            </summary>
            <param name="spName">储过程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetSpParameterSetAsync(System.String,System.Boolean)">
            <summary>
            根据存储过程名获得存储过程所需要的参数
            </summary>
            <param name="spName">储过程名</param>
            <param name="includeReturnValueParameter">是否包含的返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetInParam(System.String,System.Object)">
            <summary>
            绑定数据 （例如：@id=1）
            </summary>
            <param name="paraName">名字</param>
            <param name="paraValue">数据</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetOutParam(System.String,System.Type)">
            <summary>
            返回数据
            </summary>
            <param name="paraName">名字</param>
            <param name="paraType">类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetOutParam(System.String,System.Type,System.Int32)">
            <summary>
            返回数据
            </summary>
            <param name="paraName">名字</param>
            <param name="paraType">类型</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetOutParam(System.String,System.Object,System.Type,System.Int32)">
            <summary>
            绑定数据
            </summary>
            <param name="paraName">名字</param>
            <param name="paraType">类型</param>
            <param name="paraValue">数据</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetParam(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            绑定数据
            </summary>
            <param name="paraName">名字</param>
            <param name="paraValue">数据</param>
            <param name="direction">数据库对应类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetParam(System.String,System.Object,System.Data.ParameterDirection,System.Type,System.String)">
            <summary>
            绑定数据
            </summary>
            <param name="paraName">名字</param>
            <param name="paraValue">数据</param>
            <param name="direction">数据库对应类型</param>
            <param name="paraType">类型</param>
            <param name="sourceColumn">源列</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetParam(System.String,System.Object,System.Data.ParameterDirection,System.Type,System.String,System.Int32)">
            <summary>
            绑定数据
            </summary>
            <param name="paraName">名字</param>
            <param name="paraValue">数据</param>
            <param name="direction">数据库对应类型</param>
            <param name="paraType">类型</param>
            <param name="sourceColumn">源列</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetReturnParam">
            <summary>
            获取存储过程执行，返回结果参数 , 默认参数：ReturnValue。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelper.GetReturnParam(System.String)">
            <summary>
            获取存储过程执行，返回结果参数。
            </summary>
            <param name="paraName">参数名</param>
            <returns></returns>
        </member>
        <member name="F:Tool.SqlCore.DbHelper.m_queryCount">
            <summary>
            请求计数
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbHelper.m_connectionstring">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbHelper.log_subPath">
            <summary>
            子路径
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbHelper.m_dbProviderType">
            <summary>
            数据库类型对象
            </summary>
        </member>
        <member name="F:Tool.SqlCore.DbHelper.m_dbProviderName">
            <summary>
            数据库类型对象
            </summary>
        </member>
        <member name="T:Tool.SqlCore.DbHelperExensions">
            <summary>
            对<see cref="T:Tool.SqlCore.DbHelper"/> 对象，提供扩展支持
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Select(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectDictionary(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectDictionary(Tool.SqlCore.DbHelper,System.Data.CommandType,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="command">执行模式</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectArray(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectArray(Tool.SqlCore.DbHelper,System.Data.CommandType,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="command">执行模式</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Select``1(Tool.SqlCore.DbHelper,System.Action{``0})">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="prams">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Select(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            查询多张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多条查询语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Insert``1(Tool.SqlCore.DbHelper,System.Object)">
            <summary>
            插入一条结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Insert(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            插入一条结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="TableName">表名</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Insert(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            插入多条结果，可以是多张不同的表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多条插入语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Update``1(Tool.SqlCore.DbHelper,System.String,System.Object[])">
            <summary>
            修改单表结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="where">修改的条件</param>
            <param name="prams">修改表的参数 Or 修改条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Update(Tool.SqlCore.DbHelper,System.String,System.String,System.Object[])">
            <summary>
            修改单表结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="TableName">表名</param>
            <param name="where">修改的条件，无需写 WHERE 直接条件</param>
            <param name="prams">修改表的参数 Or 修改条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Update(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            修改多表结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多条插入语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Delete``1(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            删除单张表数据
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="where">删除的条件</param>
            <param name="prams">删除条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Delete(Tool.SqlCore.DbHelper,System.String,System.String,System.Object)">
            <summary>
            删除单张表数据
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="TableName">表名</param>
            <param name="where">删除的条件</param>
            <param name="prams">删除条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.Delete(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            删除多多张表数据
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多张表删除语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectAsync(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectDictionaryAsync(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectDictionaryAsync(Tool.SqlCore.DbHelper,System.Data.CommandType,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="command">执行模式</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectArrayAsync(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectArrayAsync(Tool.SqlCore.DbHelper,System.Data.CommandType,System.String,System.Object)">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="command">执行模式</param>
            <param name="commandText">查询语句</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectAsync``1(Tool.SqlCore.DbHelper,System.Action{``0})">
            <summary>
            查询单张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="prams">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.SelectAsync(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            查询多张表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多条查询语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.InsertAsync``1(Tool.SqlCore.DbHelper,System.Object)">
            <summary>
            插入一条结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.InsertAsync(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            插入一条结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="TableName">表名</param>
            <param name="prams">实体类，虚构对象,任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.InsertAsync(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            插入多条结果，可以是多张不同的表
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多条插入语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.UpdateAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object[])">
            <summary>
            修改单表结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="where">修改的条件</param>
            <param name="prams">修改表的参数 Or 修改条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.UpdateAsync(Tool.SqlCore.DbHelper,System.String,System.String,System.Object[])">
            <summary>
            修改单表结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="TableName">表名</param>
            <param name="where">修改的条件，无需写 WHERE 直接条件</param>
            <param name="prams">修改表的参数 Or 修改条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.UpdateAsync(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            修改多表结果
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多条插入语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.DeleteAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            删除单张表数据
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="where">删除的条件</param>
            <param name="prams">删除条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.DeleteAsync(Tool.SqlCore.DbHelper,System.String,System.String,System.Object)">
            <summary>
            删除单张表数据
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="TableName">表名</param>
            <param name="where">删除的条件</param>
            <param name="prams">删除条件的参数,可以是任何类型的键值对</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.DeleteAsync(Tool.SqlCore.DbHelper,System.String[])">
            <summary>
            删除多多张表数据
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandTexts">多张表删除语句</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetTextParameter(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            提供快捷方式，匿名对象实现
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">执行的SQL语句</param>
            <param name="prams">携带的参数可以是Null,可以是任何类型的键值对</param>
            <returns>返回<see cref="T:Tool.SqlCore.SqlTextParameter"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.WhereStr(System.String)">
            <summary>
            避免问题where 第一位不能为空格
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetInsertParams(Tool.SqlCore.DbHelper,System.Collections.Generic.IDictionary{System.String,System.Object},System.String@,System.String@)">
            <summary>
            根据键值对生成 Insert 部分语法，和值添加对象
            </summary>
            <param name="database">数据库引擎</param>
            <param name="keyValues">数据集键值对</param>
            <param name="key">返回生成的部分SQL语句</param>
            <param name="value">返回生成的部分SQL语句</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetUpdateParams(Tool.SqlCore.DbHelper,System.Collections.Generic.IDictionary{System.String,System.Object},System.String@)">
            <summary>
            根据键值对生成 Update 部分语法，和值添加对象
            </summary>
            <param name="database">数据库引擎</param>
            <param name="keyValues">数据集键值对</param>
            <param name="strsql">返回生成的部分SQL语句</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetReader``1">
            <summary>
            一个测试阶段的 实体转换函数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetListHash(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为集合字典
            </summary>
            <param name="dataReader">原数据对象</param>
            <param name="isnull">是否处理Null值，true时将不包含在字典中</param>
            <returns>返回可读集合字典</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetListHashAsync(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为集合字典
            </summary>
            <param name="dataReader">原数据对象</param>
            <param name="isnull">是否处理Null值，true时将不包含在字典中</param>
            <returns>返回可读集合字典</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetReaderArray(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为 二维数组集合
            </summary>
            <param name="dataReader">原数据对象</param>
            <param name="isnull">是否处理Null值，true时将不包含在二维数组中</param>
            <returns>返回可读二维数组集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetReaderArrayAsync(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为 二维数组集合
            </summary>
            <param name="dataReader">原数据对象</param>
            <param name="isnull">是否处理Null值，true时将不包含在二维数组中</param>
            <returns>返回可读二维数组集合</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetDataSet(System.Data.Common.DbDataReader)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为 <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="dataReader">原数据对象</param>
            <returns>返回可读集合字典</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetDataTable(System.Data.Common.DbDataReader)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为 <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="dataReader">原数据对象</param>
            <returns>返回可读集合字典</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetDataSetAsync(System.Data.Common.DbDataReader)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为 <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="dataReader">原数据对象</param>
            <returns>返回可读集合字典</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetDataTableAsync(System.Data.Common.DbDataReader)">
            <summary>
            将<see cref="T:System.Data.Common.DbDataReader"/>对象，中数据转换为 <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="dataReader">原数据对象</param>
            <returns>返回可读集合字典</returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetDataColumnSchema(System.Data.Common.DbDataReader)">
            <summary>
            获取DataTable表信息不含数据
            </summary>
            <param name="dataReader">原数据对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbHelperExensions.GetDataColumnSchemaAsync(System.Data.Common.DbDataReader)">
            <summary>
            获取DataTable表信息不含数据
            </summary>
            <param name="dataReader">原数据对象</param>
            <returns></returns>
        </member>
        <member name="T:Tool.SqlCore.DbBatchExensions">
            <summary>
            对<see cref="T:System.Data.Common.DbBatch"/> 对象，提供扩展支持
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.DbBatchExensions.NewDbBatch(Tool.SqlCore.DbHelper)">
            <summary>
            创建一个新的框架内置<see cref="T:Tool.SqlCore.DiyDbBatch"/>
            </summary>
            <param name="dbHelper">数据db</param>
            <returns>返回<see cref="T:Tool.SqlCore.DiyDbBatch"/></returns>
            <exception cref="T:System.Exception">执行脚本为空！</exception>
        </member>
        <member name="M:Tool.SqlCore.DbBatchExensions.NewDbBatch(Tool.SqlCore.DbHelper,System.Data.IsolationLevel)">
            <summary>
            创建一个新的框架内置<see cref="T:Tool.SqlCore.DiyDbBatch"/> 带事务版本
            </summary>
            <param name="dbHelper">数据db</param>
            <param name="isolationLevel">指定事务类型</param>
            <returns>返回<see cref="T:Tool.SqlCore.DiyDbBatch"/></returns>
            <exception cref="T:System.Exception">执行脚本为空！</exception>
        </member>
        <member name="M:Tool.SqlCore.DbBatchExensions.AddDbBatchCommand(Tool.SqlCore.DbHelper,System.Data.Common.DbBatch,System.Data.CommandType,System.String,System.Object)">
            <summary>
            对批量执行sql提供参数化支持
            </summary>
            <param name="dbHelper">数据db</param>
            <param name="dbBatch">批量操作对象</param>
            <param name="command">命令模式</param>
            <param name="commandText">脚本</param>
            <param name="prams">可能包含的参数</param>
            <returns>返回<see cref="T:System.Data.Common.DbBatch"/></returns>
            <exception cref="T:System.Exception">执行脚本为空！</exception>
        </member>
        <member name="M:Tool.SqlCore.DbBatchExensions.AddDbBatchCommand(System.Data.Common.DbBatch,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对批量执行sql提供参数化支持
            </summary>
            <param name="dbBatch">批量操作对象</param>
            <param name="command">命令模式</param>
            <param name="commandText">脚本</param>
            <param name="commandParameters">可能包含的参数</param>
            <returns>返回<see cref="T:System.Data.Common.DbBatch"/></returns>
            <exception cref="T:System.Exception">执行脚本为空！</exception>
        </member>
        <member name="M:Tool.SqlCore.DbBatchExensions.AttachParameters(System.Data.Common.DbBatchCommand,System.Data.Common.DbParameter[])">
            <summary>
            附加参数（批量模式）
            </summary>
            <param name="command">SQL数据对象基类</param>
            <param name="commandParameters">要附加的参数对象数组</param>
        </member>
        <member name="T:Tool.SqlCore.DiyDbBatch">
            <summary>
            框架内置Db批处理公共模型
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.#ctor(Tool.SqlCore.DbHelper)">
            <summary>
            创建批处理DB
            </summary>
            <param name="dbHelper">数据中心</param>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.#ctor(Tool.SqlCore.DbHelper,System.Data.IsolationLevel)">
            <summary>
            创建批处理DB带事务
            </summary>
            <param name="dbHelper">数据中心</param>
            <param name="isolationLevel">事务类型</param>
        </member>
        <member name="P:Tool.SqlCore.DiyDbBatch.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DiyDbBatch.DbBatchCommands">
            <summary>
            批处理任务集合
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DiyDbBatch.Connection">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DiyDbBatch.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.CreateDbBatchCommand">
            <summary>
            创建新的批处理任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.AddDbBatchCommand(System.Data.CommandType,System.String,System.Object)">
            <summary>
            对批量执行sql提供参数化支持
            </summary>
            <param name="command">命令模式</param>
            <param name="commandText">脚本</param>
            <param name="prams">可能包含的参数</param>
            <exception cref="T:System.Exception">执行脚本为空！</exception>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.AddDbBatchCommand(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对批量执行sql提供参数化支持
            </summary>
            <param name="command">命令模式</param>
            <param name="commandText">脚本</param>
            <param name="commandParameters">可能包含的参数</param>
            <returns>返回<see cref="T:System.Data.Common.DbBatch"/></returns>
            <exception cref="T:System.Exception">执行脚本为空！</exception>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.Cancel">
            <summary>
            取消批处理任务
            </summary>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.ExecuteNonQuery">
            <summary>
            执行批处理任务并返回受影响行数
            </summary>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            执行批处理任务并返回受影响行数（异步）
            </summary>
            <param name="cancellationToken">可取消</param>
            <returns>返回受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.ExecuteScalar">
            <summary>
            执行批处理任务并返回第一行的第一列
            </summary>
            <returns>返回第一行的第一列</returns>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <summary>
            执行批处理任务并返回第一行的第一列（异步）
            </summary>
            <param name="cancellationToken">可取消</param>
            <returns>返回第一行的第一列</returns>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            执行批处理任务并返回<see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="behavior">提供查询结果及其对数据库影响的描述。</param>
            <returns><see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            执行批处理任务并返回<see cref="T:System.Data.Common.DbDataReader"/>（异步）
            </summary>
            <param name="behavior">提供查询结果及其对数据库影响的描述。</param>
            <param name="cancellationToken">可取消</param>
            <returns><see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.Dispose">
            <summary>
            回收相关资源
            </summary>
        </member>
        <member name="M:Tool.SqlCore.DiyDbBatch.DisposeAsync">
            <summary>
            回收相关资源（异步）
            </summary>
        </member>
        <member name="T:Tool.SqlCore.SqlNonQuery">
            <summary>
            异步返回带有主键的影响信息
            </summary>
        </member>
        <member name="P:Tool.SqlCore.SqlNonQuery.RowsCount">
            <summary>
            影响行数
            </summary>
        </member>
        <member name="P:Tool.SqlCore.SqlNonQuery.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="T:Tool.SqlCore.DbParameterCache">
            <summary>
            本地数据库参数缓存
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.DbParameterCache.#ctor(System.Data.Common.DbParameter[])">
            <summary>
            创建默认缓存
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:Tool.SqlCore.DbParameterCache.#ctor(System.Threading.Tasks.Task{System.Data.Common.DbParameter[]})">
            <summary>
            创建等待缓存
            </summary>
            <param name="taskParameters"></param>
        </member>
        <member name="M:Tool.SqlCore.DbParameterCache.CloneParameters">
            <summary>
            克隆一个副本<see cref="T:System.Data.Common.DbParameter"/>[]
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameter"/>[]</returns>
        </member>
        <member name="M:Tool.SqlCore.DbParameterCache.CloneParametersAsync">
            <summary>
            克隆一个副本<see cref="T:System.Data.Common.DbParameter"/>[]
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameter"/>[]</returns>
        </member>
        <member name="T:Tool.SqlCore.DbTransactionExensions">
            <summary>
            对<see cref="T:System.Data.Common.DbTransaction"/> 对象，提供扩展支持
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.DbTransactionExensions.ExecuteNonQuery(System.Data.Common.DbTransaction,Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            SQL事物执行（增/改/删）相关操作
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">执行的SQL语句</param>
            <param name="parameters">携带的参数可以是Null，虚构参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbTransactionExensions.ExecuteNonQuery(System.Data.Common.DbTransaction,Tool.SqlCore.DbHelper,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL事物执行（增/改/删）相关操作
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="dbHelper">数据库引擎</param>
            <param name="commandText">执行的SQL语句</param>
            <param name="commandParameters">携带的参数可以是Null</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbTransactionExensions.ExecuteNonQuery(System.Data.Common.DbTransaction,Tool.SqlCore.DbHelper,Tool.SqlCore.SqlTextParameter[])">
            <summary>
            SQL事物执行（增/改/删）相关操作
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="dbHelper">数据库引擎</param>
            <param name="sqlTexts">SQL操作对象<see cref="T:Tool.SqlCore.SqlTextParameter"/>[]</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.DbTransactionExensions.ExecuteNonQueryAsync(System.Data.Common.DbTransaction,Tool.SqlCore.DbHelper,Tool.SqlCore.SqlTextParameter[])">
            <summary>
            SQL事物执行（增/改/删）相关操作
            </summary>
            <param name="transaction">SQL事物对象</param>
            <param name="dbHelper">数据库引擎</param>
            <param name="sqlTexts">SQL操作对象<see cref="T:Tool.SqlCore.SqlTextParameter"/>[]</param>
            <returns></returns>
        </member>
        <member name="T:Tool.SqlCore.SqlTextParameter">
            <summary>
            高效的多表安全操作实体
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.SqlTextParameter.#ctor(System.String)">
            <summary>
            创建查询语句
            </summary>
            <param name="commandText">执行的SQL语句</param>
        </member>
        <member name="M:Tool.SqlCore.SqlTextParameter.#ctor(System.String,System.Data.Common.DbParameter[])">
            <summary>
            创建查询语句
            </summary>
            <param name="commandText">执行的SQL语句</param>
            <param name="parameters">携带的参数可以是Null</param>
        </member>
        <member name="M:Tool.SqlCore.SqlTextParameter.#ctor(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            创建查询语句
            </summary>
            <param name="commandType">Sql的类型</param>
            <param name="commandText">执行的SQL语句</param>
            <param name="parameters">携带的参数可以是Null</param>
        </member>
        <member name="P:Tool.SqlCore.SqlTextParameter.CommandType">
            <summary>
            表示Sql的类型
            </summary>
        </member>
        <member name="P:Tool.SqlCore.SqlTextParameter.CommandText">
            <summary>
            执行的SQL语句
            </summary>
        </member>
        <member name="P:Tool.SqlCore.SqlTextParameter.Parameters">
            <summary>
            携带的参数可以是Null
            </summary>
        </member>
        <member name="T:Tool.SqlCore.DbTransResult">
            <summary>
            用于提供事物执行情况，返回事物发生的结果
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.DbTransResult.#ctor(System.Boolean,System.Int32,System.Exception)">
            <summary>
            对象构造函数
            </summary>
            <param name="success">完成情况</param>
            <param name="rows">受影响行数</param>
            <param name="exception">发生的异常</param>
        </member>
        <member name="P:Tool.SqlCore.DbTransResult.Exception">
            <summary>
            表示执行中发生的特殊情况（异常）
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbTransResult.Success">
            <summary>
            事物是否提交成功（状态）
            </summary>
        </member>
        <member name="P:Tool.SqlCore.DbTransResult.Rows">
            <summary>
            受影响行数（无需解释）
            </summary>
        </member>
        <member name="T:Tool.SqlCore.IDbProvider`1">
            <summary>
            SQL数据化的模型接口
            </summary>
            <typeparam name="T">数据类型枚举</typeparam>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider`1.ConvertToLocalDbType(System.Type)">
            <summary>
            根据<see cref="T:System.Type"/>类型获取对应的数据库类型，请自行写实现
            </summary>
            <param name="t"><see cref="T:System.Type"/>类型</param>
            <returns>类型</returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider`1.ConvertToLocalDbTypeString(System.Type)">
            <summary>
            根据<see cref="T:System.Type"/>类型获取对应的类型字符串
            </summary>
            <param name="netType"><see cref="T:System.Type"/>类型</param>
            <returns>类型字符串</returns>
        </member>
        <member name="T:Tool.SqlCore.IDbProvider">
            <summary>
            SQL数据化的模型接口
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            读取存储过程参数填充到 <see cref="T:System.Data.IDbCommand"/>.Parameters 集合（内置实现采用虚构委托，如在意性能请自行实现，示例：DbCommandBuilder.DeriveParameters(cmd) 每个数据库下面都有对应的实现类。）
            </summary>
            <param name="cmd">数据库对象</param>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.GetLastIdSql">
            <summary>
            获取插入数据的主键ID（SQL）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.Instance(Tool.SqlCore.DbProviderType,System.String)">
            <summary>
            获取当前对象的实例
            </summary>
            <param name="dbProviderType">数据库类型</param>
            <param name="dbProviderName">数据库类型定义名称</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.IsBackupDatabase">
            <summary>
            无用，返回true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.IsCompactDatabase">
            <summary>
            无用，返回true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.IsDbOptimize">
            <summary>
            无用，返回true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.IsFullTextSearchEnabled">
            <summary>
            无用，返回true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.IsShrinkData">
            <summary>
            无用，返回true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.IsStoreProc">
            <summary>
            无用，返回true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.GetParam(System.Data.Common.DbParameter@,System.Object,System.Data.ParameterDirection,System.Type,System.String,System.Int32)">
            <summary>
            绑定数据，需要用户实现，默认不实现，内置采用系统默认类型，满足基本类型的对应
            </summary>
            <param name="paraObj">数据库映射对象</param>
            <param name="paraValue">值</param>
            <param name="direction">指定查询内的有关 <see cref="T:System.Data.DataSet"/> 的参数的类型。</param>
            <param name="paraType">类型</param>
            <param name="sourceColumn">源列</param>
            <param name="size">大小</param>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.GetInsertParams(Tool.SqlCore.DbHelper,System.Collections.Generic.IDictionary{System.String,System.Object},System.String@,System.String@)">
            <summary>
            根据键值对生成 Insert 部分语法，和值添加对象
            </summary>
            <param name="database">数据库引擎</param>
            <param name="keyValues">数据集键值对</param>
            <param name="key">返回生成的部分SQL语句</param>
            <param name="value">返回生成的部分SQL语句</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.GetUpdateParams(Tool.SqlCore.DbHelper,System.Collections.Generic.IDictionary{System.String,System.Object},System.String@)">
            <summary>
            根据键值对生成 Update 部分语法，和值添加对象
            </summary>
            <param name="database">数据库引擎</param>
            <param name="keyValues">数据集键值对</param>
            <param name="strsql">返回生成的部分SQL语句</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.GetPagerSet(Tool.SqlCore.DbHelper,Tool.SqlCore.PagerParameters)">
            <summary>
            分页核心方法，建议重写，底层默认实现 SqlServer 分页。
            </summary>
            <param name="dbHelper">数据库引擎</param>
            <param name="pramsPager">分页参数</param>
            <returns>返回分页对象实体</returns>
        </member>
        <member name="M:Tool.SqlCore.IDbProvider.GetPagerSetAsync(Tool.SqlCore.DbHelper,Tool.SqlCore.PagerParameters)">
            <summary>
            分页核心方法，建议重写，底层默认实现 SqlServer 分页。
            </summary>
            <param name="dbHelper"></param>
            <param name="pramsPager">分页参数</param>
            <returns>返回分页对象实体</returns>
        </member>
        <member name="P:Tool.SqlCore.IDbProvider.ParameterPrefix">
            <summary>
            参数表示符号 '@' 或 ':'
            </summary>
        </member>
        <member name="T:Tool.SqlCore.IMessage">
            <summary>
            存储过程操作类（返回的消息对象）接口
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.IMessage.AddEntity(System.Collections.ArrayList)">
            <summary>
            给数据集合赋值
            </summary>
            <param name="entityList">一个数据集合</param>
        </member>
        <member name="M:Tool.SqlCore.IMessage.AddEntity(System.Object)">
            <summary>
            添加数据到集合
            </summary>
            <param name="entity">数据源</param>
        </member>
        <member name="M:Tool.SqlCore.IMessage.ResetEntityList">
            <summary>
            清除所有返回的数据集合
            </summary>
        </member>
        <member name="P:Tool.SqlCore.IMessage.Content">
            <summary>
            存储过程返回信息
            </summary>
        </member>
        <member name="P:Tool.SqlCore.IMessage.EntityList">
            <summary>
            返回的数据集合
            </summary>
        </member>
        <member name="P:Tool.SqlCore.IMessage.MessageID">
            <summary>
            返回的状态ID
            </summary>
        </member>
        <member name="P:Tool.SqlCore.IMessage.Success">
            <summary>
            执行成功与否（状态）
            </summary>
        </member>
        <member name="T:Tool.SqlCore.ITableProvider">
            <summary>
            单表操作对象 （接口）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.SqlCore.ITableProvider.Database">
            <summary>
            核心数据对象
            </summary>
        </member>
        <member name="P:Tool.SqlCore.ITableProvider.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Initialize(Tool.SqlCore.DbHelper,System.String)">
            <summary>
            初始化绑定数据对象
            </summary>
            <param name="Database">核心数据对象</param>
            <param name="TableName">表名</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.BatchCommitData(System.Data.DataSet,System.String[][])">
            <summary>
            批量提交数据
            </summary>
            <param name="dataSet"><see cref="T:System.Data.DataSet"/>对象</param>
            <param name="columnMapArray">列映射数组</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.BatchCommitData(System.Data.DataTable,System.String[][])">
            <summary>
            批量提交数据
            </summary>
            <param name="table"><see cref="T:System.Data.DataTable"/>对象</param>
            <param name="columnMapArray">列映射数组</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.CommitData(System.Data.DataTable)">
            <summary>
            插入新的数据
            </summary>
            <param name="dt"><see cref="T:System.Data.DataTable"/>对象</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.NewRow">
            <summary>
            新行
            </summary>
            <returns><see cref="T:System.Data.DataRow"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Delete(System.String)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Delete(System.String,System.Object)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
            <param name="prams">对虚构参数进行映射</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Update(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            修改数据
            </summary>
            <param name="keyValues">修改的键值对集合</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Update(System.Object,System.String)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Update(System.Object,System.String,System.Object)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
            <param name="parameter">警告：where 条件的参数，切记字符串映射名不要与字段名同名</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Get(System.String)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Get(System.String,System.Object)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Get(System.String,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Get(System.String,System.Object,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetEmptyTable">
            <summary>
            获取空表
            </summary>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObject``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObject``1(System.String,System.Object)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObject``1(System.String,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObject``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectList``1(System.String)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectList``1(System.String,System.Object)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectList``1(System.String,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectList``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOne(System.String)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOne(System.String,System.Object)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOne(System.String,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOne(System.String,System.Object,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetRecordsCount(System.String)">
            <summary>
            查询行数
            </summary>
            <param name="where">查询条件</param>
            <returns>返回行数</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Insert(System.Data.DataRow)">
            <summary>
            插入新的数据
            </summary>
            <param name="row">新数据<see cref="T:System.Data.DataRow"/>对象</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Insert(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入新的数据
            </summary>
            <param name="keyValues">键值对的数据集</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Insert(System.Object)">
            <summary>
            插入新的数据
            </summary>
            <param name="prams">对字符串进行映射</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Insert(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object@)">
            <summary>
            插入新的数据
            </summary>
            <param name="keyValues">键值对的数据集</param>
            <param name="ID">获取插入数据的ID</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.Insert(System.Object,System.Object@)">
            <summary>
            插入新的数据
            </summary>
            <param name="prams">对字符串进行映射</param>
            <param name="ID">获取插入数据的ID</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetRecordsCountAsync(System.String)">
            <summary>
            查询行数
            </summary>
            <param name="where">查询条件</param>
            <returns>返回行数</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.InsertAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入新的数据
            </summary>
            <param name="keyValues">键值对的数据集</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.InsertAsync(System.Object)">
            <summary>
            插入新的数据
            </summary>
            <param name="prams">对字符串进行映射</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.InsertIdAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入新的数据
            </summary>
            <param name="keyValues">键值对的数据集</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.InsertIdAsync(System.Object)">
            <summary>
            插入新的数据
            </summary>
            <param name="prams">对字符串进行映射</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.DeleteAsync(System.String)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.DeleteAsync(System.String,System.Object)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
            <param name="prams">对虚构参数进行映射</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.UpdateAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            修改数据
            </summary>
            <param name="keyValues">修改的键值对集合</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.UpdateAsync(System.Object,System.String)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.UpdateAsync(System.Object,System.String,System.Object)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
            <param name="parameter">警告：where 条件的参数，切记字符串映射名不要与字段名同名</param>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetAsync(System.String)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetAsync(System.String,System.Object)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetAsync(System.String,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetAsync(System.String,System.Object,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetEmptyTableAsync">
            <summary>
            获取空表
            </summary>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectAsync``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectAsync``1(System.String,System.Object)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectAsync``1(System.String,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectAsync``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectListAsync``1(System.String)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectListAsync``1(System.String,System.Object)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectListAsync``1(System.String,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetObjectListAsync``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOneAsync(System.String)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOneAsync(System.String,System.Object)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOneAsync(System.String,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.GetOneAsync(System.String,System.Object,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.ITableProvider.NewRowAsync">
            <summary>
            新行
            </summary>
            <returns><see cref="T:System.Data.DataRow"/>对象</returns>
        </member>
        <member name="T:Tool.SqlCore.Message">
            <summary>
            存储过程操作类（返回的消息对象）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.SqlCore.Message.MessageID">
            <summary>
            返回的状态ID
            </summary>
        </member>
        <member name="P:Tool.SqlCore.Message.Success">
            <summary>
            执行成功与否（状态）
            </summary>
        </member>
        <member name="P:Tool.SqlCore.Message.Prams">
            <summary>
            获取当前存储过程的参数信息
            </summary>
        </member>
        <member name="M:Tool.SqlCore.Message.GetPramsName(System.String)">
            <summary>
            根据参数名称获取参数值
            </summary>
            <param name="Name">参数名称,模糊查询，尽量精确变量名称</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:Tool.SqlCore.Message.#ctor">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="M:Tool.SqlCore.Message.#ctor(System.Boolean)">
            <summary>
            初始化参数
            </summary>
            <param name="isSuccess">执行结果</param>
        </member>
        <member name="M:Tool.SqlCore.Message.#ctor(System.Boolean,System.String)">
            <summary>
            初始化参数
            </summary>
            <param name="isSuccess">执行结果</param>
            <param name="content">输出内容</param>
        </member>
        <member name="M:Tool.SqlCore.Message.#ctor(System.Int32,System.String)">
            <summary>
            初始化参数
            </summary>
            <param name="messageID">消息ID</param>
            <param name="content">输出内容</param>
        </member>
        <member name="M:Tool.SqlCore.Message.#ctor(System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            初始化参数
            </summary>
            <param name="prams">SQL数据对象</param>
        </member>
        <member name="M:Tool.SqlCore.Message.#ctor(System.Boolean,System.String,System.Collections.ArrayList)">
            <summary>
            初始化参数
            </summary>
            <param name="isSuccess">执行结果</param>
            <param name="content">输出内容</param>
            <param name="entityList">数据集</param>
        </member>
        <member name="M:Tool.SqlCore.Message.#ctor(System.Int32,System.String,System.Collections.ArrayList)">
            <summary>
            初始化参数
            </summary>
            <param name="messageID">消息ID</param>
            <param name="content">输出内容</param>
            <param name="entityList">数据集</param>
        </member>
        <member name="M:Tool.SqlCore.Message.AddEntity(System.Collections.ArrayList)">
            <summary>
            给数据集合赋值
            </summary>
            <param name="entityList">一个数据集合</param>
        </member>
        <member name="M:Tool.SqlCore.Message.AddEntity(System.Object)">
            <summary>
            添加数据到集合
            </summary>
            <param name="entity">数据源</param>
        </member>
        <member name="M:Tool.SqlCore.Message.GetEntityList``1(System.Int32)">
            <summary>
            获取数组下对应下标的数据
            </summary>
            <typeparam name="T">返回的指定类型</typeparam>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.SqlCore.Message.ResetEntityList">
            <summary>
            清除所有返回的数据集合
            </summary>
        </member>
        <member name="P:Tool.SqlCore.Message.Content">
            <summary>
            存储过程返回信息
            </summary>
        </member>
        <member name="P:Tool.SqlCore.Message.EntityList">
            <summary>
            返回的数据集合
            </summary>
        </member>
        <member name="T:Tool.SqlCore.MessageHelper">
            <summary>
            存储过程操作类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessage(System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个<see cref="T:Tool.SqlCore.Message"/>对象
            </summary>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessage(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个<see cref="T:System.Object"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessage(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个<see cref="T:System.Object"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForDataSet(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个<see cref="T:System.Data.DataSet"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForDataSet(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个<see cref="T:System.Data.DataSet"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObject``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个实体对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObject``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个实体对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObjectList``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个实体对象数组
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObjectList``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个实体对象数组
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObject``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个泛型对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObject``1(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            根据存储过程返回一个泛型对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObject``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个泛型对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameters">返回<see cref="T:System.Data.Common.DbParameter"/>[]对象集合</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>泛型对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectList``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个泛型数组对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型数组对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectList``1(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            根据存储过程返回一个泛型数组对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型数组对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectList``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个泛型数组对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameters">返回<see cref="T:System.Data.Common.DbParameter"/>[]对象集合</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>泛型数组对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageAsync(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个<see cref="T:System.Object"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageAsync(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个<see cref="T:System.Object"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForDataSetAsync(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个<see cref="T:System.Data.DataSet"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForDataSetAsync(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个<see cref="T:System.Data.DataSet"/>对象
            </summary>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObjectAsync``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个实体对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObjectAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个实体对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObjectListAsync``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个实体对象数组
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetMessageForObjectListAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个实体对象数组
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>返回存储过程对象<see cref="T:Tool.SqlCore.Message"/></returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectAsync``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个泛型对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            根据存储过程返回一个泛型对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个泛型对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameters">返回<see cref="T:System.Data.Common.DbParameter"/>[]对象集合</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>泛型对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectListAsync``1(Tool.SqlCore.DbHelper,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据存储过程返回一个泛型数组对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型数组对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectListAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object)">
            <summary>
            根据存储过程返回一个泛型数组对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <returns>泛型数组对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.GetObjectListAsync``1(Tool.SqlCore.DbHelper,System.String,System.Object,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            根据存储过程返回一个泛型数组对象
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="database">数据底层对象</param>
            <param name="procName">存储过程名</param>
            <param name="prams">存储过程参数</param>
            <param name="parameters">返回<see cref="T:System.Data.Common.DbParameter"/>[]对象集合</param>
            <param name="parameter">具有返回值的参数</param>
            <returns>泛型数组对象</returns>
        </member>
        <member name="M:Tool.SqlCore.MessageHelper.SetParameterParams(Tool.SqlCore.DbHelper,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            将两个<see cref="T:System.Data.Common.DbParameter"/>[]组装到一起
            </summary>
            <param name="database">数据核心对象</param>
            <param name="prams"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.SqlCore.PagerManager">
            <summary>
            SQL分页核心类，目前暂时已被废除，后续会考虑实际情况，补充几种数据库的分页SQL。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.PagerManager.GetFieldString(System.String[],System.String[])">
            <summary>
            将查询SQL字段的对象拼接
            </summary>
            <param name="fields">字段数组</param>
            <param name="fieldAlias">别名的字段数组</param>
            <returns>返回查询的SQL字段字符串</returns>
        </member>
        <member name="T:Tool.SqlCore.PagerParameters">
            <summary>
            根据指定分页信息查询SQL
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.FieldAlias">
            <summary>
            SQL表查询的字段 AS 别名
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.Fields">
            <summary>
            SQL表查询的字段
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.PageIndex">
            <summary>
            页索引
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.PKey">
            <summary>
            显示方式，例如：倒序，顺序（ORDER By ID DESC）
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.IsSql">
            <summary>
            使用表名还是使用SQL执行分页（true：SQL，false：表名）
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerParameters.WhereStr">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor">
            <summary>
            实例化分页对象
            </summary>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.Int32)">
            <summary>
            实例化分页对象
            </summary>
            <param name="table">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="pageIndex">页索引</param>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            实例化分页对象
            </summary>
            <param name="table">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            实例化分页对象
            </summary>
            <param name="table">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="pageIndex">页索引</param>
            <param name="whereStr">查询条件</param>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            实例化分页对象
            </summary>
            <param name="table">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="whereStr">查询条件</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            实例化分页对象
            </summary>
            <param name="table">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="whereStr">查询条件</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="fields">SQL表查询的字段</param>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String[],System.String[])">
            <summary>
            实例化分页对象
            </summary>
            <param name="table">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="whereStr">查询条件</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="fields">SQL表查询的字段</param>
            <param name="fieldAlias">SQL表查询的字段 AS 别名</param>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String[],System.Boolean)">
            <summary>
            实例化分页对象
            </summary>
            <param name="sql">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="whereStr">查询条件</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="fields">SQL表查询的字段</param>
            <param name="issql">使用表名还是使用SQL执行分页（true：SQL，false：表名）</param>
        </member>
        <member name="M:Tool.SqlCore.PagerParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String[],System.String[],System.Boolean)">
            <summary>
            实例化分页对象
            </summary>
            <param name="sql">查询表名</param>
            <param name="pkey">显示方式，例如：倒序，顺序（ORDER By ID DESC）</param>
            <param name="whereStr">查询条件</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="fields">SQL表查询的字段</param>
            <param name="fieldAlias">SQL表查询的字段 AS 别名</param>
            <param name="issql">使用表名还是使用SQL执行分页（true：SQL，false：表名）</param>
        </member>
        <member name="T:Tool.SqlCore.PagerSet">
            <summary>
            分页数据对象
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.PageSet">
            <summary>
            源数据集合
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.PageTable">
            <summary>
            源数据集合第一条
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.p_pageEntitys">
            <summary>
            私有对象，延迟加载数据
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.PageEntitys">
            <summary>
            获取时加载的实体类
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.PageCount">
            <summary>
            可分为多少页（页数）
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.PageIndex">
            <summary>
            页索引
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Tool.SqlCore.PagerSet.RecordCount">
            <summary>
            SQL数据表总行数
            </summary>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.#ctor">
            <summary>
            实例化，无参构造
            </summary>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Data.DataSet)">
            <summary>
            实例化，对象
            </summary>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="pageCount">可分为多少页</param>
            <param name="recordCount">SQL数据表总行数</param>
            <param name="pageSet">数据对象</param>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.CheckedPageSet">
            <summary>
            可用于验证当前<see cref="T:System.Data.DataSet"/>，PageSet 是否非空
            </summary>
            <returns>返回状态</returns>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.PageToEntityList``1">
            <summary>
            将<see cref="T:System.Data.DataTable"/>对象 转换为 实体对象数组 (优化版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <returns>返回实体对象数组</returns>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.PageSetJson">
            <summary>
            返回当前<see cref="T:System.Data.DataSet"/>，PageTable 的JSON格式字符串数组
            </summary>
            <returns>JSON格式字符串数组</returns>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.PageSetJson(System.Boolean)">
            <summary>
            返回当前<see cref="T:System.Data.DataSet"/>，PageTable 的JSON格式字符串数组
            </summary>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <returns>JSON格式字符串数组</returns>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.PageSetJson(System.Boolean,System.String)">
            <summary>
            返回当前<see cref="T:System.Data.DataSet"/>，PageTable 的JSON格式字符串数组
            </summary>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <param name="ToDateString">Date.ToString()的写法。</param>
            <returns>JSON格式字符串数组</returns>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.PageTableJson">
            <summary>
            返回当前<see cref="T:System.Data.DataTable"/>，PageTable 的JSON格式字符串
            </summary>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.PageTableJson(System.Boolean)">
            <summary>
            返回当前<see cref="T:System.Data.DataTable"/>，PageTable 的JSON格式字符串
            </summary>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:Tool.SqlCore.PagerSet.PageTableJson(System.Boolean,System.String)">
            <summary>
            返回当前<see cref="T:System.Data.DataTable"/>，PageTable 的JSON格式字符串
            </summary>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <param name="ToDateString">Date.ToString()的写法。</param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="T:Tool.SqlCore.ProviderFactory">
            <summary>
            DbProviderFactory工厂类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.GetProviderInvariantName(Tool.SqlCore.DbProviderType)">
            <summary>
            获取指定数据库类型对应的程序集名称
            </summary>
            <param name="providerType">数据库类型枚举</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.GetDbProviderFactory(Tool.SqlCore.DbProviderType)">
            <summary>
            获取指定类型的数据库对应的DbProviderFactory
            </summary>
            <param name="providerType">数据库类型枚举</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.ImportDbProviderFactory(Tool.SqlCore.DbProviderType)">
            <summary>
            加载指定数据库类型的DbProviderFactory
            </summary>
            <param name="providerType">数据库类型枚举</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.AddFactory``1(Tool.SqlCore.DbProviderType)">
            <summary>
            将现有数据库对象注入实现
            </summary>
            <param name="providerType">注册数据库类型</param>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.AddFactory``1(System.String)">
            <summary>
            将现有数据库对象注入实现
            </summary>
            <param name="providerInvariantName">注册的名称</param>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.AddFactory(System.String,System.String,System.Boolean)">
            <summary>
            将现有数据库对象注入实现
            </summary>
            <param name="providerInvariantName">注册的名称</param>
            <param name="strType">"System.Data.SqlClient.SqlClientFactory, System.Data.SqlClient"</param>
            <param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.AddFactory(Tool.SqlCore.DbProviderType,System.Type)">
            <summary>
            将现有数据库对象注入实现
            </summary>
            <param name="providerType">注册数据库类型</param>
            <param name="providerFactoryClass">对应的数据库<see cref="T:System.Type"/></param>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.AddFactory(System.String,System.Type)">
            <summary>
            将现有数据库对象注入实现
            </summary>
            <param name="providerInvariantName">注册的名称</param>
            <param name="providerFactoryClass">对应的数据库<see cref="T:System.Type"/></param>
        </member>
        <member name="M:Tool.SqlCore.ProviderFactory.GetFactory(System.String)">
            <summary>
            加载指定数据库类型的DbProviderFactory
            </summary>
            <param name="providerName">数据库类型引用信息</param>
            <returns></returns>
        </member>
        <member name="T:Tool.SqlCore.ProxyFactory">
            <summary>
            底层添加数据库方法
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.SqlCore.ProxyFactory.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Tool.SqlCore.ProxyFactory.CreateHandler(System.Type,System.String,System.Type[])">
            <summary>
            添加数据库方法类以及连接字符串
            </summary>
            <param name="objtype">数据访问类</param>
            <param name="key">名称</param>
            <param name="ptypes">链接字符串</param>
        </member>
        <member name="M:Tool.SqlCore.ProxyFactory.CreateInstance``1">
            <summary>
            添加数据库
            </summary>
            <typeparam name="T">数据访问类</typeparam>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.ProxyFactory.CreateInstance``1(System.Object[])">
            <summary>
            添加数据库
            </summary>
            <typeparam name="T">数据访问类</typeparam>
            <param name="parameters">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.ProxyFactory.GetKey(System.Type[])">
            <summary>
            将Type[] 集合转换成字符串
            </summary>
            <param name="types">Type[] 集合</param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.ProxyFactory.GetParameterTypes(System.Object[])">
            <summary>
            返回一个Type[] 集合
            </summary>
            <param name="parameters">数据库连接字符串集合</param>
            <returns></returns>
        </member>
        <member name="F:Tool.SqlCore.ProxyFactory.m_Handlers">
            <summary>
            存储所有的数据库类
            </summary>
        </member>
        <member name="T:Tool.SqlCore.ProxyFactory.CreateInstanceHandler">
            <summary>
            实现回调数据接口
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.SqlCore.TableProvider">
            <summary>
            单表操作对象，系统提供，如果有特殊需求，建议重新实现接口完成。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.SqlCore.TableProvider.Database">
            <summary>
            核心数据对象
            </summary>
        </member>
        <member name="P:Tool.SqlCore.TableProvider.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.#ctor">
            <summary>
            无参构造，接口自动实现
            </summary>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.#ctor(Tool.SqlCore.DbHelper,System.String)">
            <summary>
            有参构造
            </summary>
            <param name="database">数据源对象</param>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.BatchCommitData(System.Data.DataSet,System.String[][])">
            <summary>
            批量提交数据
            </summary>
            <param name="dataSet"><see cref="T:System.Data.DataSet"/>对象</param>
            <param name="columnMapArray">列映射数组</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.BatchCommitData(System.Data.DataTable,System.String[][])">
            <summary>
            批量提交数据
            </summary>
            <param name="table"><see cref="T:System.Data.DataTable"/>对象</param>
            <param name="columnMapArray">列映射数组</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.CommitData(System.Data.DataTable)">
            <summary>
            插入新的数据
            </summary>
            <param name="dt"><see cref="T:System.Data.DataTable"/>对象</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.ConstructDataSet(System.Data.DataTable)">
            <summary>
            将<see cref="T:System.Data.DataTable"/>对象 转 <see cref="T:System.Data.DataSet"/>对象
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Insert(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入新的数据 
            </summary>
            <param name="keyValues">键值对的数据集</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Insert(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object@)">
            <summary>
            插入新的数据
            </summary>
            <param name="keyValues">键值对的数据集</param>
            <param name="ID">获取插入数据的ID</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Insert(System.Object)">
            <summary>
            插入新的数据 
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Insert(System.Object,System.Object@)">
            <summary>
            插入新的数据
            </summary>
            <param name="prams">对字符串进行映射</param>
            <param name="ID">获取插入数据的ID</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Delete(System.String)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Delete(System.String,System.Object)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Update(System.Object,System.String)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Update(System.Object,System.String,System.Object)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
            <param name="parameter">警告：where 条件的参数，切记字符串映射名不要与字段名同名</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Update(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            修改数据
            </summary>
            <param name="keyValues">修改的键值对集合</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Get(System.String)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Get(System.String,System.Object)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Get(System.String,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Get(System.String,System.Object,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetEmptyTable">
            <summary>
            获取空表
            </summary>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.NewRow">
            <summary>
            新行
            </summary>
            <returns><see cref="T:System.Data.DataRow"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObject``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObject``1(System.String,System.Object)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObject``1(System.String,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObject``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectList``1(System.String)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectList``1(System.String,System.Object)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectList``1(System.String,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectList``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOne(System.String)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOne(System.String,System.Object)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOne(System.String,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOne(System.String,System.Object,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetRecordsCount(System.String)">
            <summary>
            查询行数
            </summary>
            <param name="where">查询条件</param>
            <returns>返回行数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.Insert(System.Data.DataRow)">
            <summary>
            插入新的数据
            </summary>
            <param name="row">新数据<see cref="T:System.Data.DataRow"/>对象</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetRecordsCountAsync(System.String)">
            <summary>
            查询行数
            </summary>
            <param name="where">查询条件</param>
            <returns>返回行数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.InsertAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入新的数据 
            </summary>
            <param name="keyValues">键值对的数据集</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.InsertIdAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入新的数据
            </summary>
            <param name="keyValues">键值对的数据集</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.InsertIdAsync(System.Object)">
            <summary>
            插入新的数据
            </summary>
            <param name="prams">对字符串进行映射</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.InsertAsync(System.Object)">
            <summary>
            插入新的数据 
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <returns>返回受影响数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.DeleteAsync(System.String)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.DeleteAsync(System.String,System.Object)">
            <summary>
            删除该表数据
            </summary>
            <param name="where">指定的删除条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.UpdateAsync(System.Object,System.String)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.UpdateAsync(System.Object,System.String,System.Object)">
            <summary>
            修改数据
            </summary>
            <param name="prams">对虚构参数进行映射</param>
            <param name="where">指定的修改的条件</param>
            <param name="parameter">警告：where 条件的参数，切记字符串映射名不要与字段名同名</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.UpdateAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            修改数据
            </summary>
            <param name="keyValues">修改的键值对集合</param>
            <param name="where">指定的修改的条件</param>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetAsync(System.String)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetAsync(System.String,System.Object)">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetAsync(System.String,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetAsync(System.String,System.Object,System.String[])">
            <summary>
            查询该表信息
            </summary>
            <param name="where">指定的查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetEmptyTableAsync">
            <summary>
            获取空表
            </summary>
            <returns><see cref="T:System.Data.DataTable"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.NewRowAsync">
            <summary>
            新行
            </summary>
            <returns><see cref="T:System.Data.DataRow"/>对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectAsync``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectAsync``1(System.String,System.Object)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectAsync``1(System.String,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectAsync``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectListAsync``1(System.String)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectListAsync``1(System.String,System.Object)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectListAsync``1(System.String,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetObjectListAsync``1(System.String,System.Object,System.String[])">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回实体对象集合</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOneAsync(System.String)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOneAsync(System.String,System.Object)">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOneAsync(System.String,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="M:Tool.SqlCore.TableProvider.GetOneAsync(System.String,System.Object,System.String[])">
            <summary>
            获取当前查询的数据的第一行
            </summary>
            <param name="where">查询条件</param>
            <param name="prams">对字符串进行映射</param>
            <param name="fields">要查询的字段</param>
            <returns>返回第一条数据</returns>
        </member>
        <member name="T:Tool.StaticData">
            <summary>
            静态数据类，用于存放核心数据对象的类
            </summary>
        </member>
        <member name="T:Tool.GlobalObj">
            <summary>
            全局公共对象，支持线程安全访问
            </summary>
        </member>
        <member name="P:Tool.GlobalObj.OrigObj">
            <summary>
            线程安全对象，可供不想 存储对象的朋友简单化对象管理
            </summary>
        </member>
        <member name="M:Tool.GlobalObj.#ctor(System.Int32)">
            <summary>
            预估初始对象大小
            </summary>
        </member>
        <member name="M:Tool.GlobalObj.Add(System.String,System.Object)">
            <summary>
            向对象添加键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>状态</returns>
        </member>
        <member name="M:Tool.GlobalObj.Get(System.String,System.Object@)">
            <summary>
            从对象中获取现有键值
            </summary>
            <param name="key">键名称</param>
            <param name="value">现有值</param>
            <returns>状态</returns>
        </member>
        <member name="M:Tool.GlobalObj.Get``1(System.String,``0@)">
            <summary>
            从对象中获取现有键值
            </summary>
            <typeparam name="T">原对象类型</typeparam>
            <param name="key">键名称</param>
            <param name="value">现有值</param>
            <returns>状态</returns>
        </member>
        <member name="T:Tool.BoolExtension">
            <summary>
            对Bool进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.BoolExtension.ToBytes(System.Boolean)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Bool</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.BoolExtension.Add(System.Boolean[],System.Boolean)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">bool[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.BoolExtension.Contains(System.Boolean[],System.Boolean)">
            <summary>
            查找该bool数组中是否存在该值。
            </summary>
            <param name="txt">bool[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.BoolExtension.GetArrayIndex(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.ByteExtension">
            <summary>
            对Byte进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.ByteExtension.Increment(System.Byte@)">
            <summary>
            原子方式+1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ByteExtension.Decrement(System.Byte@)">
            <summary>
            原子方式-1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ByteExtension.BytesToObject(System.Byte[])">
            <summary> 
            将一个序列化后的byte[]数组还原         
            </summary>
            <param name="Bytes"></param>         
            <returns>返回一个原对象</returns> 
        </member>
        <member name="M:Tool.ByteExtension.BytesToObject``1(System.Byte[])">
            <summary> 
            将一个序列化后的byte[]数组还原 （升级版，有效降低内存消耗）
            </summary>
            <param name="Bytes">数据流</param>       
            <returns>返回一个原对象</returns> 
        </member>
        <member name="M:Tool.ByteExtension.BytesToObject(System.Byte[],System.Type)">
            <summary> 
            将一个序列化后的byte[]数组还原 （升级版，有效降低内存消耗）
            </summary>
            <param name="Bytes">数据流</param>       
            <param name="type">转换为原来类的Type</param>
            <returns>返回一个原对象</returns> 
        </member>
        <member name="M:Tool.ByteExtension.ToBytesFile(System.Byte[],System.String)">
            <summary>
            将byte数组转换为文件并保存到指定地址(绝对路径)（备注：如果该文件存在，将会被替换）
            </summary>
            <param name="buff">byte数组</param>
            <param name="savepath">保存地址</param>
        </member>
        <member name="M:Tool.ByteExtension.ToBase64(System.Byte[])">
            <summary>
            将对象转换成Base64字符串（编码）
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.ByteExtension.ToInt(System.Byte[])">
            <summary>
            转换为Int类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为Int类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToDouble(System.Byte[])">
            <summary>
            转换为Double类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为Double类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToStrings(System.Byte[])">
            <summary>
            转换为16进制 例如“7F-2C-4A”。
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为16进制</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToByteString(System.Byte[])">
            <summary>
            转换为String类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为String类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToByteString(System.Byte[],System.Text.Encoding)">
            <summary>
            转换为String类型
            </summary>
            <param name="bt">byte[]</param>
            <param name="encoding">编码格式</param>
            <returns>转换为String类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToBool(System.Byte[])">
            <summary>
            转换为Bool类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为Bool类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToChar(System.Byte[])">
            <summary>
            转换为Char类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为Char类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToShort(System.Byte[])">
            <summary>
            转换为Short类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为Short类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToLong(System.Byte[])">
            <summary>
            转换为Long类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为Long类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.ToFloat(System.Byte[])">
            <summary>
            转换为Float类型
            </summary>
            <param name="bt">byte[]</param>
            <returns>转换为Float类型</returns>
        </member>
        <member name="M:Tool.ByteExtension.Add(System.Byte[],System.Byte)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">bool[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.ByteExtension.Contains(System.Byte[],System.Byte)">
            <summary>
            查找该byte数组中是否存在该值。
            </summary>
            <param name="txt">byte[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.ByteExtension.Read(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            重写封装的Copy方法
            </summary>
            <param name="sourceArray">源数组对象</param>
            <param name="destinationArray">新数组对象</param>
            <param name="sourceIndex">源数据开始读取的位置</param>
            <param name="length">从源数组取多少？(是指从读取位置开始往后读的数量)</param>
            <returns>返回当前新的数组中复制了多少个下标的值</returns>
        </member>
        <member name="M:Tool.ByteExtension.Read(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            重写封装的Copy方法
            </summary>
            <param name="sourceArray">源数组对象</param>
            <param name="sourceIndex">源数据开始读取的位置</param>
            <param name="destinationArray">新数组对象</param>
            <param name="destinationIndex">开始存储的位置</param>
            <param name="length">从源数组取多少？(是指从读取位置开始往后读的数量)</param>
            <returns>返回当前新的数组中复制了多少个下标的值</returns>
        </member>
        <member name="M:Tool.ByteExtension.GetArrayIndex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="M:Tool.ByteExtension.AsArraySegment``1(System.Memory{``0})">
            <summary> 
            将<see cref="T:System.Memory`1"/>转换成<see cref="T:System.ArraySegment`1"/>（不是拷贝）
            </summary>
            <param name="memory">数据流</param>       
            <returns>返回<see cref="T:System.ArraySegment`1"/></returns> 
        </member>
        <member name="M:Tool.ByteExtension.AsArraySegment``1(System.ReadOnlyMemory{``0})">
            <summary> 
            将<see cref="T:System.Memory`1"/>转换成<see cref="T:System.ArraySegment`1"/>（不是拷贝）
            </summary>
            <param name="memory">数据流</param>       
            <returns>返回<see cref="T:System.ArraySegment`1"/></returns> 
        </member>
        <member name="T:Tool.CharExtension">
            <summary>
            对char进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.CharExtension.ToBytes(System.Char)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Char</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.CharExtension.ToInt(System.Char)">
            <summary>
            返回Int类型
            </summary>
            <param name="txt">Char</param>
            <returns>返回Int类型</returns>
        </member>
        <member name="M:Tool.CharExtension.Add(System.Char[],System.Char)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">char[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.CharExtension.Contains(System.Char[],System.Char)">
            <summary>
            查找该char数组中是否存在该值。
            </summary>
            <param name="txt">char[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.CharExtension.GetArrayIndex(System.Char[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.DateTimeExtension">
            <summary>
            对DateTime进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.DateTimeExtension.GetMilliseconds(System.DateTime)">
            <summary>
            根据实力，计算与当前时间的毫秒差
            </summary>
            <param name="dateTime">DateTime</param>
            <returns>适用于获取代码执行时的耗时</returns>
        </member>
        <member name="M:Tool.DateTimeExtension.DateMonday(System.DateTime,System.DayOfWeek)">
            <summary>
            返回当前日期指定的星期几
            </summary>
            <param name="dateTime">DateTime</param>
            <param name="Week">指定星期几</param>
            <returns>返回当前日期指定的星期几</returns>
        </member>
        <member name="M:Tool.DateTimeExtension.GetDaysOfYear(System.DateTime)">
            <summary>本年有多少天</summary>  
            <param name="idt">日期</param>
            <returns>本天在当年的天数</returns>  
        </member>
        <member name="M:Tool.DateTimeExtension.GetDaysOfMonth(System.DateTime)">
            <summary>本月有多少天</summary>  
            <param name="dt">日期</param>  
            <returns>天数</returns>  
        </member>
        <member name="M:Tool.DateTimeExtension.GetWeekNameOfDay(System.DateTime)">
            <summary>返回当前日期的星期名称</summary>  
            <param name="idt">日期</param>
            <returns>星期名称</returns>  
        </member>
        <member name="M:Tool.DateTimeExtension.GetWeekNumberOfDay(System.DateTime)">
            <summary>返回当前日期的星期编号</summary>  
            <param name="idt">日期</param>  
            <returns>星期数字编号</returns>  
        </member>
        <member name="M:Tool.DateTimeExtension.ToLocalTime(System.Double,System.Boolean)">
            <summary>
            返回 <see cref="T:System.DateTime"/> 类型 ，根据指定时间数字转换
            </summary>
            <param name="Localtime">指定的时间数字</param>
            <param name="tal">true 毫秒, false 秒。</param>
            <returns>返回时间类型</returns>
        </member>
        <member name="M:Tool.DateTimeExtension.ToLocalTime(System.DateTime,System.Boolean)">
            <summary>
            返回 <see cref="T:System.DateTime"/> 类型 ，根据指定时间数字转换
            </summary>
            <param name="dateTime">时间类型</param>
            <param name="tal">返回 true 毫秒, false 秒。</param>
            <returns>返回64位时间数字</returns>
        </member>
        <member name="M:Tool.DateTimeExtension.IsRuYear(System.Int32)">
            <summary>判断当前年份是否是闰年，私有函数</summary>  
            <param name="iYear">年份</param>  
            <returns>是闰年：True ，不是闰年：False</returns>  
        </member>
        <member name="M:Tool.DateTimeExtension.Add(System.DateTime[],System.DateTime)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">DateTime[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.DateTimeExtension.Contains(System.DateTime[],System.DateTime)">
            <summary>
            查找该char数组中是否存在该值。
            </summary>
            <param name="txt">DateTime[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.DateTimeExtension.GetArrayIndex(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.DecimalExtension">
            <summary>
            对Decimal进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.DecimalExtension.ToInt(System.Decimal,System.Boolean)">
            <summary>
            将数字转换成整数，支持四舍五入，默认不四舍五入。
            </summary>
            <param name="txt">Decimal</param>
            <param name="type">true：为需要四舍五入</param>
            <returns>返回整数，带四舍五入</returns>
        </member>
        <member name="M:Tool.DecimalExtension.Add(System.Decimal[],System.Decimal)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Decimal[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.DecimalExtension.Contains(System.Decimal[],System.Decimal)">
            <summary>
            查找该Decimal数组中是否存在该值。
            </summary>
            <param name="txt">Decimal[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.DecimalExtension.GetArrayIndex(System.Decimal[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.DoubleExtension">
            <summary>
            对Double进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.DoubleExtension.ToBytes(System.Double)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Double</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.DoubleExtension.ToInt(System.Double,System.Boolean)">
            <summary>
            将数字转换成整数，支持四舍五入，默认不四舍五入。
            </summary>
            <param name="txt">Double</param>
            <param name="type">true：为需要四舍五入</param>
            <returns>返回整数，带四舍五入</returns>
        </member>
        <member name="M:Tool.DoubleExtension.Add(System.Double[],System.Double)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Double[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.DoubleExtension.Contains(System.Double[],System.Double)">
            <summary>
            查找该Double数组中是否存在该值。
            </summary>
            <param name="txt">Double[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.DoubleExtension.GetArrayIndex(System.Double[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.FloatExtension">
            <summary>
            对Float进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.FloatExtension.ToBytes(System.Single)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Double</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.FloatExtension.Add(System.Single[],System.Single)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Float[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.FloatExtension.Contains(System.Single[],System.Single)">
            <summary>
            查找该Float数组中是否存在该值。
            </summary>
            <param name="txt">Float[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.FloatExtension.GetArrayIndex(System.Single[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.IntExtension">
            <summary>
            对Int进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.IntExtension.ToBytes(System.Int32)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">int</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.IntExtension.IsWhether(System.Int32,System.Int32)">
            <summary>
            用于判断这个整数是不是输入数的倍数
            </summary>
            <param name="txt">int</param>
            <param name="txt1">判断的条件</param>
            <returns></returns>
        </member>
        <member name="M:Tool.IntExtension.Ceiling(System.Int32,System.Decimal)">
            <summary>
            当前数除以一个整数，返回一个向上取整的倍数
            </summary>
            <param name="txt">int</param>
            <param name="txt1">除数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.IntExtension.Increment(System.Int32@)">
            <summary>
            原子方式+1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.IntExtension.Decrement(System.Int32@)">
            <summary>
            原子方式-1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.IntExtension.Add(System.Int32[],System.Int32)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">int[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.IntExtension.Contains(System.Int32[],System.Int32)">
            <summary>
            查找该int数组中是否存在该值。
            </summary>
            <param name="txt">int[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.IntExtension.GetArrayIndex(System.Int32[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.LongExtension">
            <summary>
            对long进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.LongExtension.ToBytes(System.Int64)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Long</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.LongExtension.Increment(System.Int64@)">
            <summary>
            原子方式+1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.LongExtension.Decrement(System.Int64@)">
            <summary>
            原子方式-1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.LongExtension.ToInt(System.Int64)">
            <summary>
            返回Int类型
            </summary>
            <param name="txt">long</param>
            <returns>返回Int类型</returns>
        </member>
        <member name="M:Tool.LongExtension.Ceiling(System.Int64,System.Decimal)">
            <summary>
            当前数除以一个整数，返回一个向上取整的倍数
            </summary>
            <param name="txt">int</param>
            <param name="txt1">除数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.LongExtension.Add(System.Int64[],System.Int64)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Long[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.LongExtension.Contains(System.Int64[],System.Int64)">
            <summary>
            查找该Long数组中是否存在该值。
            </summary>
            <param name="txt">Long[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.LongExtension.GetArrayIndex(System.Int64[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.ObjectExtension">
            <summary>
            对object类进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.ObjectExtension.Services">
            <summary>
            提供用于添加对象服务
            </summary>
        </member>
        <member name="P:Tool.ObjectExtension.Provider">
            <summary>
            提供用于获取注入对象的服务
            </summary>
        </member>
        <member name="M:Tool.ObjectExtension.BuildProvider">
            <summary>
            创建用于获取服务对象
            <para>调用该函数，将会释放掉原本的服务</para>
            </summary>
        </member>
        <member name="P:Tool.ObjectExtension.Static">
            <summary>
            全局公共对象 可以用于 存放任何对象 管理，存在拆箱装箱行为
            </summary>
        </member>
        <member name="P:Tool.ObjectExtension.Thread">
            <summary>
            获取当前上下文正在运行的当前线程
            </summary>
        </member>
        <member name="P:Tool.ObjectExtension.ProcessThreadCollection">
            <summary>
            获取当前进程中的所有线程
            </summary>
        </member>
        <member name="P:Tool.ObjectExtension.Dynamic">
            <summary>
            虚拟参数(备注：要引用 <see cref="N:Microsoft.CSharp"/> .dll 方可使用)
            </summary>
        </member>
        <member name="M:Tool.ObjectExtension.DynamicAdd(System.String,System.Object,System.Boolean)">
            <summary>
            添加虚拟参数(备注：如果对象名存在则会在直接修改原对象名内的数据，type字段默认为true，为false时则不进行修改),注明：如果存在多线程添加同一个键值的情况，请自己使用锁解决
            </summary>
        </member>
        <member name="M:Tool.ObjectExtension.DynamicRemove">
            <summary>
            删除全部虚拟参数
            </summary>
        </member>
        <member name="M:Tool.ObjectExtension.DynamicRemove(System.String)">
            <summary>
            删除指定名称的虚拟参数（备注：如果键值不存在则不会删除任何键值，不抛出异常）
            </summary>
            <param name="key">简直名称</param>
        </member>
        <member name="M:Tool.ObjectExtension.Dynamickey(System.String)">
            <summary>
            获取指定键值的内容（备注：如果键值不存在则返回null）
            </summary>
            <param name="key">简直名称</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.ObjectExtension.Dynamickey``1(System.String)">
            <summary>
            获取指定键值的内容（备注：如果键值不存在则返回null）
            </summary>
            <param name="key">简直名称</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.ObjectExtension.DynamicObjectkey(System.String)">
            <summary>
            获取指定键值的内容（备注：如果键值不存在则返回null）
            </summary>
            <param name="key">简直名称</param>
            <returns>返回结果</returns>
        </member>
        <member name="P:Tool.ObjectExtension.DynamicKeys">
            <summary>
            获取虚拟键值下面的所有名称
            </summary>
        </member>
        <member name="P:Tool.ObjectExtension.DynamicValues">
            <summary>
            获取虚拟键值下面的所有内容
            </summary>
        </member>
        <member name="P:Tool.ObjectExtension.DynamicCount">
            <summary>
            获取当前包含的虚拟参数数量
            </summary>
        </member>
        <member name="M:Tool.ObjectExtension.IsPropertyExist(System.String)">
            <summary>
            判断当前虚拟对象下面是否有该参数
            </summary>
            <param name="propertyname">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToVar``1(System.Object)">
            <summary>
            实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能)
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="obj">object实体，参数，对象</param>
            <returns>返回被指定强转的类型。（异常：存在于强转无效）</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToTryVar``1(System.Object,``0)">
            <summary>
            实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能)（T:适用于转换失败，无法转换时系统返回的默认结果，用于容错）
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="obj">object实体，参数，对象</param>
            <param name="devalue">转换失败时使用默认值</param>
            <returns>返回被指定强转的类型。（异常：存在于强转无效）</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToVar(System.Object,System.Type,System.Boolean)">
            <summary>
            实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能)
            </summary>
            <param name="obj">object实体，参数，对象</param>
            <param name="type">指定类型的<see cref="T:System.Type"/></param>
            <param name="istype">表示强转失败时是否抛异常。返回null</param>
            <returns>返回被指定强转的类型。（异常：存在于强转无效）</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToVar(System.Object,System.String)">
            <summary>
            实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能)
            </summary>
            <param name="obj">object实体，参数，对象</param>
            <param name="type">强转类型,如果为空，默认强转成该对象的Type类型(必须要是当前程序集下的对象，才能转换)</param>
            <returns>返回被指定强转的类型。（异常：存在于强转无效）</returns>
        </member>
        <member name="T:Tool.ObjectExtension.ThreadStart">
            <summary>
            表示在 System.Threading.Thread 上执行的方法。
            </summary>
        </member>
        <member name="M:Tool.ObjectExtension.MapTo(Tool.ObjectExtension.ThreadStart)">
            <summary>
            实现单线程的访问 (示例：new ThreadStart(delegate (){}) )
            </summary>
            <param name="API"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.MapTo(System.Object,System.String,System.Object[])">
            <summary>
            实现单线程的访问
            </summary>
            <param name="obj_T">表示一个类对象实力</param>
            <param name="Methods">表示调用的对象的一个方法名(注意该方法必须是非静态方法)</param>
            <param name="parameter">该方法的参数,如果该方法没有参数可以为null，如有参数必须和方法参数一致</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.MapTo``1(System.String)">
            <summary>
            获取某个类下面的方法，方法对应的委托参数
            </summary>
            <param name="Methods">表示调用的对象的方法名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToXml(System.Object)">
            <summary>
            转换为Xml格式字符串
            </summary>
            <param name="obj">object</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToJson(System.Object)">
            <summary>
            转换为JSON格式字符串 
            </summary>
            <param name="obj">object</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToJsonWeb(System.Object)">
            <summary>
            转换为JSON格式字符串，针对Web场景定制Json格式
            </summary>
            <param name="obj">object</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToJsonWeb(System.Object,System.Action{System.Text.Json.JsonSerializerOptions})">
            <summary>
            转换为JSON格式字符串，针对Web场景定制Json格式
            </summary>
            <param name="obj">object</param>
            <param name="action">委托Json任务</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToJson(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            转换为JSON格式字符串 
            </summary>
            <param name="obj">object</param>
            <param name="jsonSerializerOptions">需要的序列化条件</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.EntityToJson(System.Object)">
            <summary>
            将实体转换为JSON格式字符串 （再三强调，要是实体，而且是单个实体。）
            </summary>
            <param name="obj">实体</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.EntityToJson(System.Object,System.Boolean)">
            <summary>
            将实体转换为JSON格式字符串 （再三强调，要是实体，而且是单个实体。）
            </summary>
            <param name="obj">实体</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.EntityToJson(System.Object,System.Boolean,System.String)">
            <summary>
            将实体转换为JSON格式字符串 （再三强调，要是实体，而且是单个实体。）
            </summary>
            <param name="obj">实体</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <param name="ToDateString">Date.ToString()的写法。</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToBase64String(System.Object)">
            <summary>
            将对象转换成Base64字符串（编码）
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToBytes(System.Object)">
            <summary>
             将一个object对象序列化，返回一个byte[]（重要说明：被序列化的对象必须实现 [Serializable] <see cref="T:System.Runtime.Serialization.ISerializable"/>特性的结构）
            </summary>
            <param name="obj">能序列化的对象</param>
            <returns>返回一个byte[]</returns>
        </member>
        <member name="M:Tool.ObjectExtension.ToBytes(System.Object,System.Type@)">
            <summary>
             将一个object对象序列化，返回一个byte[] （升级版，有效降低内存消耗）（重要说明：被序列化的对象必须实现 struct 标记）示例：public struct 类名称
            </summary>
            <param name="obj">能序列化的对象</param>
            <param name="type">转换为原来类的Type</param>
            <returns>返回一个byte[]</returns>
        </member>
        <member name="M:Tool.ObjectExtension.Read``1(System.IntPtr)">
            <summary>
            将指定的内存空间内容转换成类型
            </summary>
            <typeparam name="T">类型对象</typeparam>
            <param name="address">内存空间</param>
            <returns>返回类型对象</returns>
        </member>
        <member name="M:Tool.ObjectExtension.Read``1(System.Int32)">
            <summary>
            将指定的内存空间内容转换成类型
            </summary>
            <typeparam name="T">类型对象</typeparam>
            <param name="address">内存空间值</param>
            <returns>返回类型对象</returns>
        </member>
        <member name="M:Tool.ObjectExtension.GetIntPtr(System.Object)">
            <summary>
            获取当前对象的内存空间
            </summary>
            <param name="obj">对象</param>
            <returns>返回指针</returns>
        </member>
        <member name="M:Tool.ObjectExtension.GetIntPtrInt(System.Object)">
            <summary>
            获取当前对象的内存空间
            </summary>
            <param name="obj">对象</param>
            <returns>返回指针</returns>
        </member>
        <member name="M:Tool.ObjectExtension.CopyEntity(System.Object,System.Object,System.String[])">
            <summary>
            将对象拷贝，值类型拷贝，引用类型赋值。
            </summary>
            <param name="obj">对象</param>
            <param name="origobj">拷贝对象</param>
            <param name="keys">拷贝参数，空，为全拷贝 支持赋值语法 ?=? 注意不支持'空格'</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.Add(System.Object[],System.Object)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Object[]</param>
            <param name="txt1">新增的值</param>
            <returns>由于不能直接赋值，采取间接赋值方式</returns>
        </member>
        <member name="M:Tool.ObjectExtension.Add``1(System.Object,System.Object,System.Object)">
            <summary>
            给数组加新的值(适用于任何数组对象)
            </summary>
            <typeparam name="T">数组原类型</typeparam>
            <param name="obj">Object[]源数组</param>
            <param name="_obj">新数组（为空，但是必须大于原数组一个下标以上）</param>
            <param name="T_obj">加入的新值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.Contains(System.Object[],System.Object)">
            <summary>
            查找该Object数组中是否存在该值。
            </summary>
            <param name="txt">Object[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.ObjectExtension.Read``1(System.Object,System.Object,System.Int32,System.Int32)">
            <summary>
            重写封装的Copy方法 (读取原数组中指定位置的内容)
            </summary>
            <param name="sourceArray">源数组对象</param>
            <param name="destinationArray">新数组对象</param>
            <param name="sourceIndex">源数据开始读取的位置</param>
            <param name="length">从源数组取多少？(是指从读取位置开始往后读的数量)</param>
            <returns>返回当前新的数组中复制了多少个下标的值</returns>
        </member>
        <member name="M:Tool.ObjectExtension.Read``1(System.Object,System.Int32,System.Object,System.Int32,System.Int32)">
            <summary>
            重写封装的Copy方法 (读取原数组中指定位置的内容)
            </summary>
            <param name="sourceArray">源数组对象</param>
            <param name="sourceIndex">源数据开始读取的位置</param>
            <param name="destinationArray">新数组对象</param>
            <param name="destinationIndex">开始存储的位置</param>
            <param name="length">从源数组取多少？(是指从读取位置开始往后读的数量)</param>
            <returns>返回当前新的数组中复制了多少个下标的值</returns>
        </member>
        <member name="M:Tool.ObjectExtension.GetArrayIndex(System.Object[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="M:Tool.ObjectExtension.RunTask(System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.TaskCreationOptions,System.Threading.CancellationToken)">
            <summary>
            原 StartNew 方法的封装·支持对异步模型的线程创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.RunTask(System.Func{System.Threading.Tasks.ValueTask},System.Threading.Tasks.TaskCreationOptions,System.Threading.CancellationToken)">
            <summary>
            原 StartNew 方法的封装·支持对异步模型的线程创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.ObjectExtension.RunTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskCreationOptions,System.Threading.CancellationToken)">
            <summary>
            原 StartNew 方法的封装·支持对异步模型的线程创建
            </summary>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.ObjectExtension.RunTask``1(System.Func{System.Threading.Tasks.ValueTask{``0}},System.Threading.Tasks.TaskCreationOptions,System.Threading.CancellationToken)">
            <summary>
            原 StartNew 方法的封装·支持对异步模型的线程创建
            </summary>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.ObjectExtension.IsNewTask(System.Threading.Tasks.Task)">
            <summary>
            判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务
            </summary>
            <param name="task">需要完成的任务</param>
            <returns>返回与原线程不一样的继续线程</returns>
        </member>
        <member name="M:Tool.ObjectExtension.IsNewTask(System.Threading.Tasks.ValueTask)">
            <summary>
            判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务
            </summary>
            <param name="task">需要完成的任务</param>
            <returns>返回与原线程不一样的继续线程</returns>
        </member>
        <member name="M:Tool.ObjectExtension.IsNewTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务
            </summary>
            <param name="task">需要完成的任务</param>
            <returns>返回与原线程不一样的继续线程</returns>
        </member>
        <member name="M:Tool.ObjectExtension.IsNewTask``1(System.Threading.Tasks.ValueTask{``0})">
            <summary>
            判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务
            </summary>
            <param name="task">需要完成的任务</param>
            <returns>返回与原线程不一样的继续线程</returns>
        </member>
        <member name="T:Tool.ShortExtension">
            <summary>
            对Short进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.ShortExtension.ToBytes(System.Int16)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Short</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.ShortExtension.Ceiling(System.Int16,System.Decimal)">
            <summary>
            当前数除以一个整数，返回一个向上取整的倍数
            </summary>
            <param name="txt">int</param>
            <param name="txt1">除数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ShortExtension.Increment(System.Int16@)">
            <summary>
            原子方式+1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ShortExtension.Decrement(System.Int16@)">
            <summary>
            原子方式-1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.ShortExtension.Add(System.Int16[],System.Int16)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Short[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.ShortExtension.Contains(System.Int16[],System.Int16)">
            <summary>
            查找该Short数组中是否存在该值。
            </summary>
            <param name="txt">Short[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.ShortExtension.GetArrayIndex(System.Int16[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.StringExtension">
            <summary>
            对string类进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.StringExtension.SHA256(System.String)">
            <summary>
            将字符串进行SHA256加密
            </summary>
            <param name="sha256_txt">String</param>
            <returns>返回SHA256</returns>
        </member>
        <member name="M:Tool.StringExtension.SHA1(System.String)">
            <summary>
            将字符串进行SHA1加密
            </summary>
            <param name="sha_txt">String</param>
            <returns>返回SHA1</returns>
        </member>
        <member name="M:Tool.StringExtension.MD5Upper(System.String,System.Boolean)">
            <summary>
            获取加密的MD5，大写的（特意备注：这里是指将你输入的字符串加密成MD5后转为大写，有些傻子以为是先将字符串转大写后加密）
            </summary>
            <param name="md5_txt">String</param>
            <param name="IsMD5">表示加密为：32位或者16位（默认32位）</param>
            <returns>返回MD5</returns>
        </member>
        <member name="M:Tool.StringExtension.MD5Lower(System.String,System.Boolean)">
            <summary>
            获取加密的MD5，小写的（特意备注：这里是指将你输入的字符串加密成MD5后转为小写，有些傻子以为是先将字符串转小写后加密）
            </summary>
            <param name="md5_txt">String</param>
            <param name="IsMD5">表示加密为：32位或者16位（默认32位）</param>
            <returns>返回MD5</returns>
        </member>
        <member name="M:Tool.StringExtension.Split(System.String,System.String[])">
            <summary>
            返回的字符串数组包含此字符串中的子字符串（由指定字符串数组的元素分隔）。 参数指定是否返回空数组元素。
            </summary>
            <param name="txt">字符串</param>
            <param name="separator">指定字符串数组的元素分隔</param>
            <returns>返回一个数组</returns>
        </member>
        <member name="M:Tool.StringExtension.EqualsNotCase(System.String,System.String)">
            <summary>
            对吧字符串是否相同，注明：不区分大小写的。
            </summary>
            <param name="txt">字符串</param>
            <param name="txt1">对比字符串</param>
            <returns>返回bool类型</returns>
        </member>
        <member name="M:Tool.StringExtension.ToInt(System.String)">
            <summary>
            返回Int类型
            </summary>
            <param name="txt">String</param>
            <returns>返回Int类型</returns>
        </member>
        <member name="M:Tool.StringExtension.ToLong(System.String)">
            <summary>
            返回Int类型
            </summary>
            <param name="txt">String</param>
            <returns>返回Int类型</returns>
        </member>
        <member name="M:Tool.StringExtension.ToDateTime(System.String)">
            <summary>
            返回时间类型
            </summary>
            <param name="txt">String</param>
            <returns>返回时间类型</returns>
        </member>
        <member name="M:Tool.StringExtension.ToDecimal(System.String)">
            <summary>
            返回十进制数
            </summary>
            <param name="txt">String</param>
            <returns>返回十进制数</returns>
        </member>
        <member name="M:Tool.StringExtension.ToDouble(System.String)">
            <summary>
            返回双精度浮点数
            </summary>
            <param name="txt">String</param>
            <returns>返回双精度浮点数</returns>
        </member>
        <member name="M:Tool.StringExtension.ToBytes(System.String)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">String</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.StringExtension.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">String</param>
            <param name="encoding">指定格式</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.StringExtension.JsonObject(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            转换成<see cref="T:System.Object"/>对象
            </summary>
            <param name="txt">String</param>
            <param name="options">解析时用到的配置信息</param>
            <returns><see cref="T:System.Object"/>对象</returns>
            <exception cref="T:System.SystemException">该字符串不存在任何内容！</exception>
        </member>
        <member name="M:Tool.StringExtension.JsonDynamic(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            转换成虚构实体对象
            </summary>
            <param name="txt">String</param>
            <param name="options">解析时用到的配置信息</param>
            <returns>转换成虚构实体对象</returns>
        </member>
        <member name="M:Tool.StringExtension.JsonVar(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            一种获取 Json 格式数据的实现
            </summary>
            <param name="txt">Json 格式字符串</param>
            <param name="options">解析时用到的配置信息</param>
            <returns>转换成特殊结构对象，用于获取值</returns>
        </member>
        <member name="M:Tool.StringExtension.Json(System.String)">
            <summary>
            转换成<see cref="T:System.Collections.Generic.Dictionary`2"/>对象 （默认允许Json中包含注释）
            </summary>
            <param name="txt">String</param>
            <returns>转换成Dictionary对象</returns>
        </member>
        <member name="M:Tool.StringExtension.Json(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            转换成<see cref="T:System.Collections.Generic.Dictionary`2"/>对象
            </summary>
            <param name="txt">String</param>
            <param name="options">解析时用到的配置信息</param>
            <returns>转换成Dictionary对象</returns>
        </member>
        <member name="M:Tool.StringExtension.JsonList(System.String)">
            <summary>
            转换成 List{Dictionary{string, object}} 对象 （默认允许Json中包含注释）
            </summary>
            <param name="txt">String</param>
            <returns>转换成Dictionary对象</returns>
        </member>
        <member name="M:Tool.StringExtension.JsonList(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            转换成 List{Dictionary{string, object}} 对象
            </summary>
            <param name="txt">String</param>
            <param name="options">解析时用到的配置信息</param>
            <returns>转换成Dictionary对象</returns>
        </member>
        <member name="M:Tool.StringExtension.Json``1(System.String)">
            <summary>
            转换成实体类
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="txt">String</param>
            <returns>转换成实体类</returns>
        </member>
        <member name="M:Tool.StringExtension.Json``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            转换成实体类
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="txt">String</param>
            <param name="jsonSerializerOptions">需要的序列化条件</param>
            <returns>转换成实体类</returns>
        </member>
        <member name="M:Tool.StringExtension.JsonList``1(System.String)">
            <summary>
            转换成实体数组
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="txt">String</param>
            <returns>转换成实体数组</returns>
        </member>
        <member name="M:Tool.StringExtension.JsonList``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            转换成实体数组
            </summary>
            <typeparam name="T">转换的实体</typeparam>
            <param name="txt">String</param>
            <param name="jsonSerializerOptions">需要的序列化条件</param>
            <returns>转换成实体数组</returns>
        </member>
        <member name="M:Tool.StringExtension.Xml``1(System.String)">
            <summary>
            将Xml格式字符串转换为对象
            </summary>
            <param name="txt">要转类型XML字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:Tool.StringExtension.StringEncode(System.String)">
            <summary>
            使用指定的编码对象对 string 字符串进行编码。
            </summary>
            <param name="txt">string</param>
            <returns>返回编码结果</returns>
        </member>
        <member name="M:Tool.StringExtension.StringEncode(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码对象对 string 字符串进行编码。
            </summary>
            <param name="txt">string</param>
            <param name="encoding">指定编码格式</param>
            <returns>返回编码结果</returns>
        </member>
        <member name="M:Tool.StringExtension.StringDecode(System.String)">
            <summary>
            使用指定的编码对象对 string 字符串进行解码。
            </summary>
            <param name="txt">string</param>
            <returns>返回解码结果</returns>
        </member>
        <member name="M:Tool.StringExtension.StringDecode(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码对象对 string 字符串进行解码。
            </summary>
            <param name="txt"></param>
            <param name="encoding">指定编码格式</param>
            <returns>返回解码结果</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyContainsAny(System.String,System.String[])">
            <summary>
            对当前字符串进行脏字验证
            </summary>
            <param name="text">String</param>
            <param name="texts">自定义脏字数组</param>
            <returns>存在返回，true否则为false</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyContainsAny(System.String,System.String)">
            <summary>
            对当前字符串进行脏字验证
            </summary>
            <param name="text">String</param>
            <param name="dirty">自定义脏字字符串以“|”分割</param>
            <returns>存在返回，true否则为false</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyContainsAnys(System.String,System.String[])">
            <summary>
            对当前字符串进行脏字验证，返回存在的所有脏字，及下标
            </summary>
            <param name="text">String</param>
            <param name="texts">自定义脏字数组</param>
            <returns>返回存在的所有脏字，及下标</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyContainsAnys(System.String,System.String)">
            <summary>
            对当前字符串进行脏字验证，返回存在的所有脏字，及下标
            </summary>
            <param name="text">String</param>
            <param name="dirty">自定义脏字字符串以“|”分割</param>
            <returns>返回存在的所有脏字，及下标</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyDetection(System.String,System.String[],System.Char)">
            <summary>
            对当前字符串进行脏字检测，并净化
            </summary>
            <param name="text">String</param>
            <param name="texts">自定义脏字数组</param>
            <param name="symbol">将存在的脏字替换为？？？</param>
            <returns>返回被净化后字符串</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyDetection(System.String,System.String[])">
            <summary>
            对当前字符串进行脏字检测，并净化
            </summary>
            <param name="text">String</param>
            <param name="texts">自定义脏字数组</param>
            <returns>返回被净化后字符串</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyDetection(System.String,System.String)">
            <summary>
            对当前字符串进行脏字检测，并净化
            </summary>
            <param name="text">String</param>
            <param name="dirty">自定义脏字字符串以“|”分割</param>
            <returns>返回被净化后字符串</returns>
        </member>
        <member name="M:Tool.StringExtension.DirtyDetection(System.String,System.String,System.Char)">
            <summary>
            对当前字符串进行脏字检测，并净化
            </summary>
            <param name="text">String</param>
            <param name="dirty">自定义脏字字符串以“|”分割</param>
            <param name="symbol">将存在的脏字替换为？？？</param>
            <returns>返回被净化后字符串</returns>
        </member>
        <member name="F:Tool.StringExtension.sqlStr">
            <summary>
            默认包含的（防止注入类型）
            </summary>
        </member>
        <member name="M:Tool.StringExtension.SQLFilter(System.String)">
            <summary>
            过滤非法关键字（使用自带常量）
            </summary>
            <param name="keyword">带验证的SQL</param>
            <returns></returns>
        </member>
        <member name="M:Tool.StringExtension.SQLFilter(System.String,System.String)">
            <summary>
            过滤非法关键字，这个可以按照项目灵活配置
            </summary>
            <param name="keyword">带验证的SQL</param>
            <param name="sqlStr">验证的防注入类型字符串，以“|”区分</param>
            <returns></returns>
        </member>
        <member name="M:Tool.StringExtension.SQLFilter(System.String,System.String[])">
            <summary>
            过滤非法关键字，这个可以按照项目灵活配置
            </summary>
            <param name="keyword">带验证的SQL</param>
            <param name="sqlStr">验证的防注入类型（必须大写）</param>
            <returns></returns>
        </member>
        <member name="M:Tool.StringExtension.UnBase64String(System.String)">
            <summary>
            将对Base64字符串换成象转（解码）
            </summary>
            <param name="value">Base64字符串</param>
            <returns>返回一个源对象</returns>
        </member>
        <member name="M:Tool.StringExtension.ConvertHzToPz_Gb2312(System.String)">
            <summary>
            将字符串中的中文转成拼音
            </summary>
            <param name="value">字符串</param>
            <returns>返回完整的拼音</returns>
        </member>
        <member name="M:Tool.StringExtension.StrToPinyin(System.String)">
            <summary> 
            获得一个字符串的汉语拼音码 (首字母)
            </summary> 
            <param name="value">字符串</param> 
            <returns>汉语拼音码,该字符串只包含大写的英文字母</returns> 
        </member>
        <member name="M:Tool.StringExtension.IsNumber(System.String)">
            <summary>
            是不是数字
            </summary>
            <param name="strNumber">字符串</param>
            <returns>返回bool类型</returns>
        </member>
        <member name="M:Tool.StringExtension.ToInts(System.String[])">
            <summary>
            将String数组转成Int数组
            </summary>
            <param name="txt">String[]</param>
            <returns>注释：如出现无法转换的，这抛出异常</returns>
        </member>
        <member name="M:Tool.StringExtension.Change(System.String[],System.String,System.Int32)">
            <summary>
            修改当前数组的某个下标的内容
            </summary>
            <param name="txts">源数据</param>
            <param name="ChangeTxt">修改的内容</param>
            <param name="length">下标位置</param>
        </member>
        <member name="M:Tool.StringExtension.Add(System.String[],System.String[],System.String)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txts">string[]</param>
            <param name="_txts">新数组（为空，但是必须大于原数组一个下标以上）</param>
            <param name="txt">新增的值</param>
        </member>
        <member name="M:Tool.StringExtension.Contains(System.String[],System.String)">
            <summary>
            查找该string数组中是否存在该值。
            </summary>
            <param name="txt">string[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.StringExtension.GetArrayIndex(System.String[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="M:Tool.StringExtension.ToFileBytes(System.String)">
            <summary>
            将文件转换为byte数组（如果没有找到则返回零的数组）
            </summary>
            <param name="path">文件地址(绝对路径)</param>
            <returns>转换后的byte数组（如果没有找到则返回零的数组）</returns>
        </member>
        <member name="M:Tool.StringExtension.GetGuid(System.Boolean)">
            <summary>
            由连字符分隔的32位随机数
            </summary>
            <param name="type">返回两个结果，true是去掉分隔符的，false是未去掉的</param>
            <returns></returns>
        </member>
        <member name="M:Tool.StringExtension.GuidTo16String">
            <summary>  
            根据GUID获取16位的唯一字符串  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:Tool.StringExtension.GuidToLongID">
            <summary>  
            根据GUID获取19位的唯一数字序列  
            </summary>  
            <returns></returns>  
        </member>
        <member name="T:Tool.UintExtension">
            <summary>
            对uint进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.UintExtension.ToBytes(System.UInt32)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Uint</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.UintExtension.Ceiling(System.UInt32,System.Decimal)">
            <summary>
            当前数除以一个整数，返回一个向上取整的倍数
            </summary>
            <param name="txt">int</param>
            <param name="txt1">除数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UintExtension.Increment(System.UInt32@)">
            <summary>
            原子方式+1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UintExtension.Decrement(System.UInt32@)">
            <summary>
            原子方式-1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UintExtension.Add(System.UInt32[],System.UInt32)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Uint[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.UintExtension.Contains(System.UInt32[],System.UInt32)">
            <summary>
            查找该Uint数组中是否存在该值。
            </summary>
            <param name="txt">Uint[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.UintExtension.GetArrayIndex(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.UlongExtension">
            <summary>
            对ulong进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.UlongExtension.ToBytes(System.UInt64)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Ulong</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.UlongExtension.Ceiling(System.UInt64,System.Decimal)">
            <summary>
            当前数除以一个整数，返回一个向上取整的倍数
            </summary>
            <param name="txt">int</param>
            <param name="txt1">除数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UlongExtension.Increment(System.UInt64@)">
            <summary>
            原子方式+1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UlongExtension.Decrement(System.UInt64@)">
            <summary>
            原子方式-1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UlongExtension.Add(System.UInt64[],System.UInt64)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Ulong[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.UlongExtension.Contains(System.UInt64[],System.UInt64)">
            <summary>
            查找该Ulong数组中是否存在该值。
            </summary>
            <param name="txt">Ulong[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.UlongExtension.GetArrayIndex(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.UshortExtension">
            <summary>
            对ushort进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.UshortExtension.ToBytes(System.UInt16)">
            <summary>
            返回二进制流
            </summary>
            <param name="txt">Ushort</param>
            <returns>返回二进制流</returns>
        </member>
        <member name="M:Tool.UshortExtension.Ceiling(System.UInt16,System.Decimal)">
            <summary>
            当前数除以一个整数，返回一个向上取整的倍数
            </summary>
            <param name="txt">int</param>
            <param name="txt1">除数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UshortExtension.Increment(System.UInt16@)">
            <summary>
            原子方式+1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UshortExtension.Decrement(System.UInt16@)">
            <summary>
            原子方式-1
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.UshortExtension.Add(System.UInt16[],System.UInt16)">
            <summary>
            给数组加新的值
            </summary>
            <param name="txt">Ushort[]</param>
            <param name="txt1">新增的值</param>
        </member>
        <member name="M:Tool.UshortExtension.Contains(System.UInt16[],System.UInt16)">
            <summary>
            查找该Ushort数组中是否存在该值。
            </summary>
            <param name="txt">Ushort[]</param>
            <param name="txt1">查找的字符</param>
            <returns>方法存在或不存在</returns>
        </member>
        <member name="M:Tool.UshortExtension.GetArrayIndex(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="obj">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.DispatcherCore">
            <summary>
            创建通用调用函数模型
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.AddMake(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            给无形参的方法指定参数类型
            </summary>
            <param name="method">方法</param>
            <param name="typeArguments">指定形参</param>
            <returns>返回具有形参的方法</returns>
            <exception cref="T:System.ArgumentNullException">值为空</exception>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.ObjectAsync``2(System.Threading.Tasks.Task{``0})">
            <summary>
            有用转换
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.ObjectValueAsync``2(System.Threading.Tasks.ValueTask{``0})">
            <summary>
            有用转换
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.GetExecutor``1(System.Reflection.MethodInfo,System.Type)">
            <summary>
            创建不同的委托
            </summary>
            <param name="methodInfo">方法对象</param>
            <param name="classtype">调用的返回类</param>
            <typeparam name="TResult">调用返回类型</typeparam>
            <returns>调用委托</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.GetExecutor``2(System.Reflection.MethodInfo)">
            <summary>
            创建不同的委托
            </summary>
            <typeparam name="E">调用函数使用类</typeparam>
            <typeparam name="TResult">调用返回类型</typeparam>
            <param name="methodInfo">方法对象</param>
            <returns>调用委托</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.GetExecutor(System.Reflection.MethodInfo)">
            <summary>
            创建不同的委托
            </summary>
            <param name="methodInfo"></param>
            <returns>返回委托类型</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.GetExecutor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            创建不同的委托
            </summary>
            <param name="methodInfo">方法对象</param>
            <param name="classtype">调用的返回类</param>
            <returns>调用委托</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.GetExecutor``2(System.Reflection.MethodInfo,System.Type,System.Type[])">
            <summary>
            创建不同的委托（泛型方法版）
            </summary>
            <typeparam name="E">调用函数使用类</typeparam>
            <typeparam name="TResult">调用返回类型</typeparam>
            <param name="methodInfo">方法对象</param>
            <param name="classtype">调用的返回类</param>
            <param name="typeArguments">未泛型方法提供的形参</param>
            <returns>调用委托</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.GetExecutor``2(System.Reflection.MethodInfo,System.Type)">
            <summary>
            创建不同的委托
            </summary>
            <typeparam name="E">调用函数使用类</typeparam>
            <typeparam name="TResult">调用返回类型</typeparam>
            <param name="methodInfo">方法对象</param>
            <param name="classtype">调用的返回类</param>
            <returns>调用委托</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.GetParameter(System.Collections.Generic.List{System.Linq.Expressions.Expression}@,System.Linq.Expressions.ParameterExpression,System.Reflection.ParameterInfo[])">
            <summary>
            用于特殊的表达式树式
            </summary>
            <param name="expressions">返回表达参数结果</param>
            <param name="parametersParameter">特定结构</param>
            <param name="paramInfos">参数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.MethodIsTask(System.Type,System.Boolean@)">
            <summary>
            判断一个类型是是不是 <see cref="T:System.Threading.Tasks.Task"/> or <see cref="T:System.Threading.Tasks.Task`1"/> or <see cref="T:System.Threading.Tasks.ValueTask"/> or <see cref="T:System.Threading.Tasks.ValueTask`1"/>
            </summary>
            <param name="ReturnType">类型</param>
            <param name="isvoid">有无返回值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.MethodIsValueTask(System.Type)">
            <summary>
            判断是否是 <see cref="T:System.Threading.Tasks.ValueTask"/> or <see cref="T:System.Threading.Tasks.ValueTask`1"/>
            </summary>
            <param name="ReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.IsAssignableFrom``1(System.Type)">
            <summary>
            判断是否存在继承关系 -> T=ReturnType
            </summary>
            <typeparam name="T">原始信息</typeparam>
            <param name="ReturnType">判断类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.IsTaskTuple(System.Type)">
            <summary>
            是否是含返回值异步类型
            </summary>
            <param name="ReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.IsTask(System.Type)">
            <summary>
            判断是否是无返回结果的异步类型
            </summary>
            <param name="ReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.IsTask``1(System.Reflection.MethodInfo)">
            <summary>
            判断有返回值的方法
            </summary>
            <typeparam name="T">返回值是否与他有关</typeparam>
            <param name="method">方法信息</param>
            <returns>是或否</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.IsVoid(System.Type)">
            <summary>
            是否是无返回值的方法
            </summary>
            <param name="ReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.AsAction``2(Tool.Utils.ActionDelegate.IActionDispatcher)">
            <summary>
            动态获取通用模型原型
            </summary>
            <typeparam name="T">类泛型</typeparam>
            <typeparam name="TResult">返回值泛型</typeparam>
            <returns>原始模型</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.DispatcherCore.AsAction``2(Tool.Utils.ActionDelegate.IActionDispatcher{``0})">
            <summary>
            动态获取通用模型原型
            </summary>
            <typeparam name="T">类泛型</typeparam>
            <typeparam name="TResult">返回值泛型</typeparam>
            <returns>原始模型</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.IActionDispatcher">
            <summary>
            可实现的接口，方便用于高度自实现模块
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.IsVoid">
            <summary>
            是否有返回值，默认没有
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.IsTask">
            <summary>
            是否是 异步函数？
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.ReturnType">
            <summary>
            调用接口的返回值
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.Method">
            <summary>
            当前方法的执行信息
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.Parameters">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.IsStatic">
            <summary>
            是否是静态方法
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.IActionDispatcher.MethodEnum">
            <summary>
            方法的公开类型
            </summary>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.IActionDispatcher`1">
            <summary>
            可实现的接口，方便用于高度自实现模块
            </summary>
            <typeparam name="T">类泛型</typeparam>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.IActionDispatcher`1.VoidExecute(`0,System.Object[])">
            <summary>
            调用方法无返回值(注明：如调用的是静态方法，类参数可为 null)
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.IActionDispatcher`1.VoidExecuteAsync(`0,System.Object[])">
            <summary>
            调用方法无返回值(注明：如调用的是静态方法，类参数可为 null)
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ActionExecutor`2">
            <summary>
            有返回值的委托
            </summary>
            <typeparam name="E"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="callclass"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.VoidActionExecutor`1">
            <summary>
            无返回值的委托
            </summary>
            <typeparam name="E"></typeparam>
            <param name="callclass"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.TaskActionExecutor`2">
            <summary>
            有返回值的异步委托
            </summary>
            <typeparam name="E"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="callclass"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.VoidTaskActionExecutor`1">
            <summary>
            无返回值的异步委托
            </summary>
            <typeparam name="E"></typeparam>
            <param name="callclass"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ActionDispatcher">
            <summary>
            根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(object)
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始化对象
            </summary>
            <param name="methodInfo">方法对象</param>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ActionDispatcher`1">
            <summary>
            根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(object)
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`1.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始化对象
            </summary>
            <param name="methodInfo">方法对象</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`1.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            初始化对象
            </summary>
            <param name="methodInfo">方法对象</param>
            <param name="classtype">调用类类型（明确调用类）</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`1.Invoke``1(`0,System.Object[])">
            <summary>
            可不区分是否有返回值的调用方法,返回泛型值
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
            <returns>返回方法的返回值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`1.InvokeAsync``1(`0,System.Object[])">
            <summary>
            可不区分是否有返回值的调用方法,返回泛型值
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
            <returns>返回方法的返回值</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ActionDispatcher`2">
            <summary>
            根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(TResult)
            </summary>
            <typeparam name="T">调用类</typeparam>
            <typeparam name="TResult">返回值</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.IsVoid">
            <summary>
            是否无返回值
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.IsTask">
            <summary>
            是否是 异步函数？
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.ReturnType">
            <summary>
            调用接口的返回值
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.Method">
            <summary>
            当前方法的执行信息
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.Parameters">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.IsStatic">
            <summary>
            是否是静态方法
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionDispatcher`2.MethodEnum">
            <summary>
            方法的公开类型
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始化对象
            </summary>
            <param name="methodInfo">方法对象</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            初始化对象
            </summary>
            <param name="methodInfo">方法对象</param>
            <param name="classtype">调用类类型（明确调用类）</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.Invoke(`0,System.Object[])">
            <summary>
            可不区分是否有返回值的调用方法
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
            <returns>返回方法的返回值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.InvokeAsync(`0,System.Object[])">
            <summary>
            可不区分是否有返回值的调用方法
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
            <returns>返回方法的返回值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.Execute(`0,System.Object[])">
            <summary>
            调用方法有返回值(注明：如调用的是静态方法，类参数可为 null)
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
            <returns>返回方法的返回值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.VoidExecute(`0,System.Object[])">
            <summary>
            调用方法无返回值(注明：如调用的是静态方法，类参数可为 null)
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.ExecuteAsync(`0,System.Object[])">
            <summary>
            调用方法有返回值(注明：如调用的是静态方法，类参数可为 null)
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
            <returns>返回方法的返回值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.VoidExecuteAsync(`0,System.Object[])">
            <summary>
            调用方法无返回值(注明：如调用的是静态方法，类参数可为 null)
            </summary>
            <param name="CallClass">调用方法的类</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionDispatcher`2.ToString">
            <summary>
            返回方法信息缩写
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ActionHelper`1">
            <summary>
            根据 指定类，获取该类下面指定的 <see cref="T:Tool.Utils.ActionDelegate.ActionDispatcher`1"/> 集合，
            <see cref="T:Tool.Utils.ActionDelegate.ActionDispatcher`1"/>类的扩展帮助类
            </summary>
            <typeparam name="T">类对象</typeparam>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionHelper`1.MethodFlag">
            <summary>
            当前类查询的方法条件
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionHelper`1.ActionMethods">
            <summary>
            当前类下面的所有方法
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionHelper`1.Count">
            <summary>
            可访问的方法数量
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionHelper`1.Item(System.Int32)">
            <summary>
            根据下标获取指定方法
            </summary>
            <param name="i">下标</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionHelper`1.#ctor(Tool.Utils.ActionDelegate.MethodFlags)">
            <summary>
            获取指定类的方法
            </summary>
            <param name="methodFlags">根据查找类型，获得相应方法</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionHelper`1.#ctor(System.Type,Tool.Utils.ActionDelegate.MethodFlags)">
            <summary>
            获取指定类的方法
            </summary>
            <param name="type">指定获取类的<see cref="T:System.Type"/></param>
            <param name="methodFlags">根据查找类型，获得相应方法</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionHelper`1.GetActionMethodHelper(Tool.Utils.ActionDelegate.MethodFlags)">
            <summary>
            获取指定类的方法 等同于NEW
            </summary>
            <param name="methodFlags">根据查找类型，获得相应方法</param>
            <returns>返回要获取的类下面的方法</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionHelper`1.GetActionMethodHelper(System.Type,Tool.Utils.ActionDelegate.MethodFlags)">
            <summary>
            获取指定类的方法 等同于NEW
            </summary>
            <param name="type">指定获取类的<see cref="T:System.Type"/></param>
            <param name="methodFlags">根据查找类型，获得相应方法</param>
            <returns>返回要获取的类下面的方法</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionHelper`1.GetName(System.String)">
            <summary>
            根据方法名获取方法
            </summary>
            <param name="name">方法名称</param>
            <returns>返回匹配到的方法</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionHelper`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionHelper`1.ToString">
            <summary>
            返回方法信息缩写
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ActionMethod`1">
            <summary>
            调用方法信息
            </summary>
            <typeparam name="T">类对象</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.Action">
            <summary>
            方法委托
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.Parameters">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.IsStatic">
            <summary>
            是否是静态方法
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.IsBase">
            <summary>
            是不是继承类方法
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.IsTask">
            <summary>
            是否是 异步函数？
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.IsVoid">
            <summary>
            是否无返回值
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ActionMethod`1.MethodEnum">
            <summary>
            方法的公开类型
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionMethod`1.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始化
            </summary>
            <param name="methodInfo">方法</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionMethod`1.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            初始化
            </summary>
            <param name="methodInfo">方法</param>
            <param name="ClassType">类的<see cref="T:System.Type"/></param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ActionMethod`1.ToString">
            <summary>
            返回方法信息缩写
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.NewClass`1">
            <summary>
            定义构造函数
            </summary>
            <typeparam name="E">创建的类</typeparam>
            <param name="parameters">包含的参数</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ClassDispatcher">
            <summary>
            根据 ConstructorInfo 对象，创建一个委托，实现类调用，提高性能，支持各种返回值
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            根据构造函数，创建对象委托
            </summary>
            <param name="constructor">构造函数对象</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher.#ctor(System.Type)">
            <summary>
            根据构造函数，创建对象委托
            </summary>
            <param name="classtype">对象类型</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher.Invoke``1(System.Object[])">
            <summary>
            创建 New 对象
            </summary>
            <param name="parameters">参数</param>
            <returns>返回 New 新对象</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ClassDispatcher`1">
            <summary>
            根据 ConstructorInfo 对象，创建一个委托，实现类调用，提高性能，支持各种返回值
            </summary>
            <typeparam name="T">返回任何类型</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ClassDispatcher`1.Type">
            <summary>
            实例化对象类型
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ClassDispatcher`1.Parameters">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher`1.#ctor">
            <summary>
            根据构造函数，创建对象委托
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher`1.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            根据构造函数，创建对象委托
            </summary>
            <param name="constructor">构造函数对象</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher`1.#ctor(System.Type)">
            <summary>
            根据构造函数，创建对象委托
            </summary>
            <param name="classtype">对象类型</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher`1.Invoke(System.Object[])">
            <summary>
            创建 New 对象
            </summary>
            <param name="parameters">参数</param>
            <returns>返回 New 新对象</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassDispatcher`1.GetClass(System.Reflection.ConstructorInfo)">
            <summary>
            通过构造器，直接获取相关构造委托
            </summary>
            <param name="constructor">构造器</param>
            <returns>构造委托</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ClassField">
            <summary>
            表示 获取 的范围
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.ClassField.All">
            <summary>
            读写
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.ClassField.Get">
            <summary>
            读
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.ClassField.Set">
            <summary>
            写
            </summary>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ClassFieldDispatcher">
            <summary>
            类中字段赋值，创建一个委托，实现类调用，提高性能 (赋值/取值)
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ClassFieldDispatcher.Type">
            <summary>
            实例化对象类型
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ClassFieldDispatcher.Parameters">
            <summary>
            类成员
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.ClassFieldDispatcher.Field">
            <summary>
            覆盖功能
            </summary>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ClassFieldDispatcher.SetClassField">
            <summary>
            定义类成员赋值函数
            </summary>
            <param name="callclass"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.ClassFieldDispatcher.GetClassField">
            <summary>
            定义类成员取值函数
            </summary>
            <param name="callclass"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassFieldDispatcher.#ctor(System.Type,Tool.Utils.ActionDelegate.ClassField)">
            <summary>
            根据类，创建对象委托
            </summary>
            <param name="classtype">类对象类型</param>
            <param name="classField">默认读取所有行为</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassFieldDispatcher.#ctor(System.Type,Tool.Utils.ActionDelegate.ClassField,System.Reflection.PropertyInfo[])">
            <summary>
            根据类，创建对象委托
            </summary>
            <param name="classtype">类对象类型</param>
            <param name="classField">默认读取所有行为</param>
            <param name="properties">类的指定参数</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassFieldDispatcher.Set(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            向类传入修改集合
            </summary>
            <param name="_class">类对象</param>
            <param name="parameters">值集合(字典如标记忽略大小写赋值，就能实现特定行为)</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassFieldDispatcher.Get(System.Object)">
            <summary>
            从类中获取所有可读值
            </summary>
            <param name="_class">类对象</param>
            <returns>返回值集合</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassFieldDispatcher.SetClassFields(System.Type,System.Reflection.PropertyInfo[]@)">
            <summary>
            通过构造器，直接获取相关赋值委托
            </summary>
            <param name="classtype">类</param>
            <param name="propertyInfos">类参数</param>
            <returns>赋值委托或无法委托因为都是只读</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.ClassFieldDispatcher.GetClassFields(System.Type,System.Reflection.PropertyInfo[]@)">
            <summary>
            通过构造器，直接获取相关取值委托
            </summary>
            <param name="classtype">类</param>
            <param name="propertyInfos">类参数</param>
            <returns>取值委托或无法委托因为不可读</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.MethodFlags">
            <summary>
            方法查询的定义
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.MethodFlags.Default">
            <summary>
            不指定绑定标志。（默认获取全部）
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.MethodFlags.Static">
            <summary>
            静态方法
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.MethodFlags.Base">
            <summary>
            是否包含父类
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.MethodFlags.Public">
            <summary>
            公开方法
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.MethodFlags.Private">
            <summary>
            私有方法
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.MethodFlags.Protected">
            <summary>
            继承方法（受保护）
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.MethodFlags.Internal">
            <summary>
            当前程序集方法（内部）
            </summary>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.Parameter">
            <summary>
            获取指定类下面的所有方法的成员，低级封装
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.Parameter.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            初始化，并赋值
            </summary>
            <param name="parameter">原对象模型</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.Parameter.#ctor(Tool.Utils.ActionDelegate.Parameter)">
            <summary>
            复制元数据到新的对象
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.GetParameter">
            <summary>
            参数对象原型
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.Name">
            <summary>
            变量名称
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.Type">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.SpaceType">
            <summary>
            变量类型的命名空间
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.ParameterType">
            <summary>
            变量类型的<see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.DefaultValue">
            <summary>
            参数默认值
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.IsDBNull">
            <summary>
            默认值是不是 <see cref="T:System.DBNull"/> 类型
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.IsType">
            <summary>
            变量类型是不是：（string，short，int, long, byte, bool, char, decimal, double, float, object, ushort, uint, ulong, DateTime 类型可以为加?）时为 true
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Parameter.ParameterObj">
            <summary>
            值类型初始值
            </summary>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.TypeInvoke">
            <summary>
            用于对指定的类的方法进行调用，中级封装
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.ToString">
            <summary>
            获取当前被实例化的类的，名称包含命名空间
            </summary>
            <returns>返回类的名称包含命名空间</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetType">
            <summary>
            获取当前被实例化的类的Type
            </summary>
            <returns>返回Type</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetObj">
            <summary>
            获取当前被实例化的类
            </summary>
            <returns>返回实例化的类</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.String)">
            <summary>
            初始化，并赋值
            </summary>
            <param name="type">(访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll  中，则提供由命名空间限定的类型名称就足够了。</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.String,System.Object[])">
            <summary>
            初始化，并赋值
            </summary>
            <param name="type">(访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll  中，则提供由命名空间限定的类型名称就足够了。</param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.String,System.String)">
            <summary>
            加载指定路径下的dll中的类对象（无参构造）
            </summary>
            <param name="absolutepath">dll的绝对路径</param>
            <param name="type">访问程序集下面指定的类路径</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.String,System.String,System.Object[])">
            <summary>
            加载指定路径下的dll中的类对象（有参构造）
            </summary>
            <param name="absolutepath">dll的绝对路径</param>
            <param name="type">访问程序集下面指定的类路径</param>
            <param name="args"></param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.String,System.Object)">
            <summary>
            初始化，并赋值
            </summary>
            <param name="type">(访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll  中，则提供由命名空间限定的类型名称就足够了。</param>
            <param name="args">当前实例化的对象。</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.Type)">
            <summary>
            初始化，并赋值
            </summary>
            <param name="type">表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.Object)">
            <summary>
            初始化，并赋值
            </summary>
            <param name="obj">必须是对象</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.Type,System.Object[])">
            <summary>
            初始化，并赋值
            </summary>
            <param name="type">表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.#ctor(System.Type,System.Object)">
            <summary>
            初始化，并赋值
            </summary>
            <param name="type">表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</param>
            <param name="args">当前实例化的对象。</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetMethodInfo``1(System.String)">
            <summary>
            获取类下面的可调用方法
            </summary>
            <typeparam name="T">类</typeparam>
            <param name="MethodName">方法名</param>
            <returns>返回<see cref="T:System.Reflection.MethodInfo"/>对象</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetMethodInfo(System.Type,System.String,System.Boolean)">
            <summary>
            获取类下面的可调用方法
            </summary>
            <param name="type">类Type</param>
            <param name="MethodName">方法名</param>
            <param name="only">获取父类的吗？默认包含</param>
            <returns>返回<see cref="T:System.Reflection.MethodInfo"/>对象</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.Invoke(System.String)">
            <summary>
            调起该方法(“包含非公开”、“包含实例成员”和“包含公开”)
            </summary>
            <param name="name">方法名(注意该方法必须是非静态方法)</param>
            <returns>返回该方法执行后的结果</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.Invoke(System.String,System.Object[])">
            <summary>
            调起该方法(“包含非公开”、“包含实例成员”和“包含公开”)
            </summary>
            <param name="name">方法名(注意该方法必须是非静态方法)</param>
            <param name="parameters">该方法的指定参数</param>
            <returns>返回该方法执行后的结果</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.IsMethod(System.String,System.Boolean)">
            <summary>
            判断该方法是否存在 (“包含非公开”、“包含实例成员”和“包含公开”)
            </summary>
            <param name="name">方法名(注意该方法必须是非静态方法)</param>
            <param name="only">获取父类的吗？默认包含</param>
            <returns>返回是否存在</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetMethod(System.String,System.Boolean)">
            <summary>
            获取该方法类型(“包含非公开”、“包含实例成员”和“包含公开”)
            </summary>
            <param name="name">方法名(注意该方法必须是非静态方法)</param>
            <param name="only">获取父类的吗？默认包含</param>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetMethod(System.Reflection.MethodInfo)">
            <summary>
            获取该方法类型(“包含非公开”、“包含实例成员”和“包含公开”)
            </summary>
            <param name="method">对象</param>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetMethods(System.Boolean)">
            <summary>
            获取该类下的所有方法(“包含非公开”、“包含实例成员”和“包含公开”)
            </summary>
            <param name="only">获取父类的吗？默认包含</param>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.getType(System.Reflection.MemberTypes)">
            <summary>
            获取它的类型
            </summary>
            <param name="types">类型</param>
            <returns>返回类型名称</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetParameter(System.String)">
            <summary>
            获取该方法需要的参数
            </summary>
            <param name="name">方法名(注意该方法必须是非静态方法)</param>
            <returns>返回所有的参数</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetParameter(System.Reflection.MethodInfo)">
            <summary>
            获取该方法需要的参数
            </summary>
            <param name="method">对象</param>
            <returns>返回所有的参数</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetParameter(System.Reflection.ParameterInfo[])">
            <summary>
            获取该方法需要的参数
            </summary>
            <param name="member">对象</param>
            <returns>返回所有的参数</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetProperty(System.String)">
            <summary>
            获取该类指定的变量的值。
            </summary>
            <param name="name">变量名</param>
            <returns>返回该方法的值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.SetProperty(System.String,System.Object)">
            <summary>
            对该类指定的变量赋值。
            </summary>
            <param name="name">变量名</param>
            <param name="parameter">值</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetAttribute``1(System.String[]@,System.Boolean)">
            <summary>
            获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="only">获取父类的吗？默认包含</param>
            <param name="Methods">返回名称</param>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetAttribute``1(System.String[]@,System.Reflection.BindingFlags)">
            <summary>
            获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="bindingFlags">自定义返回内容</param>
            <param name="Methods">返回名称</param>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetAttribute``1(System.Reflection.BindingFlags)">
            <summary>
            获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="bindingFlags">自定义返回内容</param>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetAttributeParameterInfo``1">
            <summary>
            获取该类以及下面的所有类型（字段）
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypeInvoke.GetAttributeParameterInfo``1(System.Reflection.BindingFlags)">
            <summary>
            获取该类以及下面的所有类型（字段）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="bindingFlags">自定义返回内容</param>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.Method">
            <summary>
            获取指定类下面的所有方法，低级封装
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.Method.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            初始化，并赋值
            </summary>
            <param name="ReflectedType"></param>
            <param name="Name"></param>
            <param name="ReturnType"></param>
            <param name="TypeName"></param>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Method.ReflectedType">
            <summary>
            所在的类名称
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Method.Name">
            <summary>
            方法的名称
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Method.TypeName">
            <summary>
            名称：类型
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Method.ReturnTypeName">
            <summary>
            方法的返回类型字符串
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.Method.ReturnType">
            <summary>
            方法的返回类型
            </summary>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.TypePropertyDescriptor">
            <summary>
            引用对象属性构造器
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.TypePropertyDescriptor.ClassType">
            <summary>
            数据源Type
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypePropertyDescriptor.#ctor(System.Type)">
            <summary>
            初始化属性构造器
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypePropertyDescriptor.TryProperty(System.String,Tool.Utils.ActionDelegate.PropertyDescriptor@)">
            <summary>
            获取指定<see cref="T:Tool.Utils.ActionDelegate.PropertyDescriptor"/>变量
            </summary>
            <param name="name">变量名称</param>
            <param name="property">对象财产托管调度器</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypePropertyDescriptor.TryField(System.String,Tool.Utils.ActionDelegate.PropertyDescriptor@)">
            <summary>
            获取指定<see cref="T:Tool.Utils.ActionDelegate.PropertyDescriptor"/>变量
            </summary>
            <param name="name">变量名称</param>
            <param name="property">对象财产托管调度器</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypePropertyDescriptor.GetProperty(System.Object,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以修改</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypePropertyDescriptor.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypePropertyDescriptor.GetField(System.Object,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以获取</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.TypePropertyDescriptor.SetField(System.Object,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.PropertyEnum">
            <summary>
            相关类型枚举描述
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.PropertyEnum.Property">
            <summary>
            <see cref="T:System.Reflection.PropertyInfo"/> 类属性字段
            </summary>
        </member>
        <member name="F:Tool.Utils.ActionDelegate.PropertyEnum.Field">
            <summary>
            <see cref="T:System.Reflection.FieldInfo"/> 类字段
            </summary>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.PropertyDescriptor">
            <summary>
            对象财产托管调度器
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.PropertyDescriptor.SetClassProperty">
            <summary>
            定义类成员赋值函数
            </summary>
            <param name="callclass"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ActionDelegate.PropertyDescriptor.GetClassProperty">
            <summary>
            定义类成员取值函数
            </summary>
            <param name="callclass"></param>
            <returns></returns>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.PropertyDescriptor.Member">
            <summary>
            类信息基类<see cref="T:System.Reflection.PropertyInfo"/>或<see cref="T:System.Reflection.FieldInfo"/>
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.PropertyDescriptor.TypeEnum">
            <summary>
            财产描述
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.PropertyDescriptor.CanWrite">
            <summary>
            是否可写
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.PropertyDescriptor.CanRead">
            <summary>
            是否可读
            </summary>
        </member>
        <member name="P:Tool.Utils.ActionDelegate.PropertyDescriptor.IsStatic">
            <summary>
            是否是静态变量
            </summary>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.PropertyDescriptor.#ctor(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            尝试获取可用的财产
            </summary>
            <param name="classtype">对象信息</param>
            <param name="property">财产</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.PropertyDescriptor.#ctor(System.Type,System.Reflection.FieldInfo)">
            <summary>
            尝试获取可用的财产
            </summary>
            <param name="classtype">对象信息</param>
            <param name="fieldInfo">财产</param>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.PropertyDescriptor.GetValue(System.Object)">
            <summary>
            获取指定变量值
            </summary>
            <param name="obj">对象源</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.ActionDelegate.PropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            修改指定变量值
            </summary>
            <param name="obj">对象源</param>
            <param name="value">修改的值</param>
        </member>
        <member name="T:Tool.Utils.AppSettings">
            <summary>
            获取配置文件数据 (允许修改原文件异步队列式更新)
            </summary>
        </member>
        <member name="F:Tool.Utils.AppSettings.FileName">
            <summary>
            主配置文件名
            </summary>
        </member>
        <member name="F:Tool.Utils.AppSettings.FileNameDevelopment">
            <summary>
            调试配置文件名
            </summary>
        </member>
        <member name="P:Tool.Utils.AppSettings.Configuration">
            <summary>
            项目配置文件获取对象
            </summary>
        </member>
        <member name="P:Tool.Utils.AppSettings.CurrentDirectory">
            <summary>
            获取当前配置文件的路径
            </summary>
        </member>
        <member name="M:Tool.Utils.AppSettings.#cctor">
            <summary>
            自动注入
            </summary>
        </member>
        <member name="M:Tool.Utils.AppSettings.AddJsonFile(System.String)">
            <summary>
            根据你提供的地址获取配置文件信息
            </summary>
            <param name="filePath">配置文件路径</param>
            <returns>返回指定对象</returns>
        </member>
        <member name="M:Tool.Utils.AppSettings.Get(System.String,System.Boolean)">
            <summary>
            获取appSettings的value
            </summary>
            <param name="key">名称</param>
            <param name="throwOnError">true 表示在找不到该键值时引发异常；false 则表示返回 null。</param>
            <returns>返回值，如果键值名称不存在则返回 <seealso cref="T:System.Nullable"/> </returns>
        </member>
        <member name="M:Tool.Utils.AppSettings.GetInt(System.String,System.Boolean)">
            <summary>
            获取appSettings的value
            </summary>
            <param name="key">名称</param>
            <param name="throwOnError">true 表示在找不到该键值时引发异常；false 则表示返回 null。</param>
            <returns>返回值，如果键值名称不存在则返回0</returns>
        </member>
        <member name="P:Tool.Utils.AppSettings.Item(System.String)">
            <summary>
            获取key值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.AppSettings.GetSection(System.String)">
            <summary>
            获取具有指定键的配置子节。
            </summary>
            <param name="key">配置部分的键。</param>
            <returns>这个 Microsoft.Extensions.Configuration.IConfigurationSection</returns>
        </member>
        <member name="M:Tool.Utils.AppSettings.GetChildren">
            <summary>
            获取直接子代配置子节。
            </summary>
            <returns>配置子部分。</returns>
        </member>
        <member name="M:Tool.Utils.AppSettings.GetReloadToken">
            <summary>
            返回Microsoft.Extensions.Primitives.IChangeToken，可用于观察重新加载此配置时。
            </summary>
            <returns>一个Microsoft.Extensions.Primitives.IChangeToken。</returns>
        </member>
        <member name="E:Tool.Utils.AppSettings.SetEvent">
            <summary>
            注册修改 IConfiguration 值的事件 （将取消默认实现的同步修改文件）
            </summary>
        </member>
        <member name="T:Tool.Utils.DataHelper">
            <summary>
            数据集帮助类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.DataHelper.ConvertDataTableToObjects``1(System.Data.DataTable)">
            <summary>
            将<see cref="T:System.Data.DataTable"/>转换成实体类对象数组<see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="dt"><see cref="T:System.Data.DataTable"/></param>
            <returns>返回实体类对象数组</returns>
        </member>
        <member name="M:Tool.Utils.DataHelper.ConvertRowToObject``1(System.Data.DataRow)">
            <summary>
            将<see cref="T:System.Data.DataRow"/>转换成实体类对象
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="row"><see cref="T:System.Data.DataRow"/></param>
            <returns>返回实体类对象</returns>
        </member>
        <member name="M:Tool.Utils.DataHelper.ConvertRowToObject(System.Type,System.Data.DataRow)">
            <summary>
            将<see cref="T:System.Data.DataRow"/>转换成实体类对象
            </summary>
            <param name="objType">实体类</param>
            <param name="row"><see cref="T:System.Data.DataRow"/></param>
            <returns>返回实体类对象</returns>
        </member>
        <member name="M:Tool.Utils.DataHelper.DistillCommandParameter(System.String,System.String)">
            <summary>
            提取命令参数
            </summary>
            <param name="sqlStatement"></param>
            <param name="paraPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.DataHelper.DoDistill(System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="sqlStatement"></param>
            <param name="paraList"></param>
            <param name="paraPrefix"></param>
        </member>
        <member name="M:Tool.Utils.DataHelper.FillCommandParameterValue(System.Data.IDbCommand,System.Object)">
            <summary>
            填充命令参数值
            </summary>
            <param name="command"></param>
            <param name="entityOrRow"></param>
        </member>
        <member name="M:Tool.Utils.DataHelper.GetColumnValue(System.Object,System.String)">
            <summary>
            获取列值
            </summary>
            <param name="entityOrRow"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.DataHelper.GetSafeDbValue(System.Object)">
            <summary>
            获取安全值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.DataHelper.RefreshEntityFields(System.Object,System.Data.DataRow)">
            <summary>
            刷新实体字段
            </summary>
            <param name="entity"></param>
            <param name="row"></param>
        </member>
        <member name="M:Tool.Utils.DataHelper.RefreshEntityFields(System.Object,System.Data.DataRow,System.Collections.Generic.IList{System.String})">
            <summary>
            刷新实体字段
            </summary>
            <param name="entity"></param>
            <param name="row"></param>
            <param name="refreshFields"></param>
        </member>
        <member name="T:Tool.Utils.DataTableProperty">
            <summary>
            表示一个 实体字段对应的表下标
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.DataTableProperty.Index">
            <summary>
            表下标
            </summary>
        </member>
        <member name="P:Tool.Utils.DataTableProperty.DataType">
            <summary>
            对应的值类型
            </summary>
        </member>
        <member name="P:Tool.Utils.DataTableProperty.PropertyType">
            <summary>
            类字段类型
            </summary>
        </member>
        <member name="P:Tool.Utils.DataTableProperty.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Tool.Utils.DataTableProperty.Property">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="T:Tool.Utils.Data.ArrayExtension">
            <summary>
            对Array类进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Data.ArrayExtension.ArrayAdd(System.Array@,System.Object)">
            <summary>
            给数组加新的值,效率不高，不建议循环使用,目前只适合一维数组
            </summary>
            <param name="array">数据源</param>
            <param name="obj">添加的数据</param>
        </member>
        <member name="M:Tool.Utils.Data.ArrayExtension.ArrayAdd(System.Array,System.Object,System.Array@)">
            <summary>
            给数组加新的值,效率不高，不建议循环使用,目前只适合一维数组
            </summary>
            <param name="array">数据源</param>
            <param name="obj">添加的数据</param>
            <param name="_array">返回一个新数组</param>
        </member>
        <member name="M:Tool.Utils.Data.ArrayExtension.GetEnumerator``1(System.Array)">
            <summary>
            返回 <see cref="T:System.Array"/> 的 <see cref="T:Tool.Utils.Data.Enumerator`1"/>。
            </summary>
            <typeparam name="T">当前类型</typeparam>
            <param name="array">当前数据源</param>
            <returns>返回 <see cref="T:System.Array"/> 的 <see cref="T:Tool.Utils.Data.Enumerator`1"/>。</returns>
        </member>
        <member name="M:Tool.Utils.Data.ArrayExtension.Read(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            重写封装的Copy方法（暂时未写，不用调用了）
            </summary>
            <param name="sourceArray">源数组对象</param>
            <param name="sourceIndex">源数据开始读取的位置</param>
            <param name="destinationArray">新数组对象</param>
            <param name="destinationIndex">开始存储的位置</param>
            <param name="length">从源数组取多少？</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.Data.Enumerator`1">
            <summary>
            返回 <see cref="T:System.Array"/> 的 <see cref="T:Tool.Utils.Data.Enumerator`1"/>。
            </summary>
            <typeparam name="T">当前类型</typeparam>
        </member>
        <member name="M:Tool.Utils.Data.Enumerator`1.#ctor(`0[])">
            <summary>
            框架自己调用的构造
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="P:Tool.Utils.Data.Enumerator`1.Current">
            <summary>
            获取集合中的当前元素。
            </summary>
            <returns>集合中的当前元素。</returns>
        </member>
        <member name="M:Tool.Utils.Data.Enumerator`1.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
        </member>
        <member name="M:Tool.Utils.Data.Enumerator`1.Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
        </member>
        <member name="P:Tool.Utils.Data.Enumerator`1.Index">
            <summary>
            当前下标
            </summary>
        </member>
        <member name="P:Tool.Utils.Data.Enumerator`1.Length">
            <summary>
            总数
            </summary>
        </member>
        <member name="T:Tool.Utils.Data.DataRowExtension">
            <summary>
            对DataRow进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.IsEmpty(System.Data.DataRow)">
            <summary>
            判断<see cref="T:System.Data.DataRow"/>对象中的是否为空，行为空，对象为空
            </summary>
            <param name="dataRow"><see cref="T:System.Data.DataRow"/>对象</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.ToDictionary(System.Data.DataRow)">
            <summary>
            （DataRow）转换 <see cref="T:System.Collections.Generic.Dictionary`2"/> 集合
            </summary>
            <param name="dataRow">DataRow</param>
            <returns>返回Dictionary</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.DataRowToEntity``1(System.Data.DataRow)">
            <summary>
            将<see cref="T:System.Data.DataRow"/>对象 转换为 实体对象（旧版本）
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="dataRow">数据源</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.ToEntity``1(System.Data.DataRow)">
            <summary>
            将<see cref="T:System.Data.DataRow"/>对象 转换为 实体对象（新版本）
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="dataRow">数据源</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.ToEntityList``1(System.Data.DataRowCollection)">
            <summary>
            将<see cref="T:System.Data.DataRowCollection"/> 对象 转换为 实体对象数组 (优化版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="dataRows">数据源</param>
            <returns>返回实体对象数组</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.ToDictionary(System.Data.DataRow[])">
            <summary>
            （DataRow[]）转换 <see cref="T:System.Collections.Generic.Dictionary`2"/> 集合
            </summary>
            <param name="dataRows">DataRow[]</param>
            <returns>返回List{Dictionary{string, object}}</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.ToObject(System.Data.DataRow)">
            <summary>
            （DataRow）转换 <see cref="T:System.Object"/> 对象
            </summary>
            <param name="dataRow">DataRow</param>
            <returns>返回dynamic</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.ToObject(System.Data.DataRowCollection)">
            <summary>
            （DataRowCollection）转换 <see cref="T:System.Object"/> 集合
            </summary>
            <param name="dataRows">DataRowCollection</param>
            <returns>返回dynamic[]</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.ToObject(System.Data.DataRowCollection,System.Int32)">
            <summary>
            （DataRowCollection）转换 <see cref="T:System.Object"/> 
            </summary>
            <param name="dataRows">DataRowCollection</param>
            <param name="index">要读取的那一条数组的下标</param>
            <returns>返回dynamic</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.RowToJson(System.Data.DataRow)">
            <summary>
            序列化AjaxJson（DataRow）
            </summary>
            <param name="dataRow">DataRow</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.RowToJson(System.Data.DataRow,System.Boolean)">
            <summary>
            序列化AjaxJson（DataRow）
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataRowExtension.RowToJson(System.Data.DataRow,System.Boolean,System.String)">
            <summary>
            序列化AjaxJson（DataRow）
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <param name="ToDateString">Date.ToString()的写法。</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="T:Tool.Utils.Data.DataSetExtension">
            <summary>
            对DataSet进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Data.DataSetExtension.IsEmpty(System.Data.DataSet)">
            <summary>
            判断<see cref="T:System.Data.DataSet"/>对象中的是否为空，行为空，对象为空（验证每张表，只要其中包含一张表有值，都成立。）
            </summary>
            <param name="data"><see cref="T:System.Data.DataSet"/>对象</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataSetExtension.ToDictionary(System.Data.DataSet)">
            <summary>
            （DataTable）转换 <see cref="T:System.Collections.Generic.List`1"/> 集合
            </summary>
            <param name="data">DataSet</param>
            <returns>返回Dictionary</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataSetExtension.SetToJson(System.Data.DataSet)">
            <summary>
            序列化AjaxJson（DataSet）
            </summary>
            <param name="data">DataSet</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataSetExtension.SetToJson(System.Data.DataSet,System.Boolean)">
            <summary>
            序列化AjaxJson（DataSet）
            </summary>
            <param name="data">DataSet</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataSetExtension.SetToJson(System.Data.DataSet,System.Boolean,System.String)">
            <summary>
            序列化AjaxJson（DataSet）
            </summary>
            <param name="data">DataSet</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <param name="ToDateString">Date.ToString()的写法。</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="T:Tool.Utils.Data.DataTableExtension">
            <summary>
            对DataTable进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.IsEmpty(System.Data.DataTable)">
            <summary>
            判断<see cref="T:System.Data.DataTable"/>对象中的是否为空，行为空，对象为空
            </summary>
            <param name="table"><see cref="T:System.Data.DataTable"/>对象</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToDictionary(System.Data.DataTable)">
            <summary>
            （DataTable）转换 <see cref="T:System.Collections.Generic.Dictionary`2"/> 集合
            </summary>
            <param name="table">DataTable</param>
            <returns>返回Dictionary</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToDictionaryIf(System.Data.DataTable,System.Func{System.String,System.Object,System.Object})">
            <summary>
            （DataTable）转换 <see cref="T:System.Collections.Generic.Dictionary`2"/> 集合（结果可自定义）
            </summary>
            <param name="table">DataTable</param>
            <param name="func">用于指定特殊结果的函数</param>
            <returns>返回Dictionary</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.CloneArray(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            将 <see cref="T:System.Collections.ArrayList"/> 集合数据克隆到 <see cref="T:System.Data.DataTable"/> 中
            <list type="bullet"><see cref="T:System.Data.DataTable"/>必须是空的</list>
            </summary>
            <param name="table">DataTable</param>
            <param name="objects">数据集合</param>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.CloneArray(System.Data.DataTable,Tool.Utils.JsonVar)">
            <summary>
            将 <see cref="T:System.Collections.ArrayList"/> 集合数据克隆到 <see cref="T:System.Data.DataTable"/> 中
            <list type="bullet"><see cref="T:System.Data.DataTable"/>必须是空的</list>
            </summary>
            <param name="json">Json数据</param>
            <param name="table">DataTable</param>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToArray(System.Data.DataTable)">
            <summary>
            （DataTable）转换 <see cref="T:System.Collections.ArrayList"/> 集合
            </summary>
            <param name="table">DataTable</param>
            <returns>返回<see cref="T:System.Collections.ArrayList"/></returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToArrayIf(System.Data.DataTable,System.Func{System.String,System.Object,System.Object})">
            <summary>
            （DataTable）转换 <see cref="T:System.Collections.ArrayList"/> 集合（结果可自定义）
            </summary>
            <param name="table">DataTable</param>
            <param name="func">用于指定特殊结果的函数</param>
            <returns>返回<see cref="T:System.Collections.ArrayList"/></returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToObject(System.Data.DataTable)">
            <summary>
            （DataTable）转换 <see cref="T:System.Object"/> 集合
            </summary>
            <param name="dataTable">DataTable</param>
            <returns>返回dynamic[]</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.TableToJson(System.Data.DataTable)">
            <summary>
            序列化AjaxJson（DataTable）
            </summary>
            <param name="table">DataTable</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.TableToJson(System.Data.DataTable,System.Boolean)">
            <summary>
            序列化AjaxJson（DataTable）
            </summary>
            <param name="table">DataTable</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.TableToJson(System.Data.DataTable,System.Boolean,System.String)">
            <summary>
            序列化AjaxJson（DataTable）
            </summary>
            <param name="table">DataTable</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <param name="ToDateString">Date.ToString()的写法。</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.DataTableToEntity``1(System.Data.DataTable)">
            <summary>
            将<see cref="T:System.Data.DataTable"/>对象 转换为 实体对象 (老版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="table">数据源</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.DataTableToEntityList``1(System.Data.DataTable)">
            <summary>
             将<see cref="T:System.Data.DataTable"/>对象 转换为 <see cref="T:System.Collections.Generic.List`1"/>实体对象 (老版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="table">数据源</param>
            <returns>返回<see cref="T:System.Collections.Generic.List`1"/>实体对象</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToEntity``1(System.Data.DataTable)">
            <summary>
            将<see cref="T:System.Data.DataTable"/>对象 转换为 实体对象，不管有表中有几条数据指读出第一条 (优化版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="dataTable">数据源</param>
            <returns>返回实体对象数组</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToEntity``1(System.Data.DataTable,System.Int32)">
            <summary>
            将<see cref="T:System.Data.DataTable"/>对象 转换为 实体对象，不管有表中有几条数据只读出一条 (优化版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="dataTable">数据源</param>
            <param name="index">要读取的那一条数组的下标</param>
            <returns>返回实体对象数组</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToEntityList``1(System.Data.DataTable)">
            <summary>
            将<see cref="T:System.Data.DataTable"/>对象 转换为 实体对象数组 (优化版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="dataTable">数据源</param>
            <returns>返回实体对象数组</returns>
        </member>
        <member name="M:Tool.Utils.Data.DataTableExtension.ToEntityList``1(System.Data.DataTable,System.Int32[])">
            <summary>
            将<see cref="T:System.Data.DataTable"/>对象 转换为 实体对象数组 (优化版)
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="dataTable">数据源</param>
            <param name="indexs">要获取的多个下标的数据</param>
            <returns>返回实体对象数组</returns>
        </member>
        <member name="T:Tool.Utils.Data.DictionaryExtension">
            <summary>
            对Dictionary进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.NewDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将 <see cref="T:System.Collections.Generic.IDictionary`2"/>对象 拷贝创建新 <see cref="T:System.Collections.Generic.Dictionary`2"/>对象
            </summary>
            <typeparam name="TKey">键</typeparam>
            <typeparam name="TValue">值</typeparam>
            <param name="oldDictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/>对象</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.ToIDictionary(System.Object)">
            <summary>
            将对象转换成<see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <param name="source">对象</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.ToDictionary(System.Object)">
            <summary>
            将对象转换成<see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <param name="source">对象</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.ToIDictionary``1(System.Object)">
            <summary>
            将对象转换成<see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <param name="source">对象</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.ToDictionary``1(System.Object)">
            <summary>
            将对象转换成<see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">对象</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.GetDictionary(System.Object)">
            <summary>
            获取对象结果集<see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <param name="source">对象</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/>对象结果集</returns>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.SetDictionary(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            给对象赋值，使用字典赋值
            </summary>
            <param name="source">对象</param>
            <param name="parameters">赋值键值对</param>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            批量删除 <see cref="T:System.Collections.Generic.IDictionary`2"/>对象 出现不包含的会返回 false
            </summary>
            <typeparam name="TKey">键</typeparam>
            <typeparam name="TValue">值</typeparam>
            <param name="keys"><see cref="T:System.Collections.Generic.IDictionary`2"/>对象</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
            <param name="key">需要删除的键值集合</param>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0[]@,``0[])">
            <summary>
            批量删除 <see cref="T:System.Collections.Generic.IDictionary`2"/>对象 中的值
            </summary>
            <typeparam name="TKey">键</typeparam>
            <typeparam name="TValue">值</typeparam>
            <param name="trykey">删除失败时返回无法删除的哪些项。</param>
            <param name="keys"><see cref="T:System.Collections.Generic.IDictionary`2"/>对象</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
            /// <param name="key">需要删除的键值集合</param>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.GetParamAscii``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            按照ASCII码从小到大排序（示例： 1, 2, A, B, a, b 这是格式循序）
            </summary>
            <param name="keyValuePairs">Dictionary</param>
            <returns>返回重新排序好的结果</returns>
        </member>
        <member name="M:Tool.Utils.Data.DictionaryExtension.GetArrayIndex``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="keyValuePairs">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.Utils.Data.LazyConcurrentDictionary`2">
            <summary>
            完全保证的多线程延迟加载字典，表示可由多个线程同时访问的键/值对的线程安全集合。
            </summary>
            <typeparam name="TKey">字典中的键的类型。</typeparam>
            <typeparam name="TValue">字典中的值的类型。</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.Data.LazyConcurrentDictionary`2.Dictionary">
            <summary>
            线程安全的字典
            </summary>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Tool.Utils.Data.LazyConcurrentDictionary`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值。
            </summary>
            <param name="key">要获取或设置的值的键。</param>
            <returns>位于指定索引处的键/值对。</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且集合中不存在 key。</exception>
        </member>
        <member name="P:Tool.Utils.Data.LazyConcurrentDictionary`2.IsEmpty">
            <summary>
            获取一个指示 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 是否为空的值。
            </summary>
            <returns>如果 System.Collections.Concurrent.ConcurrentDictionary`2 为空，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Tool.Utils.Data.LazyConcurrentDictionary`2.Keys">
            <summary>
            获取包含 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中的键的集合。
            </summary>
            <returns><see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中的键的集合。</returns>
        </member>
        <member name="P:Tool.Utils.Data.LazyConcurrentDictionary`2.Values">
            <summary>
            获取包含 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中的值的集合。 (作者并不建议使用该字段，开销有点大)
            </summary>
            <returns>包含 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中的值的集合。</returns>
        </member>
        <member name="P:Tool.Utils.Data.LazyConcurrentDictionary`2.Count">
            <summary>
            获取包含在 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中的键/值对的数目。
            </summary>
            <returns>包含在 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中的键/值对的数目。</returns>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="P:Tool.Utils.Data.LazyConcurrentDictionary`2.IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 是否为只读。（无效参数）
            </summary>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            如果该键尚不存在，则使用指定函数将键/值对添加到 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/>
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="valueFactory">用于为键生成值的函数</param>
            <returns>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为 valueFactory 返回的键的新值。</returns>
            <exception cref="T:System.ArgumentNullException">valueFactory 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            如果该键尚不存在，则使用指定函数将键/值对添加到 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/>
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="value">用于为键生成值的函数</param>
            <returns>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为新值。</returns>
            <exception cref="T:System.ArgumentNullException">value 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.Clear">
            <summary>
            从 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中移除所有的键和值。
            </summary>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            确定 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 是否包含指定的键。
            </summary>
            <param name="key">要在 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中定位的键。</param>
            <returns>如果 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 包含具有指定键的元素，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.Add(`0,`1)">
            <summary>
            在 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">作为要添加的元素的值的对象。</param>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            在 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">作为要添加的元素的值的对象。</param>
            <returns>如果该键/值对已成功添加到 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/>，则为 true；如果该键已存在，则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">value 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.TryAdd(`0,System.Func{`0,`1})">
            <summary>
            在 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="addValueFactory">作为要添加的元素的值的委托。</param>
            <returns>如果该键/值对已成功添加到 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/>，则为 true；如果该键已存在，则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">value 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.Remove(`0)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中移除。
            </summary>
            <param name="key">要移除并返回的元素的键。</param>
            <returns>如果已成功移除对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.TryRemove(`0,`1@)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中移除。
            </summary>
            <param name="key">要移除并返回的元素的键。</param>
            <param name="value">当此方法返回时，将包含从 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中移除的对象；如果 key 不存在，则包含 TValue 类型。</param>
            <returns>如果已成功移除对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中修改数据（对比数据不一致时进行修改）
            </summary>
            <param name="key">要修改的元素的键</param>
            <param name="newValue">修改的内容</param>
            <param name="comparisonValue">比较的内容</param>
            <returns>如果已成功修改对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.TryUpdate(`0,System.Func{`0,`1},`1)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中修改数据（对比数据不一致时进行修改）
            </summary>
            <param name="key">要修改的元素的键</param>
            <param name="addValueFactory">修改的内容委托</param>
            <param name="comparisonValue">比较的内容</param>
            <returns>如果已成功修改对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            使用指定的函数将键/值对添加到 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。
            </summary>
            <param name="key">元素的键</param>
            <param name="addValue">新增的内容</param>
            <param name="updateValueFactory">修改的内容委托</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            使用指定的函数将键/值对添加到 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。
            </summary>
            <param name="key">元素的键</param>
            <param name="addValueFactory">新增的内容委托</param>
            <param name="updateValueFactory">修改的内容委托</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
            <summary>
            使用指定的函数将键/值对添加到 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。
            </summary>
            <typeparam name="TArg"></typeparam>
            <param name="key">元素的键</param>
            <param name="addValueFactory">新增的内容委托</param>
            <param name="updateValueFactory">修改的内容委托</param>
            <param name="factoryArgument">传入的额外对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 获取与指定的键关联的值。
            </summary>
            <param name="key">要获取的值的键。</param>
            <param name="value">当此方法返回时，将包含 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中具有指定键的对象；如果操作失败，则包含默认值。</param>
            <returns>如果在 System.Collections.Concurrent.ConcurrentDictionary`2 中找到该键，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
             在 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="item">单个对象的键值对</param>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            不被实现的。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            不被实现的。
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            不被实现的。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 的枚举数。
            </summary>
            <returns><see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 的一个枚举数。</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>可用于循环访问集合的 System.Collections.IEnumerator 对象。</returns>
        </member>
        <member name="M:Tool.Utils.Data.LazyConcurrentDictionary`2.ToString">
            <summary>
            显示结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.Data.ListExtension">
            <summary>
            对List进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Data.ListExtension.EntitysToJson(System.Collections.IList)">
            <summary>
            将实体转换为JSON格式字符串 （再三强调，要是实体，而且是实集合必须是<see cref="T:System.Collections.Generic.List`1"/>。）
            </summary>
            <param name="list">实体</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.ListExtension.EntitysToJson(System.Collections.IList,System.Boolean)">
            <summary>
            将实体转换为JSON格式字符串 （再三强调，要是实体，而且是实集合必须是<see cref="T:System.Collections.Generic.List`1"/>。）
            </summary>
            <param name="list">实体</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.ListExtension.EntitysToJson(System.Collections.IList,System.Boolean,System.String)">
            <summary>
            将实体转换为JSON格式字符串 （再三强调，要是实体，而且是实集合必须是<see cref="T:System.Collections.Generic.List`1"/>。）
            </summary>
            <param name="list">实体</param>
            <param name="IsDate">ToJson格式时间，启用转字符串</param>
            <param name="ToDateString">Date.ToString()的写法。</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Tool.Utils.Data.ListExtension.TrueForAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            确定是否 <see cref="T:System.Collections.Generic.List`1" /> 中的每个元素都与指定的谓词所定义的条件相匹配。
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="match">条件</param>
            <param name="routs">List数组</param>
            <returns>该方法返回，成功，或失败。</returns>
        </member>
        <member name="M:Tool.Utils.Data.ListExtension.GetParamASCII``1(System.Collections.Generic.List{``0})">
            <summary>
            按照ASCII码从小到大排序（未实现）（示例： 1, 2, A, B, a, b 这是格式循序）
            </summary>
            <param name="list">List</param>
            <returns>返回重新排序好的结果</returns>
        </member>
        <member name="M:Tool.Utils.Data.ListExtension.GetArrayIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            同于获取指定部分的内容
            </summary>
            <param name="list">对象数组</param>
            <param name="index">从下标N开始</param>
            <param name="count">到下标N结束</param>
            <returns>返回一部分的数组内容</returns>
        </member>
        <member name="T:Tool.Utils.Data.TaskConcurrentDictionary`2">
            <summary>
            完全保证的多线程可等待字典，表示可由多个线程同时访问的键/值对的线程安全集合。
            </summary>
            <typeparam name="TKey">字典中的键的类型。</typeparam>
            <typeparam name="TValue">字典中的值的类型。</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.Data.TaskConcurrentDictionary`2.Dictionary">
            <summary>
            线程安全的字典
            </summary>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Tool.Utils.Data.TaskConcurrentDictionary`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值。
            </summary>
            <param name="key">要获取或设置的值的键。</param>
            <returns>位于指定索引处的键/值对。</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且集合中不存在 key。</exception>
        </member>
        <member name="P:Tool.Utils.Data.TaskConcurrentDictionary`2.IsEmpty">
            <summary>
            获取一个指示 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 是否为空的值。
            </summary>
            <returns>如果 System.Collections.Concurrent.ConcurrentDictionary`2 为空，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Tool.Utils.Data.TaskConcurrentDictionary`2.Keys">
            <summary>
            获取包含 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中的键的集合。
            </summary>
            <returns><see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中的键的集合。</returns>
        </member>
        <member name="P:Tool.Utils.Data.TaskConcurrentDictionary`2.Values">
            <summary>
            获取包含 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中的值的集合。 (作者并不建议使用该字段，开销有点大)
            </summary>
            <returns>包含 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中的值的集合。</returns>
        </member>
        <member name="P:Tool.Utils.Data.TaskConcurrentDictionary`2.Count">
            <summary>
            获取包含在 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中的键/值对的数目。
            </summary>
            <returns>包含在 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中的键/值对的数目。</returns>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="P:Tool.Utils.Data.TaskConcurrentDictionary`2.IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 是否为只读。（无效参数）
            </summary>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            如果该键尚不存在，则使用指定函数将键/值对添加到 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/>
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="valueFactory">用于为键生成值的函数</param>
            <returns>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为 valueFactory 返回的键的新值。</returns>
            <exception cref="T:System.ArgumentNullException">valueFactory 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            如果该键尚不存在，则使用指定函数将键/值对添加到 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/>
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="value">用于为键生成值的函数</param>
            <returns>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为新值。</returns>
            <exception cref="T:System.ArgumentNullException">value 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.Clear">
            <summary>
            从 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中移除所有的键和值。
            </summary>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            确定 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 是否包含指定的键。
            </summary>
            <param name="key">要在 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中定位的键。</param>
            <returns>如果 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 包含具有指定键的元素，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.Add(`0,`1)">
            <summary>
            在 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">作为要添加的元素的值的对象。</param>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            在 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">作为要添加的元素的值的对象。</param>
            <returns>如果该键/值对已成功添加到 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/>，则为 true；如果该键已存在，则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">value 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.TryAdd(`0,System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            在 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="addValueFactory">作为要添加的元素的值的委托。</param>
            <returns>如果该键/值对已成功添加到 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/>，则为 true；如果该键已存在，则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">value 为 null。</exception>
            <exception cref="T:System.OverflowException">字典已包含最大数目的元素 (System.Int32.MaxValue)。</exception>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.Remove(`0)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中移除。
            </summary>
            <param name="key">要移除并返回的元素的键。</param>
            <returns>如果已成功移除对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.TryRemove(`0,`1@)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中移除。
            </summary>
            <param name="key">要移除并返回的元素的键。</param>
            <param name="value">当此方法返回时，将包含从 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中移除的对象；如果 key 不存在，则包含 TValue 类型。</param>
            <returns>如果已成功移除对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.TryUpdate(`0,System.Threading.Tasks.Task{`1},System.Threading.Tasks.Task{`1})">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中修改数据（对比数据不一致时进行修改）
            </summary>
            <param name="key">要修改的元素的键</param>
            <param name="newValue">修改的内容</param>
            <param name="comparisonValue">比较的内容</param>
            <returns>如果已成功修改对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.TryUpdate(`0,System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Task{`1})">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中修改数据（对比数据不一致时进行修改）
            </summary>
            <param name="key">要修改的元素的键</param>
            <param name="addValueFactory">修改的内容委托</param>
            <param name="comparisonValue">比较的内容</param>
            <returns>如果已成功修改对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.AddOrUpdate(`0,System.Threading.Tasks.Task{`1},System.Func{`0,System.Threading.Tasks.Task{`1},System.Threading.Tasks.Task{`1}})">
            <summary>
            使用指定的函数将键/值对添加到 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。
            </summary>
            <param name="key">元素的键</param>
            <param name="addValue">新增的内容</param>
            <param name="updateValueFactory">修改的内容委托</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,System.Threading.Tasks.Task{`1}},System.Func{`0,System.Threading.Tasks.Task{`1},System.Threading.Tasks.Task{`1}})">
            <summary>
            使用指定的函数将键/值对添加到 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。
            </summary>
            <param name="key">元素的键</param>
            <param name="addValueFactory">新增的内容委托</param>
            <param name="updateValueFactory">修改的内容委托</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,System.Threading.Tasks.Task{`1}},System.Func{`0,System.Threading.Tasks.Task{`1},``0,System.Threading.Tasks.Task{`1}},``0)">
            <summary>
            使用指定的函数将键/值对添加到 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。
            </summary>
            <typeparam name="TArg"></typeparam>
            <param name="key">元素的键</param>
            <param name="addValueFactory">新增的内容委托</param>
            <param name="updateValueFactory">修改的内容委托</param>
            <param name="factoryArgument">传入的额外对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.TryGetValue(`0,System.Threading.Tasks.Task{`1}@)">
            <summary>
            尝试从 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 获取与指定的键关联的值。
            </summary>
            <param name="key">要获取的值的键。</param>
            <param name="value">当此方法返回时，将包含 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中具有指定键的对象；如果操作失败，则包含默认值。</param>
            <returns>如果在 System.Collections.Concurrent.ConcurrentDictionary`2 中找到该键，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
             在 <see cref="T:Tool.Utils.Data.TaskConcurrentDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="item">单个对象的键值对</param>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            不被实现的。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            不被实现的。
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            不被实现的。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 的枚举数。
            </summary>
            <returns><see cref="T:Tool.Utils.Data.LazyConcurrentDictionary`2"/> 的一个枚举数。</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>可用于循环访问集合的 System.Collections.IEnumerator 对象。</returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.ToString">
            <summary>
            显示结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Data.TaskConcurrentDictionary`2.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            异步迭代器
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.Encryption.AES">
            <summary>
            AES 加密 解密,秘钥长度为32位，不足时系统自动补足空字符。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Encryption.AES.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.Encryption.AES.Decrypt(System.String,System.String)">
            <summary>
            解密成字符串
            </summary>
            <param name="cipherText">密文</param>
            <param name="cipherkey">密码密钥</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Tool.Utils.Encryption.AES.DecryptBuffer(System.Byte[],System.String)">
            <summary>
            解密byte[]
            </summary>
            <param name="cipherText">密文内容</param>
            <param name="cipherkey">密码密钥</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.AES.Encrypt(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="plainText">原字符串</param>
            <param name="cipherkey">密码密钥</param>
            <returns>返回加密的字符串</returns>
        </member>
        <member name="M:Tool.Utils.Encryption.AES.EncryptBuffer(System.Byte[],System.String)">
            <summary>
            加密byte[]
            </summary>
            <param name="plainText">原内容</param>
            <param name="cipherkey">密码密钥</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.AES.GetPassword(System.String)">
            <summary>
            获取AES实际加密密码
            </summary>
            <param name="encryptKey">原密码密钥</param>
            <returns></returns>
        </member>
        <member name="F:Tool.Utils.Encryption.AES.Keys">
            <summary>
            对称算法,
            65,
            114,
            101,
            121,
            111,
            117,
            109,
            121,
            83,
            110,
            111,
            119,
            109,
            97,
            110,
            63
            </summary>
        </member>
        <member name="T:Tool.Utils.Encryption.DES">
            <summary>
            DES加密,秘钥长度为8位，不足时系统自动补足空字符。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Encryption.DES.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="decryptString">密文</param>
            <param name="decryptKey">秘钥</param>
            <returns>返回明文</returns>
        </member>
        <member name="M:Tool.Utils.Encryption.DES.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="encryptString">明文</param>
            <param name="encryptKey">秘钥</param>
            <returns>返回密文</returns>
        </member>
        <member name="M:Tool.Utils.Encryption.DES.DecryptBuffer(System.Byte[],System.String)">
            <summary>
            解密byte[]
            </summary>
            <param name="plainText">密文内容</param>
            <param name="encryptKey">密码密钥</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.DES.EncryptBuffer(System.Byte[],System.String)">
            <summary>
            加密byte[]
            </summary>
            <param name="plainText">原内容</param>
            <param name="encryptKey">密码密钥</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.DES.GetPassword(System.String)">
            <summary>
            获取DES实际加密密码
            </summary>
            <param name="encryptKey">原密码密钥</param>
            <returns></returns>
        </member>
        <member name="F:Tool.Utils.Encryption.DES.Keys">
            <summary>
            加密规则,
            18,
            52,
            86,
            120,
            144,
            171,
            205,
            239
            </summary>
        </member>
        <member name="T:Tool.Utils.Encryption.TextEncrypt">
            <summary>
            公共加密类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.GetPassword(System.String,System.Int32)">
            <summary>
            用于处理密码不够或密码过长的处理
            </summary>
            <param name="encryptKey">原密码密钥</param>
            <param name="length">密码要求长度</param>
            <returns>返回实际密码</returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.Base64Decode(System.String)">
            <summary>
            Base64Decode
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.Base64Encode(System.String)">
            <summary>
            Base64Encode
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.DSAEncryptPassword(System.String)">
            <summary>
            DSA
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.EncryptPassword(System.String)">
            <summary>
            MD5
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.MD5EncryptPassword(System.String)">
            <summary>
            MD5
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.MD5EncryptPassword(System.String,Tool.Utils.Encryption.MD5ResultMode)">
            <summary>
            MD5
            </summary>
            <param name="password"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.SHA1EncryptPassword(System.String)">
            <summary>
            SHA1
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Encryption.TextEncrypt.SHA256(System.String)">
            <summary>
            SHA256
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.Encryption.MD5ResultMode">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="F:Tool.Utils.Encryption.MD5ResultMode.Strong">
            <summary>
            强的加密
            </summary>
        </member>
        <member name="F:Tool.Utils.Encryption.MD5ResultMode.Weak">
            <summary>
            弱的加密
            </summary>
        </member>
        <member name="T:Tool.Utils.EntityBuilder">
            <summary>
            用于提高，对象构造（只支持无参构造），对象取值，对象赋值。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.EntityBuilder.Parameters">
            <summary>
            对象下公开的字段
            </summary>
        </member>
        <member name="P:Tool.Utils.EntityBuilder.KeyParameters">
            <summary>
            获取当前类所有字段字典
            </summary>
        </member>
        <member name="P:Tool.Utils.EntityBuilder.IsNew">
            <summary>
            是否可以构造
            </summary>
        </member>
        <member name="P:Tool.Utils.EntityBuilder.ClassType">
            <summary>
            对象原型
            </summary>
        </member>
        <member name="M:Tool.Utils.EntityBuilder.#ctor(System.Type)">
            <summary>
            创建构造模型对象
            </summary>
            <param name="classtype"></param>
        </member>
        <member name="P:Tool.Utils.EntityBuilder.New">
            <summary>
            获取对象
            </summary>
        </member>
        <member name="M:Tool.Utils.EntityBuilder.Get(System.Object)">
            <summary>
            获取对象的字典数据
            </summary>
            <param name="_class">对象原型</param>
            <returns>字典</returns>
        </member>
        <member name="M:Tool.Utils.EntityBuilder.Set(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            赋值对象
            </summary>
            <param name="_class">对象原型</param>
            <param name="parameters">字典(字典如标记忽略大小写赋值，就能实现特定行为)</param>
        </member>
        <member name="M:Tool.Utils.EntityBuilder.GetParameterType(System.String,System.Type@)">
            <summary>
            根据字段名获取字段类型
            </summary>
            <param name="name">字段名</param>
            <param name="type">字段类型</param>
            <returns>是否查找到</returns>
        </member>
        <member name="M:Tool.Utils.EntityBuilder.GetEntity(System.Type)">
            <summary>
            获取 对象 模型
            </summary>
            <param name="type">对象类型</param>
            <returns>实体模型</returns>
        </member>
        <member name="M:Tool.Utils.EntityBuilder.GetEntity(System.Object)">
            <summary>
            获取 对象 模型
            </summary>
            <param name="_class">对象</param>
            <returns>实体模型</returns>
        </member>
        <member name="T:Tool.Utils.FileManager">
            <summary>
            文件管理器
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.FileManager.CopyDirectories(System.String,System.String)">
            <summary>
            复制目录
            </summary>
            <param name="srcDir">原目录</param>
            <param name="desDir">到目录</param>
        </member>
        <member name="M:Tool.Utils.FileManager.CopyDirectoryInfo(System.IO.DirectoryInfo,System.String,System.String)">
            <summary>
            复制目录信息
            </summary>
            <param name="dInfo">DirectoryInfo 原目录对象</param>
            <param name="srcDir">原目录</param>
            <param name="desDir">到目录</param>
        </member>
        <member name="M:Tool.Utils.FileManager.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="srcFile">原文件</param>
            <param name="desFile">新文件的位置</param>
        </member>
        <member name="M:Tool.Utils.FileManager.CopyFileStream(System.String,System.String)">
            <summary>
            复制文件流
            </summary>
            <param name="srcFile">原文件</param>
            <param name="desFile">到文件</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.Create(System.String,Tool.Utils.FsoMethod)">
            <summary>
            创建文件
            </summary>
            <param name="file">路径</param>
            <param name="method">文件类型</param>
        </member>
        <member name="M:Tool.Utils.FileManager.Delete(System.String,Tool.Utils.FsoMethod)">
            <summary>
            删除
            </summary>
            <param name="file">路径</param>
            <param name="method">文件类型</param>
        </member>
        <member name="M:Tool.Utils.FileManager.Exists(System.String,Tool.Utils.FsoMethod)">
            <summary>
            是否存在文件或文件夹
            </summary>
            <param name="file">路径</param>
            <param name="method">文件类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.GetDirectories(System.String)">
            <summary>
            获取路径下的所有文件夹
            </summary>
            <param name="directory">路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.GetDirectoryFilesList(System.String,Tool.Utils.FsoMethod)">
            <summary>
            获取目录文件列表
            </summary>
            <param name="directory">路径</param>
            <param name="method">类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.GetDirectoryFilesListForObject(System.String,Tool.Utils.FsoMethod)">
            <summary>
            获取对象的目录文件列表
            </summary>
            <param name="directory">路径</param>
            <param name="method">类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.GetDirectoryListForObject(System.String,Tool.Utils.FsoMethod)">
            <summary>
            获取对象的目录列表
            </summary>
            <param name="directory">路径</param>
            <param name="method">类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.GetDirectoryInfo(System.String)">
            <summary>
            获取目录信息
            </summary>
            <param name="directory">路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.GetDirectoryList(System.String,Tool.Utils.FsoMethod)">
            <summary>
            获取目录列表
            </summary>
            <param name="directory">路径</param>
            <param name="method">类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.GetFiles(System.String)">
            <summary>
            获取路径下的全部文件名称
            </summary>
            <param name="directory">路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.Move(System.String,System.String,Tool.Utils.FsoMethod)">
            <summary>
            移动
            </summary>
            <param name="srcFile">原路径</param>
            <param name="desFile">现路径</param>
            <param name="method">类型</param>
        </member>
        <member name="M:Tool.Utils.FileManager.ReadFile(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="file">路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读取文件
            </summary>
            <param name="file">路径</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.ReadFileReturnBytes(System.String)">
            <summary>
            读取文件返回字节
            </summary>
            <param name="filePath">路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FileManager.WriteBuffToFile(System.Byte[],System.String)">
            <summary>
            写入Buff ToFile 文件
            </summary>
            <param name="buff">数据</param>
            <param name="filePath">路径</param>
        </member>
        <member name="M:Tool.Utils.FileManager.WriteBuffToFile(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
             写入Buff ToFile 文件
            </summary>
            <param name="buff">数据</param>
            <param name="offset">开始</param>
            <param name="len">结束</param>
            <param name="filePath">路径</param>
        </member>
        <member name="M:Tool.Utils.FileManager.WriteFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="file">路径</param>
            <param name="fileContent">内容</param>
        </member>
        <member name="M:Tool.Utils.FileManager.WriteFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            写入文件
            </summary>
            <param name="file">路径</param>
            <param name="fileContent">内容</param>
            <param name="encoding">数据类型</param>
        </member>
        <member name="M:Tool.Utils.FileManager.WriteFile(System.String,System.String,System.Boolean)">
            <summary>
            写入文件
            </summary>
            <param name="file">路径</param>
            <param name="fileContent">内容</param>
            <param name="append">是否追加内容</param>
        </member>
        <member name="M:Tool.Utils.FileManager.WriteFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            写入文件
            </summary>
            <param name="file">路径</param>
            <param name="fileContent">内容</param>
            <param name="append">是否追加内容</param>
            <param name="encoding">数据类型</param>
        </member>
        <member name="M:Tool.Utils.FileManager.GetCurrentLogName(System.String,System.String,System.UInt32@,System.String@)">
            <summary>
            用来探测一个日志文件的id
            </summary>
            <param name="directory">路径</param>
            <param name="levelName">日志名称</param>
            <param name="i">存在数量</param>
            <param name="sparepath">备用文件名</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.FolderInfo">
            <summary>
            文件详情类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.FolderInfo.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.FolderInfo.#ctor(System.String,System.String,System.String,System.Byte,System.String,System.DateTime,System.Int64)">
            <summary>
            有参构造
            </summary>
            <param name="name"></param>
            <param name="fullName"></param>
            <param name="contentType"></param>
            <param name="type"></param>
            <param name="path"></param>
            <param name="lastWriteTime"></param>
            <param name="length"></param>
        </member>
        <member name="P:Tool.Utils.FolderInfo.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:Tool.Utils.FolderInfo.FsoType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:Tool.Utils.FolderInfo.FullName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Tool.Utils.FolderInfo.LastWriteTime">
            <summary>
            修改日期
            </summary>
        </member>
        <member name="P:Tool.Utils.FolderInfo.Length">
            <summary>
            大小
            </summary>
        </member>
        <member name="P:Tool.Utils.FolderInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Tool.Utils.FolderInfo.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Tool.Utils.FolderInfo.Type">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="T:Tool.Utils.FsoMethod">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="F:Tool.Utils.FsoMethod.Folder">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="F:Tool.Utils.FsoMethod.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:Tool.Utils.FsoMethod.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:Tool.Utils.FtpHelper.FtpClient">
            <summary>
            FTP 操作类客户端
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.strMsg">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.strReply">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.iReplyCode">
            <summary>
            服务器返回的应答码
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.socketControl">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.trType">
            <summary>
            传输模式
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.BLOCK_SIZE">
            <summary>
            接收和发送数据的缓冲区
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.ASCII">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.buffer">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpClient.RemoteHost">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpClient.RemotePort">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpClient.RemotePath">
            <summary>
            当前服务器目录
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpClient.RemoteUser">
            <summary>
            登录用户账号
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpClient.RemotePass">
            <summary>
            用户登录密码
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpClient.Connected">
            <summary>
            是否登录
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Connect">
            <summary>
            建立连接 
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.DisConnect">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="T:Tool.Utils.FtpHelper.FtpClient.TransferType">
            <summary>
            传输模式:二进制类型、ASCII类型
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.TransferType.Binary">
            <summary>
            Binary类型传输
            </summary>
        </member>
        <member name="F:Tool.Utils.FtpHelper.FtpClient.TransferType.ASCII">
            <summary>
            ASCII类型传输
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.SetTransferType(Tool.Utils.FtpHelper.FtpClient.TransferType)">
            <summary>
            设置传输模式
            </summary>
            <param name="ttType">传输模式</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.GetTransferType">
            <summary>
            获得传输模式
            </summary>
            <returns>传输模式</returns>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Dir(System.String)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.NewPutByGuid(System.String,System.String)">
            <summary>
            创建一个唯一的文件
            </summary>
            <param name="strFileName">文件路径</param>
            <param name="strGuid">唯一字符串</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Rename(System.String,System.String)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Get(System.String,System.String)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Get(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.GetNoBinary(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Put(System.String,System.String)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.Put(System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.PutByGuid(System.String,System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
            <param name="strGuid"></param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.MkDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.RmDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.ChDir(System.String)">
            <summary>
            改变目录
            </summary>
            <param name="strDirName">新的工作目录名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.ReadReply">
            <summary>
            将一行应答字符串记录在strReply和strMsg,应答码记录在iReplyCode
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.CreateDataSocket">
            <summary>
            建立进行数据连接的socket
            </summary>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.CloseSocketConnect">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.ReadLine">
            <summary>
            读取Socket返回的所有字符串
            </summary>
            <returns>包含应答码的字符串行</returns>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpClient.SendCommand(System.String)">
            <summary>
            发送命令并获取应答码和最后一行应答字符串
            </summary>
            <param name="strCommand">命令</param>
        </member>
        <member name="T:Tool.Utils.FtpHelper.FTPHelper">
            <summary>
            FTP帮助类（推荐使用:FluentFTP）
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary>  
            连接FTP服务器
            </summary>  
            <param name="FtpServerIP">FTP连接地址</param>  
            <param name="FtpRemotePath">指定FTP连接成功后的当前目录, 如果不指定即默认为根目录</param>  
            <param name="FtpUserID">用户名</param>  
            <param name="FtpPassword">密码</param>  
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.Upload(System.String)">
            <summary>  
            上传  
            </summary>   
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.Download(System.String,System.String)">
            <summary>  
            下载  
            </summary>   
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.Delete(System.String)">
            <summary>  
            删除文件  
            </summary>  
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.GetFilesDetailList">
            <summary>  
            获取当前目录下明细(包含文件和文件夹)  
            </summary>  
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.GetAllList(System.String)">
            <summary>  
            获取FTP文件列表(包括文件夹)
            </summary>   
            <param name="url">请求地址</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.GetFileList(System.String)">
            <summary>  
            获取当前目录下文件列表(不包括文件夹)  
            </summary>  
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.FileExist(System.String)">
            <summary>  
            判断当前目录下指定的文件是否存在  
            </summary>  
            <param name="RemoteFileName">远程文件名</param>  
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.MakeDir(System.String)">
            <summary>  
            创建文件夹  
            </summary>   
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.GetFileSize(System.String)">
            <summary>  
            获取指定文件大小  
            </summary>  
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.ReName(System.String,System.String)">
            <summary>  
            更改文件名  
            </summary> 
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.MovieFile(System.String,System.String)">
            <summary>  
            移动文件  
            </summary>  
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.GotoDirectory(System.String,System.Boolean)">
            <summary>  
            切换当前目录  
            </summary>  
            <param name="DirectoryName">目录地址</param>
            <param name="IsRoot">true:绝对路径 false:相对路径</param>   
        </member>
        <member name="M:Tool.Utils.FtpHelper.FTPHelper.IsFileListRegex">
            <remarks>
            Pattern:<br/>
            <code>[\\S]+ [\\S]+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match any character other than a whitespace character atomically at least once.<br/>
            ○ Match ' '.<br/>
            ○ Match any character other than a whitespace character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Tool.Utils.FtpHelper.FtpOperater">
            <summary>
            FTP操作类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpOperater.Ftp">
            <summary>
            全局FTP访问变量
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpOperater.Server">
            <summary>
            Ftp服务器
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpOperater.User">
            <summary>
            Ftp用户
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpOperater.Pass">
            <summary>
            Ftp密码
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpOperater.FolderZJ">
            <summary>
            Ftp密码
            </summary>
        </member>
        <member name="P:Tool.Utils.FtpHelper.FtpOperater.FolderWX">
            <summary>
            Ftp密码
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.GetList(System.String)">
            <summary>
            得到文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.GetFile(System.String,System.String,System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
            <param name="localFolder">本地目录</param>
            <param name="localFileName">本地文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.AddMSCFile(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            修改文件
            </summary>
            <param name="ftpFolder">本地目录</param>
            <param name="ftpFileName">本地文件名temp</param>
            <param name="localFolder">本地目录</param>
            <param name="localFileName">本地文件名</param>
            <param name="BscInfo"></param>
            <param name="path">获得应用程序所在的完整的路径</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.DelFile(System.String,System.String)">
            <summary>
            删除文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.PutFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.GetFileNoBinary(System.String,System.String,System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
            <param name="localFolder">本地目录</param>
            <param name="localFileName">本地文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.GetFileInfo(System.String,System.String)">
            <summary>
            得到FTP上文件信息
            </summary>
            <param name="ftpFolder">FTP目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.CanConnect">
            <summary>
            测试FTP服务器是否可登陆
            </summary>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.GetFileInfoConnected(System.String,System.String)">
            <summary>
            得到FTP上文件信息
            </summary>
            <param name="ftpFolder">FTP目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.GetFileList(System.String,System.String)">
            <summary>
            得到文件列表
            </summary>
            <param name="ftpFolder">FTP目录</param>
            <param name="strMask"></param>
            <returns>FTP通配符号</returns>
        </member>
        <member name="M:Tool.Utils.FtpHelper.FtpOperater.GetFtpClient">
             <summary>
            得到FTP传输对象
             </summary>
        </member>
        <member name="T:Tool.Utils.HashHelper">
            <summary>
            提供用于计算指定文件哈希值的方法
            <example>例如计算文件的MD5值:
            <code>
              String hashMd5=HashHelper.ComputeMD5("MyFile.txt");
            </code>
            </example>
            <example>例如计算文件的CRC32值:
            <code>
              String hashCrc32 = HashHelper.ComputeCRC32("MyFile.txt");
            </code>
            </example>
            <example>例如计算文件的SHA1值:
            <code>
              String hashSha1 =HashHelper.ComputeSHA1("MyFile.txt");
            </code>
            </example>
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.HashHelper.ComputeMD5(System.String)">
            <summary>
             计算指定文件的MD5值
            </summary>
            <param name="fileName">指定文件的完全限定名称</param>
            <returns>返回值的字符串形式</returns>
        </member>
        <member name="M:Tool.Utils.HashHelper.ComputeCRC32(System.String)">
            <summary>
             计算指定文件的CRC32值
            </summary>
            <param name="fileName">指定文件的完全限定名称</param>
            <returns>返回值的字符串形式</returns>
        </member>
        <member name="M:Tool.Utils.HashHelper.ComputeSHA1(System.String)">
            <summary>
             计算指定文件的SHA1值
            </summary>
            <param name="fileName">指定文件的完全限定名称</param>
            <returns>返回值的字符串形式</returns>
        </member>
        <member name="T:Tool.Utils.Crc32">
            <summary>
            提供 CRC32 算法的实现
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.Crc32.DefaultPolynomial">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tool.Utils.Crc32.DefaultSeed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tool.Utils.Crc32.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tool.Utils.Crc32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="polynomial"></param>
            <param name="seed"></param>
        </member>
        <member name="M:Tool.Utils.Crc32.Initialize">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="M:Tool.Utils.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Tool.Utils.Crc32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Crc32.Compute(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Crc32.Compute(System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Crc32.Compute(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="polynomial"></param>
            <param name="seed"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.HttpHelpers">
            <summary>
            提供部分的API请求访问类 (内置调用接口 替换为 HttpClient)
            注意此类下所有函数调用皆无异常抛出，但为了方便问题排查，增加异常相关日志
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.HttpHelpers.LogFilePath">
            <summary>
            相关请求异常日志输出位置
            </summary>
        </member>
        <member name="P:Tool.Utils.HttpHelpers.DefaultEncoding">
            <summary>
            默认编码格式
            </summary>
        </member>
        <member name="P:Tool.Utils.HttpHelpers.Timeout">
            <summary>
            等待毫秒
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">指定的超时值小于或等于零，并且不是系统超时值。穿线。超时。无穷大跨度。</exception>
            <exception cref="T:System.InvalidOperationException">已在当前实例上启动操作。</exception>
            <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.Finalize">
            <summary>
            自动回收
            </summary>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.Get(System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            GET 方式获取响应流
            </summary>
            <param name="url"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.GetAsync(System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            GET 方式获取响应流(异步获取)
            </summary>
            <param name="url"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.GetJson``1(System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            GET 方式获取响应流 返回实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.GetJsonAsync``1(System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            GET 方式获取响应流 返回实体 (异步获取)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.GetString(System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            GET 方式获取响应流 返回字符串
            </summary>
            <param name="url"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.GetStringAsync(System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            GET 方式获取响应流 返回字符串 (异步获取)
            </summary>
            <param name="url"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.Post(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流(异步获取)
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.Post(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流(异步获取)
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostString(System.String,System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回字符串
            </summary>
            <param name="url"></param>
            <param name="data">字符串拼接的数据</param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostStringAsync(System.String,System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回字符串 (异步获取)
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostString(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回字符串
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostStringAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回字符串 (异步获取)
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostJson``1(System.String,System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostJsonAsync``1(System.String,System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回实体 (异步获取)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostJson``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.PostJsonAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            POST 方式获取响应流  返回实体 (异步获取)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="data"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.HeadHttpCode(System.String,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            HEAD 方式获取响应的状态
            </summary>
            <param name="url"></param>
            <param name="onheaders"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.CreateHttpRequestMessage(System.Net.Http.HttpMethod,System.String)">
            <summary>
            获取可用的连接
            </summary>
            <param name="method"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.SendAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            异步获取请求结果
            </summary>
            <param name="requestMessage">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.Send(System.Net.Http.HttpRequestMessage)">
            <summary>
            获取请求结果
            </summary>
            <param name="requestMessage">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.QueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据字典高效组装成以转义的字符串
            </summary>
            <param name="data">字典对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.HttpHelpers.FormatData(System.String)">
            <summary>
            高效解析http表单类文本 
            </summary>
            <param name="query">待解析的http表单值</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.IntPtrHelper">
            <summary>
            关于内存地址读写的操作帮助类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.GetPidByProcessName(System.String)">
            <summary>
            根据进程名称获取进程ID
            </summary>
            <param name="processName">进程名字</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.ReadMemoryValue(System.Int32,System.String)">
            <summary>
            读取内存中的值
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processName">进程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.ReadMemoryValue(System.Int32,System.Int32)">
            <summary>
            读取内存中的值
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processId">进程ID</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.ReadMemoryValue(System.IntPtr,System.String)">
            <summary>
            读取内存中的值
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processName">进程名</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.ReadMemoryValue(System.IntPtr,System.Int32)">
            <summary>
            读取内存中的值
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processId">进程ID</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.WriteMemoryValue(System.Int32,System.String,System.Int32)">
            <summary>
            将值写入指定内存地址中
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processName">进程名</param>
            <param name="value">写入的值</param>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.WriteMemoryValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            将值写入指定内存地址中
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processId">进程ID</param>
            <param name="value">写入的值</param>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.WriteMemoryValue(System.IntPtr,System.String,System.Int32)">
            <summary>
            将值写入指定内存地址中
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processName">进程名</param>
            <param name="value">写入的值</param>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.WriteMemoryValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            将值写入指定内存地址中
            </summary>
            <param name="baseAddress">内存地址</param>
            <param name="processId">进程ID</param>
            <param name="value">写入的值</param>
        </member>
        <member name="M:Tool.Utils.IntPtrHelper.GetInt(System.String)">
            <summary>
            将字符串类型转int
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.IocHelper">
            <summary>
            用于提供全局支持的 TOC 对象
            
            <para>服务生命周期</para>
            <para>在Microsoft依赖项注入框架中，我们可以使用三种生命周期注册服务，分别是单例（Singleton）、瞬时（Transient）、作用域（Scoped），在上面的代码中，
            我使用了AddSingleton()来注册服务。</para>
            <para>使用Singleton服务的优点是我们不会创建多个服务实例，只会创建一个实例，保存到DI容器中，直到程序退出，这不仅效率高，而且性能高，但是有一个要注意的点，
            如果在多线程中使用了Singleton,要考虑线程安全的问题，保证它不会有冲突。</para>
            <para>瞬时（Transient）和单例（Singleton）模式是相反的，每次使用时，DI容器都是创建一个新的实例。</para>
            <para>作用域（Scoped），在一个作用域内，会使用同一个实例，像EF Core的DbContext上下文就被注册为作用域服务。</para>
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.IocHelper.IocCore">
            <summary>
            提供全局，使用的 依赖注入 服务
            </summary>
        </member>
        <member name="M:Tool.Utils.IocHelper.NewIoc">
            <summary>
            获取一个全新的 IOC 容器对象
            </summary>
            <returns>IOC 容器对象</returns>
        </member>
        <member name="T:Tool.Utils.IocCore">
            <summary>
            提供一个完全独立的 Ioc 容器
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.IocCore._services">
            <summary>
            注册服务存储对象
            </summary>
        </member>
        <member name="F:Tool.Utils.IocCore._provider">
            <summary>
            获取服务对象
            </summary>
        </member>
        <member name="M:Tool.Utils.IocCore.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Tool.Utils.IocCore.Build">
            <summary>
            创建用于获取服务对象
            <para>调用该函数，将会释放掉原本的服务</para>
            </summary>
        </member>
        <member name="M:Tool.Utils.IocCore.RemoveAll">
            <summary>
            清空所有已注册的服务
            </summary>
        </member>
        <member name="M:Tool.Utils.IocCore.DisposeAsync">
            <summary>
            异步释放相关资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.IocCore.Dispose">
            <summary>
            释放相关资源
            </summary>
        </member>
        <member name="P:Tool.Utils.IocCore.Services">
            <summary>
            提供用于添加对象服务
            </summary>
        </member>
        <member name="P:Tool.Utils.IocCore.Provider">
            <summary>
            提供用于获取注入对象的服务
            </summary>
        </member>
        <member name="T:Tool.Utils.JsonConverterHelper">
            <summary>
            获取 系统中可用的 Json 自定义转换对象
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.JsonConverterHelper.GetDateConverter(System.String)">
            <summary>
            时间类型格式对象
            </summary>
            <param name="format">标准或自定义日期和时间格式字符串。</param>
            <returns><see cref="T:Tool.Utils.DateConverter"/></returns>
        </member>
        <member name="M:Tool.Utils.JsonConverterHelper.GetDBNullConverter">
            <summary>
            <see cref="T:System.DBNull"/> 将 {} 改Null输出
            </summary>
            <returns><see cref="T:Tool.Utils.DateConverter"/></returns>
        </member>
        <member name="T:Tool.Utils.DateConverter">
            <summary>
            Json 标准或自定义日期和时间格式字符串。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.DateConverter.Format">
            <summary>
            标准或自定义日期和时间格式字符串。
            </summary>
        </member>
        <member name="M:Tool.Utils.DateConverter.#ctor(System.String)">
            <summary>
            注册 时间格式实例
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Tool.Utils.DateConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            将字符串转换成原数据
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.DateConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            将原数据转换成字符串
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:Tool.Utils.DateConverter.CanConvert(System.Type)">
            <summary>
            验证是否支持类型
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.DBNullConverter">
            <summary>
            Json <see cref="T:System.DBNull"/> 将 {} 改Null输出
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.DBNullConverter.#ctor">
            <summary>
            注册 <see cref="T:System.DBNull"/> 将 {} 改Null输出
            </summary>
        </member>
        <member name="M:Tool.Utils.DBNullConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            将字符串转换成原数据
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.DBNullConverter.Write(System.Text.Json.Utf8JsonWriter,System.DBNull,System.Text.Json.JsonSerializerOptions)">
            <summary>
            将原数据转换成字符串
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:Tool.Utils.DBNullConverter.CanConvert(System.Type)">
            <summary>
            验证是否支持类型
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.JsonHelper">
            <summary>
            对 <see cref="T:System.Text.Json.JsonSerializer"/> 的拓展类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.JsonHelper.GetReturn(System.Text.Json.JsonElement)">
            <summary>
            将 <see cref="T:System.Text.Json.JsonElement"/> 原型对象 丢入格式成任意实际结果
            </summary>
            <param name="element">原型对象</param>
            <returns>任意实际结果</returns>
        </member>
        <member name="M:Tool.Utils.JsonHelper.GetObject(System.Text.Json.JsonElement.ObjectEnumerator)">
            <summary>
            将 <see cref="T:System.Text.Json.JsonElement"/> 原型对象 丢入格式成 键值对
            </summary>
            <param name="element">原型对象</param>
            <returns>必然是键值对的结果</returns>
        </member>
        <member name="M:Tool.Utils.JsonHelper.GetArray(System.Text.Json.JsonElement.ArrayEnumerator)">
            <summary>
            将 <see cref="T:System.Text.Json.JsonElement"/> 原型对象 丢入格式成 数组
            </summary>
            <param name="element">原型对象</param>
            <returns>必然是数组结果</returns>
        </member>
        <member name="M:Tool.Utils.JsonHelper.GetString(System.Text.Json.JsonElement)">
            <summary>
            将 <see cref="T:System.Text.Json.JsonElement"/> 原型对象 丢入格式成任意实际结果
            </summary>
            <param name="element">原型对象</param>
            <returns>必然是字符串或时间类型的结果</returns>
        </member>
        <member name="M:Tool.Utils.JsonHelper.GetNumber(System.Text.Json.JsonElement)">
            <summary>
            将 <see cref="T:System.Text.Json.JsonElement"/> 原型对象 丢入格式成任意实际结果
            </summary>
            <param name="element">原型对象</param>
            <returns>必然是数值的结果</returns>
        </member>
        <member name="T:Tool.Utils.JsonVar">
            <summary>
            一种获取 Json 格式数据的实现
            </summary>
        </member>
        <member name="P:Tool.Utils.JsonVar.ValueKind">
            <summary>
            大概确定 Json 数据的类型
            </summary>
        </member>
        <member name="P:Tool.Utils.JsonVar.Count">
            <summary>
            当前 层 可能存在的 集合 长度 （string 会显示 字符长度）
            </summary>
        </member>
        <member name="P:Tool.Utils.JsonVar.Data">
            <summary>
            当前 Json 的数据结构
            </summary>
        </member>
        <member name="M:Tool.Utils.JsonVar.#ctor(System.Object)">
            <summary>
            添加任意的数据，无规则。
            </summary>
            <param name="data">一类数据结构</param>
        </member>
        <member name="P:Tool.Utils.JsonVar.Item(System.String)">
            <summary>
            通过键名获取值
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="P:Tool.Utils.JsonVar.Item(System.Int32)">
            <summary>
            通过下标获取值
            </summary>
            <param name="i">下标</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.JsonVar.GetVar``1">
            <summary>
            将对象还原成 特定值
            </summary>
            <typeparam name="T">转换的值</typeparam>
            <returns>得到的值</returns>
        </member>
        <member name="M:Tool.Utils.JsonVar.TryGet(Tool.Utils.JsonVar@,System.Object[])">
            <summary>
            获取当前Json集合下可能存在的数据信息
            </summary>
            <param name="jsonVar">返回存在的结果</param>
            <param name="keys">查找的Key和下标</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Utils.JsonVar.GetJson">
            <summary>
            获取当前对象的Json字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.JsonVar.ToString">
            <summary>
            根据实际类型返回特定内容
            </summary>
            <returns>结果</returns>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(System.Collections.Generic.Dictionary{System.String,System.Object})~Tool.Utils.JsonVar">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.Collections.Generic.Dictionary{System.String,System.Object}">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(System.Collections.ArrayList)~Tool.Utils.JsonVar">
            <summary>
            ArrayList
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.Collections.ArrayList">
            <summary>
            ArrayList
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(System.String)~Tool.Utils.JsonVar">
            <summary>
            string
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.String">
            <summary>
            string
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.Boolean">
            <summary>
            bool
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.Int32">
            <summary>
            int
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.Int64">
            <summary>
            long
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.Double">
            <summary>
            double
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Tool.Utils.JsonVar.op_Implicit(Tool.Utils.JsonVar)~System.Decimal">
            <summary>
            decimal
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Tool.Utils.Log">
            <summary>
            日志工具类
            </summary>
        </member>
        <member name="F:Tool.Utils.Log._flashLog">
            <summary>
            日志核心
            </summary>
        </member>
        <member name="F:Tool.Utils.Log.LogFilePath">
            日志文件路径 
        </member>
        <member name="F:Tool.Utils.Log._que">
            <summary>
            记录消息Queue
            </summary>
        </member>
        <member name="F:Tool.Utils.Log._mre">
            <summary>
            信号
            </summary>
        </member>
        <member name="F:Tool.Utils.Log._log">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Tool.Utils.Log._logthread">
            <summary>
            日志线程
            </summary>
        </member>
        <member name="P:Tool.Utils.Log.IsAlive">
            <summary>
            日志任务是否已经启动了（没有启动时 false，启动后发生意外时 false， 其余时候一直都是 true ）
            </summary>
        </member>
        <member name="F:Tool.Utils.Log._directory">
            <summary>
            当前的存放地址
            </summary>
        </member>
        <member name="P:Tool.Utils.Log.IgnoreMethodName">
            <summary>
            用于打印异常信息时，忽略掉堆栈中的部分方法。
            </summary>
        </member>
        <member name="P:Tool.Utils.Log.IsMoveNext">
            <summary>
            是否在方法名为《MoveNext》时验证是否是异步函数生成，获取显示实际名称
            </summary>
        </member>
        <member name="P:Tool.Utils.Log.Instance">
            <summary>
            实现单例,不建议直接调用。
            </summary>
        </member>
        <member name="M:Tool.Utils.Log.WriteLog">
            <summary>
            从队列中写日志至磁盘
            </summary>
        </member>
        <member name="M:Tool.Utils.Log.Write(System.String,System.String)">
            <summary>
            写入日志
            </summary>
            <param name="LevelName">日志类型</param>
            <param name="LogFilePath">提供的是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.EnqueueMessage(System.String,Tool.Utils.FlashLogLevel,System.Exception,System.String)">
            <summary>
            写日志
            </summary>
            <param name="message">日志文本</param>
            <param name="level">等级</param>
            <param name="ex">Exception</param>
            <param name="logFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.GetLogFilePath(System.String)">
            <summary>
            验证路径是否存在不正常的情况，并返回正常的路径信息
            </summary>
            <param name="LogFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Log.Debug(System.String)">
            <summary>
            一般日志输出
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:Tool.Utils.Log.Debug(System.String,System.String)">
            <summary>
            一般日志输出
            </summary>
            <param name="msg">日志内容</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Debug(System.String,System.Exception)">
            <summary>
            一般日志输出
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Tool.Utils.Log.Debug(System.String,System.Exception,System.String)">
            <summary>
            一般日志输出
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Error(System.String)">
            <summary>
            异常错误
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:Tool.Utils.Log.Error(System.String,System.String)">
            <summary>
            异常错误
            </summary>
            <param name="msg">日志内容</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Error(System.String,System.Exception)">
            <summary>
            异常错误
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Tool.Utils.Log.Error(System.String,System.Exception,System.String)">
            <summary>
            异常错误
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Fatal(System.String)">
            <summary>
            致命的错误
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:Tool.Utils.Log.Fatal(System.String,System.String)">
            <summary>
            致命的错误
            </summary>
            <param name="msg">日志内容</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Fatal(System.String,System.Exception)">
            <summary>
            致命的错误
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Tool.Utils.Log.Fatal(System.String,System.Exception,System.String)">
            <summary>
            致命的错误
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Info(System.String)">
            <summary>
            信息日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:Tool.Utils.Log.Info(System.String,System.String)">
            <summary>
            信息日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Info(System.String,System.Exception)">
            <summary>
            信息日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Tool.Utils.Log.Info(System.String,System.Exception,System.String)">
            <summary>
            信息日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Warn(System.String)">
            <summary>
            警告日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:Tool.Utils.Log.Warn(System.String,System.String)">
            <summary>
            警告日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="M:Tool.Utils.Log.Warn(System.String,System.Exception)">
            <summary>
            警告日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Tool.Utils.Log.Warn(System.String,System.Exception,System.String)">
            <summary>
            警告日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="ex">异常对象</param>
            <param name="LogFilePath">提供的路径可以是相对路径也可以是绝对路径</param>
        </member>
        <member name="P:Tool.Utils.Log.IsEnd">
            <summary>
            日志结束（可以获取日志是否出现了，异常导致终止）
            </summary>
        </member>
        <member name="T:Tool.Utils.FlashLogLevel">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:Tool.Utils.FlashLogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:Tool.Utils.FlashLogLevel.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Tool.Utils.FlashLogLevel.Error">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:Tool.Utils.FlashLogLevel.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Tool.Utils.FlashLogLevel.Fatal">
            <summary>
            致命的
            </summary>
        </member>
        <member name="T:Tool.Utils.FlashLogMessage">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Tool.Utils.FlashLogMessage.LogDateTime">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="P:Tool.Utils.FlashLogMessage.Message">
            <summary>
            输出内容
            </summary>
        </member>
        <member name="P:Tool.Utils.FlashLogMessage.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Tool.Utils.FlashLogMessage.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:Tool.Utils.FlashLogMessage.LogFilePath">
            <summary>
            日志存放路径，默认为空，是默认路径可以填写（绝对的日志存放路径）
            </summary>
        </member>
        <member name="T:Tool.Utils.MemorySegment`1">
            <summary>
            提供内存连续模型
            </summary>
            <typeparam name="T">类型</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.#ctor">
            <summary>
            创建单一连续内存
            </summary>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.#ctor(`0[])">
            <summary>
            创建单一连续内存
            </summary>
            <param name="array">内存</param>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            创建单一连续内存
            </summary>
            <param name="array">内存</param>
            <param name="start">开始读取位置</param>
            <param name="length">读取长度</param>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.#ctor(System.ReadOnlyMemory{`0}@)">
            <summary>
            创建单一连续内存
            </summary>
            <param name="memory">内存</param>
        </member>
        <member name="P:Tool.Utils.MemorySegment`1.EndNext">
            <summary>
            获取节点的最底层
            </summary>
        </member>
        <member name="P:Tool.Utils.MemorySegment`1.LongLength">
            <summary>
            获取连续内存的总长度
            </summary>
        </member>
        <member name="P:Tool.Utils.MemorySegment`1.Length">
            <summary>
            获取连续内存的总长度
            </summary>
        </member>
        <member name="P:Tool.Utils.MemorySegment`1.IsEmpty">
            <summary>
            获取连续内存是否为空
            </summary>
        </member>
        <member name="P:Tool.Utils.MemorySegment`1.Rank">
            <summary>
            层级数
            </summary>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.Append(System.ReadOnlyMemory{`0}@)">
            <summary>
            添加连接的内存数据
            </summary>
            <param name="memory">内存</param>
            <returns>新的连续内存</returns>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.Append(`0[])">
            <summary>
            添加连接的内存数据
            </summary>
            <param name="memory">内存</param>
            <returns>新的连续内存</returns>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.Copy(System.ReadOnlyMemory{`0}@)">
            <summary>
            复制一份内存到连续内存中
            </summary>
            <param name="memory">内存</param>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.ToReadOnlySequence">
            <summary>
            创建可读的连续<see cref="T:System.Buffers.ReadOnlySequence`1"/>（顺序串联）
            </summary>
            <returns>返回<see cref="T:System.Buffers.ReadOnlySequence`1"/></returns>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.ToReadOnlySequence(System.Int32,System.Int32)">
            <summary>
            创建可读的连续<see cref="T:System.Buffers.ReadOnlySequence`1"/>（顺序串联）
            </summary>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">结尾位置</param>
            <returns>返回<see cref="T:System.Buffers.ReadOnlySequence`1"/></returns>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.Empty">
            <summary>
            清空当前连续内存
            </summary>
        </member>
        <member name="M:Tool.Utils.MemorySegment`1.ToString">
            <summary>
            获取相关描述
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.ObjectPool`1">
            <summary>
            自定义的公共对象（重用模型）
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ObjectPool`1.MaximumRetained">
            <summary>
            The maximum number of objects to retain in the pool.
            </summary>
        </member>
        <member name="M:Tool.Utils.ObjectPool`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Tool.Utils.ObjectPool`1.#ctor(System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="MaximumRetained">默认保留最大容量</param>
        </member>
        <member name="M:Tool.Utils.ObjectPool`1.Get">
            <summary>
            获取可用的对象
            </summary>
            <returns>返回对象</returns>
        </member>
        <member name="M:Tool.Utils.ObjectPool`1.Return(`0)">
            <summary>
            归还对象给管理器
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Tool.Utils.ObjectPool`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Tool.Utils.Other.CodeTimer">
            <summary>
            该类 <see cref="T:CodeTimer"/> 有助于在控制台方便时间码测试。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Other.CodeTimer.Initialize">
            <summary>
            初始化 <see cref="T:CodeTimer"/>.
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.CodeTimer.Time(System.Int32,System.Action)">
            <summary>
            Times 测试。
            </summary>
            <param name="iteration">迭代运行指定的行动。</param>
            <param name="action">操作运行。</param>
        </member>
        <member name="M:Tool.Utils.Other.CodeTimer.Time(System.Int32,System.Action{System.Int32})">
            <summary>
            Times 测试。
            </summary>
            <param name="iteration">迭代运行指定的行动。</param>
            <param name="action">操作运行。</param>
        </member>
        <member name="M:Tool.Utils.Other.CodeTimer.Time(System.String,System.Int32,System.Action)">
            <summary>
            Times 测试。
            </summary>
            <param name="name">当前测试的名称。</param>
            <param name="iteration">迭代运行指定的行动。</param>
            <param name="action">操作运行。</param>
        </member>
        <member name="M:Tool.Utils.Other.CodeTimer.Time(System.String,System.Int32,System.Action{System.Int32})">
            <summary>
            Times 测试。
            </summary>
            <param name="name">当前测试的名称。</param>
            <param name="iteration">迭代运行指定的行动。</param>
            <param name="action">操作运行。</param>
        </member>
        <member name="M:Tool.Utils.Other.CodeTimer.Time(System.String,System.Int32,System.Action{System.Int32},System.Boolean)">
            <summary>
            Times 测试。
            </summary>
            <param name="name">当前测试的名称。</param>
            <param name="averageTime">等于运行时间除以迭代数量</param>
            <param name="iteration">迭代运行指定的行动。可以理解为循环几次执行的方法</param>
            <param name="action">操作运行。</param>
        </member>
        <member name="T:Tool.Utils.Other.ConvertHzToPy">
            <summary>
            是<see cref="T:Tool.Utils.Other.ConvertHzToPzGb2312"/>类的升级版
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Other.ConvertHzToPy.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.ConvertHzToPy.Convert(System.String)">
            <summary>
            获取拼音
            </summary>
            <param name="str">汉字</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Other.ConvertHzToPy.GetShortPY(System.String)">
            <summary>
            获取拼音首字母
            </summary>
            <param name="str">汉字</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.Other.ConvertHzToPzGb2312">
            <summary>
            文字转拼音类·ConvertHzToPz_Gb2312
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Other.ConvertHzToPzGb2312.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.ConvertHzToPzGb2312.Convert(System.String)">
            <summary>
            将字符串中的中文转成拼音
            </summary>
            <param name="str">字符串</param>
            <returns>返回完整的拼音</returns>
        </member>
        <member name="T:Tool.Utils.Other.DllInjectionResult">
            <summary>
            进程状态
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.Other.DllInjectionResult.DllNotFound">
            <summary>
            未找到指定的DLL路径
            </summary>
        </member>
        <member name="F:Tool.Utils.Other.DllInjectionResult.GameProcessNotFound">
            <summary>
            未找到指定名称的进程
            </summary>
        </member>
        <member name="F:Tool.Utils.Other.DllInjectionResult.InjectionFailed">
            <summary>
            注入失败
            </summary>
        </member>
        <member name="F:Tool.Utils.Other.DllInjectionResult.Success">
            <summary>
            注入成功
            </summary>
        </member>
        <member name="T:Tool.Utils.Other.DllInjector">
            <summary>
            DLL注入类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.OpenProcess(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            用来打开一个已存在的进程对象，并返回进程的句柄。
            </summary>
            <param name="dwDesiredAccess">渴望得到的访问权限（标志）</param>
            <param name="bInheritHandle">是否继承句柄</param>
            <param name="dwProcessId">进程标示符</param>
            <returns>返回进程的句柄。</returns>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.CloseHandle(System.IntPtr)">
            <summary>
            关闭一个内核对象。 包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。
            </summary>
            <param name="hObject">代表一个已打开对象handle。</param>
            <returns>TRUE：执行成功； FALSE：执行失败，可以调用GetLastError()获知失败原因。</returns>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            功能是检索指定的动态链接库(DLL)中的输出库函数地址。
            </summary>
            <param name="hModule">DLL模块句柄</param>
            <param name="lpProcName">DLL中的函数。</param>
            <returns>返回进程的句柄。</returns>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.GetModuleHandle(System.String)">
            <summary>
            功能是获取一个应用程序或动态链接库的模块句柄。只有在当前进程的场景中，这个句柄才会有效。
            </summary>
            <param name="lpModuleName">指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD</param>
            <returns>只有在当前进程的场景中，这个句柄才会有效，返回进程的句柄。</returns>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.VirtualAllocEx(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            作用是在指定进程的虚拟空间保留或提交内存区域，除非指定MEM_RESET参数，否则将该内存区域置0。
            </summary>
            <param name="hProcess">申请内存所在的进程句柄。</param>
            <param name="lpAddress">保留页面的内存地址；一般用NULL自动分配 。</param>
            <param name="dwSize">欲分配的内存大小，字节单位；注意实际分 配的内存大小是页内存大小的整数倍</param>
            <param name="flAllocationType">MEM_COMMIT：为特定的页面区域分配内存中或磁盘的页面文件中的物理存储 MEM_PHYSICAL ：分配物理内存（仅用于地址窗口扩展内存） MEM_RESERVE：保留进程的虚拟地址空间，而不分配任何物理存储。保留页面可通过继续调用VirtualAlloc（）而被占用 MEM_RESET ：指明在内存中由参数lpAddress和dwSize指定的数据无效 MEM_TOP_DOWN：在尽可能高的地址上分配内存（Windows 98忽略此标志） MEM_WRITE_WATCH：必须与MEM_RESERVE一起指定，使系统跟踪那些被写入分配区域的页面（仅针对Windows 98）</param>
            <param name="flProtect">PAGE_READONLY： 该区域为只读。如果应用程序试图访问区域中的页的时候，将会被拒绝访 PAGE_READWRITE 区域可被应用程序读写 PAGE_EXECUTE： 区域包含可被系统执行的代码。试图读写该区域的操作将被拒绝。 PAGE_EXECUTE_READ ：区域包含可执行代码，应用程序可以读该区域。 PAGE_EXECUTE_READWRITE： 区域包含可执行代码，应用程序可以读写该区域。 PAGE_GUARD： 区域第一次被访问时进入一个STATUS_GUARD_PAGE异常，这个标志要和其他保护标志合并使用，表明区域被第一次访问的权限 PAGE_NOACCESS： 任何访问该区域的操作将被拒绝 PAGE_NOCACHE： RAM中的页映射到该区域时将不会被微处理器缓存（cached) 注:PAGE_GUARD和PAGE_NOCHACHE标志可以和其他标志合并使用以进一步指定页的特征。PAGE_GUARD标志指定了一个防护页（guard page），即当一个页被提交时会因第一次被访问而产生一个one-shot异常，接着取得指定的访问权限。PAGE_NOCACHE防止当它映射到虚拟页的时候被微处理器缓存。这个标志方便设备驱动使用直接内存访问方式（DMA）来共享内存块。</param>
            <returns>执行成功就返回分配内存的首地址，不成功就是NULL。</returns>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.WriteProcessMemory(System.IntPtr,System.IntPtr,System.Byte[],System.UInt32,System.Int32)">
            <summary>
            此函数能写入某一进程的内存区域（直接写入会出Access Violation错误），故需此函数入口区必须可以访问，否则操作将失败。
            </summary>
            <param name="hProcess">由OpenProcess返回的进程句柄。 如参数传数据为 INVALID_HANDLE_VALUE 【即-1】目标进程为自身进程</param>
            <param name="lpBaseAddress">要写的内存首地址 再写入之前，此函数将先检查目标地址是否可用，并能容纳待写入的数据。</param>
            <param name="buffer">指向要写的数据的指针。</param>
            <param name="size">要写入的字节数。</param>
            <param name="lpNumberOfBytesWritten">实际数据的长度</param>
            <returns>非零值代表成功。</returns>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.CreateRemoteThread(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
            创建一个在其它进程地址空间中运行的线程(也称:创建远程线程).。
            </summary>
            <param name="hProcess">线程所属进程的进程句柄. 该句柄必须具有 PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE,和PROCESS_VM_READ 访问权限.</param>
            <param name="lpThreadAttribute">一个指向 SECURITY_ATTRIBUTES 结构的指针, 该结构指定了线程的安全属性.</param>
            <param name="dwStackSize">线程初始大小,以字节为单位,如果该值设为0,那么使用系统默认大小.</param>
            <param name="lpStartAddress">在远程进程的地址空间中,该线程的线程函数的起始地址.</param>
            <param name="lpParameter">传给线程函数的参数.</param>
            <param name="dwCreationFlags">线程的创建标志.</param>
            <param name="lpThreadId">指向所创建线程ID的指针,如果创建失败,该参数为NULL.</param>
            <returns>如果调用成功,返回新线程句柄. 如果失败,返回NULL.</returns>
        </member>
        <member name="F:Tool.Utils.Other.DllInjector._instance">
            <summary>
            一个实例化的静态类
            </summary>
        </member>
        <member name="P:Tool.Utils.Other.DllInjector.GetInstance">
            <summary>
            实例化当前类
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.Inject(System.String,System.String)">
            <summary>
            注入的DLL
            </summary>
            <param name="sProcName">进程名称</param>
            <param name="sDllPath">需要注入的DLL路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Other.DllInjector.bInject(System.UInt32,System.String)">
            <summary>
            进行注入操作
            </summary>
            <param name="pToBeInjected">进程ID</param>
            <param name="sDllPath">需要注入的DLL路径</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.Other.IniFile">
            <summary>
            INI文件读写类。
            Copyright (C) Maticsoft
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.Other.IniFile.path">
            <summary>
            INI文件的路径
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.IniFile.#ctor(System.String)">
            <summary>
            有参构造，ini文件的绝对路径
            </summary>
            <param name="INIPath"></param>
        </member>
        <member name="M:Tool.Utils.Other.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="Section">要在其中写入新字串的小节名称。这个字串不区分大小写</param>
            <param name="Key">要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项</param>
            <param name="Value">指定为这个项写入的字串值。用vbNullString表示删除这个项现有的字串</param>
        </member>
        <member name="M:Tool.Utils.Other.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section">欲在其中查找条目的小节名称。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载这个ini文件所有小节的列表。</param>
            <param name="Key">欲获取的项名或条目名。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载指定小节所有项的列表</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Other.IniFile.IniReadValues(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section">欲在其中查找条目的小节名称。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载这个ini文件所有小节的列表。</param>
            <param name="Key">欲获取的项名或条目名。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载指定小节所有项的列表</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Other.IniFile.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.IniFile.ClearSection(System.String)">
            <summary>
            删除ini文件下personal段落下的所有键
            </summary>
            <param name="Section"></param>
        </member>
        <member name="T:Tool.Utils.Other.KeywordSearch">
            <summary>
            Aho-Corasick算法实现
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="T:Tool.Utils.Other.KeywordSearch.Node">
            <summary>
            构造节点
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Other.KeywordSearch.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            实例化，并赋值
            </summary>
            <param name="keywords"></param>
        </member>
        <member name="M:Tool.Utils.Other.KeywordSearch.Initialize">
            <summary>
            根据关键词来初始化所有节点
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.KeywordSearch.FindAllKeywords(System.String)">
            <summary>
            找出所有出现过的关键词
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Other.KeywordSearch.FilterKeywords(System.String,System.Char)">
            <summary>
            简单地过虑关键词
            </summary>
            <param name="text"></param>
            <param name="symbol">替换为？？？</param>
            <returns>如何替换字符为空，默认为星号</returns>
        </member>
        <member name="M:Tool.Utils.Other.KeywordSearch.Contains(System.String)">
            <summary>
            查找是否存在有违规字符
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.Other.KeywordSearchResult">
            <summary>
            表示一个查找结果
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.Other.KeywordSearchResult.Empty">
            <summary>
            只读类型，表示空
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.KeywordSearchResult.#ctor(System.Int32,System.String)">
            <summary>
            初始化，带参数
            </summary>
            <param name="index">位置</param>
            <param name="keyword">关键词</param>
        </member>
        <member name="P:Tool.Utils.Other.KeywordSearchResult.Index">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:Tool.Utils.Other.KeywordSearchResult.Keyword">
            <summary>
            关键词
            </summary>
        </member>
        <member name="T:Tool.Utils.Other.Rmb">
            <summary> 
            Rmb 的摘要说明。 
            用于转换人民币大小金额
            </summary> 
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Other.Rmb.CmycurD(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:Tool.Utils.Other.Rmb.CmycurD(System.String)">
            <summary> 
            一个重载，将字符串先转换成数字在调用CmycurD(decimal num) 
            </summary> 
            <param name="numstr">用户输入的金额，字符串形式未转成decimal</param> 
            <returns></returns> 
        </member>
        <member name="T:Tool.Utils.Other.StrToPinyin">
            <summary>
            获取汉子首字母类·StrToPinyin
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Other.StrToPinyin.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.Other.StrToPinyin.GetChineseSpell(System.String)">
            <summary> 
            获得一个字符串的汉语拼音码 (首字母)
            </summary> 
            <param name="strText">字符串</param> 
            <returns>汉语拼音码,该字符串只包含大写的英文字母</returns> 
        </member>
        <member name="T:Tool.Utils.ReflectionHelper">
            <summary>
            获取<see cref="T:System.Type"/> 对象的封装类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.ReflectionHelper.GetType(System.String)">
            <summary>
            根据dll引用名索引dll的type （例如写法：Tool,Tool.Utils.ReflectionHelper）
            </summary>
            <param name="typeAndAssName">引用的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ReflectionHelper.GetType(System.String,System.String)">
            <summary>
            获取当前项目进程中的dll
            </summary>
            <param name="typeFullName">引用的绝对路径</param>
            <param name="assemblyName">dll名称</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.TaskHelper.TaskAsyncHelper">
            <summary>
            实现异步Task对象的异步实现类
            </summary>
        </member>
        <member name="M:Tool.Utils.TaskHelper.TaskAsyncHelper.BeginTask(System.Func{System.Threading.Tasks.Task},System.AsyncCallback,System.Object)">
            <summary>
            将一个异步任务对象转换成IAsyncResult对象
            </summary>
            <param name="taskFunc">一个异步对象</param>
            <param name="callback">异步完成时使用的回调对象</param>
            <param name="state">附带的数据</param>
            <returns>返回<see cref="T:System.IAsyncResult"/></returns>
        </member>
        <member name="M:Tool.Utils.TaskHelper.TaskAsyncHelper.EndTask(System.IAsyncResult)">
            <summary>
            用于结束异步完成任务
            </summary>
            <param name="ar">开始任务时的<see cref="T:System.IAsyncResult"/>对象</param>
        </member>
        <member name="T:Tool.Utils.TextUtility">
            <summary>
            提供技术支持的类库
            </summary>
        </member>
        <member name="M:Tool.Utils.TextUtility.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.TextUtility.CreateAuthStr(System.Int32)">
            <summary>
            创建身份验证的秘钥
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CreateAuthStr(System.Int32,System.Boolean)">
            <summary>
            创建身份验证的秘钥
            </summary>
            <param name="len">长度</param>
            <param name="onlyNum">复杂强度</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CreateRandom(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            创建身份验证的秘钥
            </summary>
            <param name="length"></param>
            <param name="isuseNum">带数字</param>
            <param name="isuseLow">带字母小写</param>
            <param name="isuseUpp">带字母大写</param>
            <param name="isuseSpe">带上其他符号</param>
            <param name="custom">自带字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CreateRandomLowercase(System.Int32)">
            <summary>
            创建随机小写
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CreateRandomNum(System.Int32)">
            <summary>
            创建随机数
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CreateRandomNum2(System.Int32)">
            <summary>
            创建随机数
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.GetNewSeed">
            <summary>
            获取新种子
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CreateTemporaryPassword(System.Int32)">
            <summary>
            创建临时密码
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutLeft(System.String,System.Int32)">
            <summary>
            将字符串从左边开始删除
            </summary>
            <param name="originalVal">字符串</param>
            <param name="cutLength">从左开始删除几位</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutRight(System.String,System.Int32)">
            <summary>
            将字符串从右边开始删除
            </summary>
            <param name="originalVal">字符串</param>
            <param name="cutLength">从右开始删除几位</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutString(System.String,System.Int32)">
            <summary>
            减少字符串数量
            </summary>
            <param name="originalVal">字符串</param>
            <param name="startIndex">从第几位开始</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutString(System.String,System.Int32,System.Int32)">
            <summary>
            减少字符串数量
            </summary>
            <param name="originalVal">字符串</param>
            <param name="startIndex">从第几位开始</param>
            <param name="cutLength">到第几位结束</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutStringProlongSymbol(System.String,System.Int32)">
            <summary>
            切割字符串
            </summary>
            <param name="originalVal">字符串</param>
            <param name="cutLength">去掉几位</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutStringProlongSymbol(System.String,System.Int32,System.String)">
            <summary>
            切割字符串加上延长符号
            </summary>
            <param name="originalVal">字符串</param>
            <param name="cutLength">去掉几位</param>
            <param name="prolongSymbol">延长符号</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutStringTitle(System.Object,System.Int32)">
            <summary>
            减少字符串标题
            </summary>
            <param name="content">字符串标题</param>
            <param name="cutLength">减少几位</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.EmptyTrimOrNull(System.String)">
            <summary>
            验证字符串是否为空，或是NULl，""，空格
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.FormatIP(System.String,System.Int32)">
            <summary>
            格式的IP
            </summary>
            <param name="ip">ip地址</param>
            <param name="fields">选择格式类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.EmailEncode(System.String)">
            <summary>
            电子邮件编码
            </summary>
            <param name="originalStr">电子邮件字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.GetEmailHostName(System.String)">
            <summary>
            获取电子邮件主机名
            </summary>
            <param name="strEmail">电子邮件字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.FormatMoney(System.Decimal)">
            <summary>
            设置货币格式
            </summary>
            <param name="money">货币数量</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.DiffDateAndTime(System.Object,System.Object)">
            <summary>
            日期和时间差异
            </summary>
            <param name="todate">开始日期</param>
            <param name="fodate">结束日期</param>
        </member>
        <member name="M:Tool.Utils.TextUtility.DiffDateAndTime(System.Object,System.Object,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            日期和时间差异
            </summary>
            <param name="todate">开始日期</param>
            <param name="fodate">结束日期</param>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <param name="v5"></param>
            <param name="v6"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.DiffDateDays(System.DateTime)">
            <summary>
            差异日期天数
            </summary>
            <param name="oneDateTime">时间对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.DiffDateDays(System.String)">
            <summary>
            差异日期天数
            </summary>
            <param name="oneDateTime">时间字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.FormatDateSpan(System.Object)">
            <summary>
            根据时间对象返回字符串的大概信息（例如：1年前，1月前等等）
            </summary>
            <param name="dateSpan">时间对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.FormatDateTime(System.DateTime,System.Int32)">
            <summary>
            几种时间格式
            </summary>
            <param name="oneDateVal">时间对象</param>
            <param name="formatType">根据ID返回指定的类型</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.FormatDateTime(System.String,System.Int32)">
            <summary>
            格式日期时间
            </summary>
            <param name="oneDateVal">一个日期值</param>
            <param name="formatType">格式日期</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.FormatSecondSpan(System.Int64)">
            <summary>
            根据时间戳返回 天时分秒
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.GetDateTimeLongString">
            <summary>
            获取当前日期时间长字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.GetDateTimeLongString(System.String)">
            <summary>
            获取当前日期时间长字符串
            </summary>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.AddLast(System.String,System.String)">
            <summary>
            追加字符串
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="lastStr">追加字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.GetFullPath(System.String)">
            <summary>
            根据当前输入的相对于项目的路径返回绝对路径
            </summary>
            <param name="strPath">相对路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.InArray(System.String,System.String[])">
            <summary>
            验证一个字符串数组里面是否包含一个字符串
            </summary>
            <param name="matchStr">一个字符串</param>
            <param name="strArray">字符串数组</param>
            <returns>返回状态</returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.InArray(System.String,System.String,System.String)">
            <summary>
            验证一个字符串数组里面是否包含一个字符串
            </summary>
            <param name="matchStr">一个字符串</param>
            <param name="originalStr">分割字符</param>
            <param name="separator">可以被分割字符分割的字符串</param>
            <returns>返回状态</returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.InArray(System.String,System.String[],System.Boolean)">
            <summary>
            在数组中
            </summary>
            <param name="matchStr">匹配字符串</param>
            <param name="strArray">字符串数组</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.InArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            在数组中
            </summary>
            <param name="matchStr">匹配字符串</param>
            <param name="strArray">字符串数组</param>
            <param name="separator">分离器</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.InArrayIndexOf(System.String,System.String[])">
            <summary>
            在数组索引中
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="strArray">字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.InArrayIndexOf(System.String,System.String[],System.Boolean)">
            <summary>
            在数组索引中
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="strArray">字符串数组</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.InIPArray(System.String,System.String[])">
            <summary>
            在IP数组中是否包含该IP
            </summary>
            <param name="ip">验证IP</param>
            <param name="ipArray">IP集合</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.JavaScriptEncode(System.Object)">
            <summary>
            JavaScript编码
            </summary>
            <param name="obj">原始字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.JavaScriptEncode(System.String)">
            <summary>
            JavaScript编码
            </summary>
            <param name="originalStr">原始字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.Join(System.String,System.String[])">
            <summary>
            等同于Join方法，就是增加了验证
            </summary>
            <param name="separator"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.JoinString(System.String[])">
            <summary>
            等同于Join方法，就是增加了验证
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.JoinString(System.String,System.String[])">
            <summary>
            等同于Join方法，就是增加了验证
            </summary>
            <param name="separator"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.Length(System.String)">
            <summary>
            获取字符串长度
            </summary>
            <param name="originalVal"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.RegexReplaceTags(System.String,System.String,System.Object[])">
            <summary>
            正则替换标记
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="specialChares">特殊字符</param>
            <param name="entityClasses">实体类</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.RepeatStr(System.String,System.Int32)">
            <summary>
            感觉有问题，可以自己玩一下
            </summary>
            <param name="repeatStr"></param>
            <param name="repeatCount"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.ReplaceCnChar(System.String)">
            <summary>
            移除掉字符串中所有的中文
            </summary>
            <param name="originalVal"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.ReplaceLuceneSpecialChar(System.String)">
            <summary>
            移除字符串中存在的所有符号
            </summary>
            <param name="originalVal"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.ReplaceStrUseSC(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            替换字符串使用字符串数组
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="sc">要替换字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.ReplaceStrUseSC(System.String,System.String[])">
            <summary>
            替换字符串使用字符串数组
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="sc">要替换字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.ReplaceStrUseStr(System.String,System.String,System.String)">
            <summary>
            替换字符串，使用其他字符串代替
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="replacedStr">要替换字符串</param>
            <param name="replaceStr">替换为的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.SplitStrArray(System.String,System.String)">
            <summary>
            拆分成字符串数组
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="separator">分离器</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.SplitStrUseLines(System.String,System.Int32)">
            <summary>
            拆分字符串使用行
            </summary>
            <param name="originalContent">原始内容</param>
            <param name="splitLines">拆分线条</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.SplitStrUseStr(System.String,System.String)">
            <summary>
            拆分字符串使用 例如：123456，SplitStrUseStr("123456",".") = .1.2.3.4.5.6.
            </summary>
            <param name="originalStr">原字符</param>
            <param name="separator">分离器</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.SqlEncode(System.String)">
            <summary>
            SQL编码
            </summary>
            <param name="strSQL">原本SQL</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.TextDecode(System.String)">
            <summary>
            文本解码
            </summary>
            <param name="originalStr">原始字符</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.TextEncode(System.String)">
            <summary>
            文本编码
            </summary>
            <param name="originalStr">原始字符</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.TransformFirstToLower(System.String)">
            <summary>
            首字母转换 小写
            </summary>
            <param name="originalVal">原始值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.TransformFirstToUpper(System.String)">
            <summary>
            首字母转换 大写
            </summary>
            <param name="originalVal">原始值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.GetDaysDate(System.DateTime)">
            <summary>
            返回相隔天数
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.GetDateTimeByDays(System.Int32)">
            <summary>
            返回指定天数的时间
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutUrlReturnPath(System.String)">
            <summary>
            取出网址中的域名。
            </summary>
            <param name="url">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.IsPrivateNetwork(System.String)">
            <summary>
            根据传入ipv4地址，检测是否是局域网IP
            </summary>
            <param name="ipv4Address">ipv4地址</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.IsPrivateNetwork(System.Net.IPAddress)">
            <summary>
            根据传入ipv4地址，检测是否是局域网IP
            </summary>
            <param name="ipv4Address">ipv4地址</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.IpAddressInRange(System.String,System.String,System.String)">
            <summary>
            判断IP地址在不在某个IP地址段（仅支持IPV4）
            </summary>
            <param name="input">需要判断的IP地址</param>
            <param name="begin">起始地址</param>
            <param name="ends">结束地址</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.IPToID(System.String)">
            <summary>
            IP地址转换成数字
            </summary>
            <param name="addr">IP地址</param>
            <returns>数字,输入无效IP地址返回0</returns>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutStringTitleRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;[^&gt;]+&gt;</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '&lt;'.<br/>
            ○ Match a character other than '&gt;' atomically at least once.<br/>
            ○ Match '&gt;'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.TextUtility.ReplaceCnCharRegex">
            <remarks>
            Pattern:<br/>
            <code>[^\\u4E00-\\u9FA5]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^\u4E00-\u9FA5].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.TextUtility.CutUrlReturnPathRegex">
            <remarks>
            Pattern:<br/>
            <code>^(http:\\/\\/||https:\\/\\/)[A-Za-z0-9_:.]*\\/</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ Match the string "http://".<br/>
                    ○ Match an empty string.<br/>
                    ○ Match the string "https://".<br/>
            ○ Match a character in the set [.0-:A-Z_a-z] atomically any number of times.<br/>
            ○ Match '/'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Tool.Utils.ThreadQueue.ActionLock">
            <summary>
            一个公共锁
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.ActionLock.WaitTimeout">
            <summary>
            锁定时长最大限制 （毫秒）
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.ActionLock.Start">
            <summary>
            上锁
            </summary>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.ActionLock.End">
            <summary>
            解锁
            </summary>
            <returns>返回是否成功</returns>
        </member>
        <member name="T:Tool.Utils.ThreadQueue.ActionQueue`2">
            <summary>
            一个(公共线程安全)消息队列任务模型
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.ThreadQueue.ActionQueue`2.WaitTimeout">
            <summary>
            分配的任务队列线程完成后最大保留时间
            </summary>
        </member>
        <member name="E:Tool.Utils.ThreadQueue.ActionQueue`2.ContinueWith">
            <summary>
            注册完成任务后触发的事件
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.ActionQueue`2.IsContinueWith">
            <summary>
            表示当前事件是否已经注册
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.ActionQueue`2.Add(System.Action{`0},`0)">
            <summary>
            添加无返回值任务
            </summary>
            <param name="action">任务</param>
            <param name="state">参数</param>
            <returns>获取<see cref="T:Tool.Utils.ThreadQueue.WaitAction`2"/>对象</returns>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.ActionQueue`2.Add(System.Func{`0,System.Threading.Tasks.ValueTask{`1}},`0)">
            <summary>
            添加有返回值任务
            </summary>
            <param name="func">任务</param>
            <param name="state">参数</param>
            <returns>获取<see cref="T:Tool.Utils.ThreadQueue.WaitAction`2"/>对象</returns>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.ActionQueue`2.Add(Tool.Utils.ThreadQueue.WaitAction{`0,`1})">
            <summary>
            添加队列任务
            </summary>
            <param name="waitaction">任务对象</param>
        </member>
        <member name="T:Tool.Utils.ThreadQueue.AtomCountLock">
            <summary>
            一个原子计数锁，可以确保多线程下，可调用区域内只能调用固定次数
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.AtomCountLock.InitialCount">
            <summary>
            最大阈值
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.AtomCountLock.CurrentCount">
            <summary>
            当前调用次数
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.AtomCountLock.#ctor(System.UInt32)">
            <summary>
            初始化一个原子锁
            </summary>
            <param name="initialCount">指定最大可用数量</param>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.AtomCountLock.Wait">
            <summary>
            达到最大阈值，只上锁不计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.AtomCountLock.Set">
            <summary>
            没调用一次可获得一次调用计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.AtomCountLock.Reset">
            <summary>
            将所有计数清空，将重新获得调用计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.AtomCountLock.Dispose">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="T:Tool.Utils.ThreadQueue.TaskQueue">
            <summary>
            一个消息队列任务模型（异步处理任务·线程安全）
            <list type="table">警告：在队列执行任务中，注册任务是很傻逼的行为，这回导致无限期死锁，是死锁，死锁。</list>
            <list type="table">但是并不代表不能注册，但是如业务需要注册，请不要直接 等待任务 结果 await 等行为，这才是导致死锁发生的祸因。</list>
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue.Count">
            <summary>
            当前活动的任务数
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue.TotalCount">
            <summary>
            累计已有的任务数
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue.CompleteCount">
            <summary>
            累计已完成的任务数
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue.Enqueue(System.Object,System.Delegate,System.Object[])">
            <summary>
            添加一个新的任务（他会排队一个一个完成）
            </summary>
            <param name="callClass">调用类信息</param>
            <param name="action">任务</param>
            <param name="args">任务需要的参数</param>
            <remarks>可等待的结果</remarks>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue.Enqueue``1(System.Object,System.Delegate,System.Object[])">
            <summary>
            添加一个新的任务（他会排队一个一个完成）
            </summary>
            <param name="callClass">调用类信息</param>
            <param name="func">任务</param>
            <param name="args">任务需要的参数</param>
            <remarks>可等待的结果</remarks>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue.StaticEnqueue(System.Delegate,System.Object[])">
            <summary>
            添加一个新的任务（他会排队一个一个完成）
            </summary>
            <param name="action">任务</param>
            <param name="args">任务需要的参数</param>
            <remarks>可等待的结果</remarks>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue.StaticEnqueue``1(System.Delegate,System.Object[])">
            <summary>
            添加一个新的任务（他会排队一个一个完成）
            </summary>
            <param name="func">任务</param>
            <param name="args">任务需要的参数</param>
            <remarks>可等待的结果</remarks>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue.GetOrAdd(System.Delegate)">
            <summary>
            获取一个可以动态传递的委托（可复用保证线程安全）
            </summary>
            <param name="func">任务需要的参数</param>
            <remarks><see cref="T:Tool.Utils.ActionDelegate.IActionDispatcher"/></remarks>
        </member>
        <member name="T:Tool.Utils.ThreadQueue.TaskQueue`1">
            <summary>
             一个消息队列任务模型（异步处理任务·线程安全）
            </summary>
            <typeparam name="T">传入对象</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="E:Tool.Utils.ThreadQueue.TaskQueue`1.ContinueWith">
            <summary>
            注册完成任务后触发的事件
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue`1.IsContinueWith">
            <summary>
            表示当前事件是否已经注册
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask})">
            <summary>
            创建执行需要的函数
            </summary>
            <param name="func">队列处理的函数</param>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            创建执行需要的函数
            </summary>
            <param name="func">队列处理的函数</param>
            <param name="creationOptions">异步线程属性</param>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue`1.Add(`0)">
            <summary>
            添加一个新的任务（他会排队一个一个完成）
            </summary>
            <param name="state">任务需要的参数</param>
        </member>
        <member name="T:Tool.Utils.ThreadQueue.TaskQueue`2">
            <summary>
            一个消息队列任务模型（异步处理任务·线程安全）
            </summary>
            <typeparam name="T">传入对象</typeparam>
            <typeparam name="TResult">返回结果</typeparam>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.ThreadQueue.TaskQueue`2.WaitTimeout">
            <summary>
            分配的任务队列线程完成后最大保留时间
            </summary>
        </member>
        <member name="E:Tool.Utils.ThreadQueue.TaskQueue`2.ContinueWith">
            <summary>
            注册完成任务后触发的事件
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue`2.CompleteCount">
            <summary>
            累计已完成的任务数
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue`2.Count">
            <summary>
            当前活动的任务数
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue`2.TotalCount">
            <summary>
            累计已有的任务数
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.TaskQueue`2.IsContinueWith">
            <summary>
            表示当前事件是否已经注册
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue`2.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask{`1}})">
            <summary>
            创建执行需要的函数
            </summary>
            <param name="func">队列处理的函数</param>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue`2.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask{`1}},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            创建执行需要的函数
            </summary>
            <param name="func">队列处理的函数</param>
            <param name="creationOptions">异步线程属性</param>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.TaskQueue`2.Add(`0)">
            <summary>
            添加一个新的任务（他会排队一个一个完成）
            </summary>
            <param name="state">任务需要的参数</param>
        </member>
        <member name="T:Tool.Utils.ThreadQueue.WaitAction`2">
            <summary>
            创建任务执行对象
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.WaitTimeout">
            <summary>
            Wait函数最大等待时长 -1 无限制等待
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.IsCompleted">
            <summary>
            任务完成情况
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.IsException">
            <summary>
            是否发生异常
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.Exception">
            <summary>
            任务执行中发生的异常
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.IsWait">
            <summary>
            是否正在调用Wait函数
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.Result">
            <summary>
            任务完成后的结果
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.State">
            <summary>
            需要的参数
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.WaitAction`2.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask{`1}},`0)">
            <summary>
            创建有返回结果的任务
            </summary>
            <param name="func">任务</param>
            <param name="state">参数</param>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.WaitAction`2.#ctor(System.Action{`0},`0)">
            <summary>
            创建无返回结果的任务
            </summary>
            <param name="action">任务</param>
            <param name="state">参数</param>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.WaitAction`2.Wait">
            <summary>
            其他线程中可用等待获取的任务结果
            </summary>
            <returns>返回成功失败</returns>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.WaitAction`2.Run">
            <summary>
            启动已就绪的任务
            </summary>
        </member>
        <member name="M:Tool.Utils.ThreadQueue.WaitAction`2.Dispose">
            <summary>
            回收对象
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.Func">
            <summary>
            执行的任务
            </summary>
        </member>
        <member name="P:Tool.Utils.ThreadQueue.WaitAction`2.WaitHandle">
            <summary>
            任务的事件
            </summary>
        </member>
        <member name="T:Tool.Utils.TypeExtension">
            <summary>
            对Type进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync(System.Action)">
            <summary>
            创建异步返回模式
            </summary>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``1(System.Action{``0},``0)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``2(System.Action{``0,``1},``0,``1)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            创建异步模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``1(System.Func{``0})">
            <summary>
            创建异步返回模式
            </summary>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``2(System.Func{``0,``1},``0)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.InvokeAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            创建异步返回模式
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delegate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.DefaultForType(System.Type)">
            <summary>
            获取当前类型的默认值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.IsString(System.Type)">
            <summary>
            验证是否是字符类型
            </summary>
            <param name="type"></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.IsNumber(System.Type)">
            <summary>
            验证是否是数字类型
            </summary>
            <param name="type"></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.IsType(System.Type)">
            <summary>
            验证是否是系统变量
            </summary>
            <param name="type"></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.IsDictionary(System.Type)">
            <summary>
            判断是否是字典类型
            </summary>
            <param name="type">类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetProperties(System.Object)">
            <summary>
            获取当前对象下所有属性集合
            </summary>
            <param name="obj">对象源</param>
            <returns>属性集合</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetProperties(System.Type)">
            <summary>
            获取当前对象下所有属性集合
            </summary>
            <param name="componentType">对象源类型</param>
            <returns>属性集合</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetPropertieFind(System.Object,System.String,System.Boolean)">
            <summary>
            获取当前对象下指定名称的属性对象
            </summary>
            <param name="obj">对象源</param>
            <param name="name">属性名称</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetValue(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            根据属性对象获取属性的值
            </summary>
            <param name="obj">对象源</param>
            <param name="descriptor">属性对象</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetValue(System.Object,System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            根据属性对象修改属性的值
            </summary>
            <param name="obj">对象源</param>
            <param name="descriptor">属性对象</param>
            <param name="value">修改属性的值</param>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            获取指定属性值
            </summary>
            <param name="obj">对象源</param>
            <param name="name">属性名称</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>返回属性值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            修改指定属性值
            </summary>
            <param name="obj">对象源</param>
            <param name="name">属性名称</param>
            <param name="value">修改的值</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetValue(System.Object,System.String)">
            <summary>
            获取指定属性值（新模式）获取不到时 会抛出异常
            </summary>
            <param name="obj">对象源</param>
            <param name="name">属性名称</param>
            <returns>返回属性值</returns>
            <exception cref="T:System.Exception">字段不存在时会报错！</exception>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetValue(System.Object,System.String,System.Object)">
            <summary>
            修改指定属性值（新模式）
            </summary>
            <param name="obj">对象源</param>
            <param name="name">属性名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetFieldKey(System.Object,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以获取</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetFieldKey(System.Object,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetFieldKey``1(System.Object,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以获取</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetFieldKey``1(System.Object,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetFieldKey(System.Object,System.Type,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="type">类型</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以获取</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetFieldKey(System.Object,System.Type,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="type">类型</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetPropertyKey(System.Object,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以获取</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetPropertyKey(System.Object,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetPropertyKey``1(System.Object,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以获取</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetPropertyKey``1(System.Object,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetPropertyKey(System.Object,System.Type,System.String,System.Boolean@)">
            <summary>
            获取指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="type">类型</param>
            <param name="name">变量名称</param>
            <param name="isexist">是否可以获取</param>
            <returns>返回变量值</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.SetPropertyKey(System.Object,System.Type,System.String,System.Object)">
            <summary>
            修改指定变量值 (支持 public/private/protected) 静态时obj为null
            </summary>
            <param name="obj">对象源</param>
            <param name="type">类型</param>
            <param name="name">变量名称</param>
            <param name="value">修改的值</param>
            <returns>返回是否查找到并进行修改</returns>
        </member>
        <member name="M:Tool.Utils.TypeExtension.GetPropertys(System.Type)">
            <summary>
            获取公共管理的属性构造器
            </summary>
            <param name="type">类型</param>
            <returns>属性构造器</returns>
        </member>
        <member name="T:Tool.Utils.TypeHelper">
            <summary>
            类型助手
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.TypeHelper.ChangeType(System.Type,System.Object)">
            <summary>
            根据Type,返回可能存在的值
            </summary>
            <param name="targetType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.GetClassSimpleName(System.Type)">
            <summary>
            获取类实例名称
            </summary>
            <param name="t">Type</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.GetDefaultValue(System.Type)">
            <summary>
            获取默认值
            </summary>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.GetTypeByRegularName(System.String)">
            <summary>
            按常规名称获取类型
            </summary>
            <param name="regularName"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.GetTypeRegularName(System.Type)">
            <summary>
            获取类型常规名称
            </summary>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.GetTypeRegularNameOf(System.Object)">
            <summary>
            获取类型的常规名称
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.IsFixLength(System.Type)">
            <summary>
            是不是数据类型
            </summary>
            <param name="destDataType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.IsNumbericType(System.Type)">
            <summary>
            是数字类型
            </summary>
            <param name="destDataType"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeHelper.IsSimpleType(System.Type)">
            <summary>
            是简单类型
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Utils.TypeParse">
            <summary>
            判读该值是否是可以被强制转换
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.TypeParse.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.TypeParse.IsNumericArray(System.String[])">
            <summary>
            判断是不是数字
            </summary>
            <param name="strNumber">判断值 数组</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.TypeParse.SafeLongToInt32(System.Int64)">
            <summary>
            判断<see cref="T:System.Int64"/>中的值是不是在32位以内
            </summary>
            <param name="expression">判断值</param>
            <returns>返回<see cref="T:System.Int32"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.TypeParse.StrToBool(System.Object,System.Boolean)">
            <summary>
            判读该值是否是<see cref="T:System.Boolean"/>类型
            </summary>
            <param name="expression">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.TypeParse.StrToFloat(System.Object,System.Single)">
            <summary>
            判读该值是否是<see cref="T:System.Single"/>类型
            </summary>
            <param name="expression">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Single"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.TypeParse.StrToInt(System.Object,System.Int32)">
            <summary>
            判读该值是否是<see cref="T:System.Int32"/>类型
            </summary>
            <param name="expression">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Int32"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.TypeParse.ConvertIntDateTime(System.Double)">
            <summary>
            转换世界公认秒数为时间格式
            </summary>
            <param name="d">秒数</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeParse.ConvertDateTimeInt(System.DateTime)">
            <summary>
            转换时间为世界公认秒数。
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.TypeParse.IsFloatRegex">
            <remarks>
            Pattern:<br/>
            <code>^([-]|[0-9])[0-9]*(\\.\\w*)?$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [-0-9].<br/>
            ○ Match a character in the set [0-9] greedily any number of times.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a word character atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.TypeParse.IsIntRegex">
            <remarks>
            Pattern:<br/>
            <code>^[-]?[0-9]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '-' atomically, optionally.<br/>
            ○ Match a character in the set [0-9] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Tool.Utils.Utility">
            <summary>
            常用方法类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Utility.SequenceCompare(System.ReadOnlySpan{System.Byte}@,System.ReadOnlySpan{System.Byte}@)">
            <summary>
            比较两个数组是否相同
            </summary>
            <param name="x">对比一</param>
            <param name="y">对比二</param>
            <returns>结果</returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetIntegerSomeBit(System.Int32,System.Int32)">
            <summary>  
            取整数的某一位  
            </summary>  
            <param name="_Resource">要取某一位的整数</param>  
            <param name="_Mask">要取的位置索引，自右至左为0-7</param>  
            <returns>返回某一位的值（0或者1）</returns>  
        </member>
        <member name="M:Tool.Utils.Utility.SetIntegerSomeBit(System.Int32,System.Int32,System.Boolean)">
            <summary>  
            将整数的某位置为0或1  
            </summary>  
            <param name="_Mask">整数的某位</param>  
            <param name="a">整数</param>  
            <param name="flag">是否置1，TURE表示置1，FALSE表示置0</param>  
            <returns>返回修改过的值</returns>  
        </member>
        <member name="M:Tool.Utils.Utility.GetDistance(System.Int64)">
            <summary>
            计算两点位置的距离，返回两点的距离，单位：米
            该公式为GOOGLE提供，误差小于0.2米
            </summary>
            <param name="size">一个数字</param>
            <returns>返回一个数组（每个位）</returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算两点位置的距离，返回两点的距离，单位：米
            该公式为GOOGLE提供，误差小于0.2米
            </summary>
            <param name="lng1">第一点经度</param>
            <param name="lat1">第一点纬度</param>        
            <param name="lng2">第二点经度</param>
            <param name="lat2">第二点纬度</param>
            <returns>返回相隔距离</returns>
        </member>
        <member name="M:Tool.Utils.Utility.Rad(System.Double)">
            <summary>
            经纬度转化成弧度
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Utility.ConvertVersionStr2Int(System.String)">
            <summary>
            IP位移操作
            </summary>
            <param name="strVersion">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Utility.DataTableToJson(System.Data.DataTable)">
            <summary>
            将<see cref="T:System.Data.DataTable"/> 对象 转换成 JOSN 字符串
            </summary>
            <param name="dt">数据源</param>
            <returns>JOSN 字符串</returns>
        </member>
        <member name="M:Tool.Utils.Utility.DataTableToJson(System.Data.DataTable,System.Boolean)">
            <summary>
            将<see cref="T:System.Data.DataTable"/> 对象 转换成 JOSN 字符串
            </summary>
            <param name="dt">数据源</param>
            <param name="dtDispose">是否释放数据源</param>
            <returns>JOSN 字符串</returns>
        </member>
        <member name="M:Tool.Utils.Utility.MD5(System.String)">
            <summary>
            MD5加密 （32）
            </summary>
            <param name="s">原文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetAppSetting(System.String)">
            <summary>
            获取 .config 下面的 appSettings 节点内的节点配置内容
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetHostName">
            <summary>
            获取本地计算机的主机名。
            </summary>
            <returns>包含本地计算机的 DNS 主机名的字符串。</returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetOSVersion">
            <summary>
            获取操作系统版本
            </summary>
            <returns>返回十六进制字符串</returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetTextFromHTML(System.String)">
            <summary>
            从HTML获取文本
            </summary>
            <param name="HTML">HTML字符串</param>
            <returns>返回内容</returns>
        </member>
        <member name="M:Tool.Utils.Utility.Int2IP(System.Int64)">
            <summary>
            IP 地址的长值。 例如，Big-Endian 格式的值 0x2414188f 可能为 IP 地址"143.24.20.36"。
            </summary>
            <param name="ipNumber">数字类型的IP信息</param>
            <returns>IP地址</returns>
        </member>
        <member name="M:Tool.Utils.Utility.IP2Int(System.String)">
            <summary>
            将IP地址转换为纯数字
            </summary>
            <param name="ip">正确的IP</param>
            <returns>返回纯数字</returns>
        </member>
        <member name="M:Tool.Utils.Utility.IsNumericArray(System.String[])">
            <summary>
            验证该string数组里面是否都是可以被转为int类型的数据
            </summary>
            <param name="strNumber">string数组</param>
            <returns>返回<see cref="T:System.Boolean"/>状态</returns>
        </member>
        <member name="M:Tool.Utils.Utility.SearchUTF8File(System.String)">
            <summary>
            查找指定目录下的所有.htm后缀的文件并返回字符串编码是UTF-8的文件路径
            </summary>
            <param name="directory">指定的目录，绝对路径</param>
            <returns>返回是UTF-8格式的.htm路径</returns>
        </member>
        <member name="M:Tool.Utils.Utility.IsUTF8(System.IO.FileStream)">
            <summary>
            判断该文件流是否是UTF-8格式
            </summary>
            <param name="sbInputStream">文件流</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Utility.StrToBool(System.Object,System.Boolean)">
            <summary>
            判读该值是否是<see cref="T:System.Boolean"/>类型
            </summary>
            <param name="expression">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Utility.StrToBool(System.String,System.Boolean)">
            <summary>
            判读该值是否是<see cref="T:System.Boolean"/>类型
            </summary>
            <param name="expression">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Utility.StrToFloat(System.Object,System.Single)">
            <summary>
            判读该值是否是<see cref="T:System.Single"/>类型
            </summary>
            <param name="strValue">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Single"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Utility.StrToFloat(System.String,System.Single)">
            <summary>
            判读该值是否是<see cref="T:System.Single"/>类型
            </summary>
            <param name="strValue">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Single"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Utility.StrToInt(System.Object,System.Int32)">
            <summary>
            判读该值是否是<see cref="T:System.Int32"/>类型
            </summary>
            <param name="expression">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Int32"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Utility.StrToInt(System.String,System.Int32)">
            <summary>
            判读该值是否是<see cref="T:System.Int32"/>类型
            </summary>
            <param name="expression">判断值</param>
            <param name="defValue">当判断值为空时返回的值</param>
            <returns>返回<see cref="T:System.Int32"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Utility.ToColor(System.String)">
            <summary>
            根据十六进制颜色值返回<see cref="T:System.Drawing.Color"/> 颜色对象
            </summary>
            <param name="color">十六进制颜色值 例如：#000000</param>
            <returns>返回<see cref="T:System.Drawing.Color"/> 颜色对象</returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetIPAddressListAsync(System.String)">
            <summary>
            获取域名下的所有IP信息
            </summary>
            <param name="Host">域名（为空时获取本机IP信息）</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetIPAddressAsync(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            获取域名下的第一个IP
            </summary>
            <param name="Host">域名（为空时获取本机IP信息）</param>
            <param name="family">指定获取的类型</param>
            <returns>存在就返回第一个，不存在null</returns>
        </member>
        <member name="M:Tool.Utils.Utility.HtmlDecode(System.String)">
            <summary>
            将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。
            </summary>
            <param name="str">要解码的字符串。</param>
            <returns>一个已解码的字符串。</returns>
        </member>
        <member name="M:Tool.Utils.Utility.HtmlEncode(System.String)">
            <summary>
            将字符串转换为 HTML 编码的字符串。
            </summary>
            <param name="str">要编码的字符串。</param>
            <returns>编码的字符串。</returns>
        </member>
        <member name="M:Tool.Utils.Utility.UrlDecode(System.String)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="str">要解码的字符串。</param>
            <returns>一个已解码的字符串。</returns>
        </member>
        <member name="M:Tool.Utils.Utility.UrlEncode(System.String)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="str">要编码的文本。</param>
            <returns>编码的字符串。</returns>
        </member>
        <member name="M:Tool.Utils.Utility.GetCookie(System.String)">
            <summary>
            获取Cookie中的值
            </summary>
            <param name="strName">键值名</param>
            <returns>返回值</returns>
        </member>
        <member name="F:Tool.Utils.Utility.ASSEMBLY_VERSION">
            <summary>
            汇编版本
            </summary>
        </member>
        <member name="M:Tool.Utils.Utility.GetTextFromHTMLRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;/?(?!br|/?p|img)[^&gt;]*&gt;</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '&lt;'.<br/>
            ○ Match '/' greedily, optionally.<br/>
            ○ Zero-width negative lookahead.<br/>
                ○ Match with 3 alternative expressions, atomically.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Bb].<br/>
                        ○ Match a character in the set [Rr].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '/' atomically, optionally.<br/>
                        ○ Match a character in the set [Pp].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Ii\u0130].<br/>
                        ○ Match a character in the set [Mm].<br/>
                        ○ Match a character in the set [Gg].<br/>
            ○ Match a character other than '&gt;' atomically any number of times.<br/>
            ○ Match '&gt;'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Utility.ToColorRegex">
            <remarks>
            Pattern:<br/>
            <code>[g-zG-Z]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [G-Zg-z].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Tool.Utils.Validate">
            <summary>
            各种验证类，包含正则表达式
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Utils.Validate.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="M:Tool.Utils.Validate.CheckAgent(System.String)">
             <summary>
             根据 Agent 判断当前请求用户的设备名
            </summary>    
            <param name="UserAgent">平台信息，为空时，获取默认信息</param>
            <returns><see cref="T:Tool.Utils.UserSystem"/>枚举</returns>    
        </member>
        <member name="M:Tool.Utils.Validate.GetIpRegion(System.String)">
            <summary>
            根据IP获取所在城市地区（该秘钥有dll内部提供，如有问题请联系dll开发者）（百度）
            </summary>
            <param name="ip">IP地址</param>
            <returns>返回所在城市地区</returns>
        </member>
        <member name="M:Tool.Utils.Validate.GetIpRegion(System.String,System.String)">
            <summary>
            根据IP获取所在城市地区（百度）
            </summary>
            <param name="ip">IP地址</param>
            <param name="ak">百度秘钥</param>
            <returns>返回所在城市地区</returns>
        </member>
        <member name="M:Tool.Utils.Validate.GetGdIpRegion(System.String)">
            <summary>
            根据IP获取所在城市地区（该秘钥有dll内部提供，如有问题请联系dll开发者）（高德）
            </summary>
            <param name="ip">IP地址</param>
            <returns>返回所在城市地区</returns>
        </member>
        <member name="M:Tool.Utils.Validate.GetGdIpRegion(System.String,System.String)">
            <summary>
            根据IP获取所在城市地区（高德）
            </summary>
            <param name="ip">IP地址</param>
            <param name="key">高德秘钥</param>
            <returns>返回所在城市地区</returns>
        </member>
        <member name="M:Tool.Utils.Validate.GetTbIpRegion(System.String)">
            <summary>
            淘宝获取IP详细信息（不举建使用该API）
            </summary>
            <param name="ip">IP地址</param>
            <returns>返回所在城市地区</returns>
        </member>
        <member name="M:Tool.Utils.Validate.GetCardDetail(System.String)">
            <summary>
            根据银行卡获取信息
            </summary>
            <param name="cardNo">银行卡</param>
        </member>
        <member name="M:Tool.Utils.Validate.Getownparentbanks(System.String)">
            <summary>
            根据银行缩写,获得银行名称
            </summary>
            <param name="bank">银行编号</param>
            <returns>返回银行名称</returns>
        </member>
        <member name="T:Tool.Utils.Validate.CardDetail">
            <summary>
            银行卡信息
            </summary>
        </member>
        <member name="M:Tool.Utils.Validate.CardDetail.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            有参构造 验证成功时使用
            </summary>
            <param name="Validated">银行卡验证结果</param>
            <param name="CardNumber">银行卡卡号</param>
            <param name="Bank">银行标记名</param>
            <param name="BankName">银行名称</param>
            <param name="CardType">银行卡类型编号</param>
            <param name="VerificationResult">验证结果</param>
        </member>
        <member name="M:Tool.Utils.Validate.CardDetail.#ctor(System.Boolean,System.String)">
            <summary>
            有参构造 验证失败时使用
            </summary>
            <param name="Validated"></param>
            <param name="VerificationResult"></param>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.Validated">
            <summary>
            银行卡验证结果
            </summary>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.CardNumber">
            <summary>
            银行卡卡号
            </summary>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.Bank">
            <summary>
            银行标记名
            </summary>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.BankName">
            <summary>
            银行名称
            </summary>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.BankImageStream">
            <summary>
            银行图片字节流
            </summary>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.CardType">
            <summary>
            银行卡类型编号
            </summary>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.CardTypeName">
            <summary>
            银行卡类型
            </summary>
        </member>
        <member name="P:Tool.Utils.Validate.CardDetail.VerificationResult">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="M:Tool.Utils.Validate.CheckedDataSet(System.Data.DataSet)">
            <summary>
            判断<see cref="T:System.Data.DataSet"/>对象中的是否为空，行为空，表为空，对象为空
            </summary>
            <param name="ds"><see cref="T:System.Data.DataSet"/>对象</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.CheckedDataTable(System.Data.DataTable)">
            <summary>
            判断<see cref="T:System.Data.DataTable"/>对象中的是否为空，行为空，对象为空
            </summary>
            <param name="dt"><see cref="T:System.Data.DataTable"/>对象</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.CheckedDataRow(System.Data.DataRow)">
            <summary>
            判断<see cref="T:System.Data.DataRow"/>对象中的是否为空，行为空，对象为空
            </summary>
            <param name="dr"><see cref="T:System.Data.DataRow"/>对象</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.CheckedObjcetArray(System.Object[])">
            <summary>
            判断<see cref="T:System.Array"/>对象中的是否为空
            </summary>
            <param name="obj">数组</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsBase64String(System.String)">
            <summary>
            判断是否是 Base64 格式的字符串
            </summary>
            <param name="expression">字符串</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsCnChar(System.String)">
            <summary>
            判断是否是 Char 类型数据
            </summary>
            <param name="expression">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsCnCharAndWordAndNum(System.String)">
            <summary>
            判断是否是 Char 类型数据
            </summary>
            <param name="expression">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsDate(System.String)">
            <summary>
            判断是否是时间类型数据
            </summary>
            <param name="dateval">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsDecimalFraction(System.String)">
            <summary>
            判断是否是十进制分数
            </summary>
            <param name="expression">字符串</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsDoEmail(System.String)">
            <summary>
            判断是否是电子邮件格式
            </summary>
            <param name="strEmail">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsDomain(System.String)">
            <summary>
            判断是否是域名格式
            </summary>
            <param name="strHost"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsDouble(System.Object)">
            <summary>
            判断是否是Double格式
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsEmail(System.String)">
            <summary>
            判断值是不是邮箱格式
            </summary>
            <param name="strEmail">判断值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsFileName(System.String)">
            <summary>
            判断值是不是文件名
            </summary>
            <param name="filename">判断值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsIDCard(System.String)">
            <summary>
            判断值是不是合法的身份证
            </summary>
            <param name="strIDCard">判断值</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsImage(System.String)">
            <summary>
            判断值是不是图像
            </summary>
            <param name="filename">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsIP(System.String)">
            <summary>
            验证IP地址是否合法
            </summary>
            <param name="ipval">待验证的IP</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsIPAndPort(System.String)">
            <summary>
            是不是有效的IP和端口
            </summary>
            <param name="ipval">判断值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsIPSect(System.String)">
            <summary>
            是不是有效的IP
            </summary>
            <param name="ipval">判断值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsLongDate(System.String)">
            <summary>
            是不是长日期
            </summary>
            <param name="dateval">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsMobileCode(System.String)">
            <summary>
            是不是移动电话号码
            </summary>
            <param name="strMobile">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsNegativeInt(System.String)">
            <summary>
            是不是负整数
            </summary>
            <param name="expression">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsNickName(System.String)">
            <summary>
            是否是昵称
            </summary>
            <param name="strVal">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsNotNull(System.Object)">
            <summary>
            判断expVal里面是否有值
            </summary>
            <param name="expVal">判断值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsNull(System.Object)">
            <summary>
            判断expVal里面是否为空
            </summary>
            <param name="expVal">判断值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsNumeric(System.Object)">
            <summary>
            判断是不是数字
            </summary>
            <param name="expression">判断值</param>
            <returns>返回<see cref="T:System.Boolean"/>类型</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsNumericArray(System.String[])">
            <summary>
            验证这个string数组是否全是可以强转为int的对象
            </summary>
            <param name="strNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsPhoneCode(System.String)">
            <summary>
            验证是否是合格的电话号码
            </summary>
            <param name="strPhone">号码</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsPhysicalPath(System.String)">
            <summary>
            验证是否是物理路径
            </summary>
            <param name="s">路径</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsPositiveInt(System.String)">
            <summary>
            验证是否是正整数
            </summary>
            <param name="expression">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsPositiveInt64(System.String)">
            <summary>
            验证是否是正整数64位的
            </summary>
            <param name="expression">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsPostalCode(System.String)">
            <summary>
            验证是否是邮政编码
            </summary>
            <param name="strPostalCode">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsRelativePath(System.String)">
            <summary>
            验证是否是相对路径
            </summary>
            <param name="s">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsSafeInputWords(System.String)">
            <summary>
            验证是否是安全的输入词
            </summary>
            <param name="expression">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsSafeSqlString(System.String)">
            <summary>
            验证是否是安全的Sql字符串
            </summary>
            <param name="expression">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsSafety(System.String)">
            <summary>
            验证是否是安全的Sql字符串
            </summary>
            <param name="s">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsShortDate(System.String)">
            <summary>
            验证字符串是不是短日期
            </summary>
            <param name="dateval">要检测的字符串</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsSpecifyWordAndNum(System.String,System.Int32,System.Int32)">
            <summary>
             检测字符串是不是指定单词和数字
            </summary>
            <param name="expression">要检测的字符串</param>
            <param name="start">开始下标</param>
            <param name="end">结束下标</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsSQL(System.String)">
            <summary>
            检测字符串中是否包含SQL注入
            </summary>
            <param name="sqlExpression">要检测的字符串</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsTime(System.String)">
            <summary>
            验证字符串是不是时间格式
            </summary>
            <param name="timeval">要检测的字符串</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsUnicode(System.String)">
            <summary>
            验证字符串是不是Unicode编码格式
            </summary>
            <param name="s">要检测的字符串</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsURL(System.String)">
            <summary>
            验证字符串是不是有效的Url链接
            </summary>
            <param name="strUrl">要检测的字符串</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsUserName(System.String)">
            <summary>
            验证字符串是不是中文名称
            </summary>
            <param name="strVal">要检测的字符串</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsWordAndNum(System.String)">
            <summary>
            检测字符串是不是单词和数字
            </summary>
            <param name="expression">要检测的字符串</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Tool.Utils.Validate.IsBase64StringRegex">
            <remarks>
            Pattern:<br/>
            <code>[A-Za-z0-9\\+\\/\\=]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [+/-9=A-Za-z].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsCnCharRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?:[一-龥])+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u4E00-\u9FA5] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsCnCharAndWordAndNumRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9a-zA-Z一-龥]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Za-z\u4E00-\u9FA5] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsDateRegex">
            <remarks>
            Pattern:<br/>
            <code>^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ 4th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ 5th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                        ○ Match '-'.<br/>
                        ○ 6th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                    ○ 7th capture group.<br/>
                        ○ 8th capture group.<br/>
                            ○ 9th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ 10th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [13-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [0-2].<br/>
                        ○ Match '-'.<br/>
                        ○ 11th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                    ○ 12th capture group.<br/>
                        ○ 13th capture group.<br/>
                            ○ 14th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match the string "2-".<br/>
                        ○ 15th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
                    ○ 16th capture group.<br/>
                        ○ 17th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 18th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [6-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2-9].<br/>
                                                ○ Match a Unicode digit.<br/>
                                    ○ 19th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ 20th capture group.<br/>
                                    ○ 21st capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match the string "16".<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [3579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                    ○ Match the string "00".<br/>
                        ○ Match '-'.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match the string "2-29-".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsDecimalFractionRegex">
            <remarks>
            Pattern:<br/>
            <code>^([0-9]{1,10})\\.([0-9]{1,10})$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [0-9] atomically at least 1 and at most 10 times.<br/>
            ○ Match '.'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character in the set [0-9] atomically at least 1 and at most 10 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsDoEmailRegex">
            <remarks>
            Pattern:<br/>
            <code>^@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '@'.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '['.<br/>
                        ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Loop greedily at least once.<br/>
                            ○ 4th capture group.<br/>
                                ○ Match a character in the set [-\w] atomically at least once.<br/>
                                ○ Match '.'.<br/>
            ○ 5th capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [A-Za-z] atomically at least 2 and at most 4 times.<br/>
                    ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
            ○ 6th capture group.<br/>
                ○ Match ']' atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsDomainRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\d+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsDoubleRegex">
            <remarks>
            Pattern:<br/>
            <code>^([0-9])[0-9]*(\\.\\w*)?$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [0-9].<br/>
            ○ Match a character in the set [0-9] greedily any number of times.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a word character atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsEmailRegex">
            <remarks>
            Pattern:<br/>
            <code>^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [-.\w] atomically at least once.<br/>
            ○ Match '@'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match '['.<br/>
                        ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                    ○ 4th capture group.<br/>
                        ○ Loop greedily at least once.<br/>
                            ○ 5th capture group.<br/>
                                ○ Match a character in the set [-\w] atomically at least once.<br/>
                                ○ Match '.'.<br/>
            ○ 6th capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [A-Za-z] atomically at least 2 and at most 4 times.<br/>
                    ○ Match a character in the set [0-9] atomically at least 1 and at most 3 times.<br/>
            ○ 7th capture group.<br/>
                ○ Match ']' atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsFileNameRegex">
            <remarks>
            Pattern:<br/>
            <code>[&lt;&gt;/";#$*%]+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set ["-%*/;&lt;&gt;] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsIDCard0Regex">
            <remarks>
            Pattern:<br/>
            <code>^(\\d{6})(\\d{2})(\\d{2})(\\d{2})(\\d{3})$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a Unicode digit exactly 6 times.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 3rd capture group.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 4th capture group.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 5th capture group.<br/>
                ○ Match a Unicode digit exactly 3 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsIDCard1Regex">
            <remarks>
            Pattern:<br/>
            <code>^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9Xx])$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a Unicode digit exactly 6 times.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a Unicode digit exactly 4 times.<br/>
            ○ 3rd capture group.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 4th capture group.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 5th capture group.<br/>
                ○ Match a Unicode digit exactly 3 times.<br/>
            ○ 6th capture group.<br/>
                ○ Match a character in the set [0-9Xx].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsImageRegex">
            <remarks>
            Pattern:<br/>
            <code>\\.(gif|jpg|bmp|png|jpeg)$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '.'.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 5 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Gg].<br/>
                        ○ Match a character in the set [Ii\u0130].<br/>
                        ○ Match a character in the set [Ff].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Jj].<br/>
                        ○ Match a character in the set [Pp].<br/>
                        ○ Match a character in the set [Gg].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Bb].<br/>
                        ○ Match a character in the set [Mm].<br/>
                        ○ Match a character in the set [Pp].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Pp].<br/>
                        ○ Match a character in the set [Nn].<br/>
                        ○ Match a character in the set [Gg].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [Jj].<br/>
                        ○ Match a character in the set [Pp].<br/>
                        ○ Match a character in the set [Ee].<br/>
                        ○ Match a character in the set [Gg].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsIpRegex">
            <remarks>
            Pattern:<br/>
            <code>^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop exactly 3 times.<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [0-4].<br/>
                                        ○ Match a Unicode digit.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01] greedily, optionally.<br/>
                                ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                    ○ Match '.'.<br/>
            ○ 3rd capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '5'.<br/>
                                ○ Match a character in the set [0-5].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [01] greedily, optionally.<br/>
                        ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsIpAndPortRegex">
            <remarks>
            Pattern:<br/>
            <code>^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]),\\d{1,5}?$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '5'.<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a character in the set [0-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [01].<br/>
                        ○ Match a character in the set [0-9] exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a character in the set [0-9].<br/>
                    ○ Match a character in the set [1-9].<br/>
            ○ Match '.'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '5'.<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a character in the set [0-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [01].<br/>
                        ○ Match a character in the set [0-9] exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a character in the set [0-9].<br/>
                    ○ Match a character in the set [0-9].<br/>
            ○ Match '.'.<br/>
            ○ 3rd capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '5'.<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a character in the set [0-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [01].<br/>
                        ○ Match a character in the set [0-9] exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a character in the set [0-9].<br/>
                    ○ Match a character in the set [0-9].<br/>
            ○ Match '.'.<br/>
            ○ 4th capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '5'.<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a character in the set [0-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [01].<br/>
                        ○ Match a character in the set [0-9] exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a character in the set [0-9].<br/>
                    ○ Match a character in the set [0-9].<br/>
            ○ Match ','.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 5 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsIpSectRegex">
            <remarks>
            Pattern:<br/>
            <code>^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){2}((2[0-4]\\d|25[0-5]|[01]?\\d\\d?|\\*)\\.)(2[0-4]\\d|25[0-5]|[01]?\\d\\d?|\\*)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop exactly 2 times.<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [0-4].<br/>
                                        ○ Match a Unicode digit.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01] greedily, optionally.<br/>
                                ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                    ○ Match '.'.<br/>
            ○ 3rd capture group.<br/>
                ○ 4th capture group.<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '2'.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [0-4].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '5'.<br/>
                                    ○ Match a character in the set [0-5].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [01] greedily, optionally.<br/>
                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                        ○ Match '*'.<br/>
                ○ Match '.'.<br/>
            ○ 5th capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '5'.<br/>
                                ○ Match a character in the set [0-5].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [01] greedily, optionally.<br/>
                        ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                    ○ Match '*'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsLongDateRegex">
            <remarks>
            Pattern:<br/>
            <code>^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-)) (20|21|22|23|[0-1]?\\d):[0-5]?\\d:[0-5]?\\d$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ 4th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ 5th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                        ○ Match '-'.<br/>
                        ○ 6th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                    ○ 7th capture group.<br/>
                        ○ 8th capture group.<br/>
                            ○ 9th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ 10th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [13-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [0-2].<br/>
                        ○ Match '-'.<br/>
                        ○ 11th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                    ○ 12th capture group.<br/>
                        ○ 13th capture group.<br/>
                            ○ 14th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match the string "2-".<br/>
                        ○ 15th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
                    ○ 16th capture group.<br/>
                        ○ 17th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 18th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [6-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2-9].<br/>
                                                ○ Match a Unicode digit.<br/>
                                    ○ 19th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ 20th capture group.<br/>
                                    ○ 21st capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match the string "16".<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [3579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                    ○ Match the string "00".<br/>
                        ○ Match '-'.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match the string "2-29-".<br/>
            ○ Match ' '.<br/>
            ○ 22nd capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match a character in the set [0-3].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [01] greedily, optionally.<br/>
                        ○ Match a Unicode digit.<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5] greedily, optionally.<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5] greedily, optionally.<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsMobileCodeRegex">
            <remarks>
            Pattern:<br/>
            <code>^13|15|18\\d{9}$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 3 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match the string "13".<br/>
                ○ Match the string "15".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "18".<br/>
                    ○ Match a Unicode digit exactly 9 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsNegativeIntRegex">
            <remarks>
            Pattern:<br/>
            <code>^-\\d+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '-'.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsNickNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z\\u4e00-\\u9fa5\\d_]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [A-Z_a-z\u4E00-\u9FA5\d] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsNumericRegex">
            <remarks>
            Pattern:<br/>
            <code>^[-]?[0-9]*[.]?[0-9]*$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '-' atomically, optionally.<br/>
            ○ Match a character in the set [0-9] greedily any number of times.<br/>
            ○ Match '.' atomically, optionally.<br/>
            ○ Match a character in the set [0-9] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsPhoneCodeRegex">
            <remarks>
            Pattern:<br/>
            <code>^(86)?(-)?(0\\d{2,3})?(-)?(\\d{7,8})(-)?(\\d{3,5})?$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ Match the string "86".<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match '-'.<br/>
            ○ Optional (greedy).<br/>
                ○ 3rd capture group.<br/>
                    ○ Match '0'.<br/>
                    ○ Match a Unicode digit greedily at least 2 and at most 3 times.<br/>
            ○ Optional (greedy).<br/>
                ○ 4th capture group.<br/>
                    ○ Match '-'.<br/>
            ○ 5th capture group.<br/>
                ○ Match a Unicode digit greedily at least 7 and at most 8 times.<br/>
            ○ Optional (greedy).<br/>
                ○ 6th capture group.<br/>
                    ○ Match '-'.<br/>
            ○ Optional (greedy).<br/>
                ○ 7th capture group.<br/>
                    ○ Match a Unicode digit greedily at least 3 and at most 5 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsPhysicalPathRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\s*[a-zA-Z]:.*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match a character in the set [A-Za-z].<br/>
            ○ Match ':'.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsInt0Regex">
            <remarks>
            Pattern:<br/>
            <code>^\\d+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsPostalCodeRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\d{6}$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit exactly 6 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsRelativePathRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\s*[a-zA-Z]{1,10}:.*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match a character in the set [A-Za-z] atomically at least 1 and at most 10 times.<br/>
            ○ Match ':'.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsSafeInputWordsRegex">
            <remarks>
            Pattern:<br/>
            <code>/^\\s*$|^c:\\\\con\\\\con$|[%,\\*"\\s\\t\\&lt;\\&gt;\\&amp;]|$guestexp/is</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 4 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '/'.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a whitespace character greedily any number of times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match the string "c:\\con\\con".<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a character in the set [\t"%&amp;*,&lt;&gt;\s].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                    ○ Match the string "guestexp/is".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsSafeSqlStringRegex">
            <remarks>
            Pattern:<br/>
            <code>[-|;|,|\\/|\\(|\\)|\\[|\\]|\\}|\\{|%|@|\\*|!|\\']</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [!%'-*,-/;@[]{-}].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.Replace0Regex">
            <remarks>
            Pattern:<br/>
            <code>\\s</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a whitespace character.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsSafetyRegex">
            <remarks>
            Pattern:<br/>
            <code>select |insert |delete from |count\\(|drop table|update |truncate |asc\\(|mid\\(|char\\(|xp_cmdshell|exec master|net localgroup administrators|:|net user|"|\\'| or </code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 17 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match ' '.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ii].<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match ' '.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match ' '.<br/>
                    ○ Match a character in the set [Ff].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Mm].<br/>
                    ○ Match ' '.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match '('.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match ' '.<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Ee].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match ' '.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match ' '.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match '('.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Mm].<br/>
                    ○ Match a character in the set [Ii].<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match '('.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Hh].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match '('.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Xx].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match '_'.<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Mm].<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Hh].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Ll] exactly 2 times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Xx].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match ' '.<br/>
                    ○ Match a character in the set [Mm].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Rr].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match ' '.<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match ' '.<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Mm].<br/>
                    ○ Match a character in the set [Ii].<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Ii].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Ss].<br/>
                ○ Match ':'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match ' '.<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Rr].<br/>
                ○ Match a character in the set ["'].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match ' '.<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match ' '.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsShortDateRegex">
            <remarks>
            Pattern:<br/>
            <code>^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ 4th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ 5th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                        ○ Match '-'.<br/>
                        ○ 6th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                    ○ 7th capture group.<br/>
                        ○ 8th capture group.<br/>
                            ○ 9th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ 10th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [13-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [0-2].<br/>
                        ○ Match '-'.<br/>
                        ○ 11th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                    ○ 12th capture group.<br/>
                        ○ 13th capture group.<br/>
                            ○ 14th capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '1'.<br/>
                                        ○ Match a character in the set [6-9].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2-9].<br/>
                                        ○ Match a Unicode digit.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match '-'.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match the string "2-".<br/>
                        ○ 15th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' atomically, optionally.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
                    ○ 16th capture group.<br/>
                        ○ 17th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 18th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [6-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2-9].<br/>
                                                ○ Match a Unicode digit.<br/>
                                    ○ 19th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ 20th capture group.<br/>
                                    ○ 21st capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match the string "16".<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [3579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                    ○ Match the string "00".<br/>
                        ○ Match '-'.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match the string "2-29-".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsSqlRegex">
            <remarks>
            Pattern:<br/>
            <code>\\?|select%20|select\\s+|insert%20|insert\\s+|delete%20|delete\\s+|count\\(|drop%20|drop\\s+|update%20|update\\s+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 12 alternative expressions, atomically.<br/>
                ○ Match '?'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match the string "%20".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a whitespace character atomically at least once.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ii\u0130].<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match the string "%20".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ii\u0130].<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a whitespace character atomically at least once.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match the string "%20".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a whitespace character atomically at least once.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Nn].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match '('.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match the string "%20".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match a whitespace character atomically at least once.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match the string "%20".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Uu].<br/>
                    ○ Match a character in the set [Pp].<br/>
                    ○ Match a character in the set [Dd].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a whitespace character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsTimeRegex">
            <remarks>
            Pattern:<br/>
            <code>^((([0-1]?[0-9])|(2[0-3])):([0-5]?[0-9])(:[0-5]?[0-9])?)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ 2nd capture group.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match a character in the set [01] greedily, optionally.<br/>
                            ○ Match a character in the set [0-9].<br/>
                        ○ 4th capture group.<br/>
                            ○ Match '2'.<br/>
                            ○ Match a character in the set [0-3].<br/>
                ○ Match ':'.<br/>
                ○ 5th capture group.<br/>
                    ○ Match a character in the set [0-5] greedily, optionally.<br/>
                    ○ Match a character in the set [0-9].<br/>
                ○ Optional (greedy).<br/>
                    ○ 6th capture group.<br/>
                        ○ Match ':'.<br/>
                        ○ Match a character in the set [0-5] greedily, optionally.<br/>
                        ○ Match a character in the set [0-9].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsUnicodeRegex">
            <remarks>
            Pattern:<br/>
            <code>^[\\u4E00-\\u9FA5\\uE815-\\uFA29]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u4E00-\u9FA5\uE815-\uFA29] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsUrlRegex">
            <remarks>
            Pattern:<br/>
            <code>^(http|https)\\://([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&amp;%\\$\\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{1,10}))(\\:[0-9]+)*(/($|[a-zA-Z0-9\\.\\,\\?\\'\\\\\\+&amp;%\\$#\\=~_\\-]+))*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match the string "http".<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match an empty string.<br/>
                    ○ Match 's'.<br/>
            ○ Match the string "://".<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 2nd capture group.<br/>
                    ○ Match a character in the set [-.0-9A-Za-z] greedily at least once.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match ':'.<br/>
                            ○ Match a character in the set [$-&amp;-.0-9A-Za-z] atomically at least once.<br/>
                    ○ Match '@'.<br/>
            ○ 4th capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ 5th capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match '5'.<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a character in the set [0-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [01].<br/>
                                    ○ Match a character in the set [0-9] exactly 2 times.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                    ○ Match a character in the set [0-9].<br/>
                                ○ Match a character in the set [1-9].<br/>
                        ○ Match '.'.<br/>
                        ○ 6th capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match '5'.<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a character in the set [0-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [01].<br/>
                                    ○ Match a character in the set [0-9] exactly 2 times.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                    ○ Match a character in the set [0-9].<br/>
                                ○ Match a character in the set [0-9].<br/>
                        ○ Match '.'.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match '5'.<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a character in the set [0-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [01].<br/>
                                    ○ Match a character in the set [0-9] exactly 2 times.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                    ○ Match a character in the set [0-9].<br/>
                                ○ Match a character in the set [0-9].<br/>
                        ○ Match '.'.<br/>
                        ○ 8th capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match '5'.<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a character in the set [0-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [01].<br/>
                                    ○ Match a character in the set [0-9] exactly 2 times.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                    ○ Match a character in the set [0-9].<br/>
                                ○ Match a character in the set [0-9].<br/>
                    ○ Match the string "localhost".<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ 9th capture group.<br/>
                                ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
                                ○ Match '.'.<br/>
                        ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
                        ○ Match '.'.<br/>
                        ○ 10th capture group.<br/>
                            ○ Match with 16 alternative expressions.<br/>
                                ○ Match the string "com".<br/>
                                ○ Match the string "edu".<br/>
                                ○ Match the string "gov".<br/>
                                ○ Match the string "int".<br/>
                                ○ Match the string "mil".<br/>
                                ○ Match the string "net".<br/>
                                ○ Match the string "org".<br/>
                                ○ Match the string "biz".<br/>
                                ○ Match the string "arpa".<br/>
                                ○ Match the string "info".<br/>
                                ○ Match the string "name".<br/>
                                ○ Match the string "pro".<br/>
                                ○ Match the string "aero".<br/>
                                ○ Match the string "coop".<br/>
                                ○ Match the string "museum".<br/>
                                ○ Match a character in the set [A-Za-z] greedily at least 1 and at most 10 times.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 11th capture group.<br/>
                    ○ Match ':'.<br/>
                    ○ Match a character in the set [0-9] greedily at least once.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 12th capture group.<br/>
                    ○ Match '/'.<br/>
                    ○ 13th capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match if at the end of the string or if before an ending newline.<br/>
                            ○ Match a character in the set [#-'+-.0-9=?A-Z\\_a-z~] greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsWordAndNumRegex">
            <remarks>
            Pattern:<br/>
            <code>[0-9a-zA-Z]?</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Za-z] atomically, optionally.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsUserNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z\\d_]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [A-Z_a-z\d] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsSqlWhereRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?=\\().*(?&lt;=\\))</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match '('.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Zero-width positive lookbehind.<br/>
                ○ Match ')' right-to-left.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tool.Utils.Validate.IsIntRegex">
            <remarks>
            Pattern:<br/>
            <code>^([0-9])[0-9]*(\\.\\w*)?$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [0-9].<br/>
            ○ Match a character in the set [0-9] greedily any number of times.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a word character atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Tool.Utils.UserSystem">
            <summary>    
             根据 Agent 判断当前请求用户的设备名 枚举 
            </summary>    
        </member>
        <member name="F:Tool.Utils.UserSystem.Android">
            <summary>
            安卓系统
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.iPhone">
            <summary>
            苹果系统
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.iPod">
            <summary>
            iPod是苹果公司设计和销售的系列便携式多功能数字多媒体播放器。
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.iPad">
            <summary>
            苹果平板
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.Windows_Phone">
            <summary>
            Windows Phone(简称为WP)是微软于2010年10月21日正式发布的一款手机操作系统
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.MQQBrowser">
            <summary>
            QQ、微信、QQ浏览器
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.Windows">
            <summary>
            Windows NT是纯32,64位操作系统
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.Macintosh">
            <summary>
            简介：麦金塔电脑（Macintosh，简称Mac，香港俗称Mac机，大陆亦有人称作苹果机或麦金塔电脑），是苹果电脑其中一系列的个人电脑。
            </summary>
        </member>
        <member name="F:Tool.Utils.UserSystem.Unknown">
            <summary>
            未知操作设备
            </summary>
        </member>
        <member name="T:Tool.Utils.Validator">
            <summary>
            相关正则类（包含常用的正则表达式）高达65种供大家参考学习，使用。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Utils.Validator.reg">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg1">
            <summary>
            n位的数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg2">
            <summary>
            至少n位的数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg3">
            <summary>
            m-n位的数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg4">
            <summary>
            零和非零开头的数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg5">
            <summary>
            非零开头的最多带两位小数的数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg6">
            <summary>
            带1-2位小数的正数或负数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg7">
            <summary>
            正数、负数、和小数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg8">
            <summary>
            有两位小数的正实数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg9">
            <summary>
            有1~3位小数的正实数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg10">
            <summary>
            非零的正整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg10_1">
            <summary>
            非零的正整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg10_2">
            <summary>
            非零的正整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg11">
            <summary>
            非零的负整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg11_1">
            <summary>
            非零的负整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg12">
            <summary>
            非负整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg12_1">
            <summary>
            非负整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg13">
            <summary>
            非正整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg13_1">
            <summary>
            非正整数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg14">
            <summary>
            非负浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg14_1">
            <summary>
            非负浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg15">
            <summary>
            非正浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg15_1">
            <summary>
            非正浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg16">
            <summary>
            正浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg16_1">
            <summary>
            正浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg17">
            <summary>
            负浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg17_1">
            <summary>
            负浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg18">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg18_1">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg19">
            <summary>
            汉字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg20">
            <summary>
            英文和数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg20_1">
            <summary>
            英文和数字
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg21">
            <summary>
            长度为3-20的所有字符
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg22">
            <summary>
            由26个英文字母组成的字符串
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg23">
            <summary>
            由26个大写英文字母组成的字符串
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg24">
            <summary>
            由26个小写英文字母组成的字符串
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg25">
            <summary>
            由数字和26个英文字母组成的字符串
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg26">
            <summary>
            由数字、26个英文字母或者下划线组成的字符串
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg26_1">
            <summary>
            由数字、26个英文字母或者下划线组成的字符串
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg27">
            <summary>
            中文、英文、数字包括下划线
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg28">
            <summary>
            中文、英文、数字但不包括下划线等符号
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg28_1">
            <summary>
            中文、英文、数字但不包括下划线等符号
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg29">
            <summary>
            可以输入含有^%’,;=?$\”等字符
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg30">
            <summary>
            禁止输入含有~的字符
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg31">
            <summary>
            Email地址
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg32">
            <summary>
            域名
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg33">
            <summary>
            InternetURL
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg33_1">
            <summary>
            InternetURL
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg34">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg35">
            <summary>
            电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg36">
            <summary>
            国内电话号码(0511-4405222、021-87888822)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg37">
            <summary>
            身份证号(15位、18位数字)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg38">
            <summary>
            短身份证号码(数字、字母x结尾)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg38_1">
            <summary>
            短身份证号码(数字、字母x结尾)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg39">
            <summary>
            帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg40">
            <summary>
            密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg41">
            <summary>
            强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg42">
            <summary>
            日期格式
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg43">
            <summary>
            一年的12个月(01～09和1～12)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg44">
            <summary>
            一个月的31天(01～09和1～31)
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg45">
            <summary>
            钱的输入格式：
            有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg46">
            <summary>
            这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg47">
            <summary>
            一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg48">
            <summary>
            这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg49">
            <summary>
            必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10” 和 “10.2” 是通过的
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg50">
            <summary>
            这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg51">
            <summary>
            这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg52">
            <summary>
            1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg53">
            <summary>
            备注：这就是最终结果了，别忘了”+”可以用”*”替代。如果你觉得空字符串也可以接受的话(奇怪，为什么?)最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里
            xml文件
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg54">
            <summary>
            中文字符的正则表达式
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg55">
            <summary>
            双字节字符 (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg56">
            <summary>
            空白行的正则表达式，可用来删除空白行
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg57">
            <summary>
            HTML标记的正则表达式
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg58">
            <summary>
            首尾空白字符的正则表达式
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg58_1">
            <summary>
            首尾空白字符的正则表达式
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg59">
            <summary>
            腾讯QQ号
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg60">
            <summary>
            中国邮政编码
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg61">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg62">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg63">
            <summary>
            提取[]的值
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg64">
            <summary>
            提取()的值
            </summary>
        </member>
        <member name="F:Tool.Utils.Validator.reg65">
            <summary>
            提取{}的值
            </summary>
        </member>
        <member name="M:Tool.Utils.Validator.IsMatch(System.String,System.String)">
            <summary>  
            验证字符串是否匹配正则表达式描述的规则  
            </summary>  
            <param name="inputStr">待验证的字符串</param>  
            <param name="patternStr">正则表达式字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsMatch(System.String,System.String,System.Boolean)">
            <summary>  
            验证字符串是否匹配正则表达式描述的规则  
            </summary>  
            <param name="inputStr">待验证的字符串</param>  
            <param name="patternStr">正则表达式字符串</param>  
            <param name="ifIgnoreCase">匹配时是否不区分大小写</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsMatch(System.String,System.Boolean,System.String)">
            <summary>  
            验证字符串是否匹配正则表达式描述的规则  
            </summary>  
            <param name="inputStr">待验证的字符串</param>  
            <param name="patternStr">正则表达式字符串</param>  
            <param name="ifValidateWhiteSpace">是否验证空白字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsMatch(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>  
            验证字符串是否匹配正则表达式描述的规则  
            </summary>  
            <param name="inputStr">待验证的字符串</param>  
            <param name="patternStr">正则表达式字符串</param>  
            <param name="ifIgnoreCase">匹配时是否不区分大小写</param>  
            <param name="ifValidateWhiteSpace">是否验证空白字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsNumber(System.String)">
            <summary>  
            验证数字(double类型)  
            [可以包含负号和小数点]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsInteger(System.String)">
            <summary>  
            验证整数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIntegerNotNagtive(System.String)">
            <summary>  
            验证非负整数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIntegerPositive(System.String)">
            <summary>  
            验证正整数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsDecimal(System.String)">
            <summary>  
            验证小数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsEnglishCharacter(System.String)">
            <summary>  
            验证只包含英文字母  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIntegerAndEnglishCharacter(System.String)">
            <summary>  
            验证只包含数字和英文字母  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsChineseCharacter(System.String)">
            <summary>  
            验证只包含汉字  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIntegerLength(System.String,System.Int32,System.Int32)">
            <summary>  
            验证数字长度范围（数字前端的0计长度）  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsStringInclude(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>  
            验证字符串包含内容  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="withEnglishCharacter">是否包含英文字母</param>  
            <param name="withNumber">是否包含数字</param>  
            <param name="withChineseCharacter">是否包含汉字</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsStringLength(System.String,System.Int32,System.Int32)">
            <summary>  
            验证字符串长度范围  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsStringLengthOnlyNumberAndEnglishCharacter(System.String,System.Int32,System.Int32)">
            <summary>  
            验证字符串长度范围（字符串内只包含数字和/或英文字母）  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsStringLengthByInclude(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>  
            验证字符串长度范围  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="withEnglishCharacter">是否包含英文字母</param>  
            <param name="withNumber">是否包含数字</param>  
            <param name="withChineseCharacter">是否包含汉字</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsStringByteLength(System.String,System.Int32,System.Int32)">
            <summary>  
            验证字符串字节数长度范围  
            [若要验证固定长度，可传入相同的两个长度数值；每个汉字为两个字节长度]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns></returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsDateTime(System.String)">
            <summary>  
            验证日期  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsTelePhoneNumber(System.String)">
            <summary>  
            验证固定电话号码  
            [3位或4位区号；区号可以用小括号括起来；区号可以省略；区号与本地号间可以用减号或空格隔开；可以有3位数的分机号，分机号前要加减号]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsMobilePhoneNumber(System.String)">
            <summary>  
            验证手机号码  
            [可匹配"(+86)013325656352"，括号可以省略，+号可以省略，(+86)可以省略，11位手机号前的0可以省略；11位手机号第二位数可以是3、4、5、8中的任意一个]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsPhoneNumber(System.String)">
            <summary>  
            验证电话号码（可以是固定电话号码或手机号码）  
            [固定电话：[3位或4位区号；区号可以用小括号括起来；区号可以省略；区号与本地号间可以用减号或空格隔开；可以有3位数的分机号，分机号前要加减号]]  
            [手机号码：[可匹配"(+86)013325656352"，括号可以省略，+号可以省略，(+86)可以省略，手机号前的0可以省略；手机号第二位数可以是3、4、5、8中的任意一个]]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsZipCode(System.String)">
            <summary>  
            验证邮政编码  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsEmail(System.String)">
            <summary>  
            验证电子邮箱  
            [@字符前可以包含字母、数字、下划线和点号；@字符后可以包含字母、数字、下划线和点号；@字符后至少包含一个点号且点号不能是最后一个字符；最后一个点号后只能是字母或数字]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsURL(System.String)">
            <summary>  
            验证网址（可以匹配IPv4地址但没对IPv4地址进行格式验证；IPv6暂时没做匹配）  
            [允许省略"://"；可以添加端口号；允许层级；允许传参；域名中至少一个点号且此点号前要有内容]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIPv4(System.String)">
            <summary>  
            验证IPv4地址  
            [第一位和最后一位数字不能是0或255；允许用0补位]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIPv6(System.String)">
            <summary>  
            验证IPv6地址  
            [可用于匹配任何一个合法的IPv6地址]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIDCard15(System.String)">
            <summary>  
            验证一代身份证号（15位数）  
            [长度为15位的数字；匹配对应省份地址；生日能正确匹配]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIDCard18(System.String)">
            <summary>  
            验证二代身份证号（18位数，GB11643-1999标准）  
            [长度为18位；前17位为数字，最后一位(校验码)可以为大小写x；匹配对应省份地址；生日能正确匹配；校验码能正确匹配]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsIDCard(System.String)">
            <summary>  
            验证身份证号（不区分一二代身份证号）  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsLongitude(System.String)">
            <summary>  
            验证经度  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Tool.Utils.Validator.IsLatitude(System.String)">
            <summary>  
            验证纬度  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="T:Tool.Web.Api.ApiAshx">
            <summary>
            针对于新版Ashx路由模式，的同步，异步，支持
            <para>该控制器，相对于Mvc的控制器轻，应有功能都有，可自由扩展。</para>
            <para>方便实现，您最想实现的效果，最大的优点还是因为他轻量级。</para>
            <example>   Api 方法创建示例：
            <code>
              public <see cref="T:System.Void"/> GetApi(<see cref="T:System.String"/> context)  => Json(new { msg = "路由版本api。" });
            </code>
            </example>
            <example>Api 方法创建示例：(异步实现)
            <code>
              public async <see cref="T:System.Threading.Tasks.Task"/> GetTaskApi(<see cref="T:System.String"/> context) => await JsonAsync(new { msg = "路由版本api。" });
            </code>
            </example>
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.ApiKey">
            <summary>
            获取当前请求的接口唯一ID
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.RouteData">
            <summary>
            路由模式
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.Session">
            <summary>
            为当前 HTTP 请求获取 <see cref="T:Microsoft.AspNetCore.Http.ISession" /> 对象。
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.Context">
            <summary>
            获取当前 请求获取 <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> 对象。
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.Request">
            <summary>
            获取当前 HTTP 请求的 <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" /> 对象。
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.Response">
            <summary>
            获取当前 HTTP 响应的 <see cref="T:Microsoft.AspNetCore.Http.HttpResponse" /> 对象。
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.ResponseBody">
            <summary>
            启用到输出 HTTP 内容主体的二进制输出。
            </summary>
            <returns>表示输出 HTTP 内容主体的原始内容的 <see cref="T:System.IO.Stream"/>。</returns>
            <exception cref="T:System.Exception">Body 不可用。</exception>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.Cookies">
            <summary>
            获取客户端发送的 Cookie 的集合。
            </summary>
            <returns>表示客户端的 Cookie 变量的 System.Web.HttpCookieCollection 对象。</returns>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.RequestBody">
            <summary>
            获取传入的 HTTP 实体主体的内容。
            </summary>
            <returns>表示传入的 HTTP 内容主体的内容的 System.IO.Stream 对象。</returns>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.TotalBytes">
            <summary>
            获取当前输入流中的字节数。
            </summary>
            <returns>输入流中的字节数。</returns>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.HttpMethod">
            <summary>
            获取客户端使用的 HTTP 数据传输方法（如 GET、POST 或 HEAD）。
            </summary>
            <returns>客户端使用的 HTTP 数据传输方法。</returns>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.ContentType">
            <summary>
            获取或设置传入请求的 MIME 内容类型。(ContentType)
            </summary>
            <returns>表示传入请求的 MIME 内容类型的字符串，例如，“text/html”。 其他常见 MIME 类型包括“audio.wav”、“image/gif”和“application/pdf”。</returns>
        </member>
        <member name="P:Tool.Web.Api.ApiAshx.ContentLength">
            <summary>
            指定客户端发送的内容长度（以字节计）。
            </summary>
            <returns>客户端发送的内容的长度（以字节为单位）。</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Initialize(Tool.Web.Api.Ashx)">
            <summary>
            当链接真实有效时被执行，默认返回成功。（该方法是用于给使用者重写的）
            </summary>
            <param name="ashx">当前可以被调起的接口信息</param>
            <returns>当前请求会根据返回状态决定是否继续执行接口方法</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Tool#Web#Api#ApiCore#IHttpApi#Initialize(Tool.Web.Api.Ashx)">
            <summary>
            隐性实现
            </summary>
            <param name="ashx"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Redirect(System.String,System.Boolean)">
            <summary>
            将客户端重定向到新的 URL。 指定新的 URL 并指定当前页的执行是否应终止。
            </summary>
            <param name="url">目标的位置。</param>
            <param name="endResponse">指示当前页的执行是否应终止。</param>
            <exception cref="T:System.ArgumentNullException">url 为 null。</exception>
            <exception cref="T:System.ArgumentException">url 包含换行符。</exception>
            <exception cref="T:System.Exception">在发送了 HTTP 头之后尝试重定向。</exception>
            <exception cref="T:System.ApplicationException">页请求是回调的结果。</exception>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Redirect(System.String)">
            <summary>
            将请求重定向到新 URL 并指定该新 URL。
            </summary>
            <param name="url">目标位置。</param>
            <exception cref="T:System.Exception">在发送了 HTTP 头之后尝试重定向。</exception>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.SetContentType(System.String)">
            <summary>
            设置输出类型
            </summary>
            <param name="contentType">类型</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Json(System.Object)">
            <summary>
            Json 格式输出，将 System.Object 写入 HTTP 响应流。 
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Json(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Json 格式输出，将 System.Object 写入 HTTP 响应流。 
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
            <param name="JsonOptions">Json 特殊格式输出</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.JsonAsync(System.Object)">
            <summary>
            Json 格式输出，将 System.Object 写入 HTTP 响应流。 
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.JsonAsync(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Json 格式输出，将 System.Object 写入 HTTP 响应流。 
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
            <param name="JsonOptions">Json 特殊格式输出</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Write(System.Object)">
            <summary>
            将 System.Object 写入 HTTP 响应流。
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.WriteAsync(System.Object)">
            <summary>
            将 System.Object 写入 HTTP 响应流。
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Write(System.String)">
            <summary>
            将一个字符串写入 HTTP 响应输出流。
            </summary>
            <param name="test">要写入 HTTP 输出流的字符串。</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.WriteAsync(System.String)">
            <summary>
            将一个字符串写入 HTTP 响应输出流。
            </summary>
            <param name="test">要写入 HTTP 输出流的字符串。</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Write(System.Object,Tool.Web.Api.WriteType)">
            <summary>
            将 System.Object 写入 HTTP 响应流。
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
            <param name="contentType">返回客户端的类型</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.WriteAsync(System.Object,Tool.Web.Api.WriteType)">
            <summary>
            将 System.Object 写入 HTTP 响应流。
            </summary>
            <param name="obj">要写入 HTTP 输出流的 System.Object。</param>
            <param name="contentType">返回客户端的类型</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.Tool#Web#Api#ApiCore#IHttpApi#Request(System.Object[])">
            <summary>
            同步请求创建（开始）
            </summary>
            <param name="_objs">源数据</param>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.AshxException(Tool.Web.Api.AshxException)">
            <summary>
            当前API接口发生异常时触发
            </summary>
            <param name="ex">异常信息</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiAshx.OnResult(Tool.Web.Api.Ashx)">
            <summary>
            在请求正常完成结束时触发
            </summary>
            <param name="ashx">获取接口信息</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.ApiParameter">
            <summary>
            Api 调用函数 参数值范围可控
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.ApiParameter.GetVal">
            <summary>
            获取当前函数参数的值类型
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.ApiParameter.KeyName">
            <summary>
            获取当前实际生效的Key名称
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.ApiParameter.#ctor(Tool.Utils.ActionDelegate.Parameter,Tool.Web.Api.AshxState,System.Boolean@)">
            <summary>
            构造Api验证参数
            </summary>
            <param name="parameter">参数</param>
            <param name="state">类型</param>
            <param name="isbody">是否已获取body</param>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.AshxExtension">
            <summary>
            获取当前方法的状态,子二级对象
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Web.Api.ApiCore.AshxExtension.Ashxes">
            <summary>
            当前可以被控制器调起的方法信息
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxExtension.AshxType">
            <summary>
            当前对象的AshxType
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxExtension.AshxClassDelegater">
            <summary>
            当前控制器的 New 对象
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxExtension.MinHttpAsynApi">
            <summary>
            开始就实现的API类
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxExtension.IsMin">
            <summary>
            当前对象的AshxType 是不是最小轻量级的
            </summary>
        </member>
        <member name="F:Tool.Web.Api.ApiCore.AshxExtension.state">
            <summary>
            安全锁
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxExtension.#ctor(System.Type,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="type"></param>
            <param name="isMin"></param>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxExtension.IsMethod(System.String,Tool.Web.Api.Ashx@)">
            <summary>
            判断当前方法是否可以被调起,获取对象
            </summary>
            <param name="method"></param>
            <param name="ashx">返回可以被调用的实体类</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxExtension.HttpMethod(System.String,Tool.Web.Api.AshxState)">
            <summary>
            判断该方法是不是属于发起方的请求方式
            </summary>
            <param name="httpMethod"></param>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxExtension.CrossDomain(Microsoft.AspNetCore.Http.HttpResponse,Tool.Web.Api.Ashx)">
            <summary>
            根据信息设置是否跨域请求
            </summary>
            <param name="response"></param>
            <param name="ashx"></param>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxExtension.NewClassAshx(System.IServiceProvider)">
            <summary>
            创建 新的 控制器对象
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxExtension.GetApiAction(System.Type,System.Boolean)">
            <summary>
            获取一个内部的调用规则
            </summary>
            <returns>返回一个类型实体</returns>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.AshxHandlerOrAsync">
            <summary>
            同步Ashx的请求实现或异步Ashx的请求实现
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.AshxVersion">
            <summary>
            当前Ashx版本号
            </summary>
        </member>
        <member name="F:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.AshxVersionHeaderName">
            <summary>
            Ashx路由模式的表头 同步
            </summary>
        </member>
        <member name="F:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.AshxVersionHeaderAsyncName">
            <summary>
            Ashx路由模式的表头 异步
            </summary>
        </member>
        <member name="F:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.MinAshxVersionHeaderName">
            <summary>
            Ashx路由模式的表头 同步（极小）
            </summary>
        </member>
        <member name="F:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.MinAshxVersionHeaderAsyncName">
            <summary>
            Ashx路由模式的表头 异步 （极小）
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.Initialize(Tool.Web.Api.ApiCore.IHttpApi,Tool.Web.Routing.AshxRouteData,System.Object[]@,System.Exception@)">
            <summary>
            验证请求结果
            </summary>
            <param name="httpHandler"></param>
            <param name="RouteData"></param>
            <param name="_objs"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.MinInitialize(Tool.Web.Api.ApiCore.IMinHttpApi,Tool.Web.Routing.AshxRouteData,System.Object[]@,System.Exception@)">
            <summary>
            验证请求结果
            </summary>
            <param name="httpHandler"></param>
            <param name="RouteData"></param>
            <param name="_objs"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.GetApiObj(Tool.Web.Routing.AshxRouteData,System.Object[]@)">
            <summary>
            获取参数
            </summary>
            <param name="RouteData"></param>
            <param name="_objs"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.StartMinAshx(Tool.Web.Api.ApiCore.IMinHttpApi,Tool.Web.Routing.AshxRouteData,System.Object[])">
            <summary>
            初始化
            </summary>
            <param name="httpHandler">构造的对应实现</param>
            <param name="ashxRoute">路由信息对象</param>
            <param name="objs">数据</param>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.StartMinAsyncAshx(Tool.Web.Api.ApiCore.IMinHttpAsynApi,Tool.Web.Routing.AshxRouteData,System.Object[])">
            <summary>
            初始化(异步)
            </summary>
            <param name="ashxRoute">路由信息对象</param>
            <param name="httpHandler">构造的对应实现</param>
            <param name="objs">数据</param>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.StartAshx(Tool.Web.Api.ApiCore.IHttpApi,System.Object[])">
            <summary>
            初始化
            </summary>
            <param name="httpHandler">构造的对应实现</param>
            <param name="objs">数据</param>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.StartAsyncAshx(Tool.Web.Api.ApiCore.IHttpAsynApi,System.Object[])">
            <summary>
            初始化(异步)
            </summary>
            <param name="httpHandler">构造的对应实现</param>
            <param name="objs">数据</param>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxHandlerOrAsync.CustomOutput(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Int32)">
            <summary>
            设置失败，请求错误状态，自定义输出结果
            </summary>
            <param name="HttpContext"></param>
            <param name="ContentType"></param>
            <param name="test"></param>
            <param name="StatusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.AshxOptions">
            <summary>
            Ashx 相关选项，提高使用
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.AshxOptions.#ctor">
            <summary>
            初始化对象
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxOptions.IsAsync">
            <summary>
            是否采用异步线程池，处理每次请求路由的过程
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxOptions.EnableEndpointRouting">
            <summary>
            是否使用终结点模式路由 (目前公测阶段 3.0 功能完善版)
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxOptions.JsonOptions">
            <summary>
            允许注册 全局<see cref="T:System.Text.Json.JsonSerializerOptions"/> Json 序列化条件。 默认 AshxOptions.JsonOptionsDefault 值
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiCore.AshxOptions.JsonOptionsDefault">
            <summary>
            默认Json序列化配置
            </summary>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.IAshxAction">
            <summary>
            Tool 框架自定接口，方法访问
            </summary>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.IHttpApi">
            <summary>
            Tool 框架自定接口，同步
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IHttpApi.SetRouteData(Tool.Web.Routing.AshxRouteData)">
            <summary>
            初始化绑定路由规则，必须第一个调用
            </summary>
            <param name="ashxRoute">路由规则信息</param>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IHttpApi.Initialize(Tool.Web.Api.Ashx)">
            <summary>
            验证用户验证操作
            </summary>
            <param name="ashx">对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IHttpApi.Request(System.Object[])">
            <summary>
            通过实现 注入实现 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。
            </summary>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.IHttpAsynApi">
            <summary>
            Tool 框架自定接口，异步
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IHttpAsynApi.TaskRequest(System.Object[])">
            <summary>
            启动对 HTTP 处理程序的异步调用。
            </summary>
            <param name="_objs">处理该请求所需的数据。</param>
            <returns>包含有关线程状态信息的 Task。</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IHttpAsynApi.ContinueWith(System.Threading.Tasks.Task)">
            <summary>
            完成后任务
            </summary>
            <param name="task">任务信息</param>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.IMinHttpApi">
            <summary>
            Tool 框架自定接口，同步 （最小API）
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IMinHttpApi.Initialize(Tool.Web.Routing.AshxRouteData)">
            <summary>
            验证用户验证操作
            </summary>
            <param name="ashxRoute">对象</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IMinHttpApi.Request(Tool.Web.Routing.AshxRouteData,System.Object[])">
            <summary>
            通过实现 注入实现 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。
            </summary>
        </member>
        <member name="T:Tool.Web.Api.ApiCore.IMinHttpAsynApi">
            <summary>
            Tool 框架自定接口，异步（最小API）
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IMinHttpAsynApi.TaskRequest(Tool.Web.Routing.AshxRouteData,System.Object[])">
            <summary>
            启动对 HTTP 处理程序的异步调用。
            </summary>
            <param name="ashxRoute">路由信息对象</param>
            <param name="_objs">处理该请求所需的数据。</param>
            <returns>包含有关线程状态信息的 Task。</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiCore.IMinHttpAsynApi.ContinueWith(System.Threading.Tasks.Task,Tool.Web.Routing.AshxRouteData)">
            <summary>
            完成后任务
            </summary>
            <param name="task">任务信息</param>
            <param name="ashxRoute">路由信息对象</param>
        </member>
        <member name="T:Tool.Web.Api.ApiVal">
            <summary>
            用于 Api 请求参数，类型定义，区分不同阐述的值。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Api.ApiVal.State">
            <summary>
            请求指定参数的类型
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiVal.Name">
            <summary>
            获取设置，当前获取对象的名称（针对于名称奇特，无法用代码表示的名称）
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiVal.IsName">
            <summary>
            获取设置，获取值名称是否生效。
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiVal.#ctor(Tool.Web.Api.Val)">
            <summary>
            设置当前参数的值来源
            </summary>
            <param name="bodyState">值来源类型</param>
        </member>
        <member name="M:Tool.Web.Api.ApiVal.#ctor(Tool.Web.Api.Val,System.String)">
            <summary>
            设置当前参数的值来源
            </summary>
            <param name="bodyState">值来源类型</param>
            <param name="name">获取值实际对应的Key</param>
        </member>
        <member name="T:Tool.Web.Api.Val">
            <summary>
            值来源的类型
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Web.Api.Val.Query">
            <summary>
            URL ? 之后 传入的数据 支持其他类型强转。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.Form">
            <summary>
            表单提交数据 支持其他类型强转。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.AllMode">
            <summary>
            将Query和Form 的值，找到提供给 实体类（接收实体类）
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.QueryMode">
            <summary>
            将Query 的值，找到提供给 实体类（接收实体类）
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.FormMode">
            <summary>
            将Form 的值，找到提供给 实体类（接收实体类）
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.Header">
            <summary>
            获取Header下面的某个键的值，支持其他类型强转。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.Cookie">
            <summary>
            获取Cookie下面的某个键的值，支持其他类型强转。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.File">
            <summary>
            获取上传的文件对象，接收对象必须是<see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> 
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.Files">
            <summary>
            获取上传的文件对象集合，接收对象必须是<see cref="T:Microsoft.AspNetCore.Http.IFormFileCollection"/> 
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.Service">
            <summary>
            获取注册的对象（ServiceProvider）
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.Session">
            <summary>
            目前 支持 String 和 byte[] , Json 自动转对象，以及其他类型强转。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.AllData">
            <summary>
            只包含 Query 和 Form 的值 支持其他类型强转。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.RouteKey">
            <summary>
            获取请求的路由格式 指定的键 的值 支持其他类型强转。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.Body">
            <summary>
            获取接收的 Body 数据流，接收对象必须是 <see cref="T:System.IO.Stream"/> 或 <see cref="T:System.IO.Pipelines.PipeReader"/> 或 <see cref="T:System.Memory`1"/> 对象
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.Body"/></list>
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.BodyJson"/></list>
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.BodyString"/></list>
            <list type="bullet">单个接口以上类型仅可使用一个</list>
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.BodyJson">
            <summary>
            获取接收的 Body 数据流, 转换成可用的 Json 实体类对象，或<seealso cref="T:Tool.Utils.JsonVar"/>
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.Body"/></list>
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.BodyJson"/></list>
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.BodyString"/></list>
            <list type="bullet">单个接口以上类型仅可使用一个</list>
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Val.BodyString">
            <summary>
            获取接收的 Body 数据流, 转换成可用的 <seealso cref="T:System.String"/> 字符串
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.Body"/></list>
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.BodyJson"/></list>
            <list type="bullet"><see cref="F:Tool.Web.Api.Val.BodyString"/></list>
            <list type="bullet">单个接口以上类型仅可使用一个</list>
            </summary>
        </member>
        <member name="T:Tool.Web.Api.Ashx">
            <summary>
            针对于一般处理程序，备注一般处理程序必须继承于（<see cref="T:Tool.Web.Api.ApiAshx"/> 类才会生效） 所有状态（用于更好的使用API）
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.Ashx.#ctor">
            <summary>
            用于实现构造(带默认参数)
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.State">
            <summary>
            请求的一个状态
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.IsMethods">
            <summary>
            表示当前方法是否包含在被调起方法内。（注明：第一次设置的时候生效，后期修改无效。）
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.ID">
            <summary>
            表示为该方法指定了一个名称，用于对外的访问安全。（注明：第一次设置的时候生效，后期修改无效。）
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.CrossDomain">
            <summary>
            表示当前请求是否支持跨域请求，设置您的跨域对象
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.IsOnAshxEvent">
            <summary>
            获取当前调用方法是不是事件方法，声明事件方法必须使用 <see cref="T:Tool.Web.Api.OnAshxEvent"/> 类作为返回值。
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.IsTask">
            <summary>
            标注当前请求是否是异步方法（注明：该参数只支持 <see cref="T:Tool.Web.Api.ApiAshx"/>/<see cref="T:Tool.Web.Api.MinApi"/> 的新路由方式支持）
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.IsMinApi">
            <summary>
            标注当前请求是否是请求的最小API
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.Methods">
            <summary>
            表示该方法的名称
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.Parameters">
            <summary>
            表示该方法所包含的访问参数
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.Method">
            <summary>
            当前方法的执行信息
            </summary>
        </member>
        <member name="P:Tool.Web.Api.Ashx.Action">
            <summary>
            当前方法的执行信息,目前只支持 <see cref="T:Tool.Web.Api.ApiCore.IAshxAction"/> 对象
            </summary>
        </member>
        <member name="F:Tool.Web.Api.Ashx.keyAttributes">
            <summary>
            获取当前方法上包含的自定义类
            </summary>
        </member>
        <member name="M:Tool.Web.Api.Ashx.GetAttribute``1">
            <summary>
            根据指定的自定义类获取当前接口对象上的<see cref="T:System.Attribute"/>（自定义类）
            </summary>
            <typeparam name="T">指定的<see cref="T:System.Attribute"/>（自定义类）</typeparam>
            <returns>返回<see cref="T:System.Attribute"/>（自定义类）</returns>
        </member>
        <member name="M:Tool.Web.Api.Ashx.GetAttributes">
            <summary>
            获取当前接口对象上的所有<see cref="T:System.Attribute"/>（自定义类）
            </summary>
            <returns>返回所有的<see cref="T:System.Attribute"/>（自定义类）</returns>
        </member>
        <member name="M:Tool.Web.Api.Ashx.TryGetValue``1(``0@)">
            <summary>
            获取自定义类，根据<see cref="T:System.Type"/>获取 （缓存效率更高。）
            </summary>
            <typeparam name="T">指定的<see cref="T:System.Attribute"/>（自定义类）</typeparam>
            <param name="value">返回的类</param>
            <returns>返回<see cref="T:System.Attribute"/>（自定义类）</returns>
        </member>
        <member name="M:Tool.Web.Api.Ashx.TryGetValue(System.Type,System.Attribute@)">
            <summary>
            获取自定义类，根据<see cref="T:System.Type"/>获取 （缓存效率更高。）
            </summary>
            <param name="key">自定义类的<see cref="T:System.Type"/></param>
            <param name="value">返回的类</param>
            <returns>返回<see cref="T:System.Attribute"/>（自定义类）</returns>
        </member>
        <member name="M:Tool.Web.Api.Ashx.GetKeyAttributes(System.Boolean,Tool.Web.Api.CrossDomain)">
            <summary>
            第一次绑定方法控制数据
            </summary>
        </member>
        <member name="T:Tool.Web.Api.OnAshxEvent">
            <summary>
            针对于继承 <see cref="T:Tool.Web.Api.ApiAshx"/> 的类，用于事件方法接口，需要另一个模块驱动的消息接口，可以使用
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.OnAshxEvent.#ctor(System.Action{Tool.Web.Api.OnAshxEvent})">
            <summary>
            完成该有的配置
            </summary>
            <param name="Event">当前长连接要执行的消息方法</param>
        </member>
        <member name="M:Tool.Web.Api.OnAshxEvent.#ctor(System.Action{Tool.Web.Api.OnAshxEvent},System.String)">
            <summary>
            完成该有的配置
            </summary>
            <param name="Event">当前长连接要执行的消息方法</param>
            <param name="GuId">配置的访问事件ID</param>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.GuId">
            <summary>
            类似于ID,必须是唯一的，用于被调用
            </summary>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.Data">
            <summary>
            用户数据
            </summary>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.DelayTime">
            <summary>
            表示当前长连接可以维持的毫秒数 （默认60秒）
            </summary>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.IsFlush">
            <summary>
            是否先向客户端输出空包，将不会阻塞线程
            </summary>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.ContentType">
            <summary>
            获取或设置输出流的 HTTP MIME 类型。
            </summary>
            <remarks>输出流的 HTTP MIME 类型。 默认值为“text/html”。</remarks>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.OnAshx">
            <summary>
            用于表示当前事件的执行情况
            </summary>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.ActionEvent">
            <summary>
            当前长连接要执行的消息方法
            </summary>
        </member>
        <member name="P:Tool.Web.Api.OnAshxEvent.ManualReset">
            <summary>
            当前对象绑定的线程信号
            </summary>
        </member>
        <member name="M:Tool.Web.Api.OnAshxEvent.IsStartEvent(System.String)">
            <summary>
            触发已有的事件
            </summary>
            <param name="GuId">事件ID</param>
            <returns>返回是否存在</returns>
        </member>
        <member name="M:Tool.Web.Api.OnAshxEvent.IsStartEvent(System.String,System.Object)">
            <summary>
            触发已有的事件
            </summary>
            <param name="GuId">事件ID</param>
            <param name="Data">传入的数据</param>
            <returns>返回是否存在</returns>
        </member>
        <member name="M:Tool.Web.Api.OnAshxEvent.Dispose">
            <summary>
            释放由 <see cref="T:Tool.Web.Api.OnAshxEvent"/> 类的当前实例使用的所有资源。
            </summary>
        </member>
        <member name="T:Tool.Web.Api.AshxState">
            <summary>
            针对于Api需要接受相应的状态
            </summary>
        </member>
        <member name="F:Tool.Web.Api.AshxState.All">
            <summary>
            该状态表示都包含。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.AshxState.Head">
            <summary>
            只请求页面的首部。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.AshxState.Get">
            <summary>
            该状态表示 get通过地址栏传输。（get参数有长度限制（受限于url长度））
            </summary>
        </member>
        <member name="F:Tool.Web.Api.AshxState.Post">
            <summary>
            该状态表示 post通过报文传输。（post无限制）
            </summary>
        </member>
        <member name="F:Tool.Web.Api.AshxState.Put">
            <summary>
            从客户端向服务器传送的数据取代指定的文档的内容。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.AshxState.Patch">
            <summary>
            实体中包含一个表，表中说明与该URI所表示的原内容的区别。
            </summary>
        </member>
        <member name="F:Tool.Web.Api.AshxState.Delete">
            <summary>
            请求服务器删除指定的页面。
            </summary>
        </member>
        <member name="T:Tool.Web.Api.WriteType">
            <summary>
            返回客户端的类型
            </summary>
        </member>
        <member name="F:Tool.Web.Api.WriteType.Html">
            <summary>
            (文本页面)text/html
            </summary>
        </member>
        <member name="F:Tool.Web.Api.WriteType.Json">
            <summary>
            JSON（JavaScript Object Notation）application/json
            </summary>
        </member>
        <member name="F:Tool.Web.Api.WriteType.Xml">
            <summary>
            可扩展标记语言（英语：eXtensible Markup Language，简称: XML），是一种标记语言。 application/xml
            </summary>
        </member>
        <member name="F:Tool.Web.Api.WriteType.Text">
            <summary>
            文本输出。text/plain
            </summary>
        </member>
        <member name="T:Tool.Web.Api.OnAshxEventState">
            <summary>
            对异步事件类的状态
            </summary>
        </member>
        <member name="F:Tool.Web.Api.OnAshxEventState.Default">
            <summary>
            表示，无任何动作！
            </summary>
        </member>
        <member name="F:Tool.Web.Api.OnAshxEventState.Success">
            <summary>
            表示，被触发了！
            </summary>
        </member>
        <member name="F:Tool.Web.Api.OnAshxEventState.Timeout">
            <summary>
            表示，超时了！
            </summary>
        </member>
        <member name="F:Tool.Web.Api.OnAshxEventState.OnlyID">
            <summary>
            表示，因出现新的相同的ID链接，前一个将被强制关闭，以保证唯一性！
            </summary>
        </member>
        <member name="T:Tool.Web.Api.CrossDomain">
            <summary>
            指定允许其他域名访问，可跨域
            <para>相关配置：</para>
            <para>'Access-Control-Allow-Origin:http://172.20.0.206'  一般用法（*，指定域，动态设置），3是因为*不允许携带认证头和cookies</para>
            <para>'Access-Control-Allow-Credentials:true'  是否允许后续请求携带认证信息（cookies）,该值只能是true,否则不返回</para>
            <para>'Access-Control-Allow-Methods:HEAD,GET,POST,PUT,PATCH,DELETE'  允许的请求类型</para>
            <para>'Access-Control-Allow-Headers:x-requested-with,content-type'  允许的请求头字段</para>
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Api.CrossDomain.Credentials">
            <summary>
            是否允许后续请求携带认证信息（cookies）,该值只能是true,否则不返回
            </summary>
        </member>
        <member name="P:Tool.Web.Api.CrossDomain.Origin">
            <summary>
            表示当前跨域请求运行的域名
            </summary>
        </member>
        <member name="P:Tool.Web.Api.CrossDomain.Methods">
            <summary>
            允许的请求类型 可选：HEAD,GET,POST,PUT,PATCH,DELETE
            </summary>
        </member>
        <member name="P:Tool.Web.Api.CrossDomain.Headers">
            <summary>
            允许的请求头字段 例如：content-type
            </summary>
        </member>
        <member name="T:Tool.Web.Api.AshxException">
            <summary>
            Api的异常处理类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Api.AshxException.ID">
            <summary>
            表示为该方法指定了一个名称，用于对外的访问安全
            </summary>
        </member>
        <member name="P:Tool.Web.Api.AshxException.State">
            <summary>
            请求的一个状态
            </summary>
        </member>
        <member name="P:Tool.Web.Api.AshxException.JsonOptions">
            <summary>
            Json配置对象
            </summary>
        </member>
        <member name="P:Tool.Web.Api.AshxException.Methods">
            <summary>
            表示该方法的名称
            </summary>
        </member>
        <member name="P:Tool.Web.Api.AshxException.ExceptionHandled">
            <summary>
            表示该异常是否已经处理
            </summary>
        </member>
        <member name="P:Tool.Web.Api.AshxException.Parameters">
            <summary>
            获取可读的请求参数信息
            </summary>
        </member>
        <member name="P:Tool.Web.Api.AshxException.IsParameters">
            <summary>
            表示异常输出结果是否包含详细接口调用数据
            </summary>
        </member>
        <member name="M:Tool.Web.Api.AshxException.#ctor(Tool.Web.Api.Ashx,System.Exception,System.Object[],System.Text.Json.JsonSerializerOptions)">
            <summary>
            有参构造方法
            </summary>
            <param name="ashx"></param>
            <param name="exception"></param>
            <param name="objs"></param>
            <param name="JsonOptions"></param>
        </member>
        <member name="M:Tool.Web.Api.AshxException.ToParameters">
            <summary>
            获取接口调用参数文字版
            </summary>
            <returns>文字表达</returns>
        </member>
        <member name="M:Tool.Web.Api.AshxException.ToString">
            <summary>
            创建并返回当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="T:Tool.Web.Api.MinApi">
            <summary>
            针对于新版Ashx路由模式，的同步，异步，支持（此Api为最轻量级，请严格遵循实现写法）
            <para>给你一个快的理由，因为该路由接口类在启动路由时就已经创建，中途调用，无需创建新的实例，达到最大性能优化。</para>
            <para>同时请注意您这个Api类对象的生命周期，将伴随着整个Web应用程序一致，也就意味着类中的所有对象将不是安全的，请合理声明类变量使用。</para>
            <example>   Api 方法创建示例：
            <code>
              public <see cref="T:Tool.Web.Api.IApiOut"/> GetApi(<see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context)  => ApiOut.Json(new { msg = "最小，路由版本api。" });
            </code>
            </example>
            <example>Api 方法创建示例：(异步实现)
            <code>
              public async <see cref="T:System.Threading.Tasks.Task`1"/> GetTaskApi(<see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context) => await ApiOut.JsonAsync(new { msg = "最小，路由版本api。" });
            </code>
            </example>
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.MinApi.Initialize(Tool.Web.Routing.AshxRouteData)">
            <summary>
            当链接真实有效时被执行，默认返回成功。（该方法是用于给使用者重写的）
            </summary>
            <param name="ashxRoute">当前请求的<see cref="T:Tool.Web.Routing.AshxRouteData"/>路由，包含全部详情信息</param>
            <returns>返回输出结果，当为null的时候，表示继续执行，不为空执行输出结果。</returns>
        </member>
        <member name="M:Tool.Web.Api.MinApi.AshxException(Tool.Web.Api.AshxException)">
            <summary>
            当前API接口发生异常时触发
            </summary>
            <param name="ex">异常信息</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Api.MinApi.OnResult(Tool.Web.Routing.AshxRouteData)">
            <summary>
            在请求正常完成结束时触发
            </summary>
            <param name="ashxRoute">获取接口信息</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Api.IApiOut">
            <summary>
            <see cref="T:Tool.Web.Api.MinApi"/> Api 返回结果接口，用于实现各种返回输出
            </summary>
        </member>
        <member name="M:Tool.Web.Api.IApiOut.HttpOutput(Tool.Web.Routing.AshxRouteData)">
            <summary>
            系统回调，获取输出结果函数
            </summary>
            <param name="ashxRoute">包含所有有效信息</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Api.ApiOut">
            <summary>
            系统默认 <see cref="T:Tool.Web.Api.MinApi"/> Api输出结果 抽象类，用于普通返回值，特殊返回值建议您自己实现。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.#ctor">
            <summary>
            无参构造
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiOut.ContentType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ApiOut.StatusCode">
            <summary>
            HTTP 返回 Code
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.ExecuteOutAsync(Tool.Web.Routing.AshxRouteData)">
            <summary>
            系统回调，用于完成该请求任务的输出
            </summary>
            <param name="ashxRoute">包含所有有效信息</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.Json(System.Object)">
            <summary>
            向客户端返回JSON数据
            </summary>
            <param name="obj">源数据</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.JsonAsync(System.Object)">
            <summary>
            异步向客户端返回JSON数据
            </summary>
            <param name="obj">源数据</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.Json(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            向客户端返回JSON数据
            </summary>
            <param name="obj">源数据</param>
            <param name="JsonOptions">Json 转换条件</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.JsonAsync(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            异步向客户端返回JSON数据
            </summary>
            <param name="obj">源数据</param>
            <param name="JsonOptions">Json 转换条件</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.Write(System.Object)">
            <summary>
            向客户端返回Text数据
            </summary>
            <param name="obj">源数据</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.WriteAsync(System.Object)">
            <summary>
            异步向客户端返回Text数据
            </summary>
            <param name="obj">源数据</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.View">
            <summary>
            向客户端返回页面（默认模式路径：wwwroot文件夹下，加上控制器名和接口名：/Views/Api/Get.html）
            </summary>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.View(System.String)">
            <summary>
            向客户端返回页面
            </summary>
            <param name="viewName">源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.PathView(System.String)">
            <summary>
            向客户端返回页面
            </summary>
            <param name="pathName">源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径 的文件夹名称 支持多重文件 不能包含文件</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.ViewAsync">
            <summary>
            异步向客户端返回页面（默认模式路径：ApiView文件夹下，加上控制器名和接口名：/Views/Api/Get.html）
            </summary>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.ViewAsync(System.String)">
            <summary>
            异步向客户端返回页面
            </summary>
            <param name="viewName">源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.PathViewAsync(System.String)">
            <summary>
            异步向客户端返回页面
            </summary>
            <param name="pathName">源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径 的文件夹名称 支持多重文件 不能包含文件</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.File(System.String,System.IO.Stream)">
            <summary>
            向客户端返回下载的资源文件
            </summary>
            <param name="name">文件名称</param>
            <param name="fileStream">文件流对象</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.FileAsync(System.String,System.IO.Stream)">
            <summary>
            异步向客户端返回下载的资源文件
            </summary>
            <param name="name">文件名称</param>
            <param name="fileStream">文件流对象</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.File(System.String,System.Byte[])">
            <summary>
            向客户端返回下载的资源文件
            </summary>
            <param name="name">文件名称</param>
            <param name="bytes">文件字节流</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.FileAsync(System.String,System.Byte[])">
            <summary>
            异步向客户端返回下载的资源文件
            </summary>
            <param name="name">文件名称</param>
            <param name="bytes">文件字节流</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.Redirect(System.String)">
            <summary>
            向客户端返回重定向的URl
            </summary>
            <param name="url">跳转的URL</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.RedirectAsync(System.String)">
            <summary>
            异步向客户端返回重定向的URl
            </summary>
            <param name="url">跳转的URL</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.NoContent">
            <summary>
            无输出结果
            </summary>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.NoContentAsync">
            <summary>
            无输出结果
            </summary>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.EventStream(System.Func{Tool.Web.EventStream,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            SSE服务器事件流
            </summary>
            <param name="func">流任务</param>
            <param name="retry">超时重连时间</param>
            <returns>输出对象</returns>
        </member>
        <member name="M:Tool.Web.Api.ApiOut.EventStreamAsync(System.Func{Tool.Web.EventStream,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            SSE服务器事件流
            </summary>
            <param name="func">流任务</param>
            <param name="retry">超时重连时间</param>
            <returns>输出对象</returns>
        </member>
        <member name="T:Tool.Web.Api.JsonOut">
            <summary>
            系统默认 <see cref="T:Tool.Web.Api.ApiOut"/> 输出对象的实现类，JSON格式处理
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.JsonOut.#ctor(System.Object)">
            <summary>
            创建Json输出对象
            </summary>
            <param name="data">可被序列化的数据源</param>
        </member>
        <member name="M:Tool.Web.Api.JsonOut.#ctor(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            创建Json输出对象
            </summary>
            <param name="data">可被序列化的数据源</param>
            <param name="jsonOptions">Json 转换条件</param>
        </member>
        <member name="P:Tool.Web.Api.JsonOut.Data">
            <summary>
            输出结果数据
            </summary>
        </member>
        <member name="P:Tool.Web.Api.JsonOut.JsonOptions">
            <summary>
            Json 转换条件
            </summary>
        </member>
        <member name="P:Tool.Web.Api.JsonOut.ContentType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="P:Tool.Web.Api.JsonOut.StatusCode">
            <summary>
            HTTP 返回 Code
            </summary>
        </member>
        <member name="M:Tool.Web.Api.JsonOut.ExecuteOutAsync(Tool.Web.Routing.AshxRouteData)">
            <summary>
            实现JSON格式的输出
            </summary>
            <param name="ashxRoute">当前请求对象</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Api.WriteOut">
            <summary>
            系统默认 <see cref="T:Tool.Web.Api.ApiOut"/> 输出对象的实现类，文本格式处理
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.WriteOut.#ctor(System.String)">
            <summary>
            向客户端输出文本数据
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="P:Tool.Web.Api.WriteOut.Text">
            <summary>
            输出结果数据
            </summary>
        </member>
        <member name="P:Tool.Web.Api.WriteOut.ContentType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="P:Tool.Web.Api.WriteOut.StatusCode">
            <summary>
            HTTP 返回 Code
            </summary>
        </member>
        <member name="M:Tool.Web.Api.WriteOut.ExecuteOutAsync(Tool.Web.Routing.AshxRouteData)">
            <summary>
            实现文本格式的输出
            </summary>
            <param name="ashxRoute">当前请求对象</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Api.ViewOut">
            <summary>
            系统默认 <see cref="T:Tool.Web.Api.ApiOut"/> 输出对象的实现类，视图页面输出处理
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.ViewOut.#ctor(System.Boolean,System.String)">
            <summary>
            创建输出视图的实现类
            </summary>
            <param name="isView">是否使用系统格式视图</param>
            <param name="viewName">路径或名字</param>
        </member>
        <member name="P:Tool.Web.Api.ViewOut.ViewName">
            <summary>
            表示地址
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ViewOut.IsView">
            <summary>
            是否采用默认定位地址模式？
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ViewOut.ContentType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="P:Tool.Web.Api.ViewOut.StatusCode">
            <summary>
            HTTP 返回 Code
            </summary>
        </member>
        <member name="M:Tool.Web.Api.ViewOut.ExecuteOutAsync(Tool.Web.Routing.AshxRouteData)">
            <summary>
            实现页面内容的输出（采用异步IO读取）
            </summary>
            <param name="ashxRoute">当前请求对象</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Api.FileOut">
            <summary>
            系统默认 <see cref="T:Tool.Web.Api.ApiOut"/> 输出对象的实现类，文件输出处理
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Api.FileOut.FileStream">
            <summary>
            资源流对象
            </summary>
        </member>
        <member name="P:Tool.Web.Api.FileOut.Name">
            <summary>
            下载文件名称
            </summary>
        </member>
        <member name="P:Tool.Web.Api.FileOut.ContentType">
            <summary>
            下载的文件格式
            </summary>
        </member>
        <member name="P:Tool.Web.Api.FileOut.StatusCode">
            <summary>
            下载的状态码
            </summary>
        </member>
        <member name="M:Tool.Web.Api.FileOut.#ctor(System.String,System.IO.Stream)">
            <summary>
            初始化构造
            </summary>
            <param name="name">文件名称</param>
            <param name="fileStream">文件流对象</param>
        </member>
        <member name="M:Tool.Web.Api.FileOut.#ctor(System.String,System.Byte[])">
            <summary>
            初始化构造
            </summary>
            <param name="name">文件名称</param>
            <param name="bytes">文件字节流</param>
        </member>
        <member name="M:Tool.Web.Api.FileOut.ExecuteOutAsync(Tool.Web.Routing.AshxRouteData)">
            <summary>
            下载核心任务对象
            </summary>
            <param name="ashxRoute">核心传输对象</param>
            <returns>返回任务</returns>
        </member>
        <member name="T:Tool.Web.Api.RedirectOut">
            <summary>
            系统默认 <see cref="T:Tool.Web.Api.ApiOut"/> 跳转地址的实现类，跳转地址302
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Api.RedirectOut.Url">
            <summary>
            目标位置
            </summary>
        </member>
        <member name="P:Tool.Web.Api.RedirectOut.ContentType">
            <summary>
            重定向表头
            </summary>
        </member>
        <member name="P:Tool.Web.Api.RedirectOut.StatusCode">
            <summary>
            重定向状态码
            </summary>
        </member>
        <member name="M:Tool.Web.Api.RedirectOut.#ctor(System.String)">
            <summary>
            初始化构造
            </summary>
            <param name="url">目标位置</param>
        </member>
        <member name="M:Tool.Web.Api.RedirectOut.ExecuteOutAsync(Tool.Web.Routing.AshxRouteData)">
            <summary>
            重定向核心任务函数
            </summary>
            <param name="ashxRoute">核心传输对象</param>
            <returns>返回任务</returns>
        </member>
        <member name="T:Tool.Web.Api.NoContentOut">
            <summary>
            无返回结果
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="T:Tool.Web.Api.EventStreamOut">
            <summary>
            SSE服务器事件流
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Api.EventStreamOut.#ctor(System.Func{Tool.Web.EventStream,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            创建流任务
            </summary>
            <param name="func">任务</param>
            <param name="retry">超时多久或断线后重连（浏览器行为）</param>
        </member>
        <member name="F:Tool.Web.AshxBuilder.RouteDefaults">
            <summary>
            子一级路由对象
            </summary>
        </member>
        <member name="P:Tool.Web.AshxBuilder.Logger">
            <summary>
            核心日志对象
            </summary>
        </member>
        <member name="P:Tool.Web.AshxBuilder.AshxRoute">
            <summary>
            路由对象 （旧模式）
            </summary>
        </member>
        <member name="P:Tool.Web.AshxBuilder.AshxEndpoint">
            <summary>
            终结点对象 （新模式）
            </summary>
        </member>
        <member name="P:Tool.Web.AshxBuilder.Options">
            <summary>
            当前对象注册所需要选项对象
            </summary>
        </member>
        <member name="F:Tool.Web.AshxBuilder.Namespace">
            <summary>
            API项目目录
            </summary>
        </member>
        <member name="M:Tool.Web.AshxBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            启动Ashx核心对象
            </summary>
            <param name="Services"></param>
        </member>
        <member name="P:Tool.Web.AshxBuilder.Services">
            <summary>
            容器对象
            </summary>
        </member>
        <member name="P:Tool.Web.AshxBuilder.Application">
            <summary>
            提供整个请求服务者（依赖注入）
            </summary>
        </member>
        <member name="P:Tool.Web.AshxBuilder.IsHttpContext">
            <summary>
            是否注入HttpContext对象
            </summary>
        </member>
        <member name="T:Tool.Web.Builder.IAshxBuilder">
            <summary>
            Ashx核心标准接口
            </summary>
        </member>
        <member name="P:Tool.Web.Builder.IAshxBuilder.Services">
            <summary>
            容器核心对象
            </summary>
        </member>
        <member name="P:Tool.Web.Builder.IAshxBuilder.IsHttpContext">
            <summary>
            是否注入HttpContext对象
            </summary>
        </member>
        <member name="P:Tool.Web.Builder.IAshxBuilder.Application">
            <summary>
            提供整个请求服务者（依赖注入）
            </summary>
        </member>
        <member name="T:Tool.Web.Builder.IgnoreUrlMiddleware">
            <summary>
            URL 拦截器中间件
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Builder.IgnoreUrlMiddleware.Urls">
            <summary>
            现有的拦截器配置
            </summary>
        </member>
        <member name="M:Tool.Web.Builder.IgnoreUrlMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            注册 URL 拦截器
            </summary>
            <param name="next"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Tool.Web.Builder.IgnoreUrlMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理每次请求 验证是否需要拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.IEventStream">
            <summary>
            HTTP协议的事件流（EventStream）简称SSE 接口
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.IEventStream.Retry">
            <summary>
            告知断开后多久重连
            </summary>
        </member>
        <member name="P:Tool.Web.IEventStream.ContentEncoding">
            <summary>
            输出的编码格式
            </summary>
        </member>
        <member name="P:Tool.Web.IEventStream.LastEventID">
            <summary>
            最后一次接收到的事件的标识符
            </summary>
        </member>
        <member name="M:Tool.Web.IEventStream.ExecuteResultAsync">
            <summary>
            开始挂起输出流，直到<see cref="T:System.Func`2"/> 函数完成为止。
            </summary>
            <returns>任务</returns>
        </member>
        <member name="T:Tool.Web.EventStream">
            <summary>
            SSE服务器事件流
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.EventStream.LastEventID">
            <summary>
            最后一次接收到的事件的标识符
            </summary>
        </member>
        <member name="P:Tool.Web.EventStream.ContentEncoding">
            <summary>
            输出的编码格式
            </summary>
        </member>
        <member name="P:Tool.Web.EventStream.Retry">
            <summary>
            告知断开后多久重连
            </summary>
        </member>
        <member name="P:Tool.Web.EventStream.Context">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="M:Tool.Web.EventStream.#ctor(System.Func{Tool.Web.EventStream,System.Threading.Tasks.Task},Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            SSE服务器事件流
            </summary>
            <param name="func">流回复任务</param>
            <param name="context">连接对象</param>
            <param name="retry">指定浏览器重新发起连接的时间间隔</param>
        </member>
        <member name="M:Tool.Web.EventStream.ExecuteResultAsync">
            <summary>
            开始挂起输出流，直到<see cref="T:System.Func`2"/> 函数完成为止。
            </summary>
            <returns>任务</returns>
        </member>
        <member name="M:Tool.Web.EventStream.ServerSent``1(``0,System.String,System.String)">
            <summary>
            发送通知
            </summary>
            <param name="t"></param>
            <param name="event"></param>
            <param name="id"></param>
        </member>
        <member name="M:Tool.Web.EventStream.ServerSent(System.Byte[])">
            <summary>
            发送通知
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Tool.Web.Hosting.DiyContainerBuilder">
            <summary>
            Diy容器数据
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Hosting.DiyContainerBuilder.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Tool.Web.Hosting.DiyContainerBuilder.Populate(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            将默认的依赖注入的对象填入新的容器
            </summary>
            <param name="services">服务</param>
        </member>
        <member name="M:Tool.Web.Hosting.DiyContainerBuilder.Build">
            <summary>
            完成服务模型注册
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Hosting.DiyServiceProviderFactory">
            <summary>
            Diy 依赖注入工厂
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Hosting.DiyServiceProviderFactory.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Tool.Web.Hosting.DiyServiceProviderFactory.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            创建一个新的 <see cref="T:Tool.Web.Hosting.DiyContainerBuilder"/> 用于注册服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Hosting.DiyServiceProviderFactory.CreateServiceProvider(Tool.Web.Hosting.DiyContainerBuilder)">
            <summary>
            使用 <see cref="T:Tool.Web.Hosting.DiyContainerBuilder"/> 构建 Autofac 容器，并返回一个 <see cref="T:System.IServiceProvider"/>
            </summary>
            <param name="containerBuilder"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Tool.Web.HttpContextExtension">
            <summary>
            对<see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.HttpContextExtension.Accessor">
            <summary>
            获取全局HttpContext对象
            </summary>
        </member>
        <member name="P:Tool.Web.HttpContextExtension.Current">
            <summary>
            获取当前http请求的HttpContext对象，带异常提示。
            </summary>
        </member>
        <member name="M:Tool.Web.HttpContextExtension.GetSchemeHost(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取当前请求地址的 主要信息（支持代理模式信息获取）
            </summary>
            <param name="context">HttpContext</param>
            <returns>返回连接协议和原始主机请求地址</returns>
        </member>
        <member name="M:Tool.Web.HttpContextExtension.GetUserIp(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取客户端请求的IP地址（支持代理模式信息获取）
            <para>有验证IP是否合法合规</para>
            </summary>
            <param name="context">HttpContext</param>
            <returns>返回IP地址</returns>
        </member>
        <member name="M:Tool.Web.HttpContextExtension.GetUserIps(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取客户端请求的IP地址（支持代理模式信息获取）
            <para>有验证IP是否合法合规</para>
            </summary>
            <param name="context">HttpContext</param>
            <returns>返回IP地址或多个地址', '隔开</returns>
        </member>
        <member name="M:Tool.Web.HttpContextExtension.AddHttpException(Microsoft.AspNetCore.Http.HttpContext,System.Int32,System.String,System.Object[])">
            <summary>
            设置错误，并指定错误号
            </summary>
            <param name="context"></param>
            <param name="StatusCode"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Tool.Web.HttpContextExtension.AddHttpException(Microsoft.AspNetCore.Http.HttpContext,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            设置错误，并指定错误号
            </summary>
            <param name="context"></param>
            <param name="StatusCode"></param>
            <param name="format"></param>
            <param name="error"></param>
            <param name="args"></param>
        </member>
        <member name="M:Tool.Web.HttpContextExtension.GetService``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取服务（在 System.IServiceProvider 从中检索服务对象。）
            </summary>
            <typeparam name="T">要获取的服务对象的类型。</typeparam>
            <param name="context">HttpContext</param>
            <returns>类型为 T 或 null 的服务对象（如果没有此类服务）。</returns>
        </member>
        <member name="P:Tool.Web.HttpContextExtension.CurrentPath">
            <summary>
            当前路径
            </summary>
        </member>
        <member name="P:Tool.Web.HttpContextExtension.CurrentUrl">
            <summary>
            获取有关当前请求的 URL 的信息。
            </summary>
        </member>
        <member name="P:Tool.Web.HttpContextExtension.CurrentSchemeHost">
            <summary>
            获取有关当前请求的 域名部分 的信息。
            </summary>
        </member>
        <member name="M:Tool.Web.HttpContextExtension.StreamMove(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            将文件流分流写入
            </summary>
            <param name="ReadStream">原文件流</param>
            <param name="WriteStream">更新文件流</param>
            <param name="minlen">最小资源大小</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.SessionExtension">
            <summary>
            对<see cref="T:Microsoft.AspNetCore.Http.ISession"/>进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.SessionExtension.Set(Microsoft.AspNetCore.Http.ISession,System.String,System.Object)">
            <summary>
            增加一个键值对，如果存在仅修改值
            </summary>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <param name="value">值，全部以string值保存</param>
        </member>
        <member name="M:Tool.Web.SessionExtension.Set``1(Microsoft.AspNetCore.Http.ISession,System.String,``0)">
            <summary>
            增加一个键值对，如果存在仅修改值
            </summary>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <param name="value">获得的值</param>
        </member>
        <member name="M:Tool.Web.SessionExtension.Set(Microsoft.AspNetCore.Http.ISession,System.String,System.String)">
            <summary>
            增加一个键值对，如果存在仅修改值
            </summary>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Tool.Web.SessionExtension.Get(Microsoft.AspNetCore.Http.ISession,System.String)">
            <summary>
            获取Session数据（无值不发生异常）
            </summary>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <returns>返回一个值</returns>
        </member>
        <member name="M:Tool.Web.SessionExtension.Get``1(Microsoft.AspNetCore.Http.ISession,System.String)">
            <summary>
            获取Session数据（无值不发生异常）
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <returns>返回一个值</returns>
        </member>
        <member name="M:Tool.Web.SessionExtension.TryGetValue(Microsoft.AspNetCore.Http.ISession,System.String,System.String@)">
            <summary>
            获取Session数据
            </summary>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <param name="value">获得的值</param>
            <returns>返回一个值，如果键值名称不存在则返回NULL</returns>
        </member>
        <member name="M:Tool.Web.SessionExtension.TryGetValue``1(Microsoft.AspNetCore.Http.ISession,System.String,``0@)">
            <summary>
            获取Session数据
            </summary>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <param name="value">获得的值</param>
            <returns>返回一个值，如果键值名称不存在则返回NULL</returns>
        </member>
        <member name="M:Tool.Web.SessionExtension.TryGetValue(Microsoft.AspNetCore.Http.ISession,System.String,System.Type,System.Object@)">
            <summary>
            获取Session数据
            </summary>
            <param name="session">ISession</param>
            <param name="key">键值名称</param>
            <param name="type">转换成对象的类型</param>
            <param name="value">获得的值</param>
            <returns>返回一个值，如果键值名称不存在则返回NULL</returns>
        </member>
        <member name="M:Tool.Web.SessionExtension.SetAvailable(Microsoft.AspNetCore.Http.ISession,System.Boolean)">
            <summary>
            仅对DiySession设置有效，设置为true后会为其名称，增加有效用户类似标志
            </summary>
            <param name="session">对象</param>
            <param name="isAvailable">可用性状态</param>
        </member>
        <member name="T:Tool.Web.HttpRequestExtension">
            <summary>
            对HttpRequest进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.GetQueryString(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取客户端GET方式提交的数据
            </summary>
            <param name="request">HttpRequest 对象</param>
            <param name="strName">名称</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.CheckAgent(Microsoft.AspNetCore.Http.HttpRequest)">
             <summary>
             根据 Agent 判断当前请求用户的设备名
            </summary>    
            <returns><see cref="T:Tool.Utils.UserSystem"/>枚举</returns>    
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.GetFormString(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取客户端Post方式提交的表单
            </summary>
            <param name="strName">名称</param>
            <param name="request">HttpRequest</param>
            <returns>值</returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.GetString(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            包涵两种方式的数据（优先获取Query，获取不到时获取Form）
            </summary>
            <param name="request">HttpRequest</param>
            <param name="strName">名称</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.GetToMode``1(Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            根据前端页面表单填写的信息存入自定义实体(QueryString)
            </summary>
            <typeparam name="M">实体类</typeparam>
            <param name="reques">HttpRequest</param>
            <param name="istype">表示在转换实体过程中出现异常的处理方式，默认为true，抛出异常。</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.PostToMode``1(Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            根据前端页面表单填写的信息存入自定义实体(Form)
            </summary>
            <typeparam name="M">实体类</typeparam>
            <param name="reques">HttpRequest</param>
            <param name="istype">表示在转换实体过程中出现异常的处理方式，默认为true，抛出异常。</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.ALLToMode``1(Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            根据前端页面表单填写的信息存入自定义实体(QueryString或Form)
            </summary>
            <typeparam name="M">实体类</typeparam>
            <param name="reques">HttpRequest</param>
            <param name="istype">表示在转换实体过程中出现异常的处理方式，默认为true，抛出异常。</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.GetToMode(Microsoft.AspNetCore.Http.HttpRequest,System.Type,System.Boolean)">
            <summary>
            根据前端页面表单填写的信息存入自定义实体(QueryString)
            </summary>
            <param name="reques">HttpRequest</param>
            <param name="type">实体对象的Type</param>
            <param name="istype">是否抛出异常</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.PostToMode(Microsoft.AspNetCore.Http.HttpRequest,System.Type,System.Boolean)">
            <summary>
            根据前端页面表单填写的信息存入自定义实体(Form)
            </summary>
            <param name="reques">HttpRequest</param>
            <param name="type">实体对象的Type</param>
            <param name="istype">是否抛出异常</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.ALLToMode(Microsoft.AspNetCore.Http.HttpRequest,System.Type,System.Boolean)">
            <summary>
            根据前端页面表单填写的信息存入自定义实体(QueryString或Form)
            </summary>
            <param name="reques">HttpRequest</param>
            <param name="type">实体对象的Type</param>
            <param name="istype">是否抛出异常</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.IsRange(Microsoft.AspNetCore.Http.HttpRequest,System.Collections.Generic.List{Tool.Web.Range}@,System.Int64)">
            <summary>
            获取是否是下载请求
            </summary>
            <param name="request">HttpRequest</param>
            <param name="range">相关对象信息数组</param>
            <param name="Length">当前流对象总大小</param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.HttpRequestExtension.Save(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            保存上传的文件
            </summary>
            <param name="formFile">上传资源对象</param>
            <param name="filename">保存文件的完整地址(当地址存在时会覆盖原有文件)</param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Range">
            <summary>
            向请求添加指定范围的字节范围标头。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Range.#ctor(System.Int64,System.Int64)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:Tool.Web.Range.From">
            <summary>
            开始发送数据的位置。
            </summary>
        </member>
        <member name="F:Tool.Web.Range.To">
            <summary>
            停止发送数据的位置。
            </summary>
        </member>
        <member name="T:Tool.Web.HttpResponseExtension">
            <summary>
            对HttpResponse进行升级
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.AppendHeader(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.String)">
            <summary>
            将 HTTP 头添加到输出流。
            </summary>
            <param name="response">对象</param>
            <param name="name">要添加到输出流的 HTTP 头的名称。</param>
            <param name="value">要追加到头中的字符串。</param>
            <exception cref="T:System.NotSupportedException">已发送的 HTTP 标头之后追加标头。</exception>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.AppendCookie(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.String)">
            <summary>
            添加 Cookie 信息
            </summary>
            <param name="response">对象</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.Write(Microsoft.AspNetCore.Http.HttpResponse,System.Object)">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="obj">输出内容</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Object)">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="obj">输出内容</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.Write(Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="txt">输出内容</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="txt">输出内容</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.Write(Microsoft.AspNetCore.Http.HttpResponse,System.Byte[])">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="bytes">数据流</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Byte[])">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="bytes">数据流</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.Write(Microsoft.AspNetCore.Http.HttpResponse,System.Byte[],System.Int32,System.Int32)">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="bytes">数据流</param>
            <param name="offset">读取开始位置</param>
            <param name="count">读取数量</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Byte[],System.Int32,System.Int32)">
            <summary>
            输出HTTP流
            </summary>
            <param name="response">对象</param>
            <param name="bytes">数据流</param>
            <param name="offset">读取开始位置</param>
            <param name="count">读取数量</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.Flush(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            向客户端发送当前所有缓冲的输出。(里面实现的异步方式)
            </summary>
            <param name="response">对象</param>
        </member>
        <member name="M:Tool.Web.HttpResponseExtension.FlushAsync(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            向客户端发送当前所有缓冲的输出。(里面实现的异步方式)
            </summary>
            <param name="response">对象</param>
        </member>
        <member name="T:Tool.Web.Routing.AshxRouteAttribute">
            <summary>
            对Api接口以及控制器使用路由配置
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="template"></param>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteAttribute.Template">
            <summary>
            路由规则
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteAttribute.Name">
            <summary>
            路由名称
            </summary>
        </member>
        <member name="T:Tool.Web.Routing.AshxRouteData">
            <summary>
            封装有关路由的信息。
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.RouteContext">
            <summary>
            获取有关 路由 HTTP 请求的信息。
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.HttpContext">
            <summary>
            获取有关 HTTP 请求的信息。
            </summary>
            <returns>一个对象，该对象包含有关 HTTP 请求的信息。</returns>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.GetRouteData">
            <summary>
            获取有关所请求路由的信息。
            </summary>
            <returns>一个对象，该对象包含有关所请求路由的信息。</returns>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.JsonOptions">
            <summary>
            表示当前 注册的 默认 Json 条件
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Service">
            <summary>
            获取有关所请求路由的信息。
            </summary>
            <returns>一个对象，该对象包含有关所请求路由的信息。</returns>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Logger">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.IsAsync">
            <summary>
            是否采用异步线程池，处理每次请求路由的过程
            </summary>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteData.#ctor(Microsoft.AspNetCore.Routing.RouteContext,System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.Logging.ILogger,System.Boolean)">
            <summary>
            使用指定路由和路由处理程序初始化 <see cref="T:Tool.Web.Routing.AshxRouteData"/> 类的新实例。
            </summary>
            <param name="routeContext">封装与所定义路由匹配的 HTTP 请求的相关信息。</param>
            <param name="jsonOptions">json配置对象</param>
            <param name="Logger">日志模块</param>
            <param name="IsAsync"></param>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteData.SetKey">
            <summary>
            注册api唯一值
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Key">
            <summary>
            每次请求生成的Id
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Area">
            <summary>
            当前的控制器的命名空间
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Controller">
            <summary>
            当前的控制器
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Action">
            <summary>
            当前的方法名
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.GetAshx">
            <summary>
            获取当前对象的 Ashx
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.IsAshx">
            <summary>
            获取当前对象的 Ashx 是否为空
            </summary>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.DataTokens">
            <summary>
            获取在 ASP.NET 路由确定路由是否匹配请求时，传递到路由处理程序但未使用的自定义值的集合。
            </summary>
            <returns>一个包含自定义值的对象。</returns>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Routers">
            <summary>
            获取或设置表示路由的对象。
            </summary>
            <returns>一个表示路由定义的对象。</returns>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Handler">
            <summary>
            获取或设置处理所请求路由的对象。
            </summary>
            <returns>一个处理路由请求的对象。</returns>
        </member>
        <member name="P:Tool.Web.Routing.AshxRouteData.Values">
            <summary>
            获取路由的 URL 参数值和默认值的集合。
            </summary>
            <returns>一个对象，其中包含根据 URL 和默认值分析得出的值。</returns>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteData.GetRequiredString(System.String)">
            <summary>
            使用指定标识符检索值。
            </summary>
            <param name="valueName">要检索的值的键。</param>
            <returns>其键与 valueName 匹配的 System.Web.Routing.RouteData.Values 属性中的元素。</returns>
            <exception cref="T:System.InvalidOperationException">valueName 的值不存在。</exception>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteData.GetRequired(System.String)">
            <summary>
            使用指定标识符检索值。
            </summary>
            <param name="valueName">要检索的值的键。</param>
            <returns>其键与 valueName 匹配的 System.Web.Routing.RouteData.Values 属性中的元素。</returns>
            <exception cref="T:System.InvalidOperationException">valueName 的值不存在。</exception>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteData.GetNewJsonOptions">
            <summary>
            获取一个新的 JsonSerializerOptions 对象 原对象来源于 AddAshx 时注册值
            </summary>
            <returns>新的 JsonSerializerOptions 对象</returns>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteHandler.#ctor(Tool.Web.AshxBuilder)">
            <summary>初始化类的新实例。<see cref="T:Tool.Web.Routing.AshxRouteHandler" /></summary>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteHandler.GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)">
            <summary>
            无需实现
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Routing.AshxRouteHandler.IHttpHandlerAshxExecute(Tool.Web.Routing.AshxRouteData)">
            <summary>
            （默认是内部调用）调用此方法，可以对 当前路由的信息 Application_Start() 方法中调用 AshxRegistration.RegisterAllAreas();
            </summary>
        </member>
        <member name="T:Tool.Web.Session.DiySession">
            <summary>
            用于提供实现自定义Session
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Session.DiySession.Logger">
            <summary>
            提供日志输出模块
            </summary>
        </member>
        <member name="P:Tool.Web.Session.DiySession.Context">
            <summary>
            提供当前请求信息模块
            </summary>
        </member>
        <member name="M:Tool.Web.Session.DiySession.SetId(System.String)">
            <summary>
            设置Id值
            </summary>
            <param name="id">SessionId</param>
        </member>
        <member name="M:Tool.Web.Session.DiySession.Initialize">
            <summary>
            创建Session对象的认证流程
            </summary>
        </member>
        <member name="P:Tool.Web.Session.DiySession.Id">
            <summary>
            SessionId
            </summary>
        </member>
        <member name="P:Tool.Web.Session.DiySession.IsAvailable">
            <summary>
            Session 是否可用（可用时将自动标记，可用标志）
            </summary>
        </member>
        <member name="M:Tool.Web.Session.DiySession.GetKeys">
            <summary>
            提供 Session 的全部键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Session.DiySession.Clear">
            <summary>
            清空 Session  的全部键值
            </summary>
        </member>
        <member name="M:Tool.Web.Session.DiySession.Remove(System.String)">
            <summary>
            删除 Session 指定的键值
            </summary>
            <param name="key">指定的键</param>
        </member>
        <member name="M:Tool.Web.Session.DiySession.Set(System.String,System.Byte[])">
            <summary>
            添加键值的方法
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Tool.Web.Session.DiySession.TryGetValue(System.String,System.Byte[]@)">
            <summary>
            获取键值的方法
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>返回是否存在</returns>
        </member>
        <member name="M:Tool.Web.Session.DiySession.ToString">
            <summary>
            显示说明
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Session.DiySession.Microsoft#AspNetCore#Http#ISession#CommitAsync(System.Threading.CancellationToken)">
            <summary>
            无用了
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Tool.Web.Session.DiySession.Microsoft#AspNetCore#Http#ISession#LoadAsync(System.Threading.CancellationToken)">
            <summary>
            无用了
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Session.DiySessionMiddleware">
            <summary>
            AsSession中间件
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Tool.Web.Session.DiySessionMiddleware.SessionName">
            <summary>
            表明Session存储名称
            </summary>
        </member>
        <member name="M:Tool.Web.Session.DiySessionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Tool.Web.Session.DiySessionOptions)">
            <summary>
            创建AsSession协议
            </summary>
            <param name="next"></param>
            <param name="loggerFactory"></param>
            <param name="sessionOptions"></param>
        </member>
        <member name="M:Tool.Web.Session.DiySessionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            处理每次请求,配置AsSession
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Tool.Web.Session.DiySessionOptions">
            <summary>
            自定义的Session对象，必须完成的实现方法
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="F:Tool.Web.Session.DiySessionOptions.IsSign">
            <summary>
            IsAvailable为true时，特点的标志
            </summary>
        </member>
        <member name="M:Tool.Web.Session.DiySessionOptions.#ctor">
            <summary>
            初始化对象
            </summary>
        </member>
        <member name="P:Tool.Web.Session.DiySessionOptions.Sign">
            <summary>
            标记值（可以设置为特定值，默认：IsSign值）
            </summary>
        </member>
        <member name="P:Tool.Web.Session.DiySessionOptions.SessionName">
            <summary>
            表明Session存储名称
            </summary>
        </member>
        <member name="M:Tool.Web.Session.DiySessionOptions.GetDiySession``1">
            <summary>
            自定义Session必须完成的注册流程
            </summary>
            <typeparam name="T">实现的基类</typeparam>
        </member>
        <member name="M:Tool.Web.Session.DiySessionOptions.SetSessionId(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置SessionId
            </summary>
            <param name="context">请求对象</param>
            <param name="sessionId">id</param>
        </member>
        <member name="P:Tool.Web.Session.DiySessionOptions.GetKey">
            <summary>
            注册一个可以自由控制的开关，以及自由规则的键值。 
            默认提供SessionId值
            <para>返回值 为空，时取消设置SessionId行为。</para>
            </summary>
        </member>
        <member name="P:Tool.Web.Session.DiySessionOptions.Cookie">
            <summary>
            获取或设置用户（所有用户共用配置）
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ApiRouteBuilderExtensions">
            <summary>
            Ashx 路由模式扩展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="routeBuilder">路由核心对象</param>
            <param name="name">路由规则名称</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="template">路由的规则</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.String)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="routeBuilder">路由核心对象</param>
            <param name="name">路由规则名称</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="controller">控制器名称，可为null</param>
            <param name="template">路由的规则</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="routeBuilder">路由核心对象</param>
            <param name="name">路由规则名称</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="controller">控制器名称，可为null</param>
            <param name="action">方法名称，可为null</param>
            <param name="template">路由的规则</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="routeBuilder">路由核心对象</param>
            <param name="name">路由规则名称</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="controller">控制器名称，可为null</param>
            <param name="action">方法名称，可为null</param>
            <param name="template">路由的规则</param>
            <param name="defaults">包含路由参数默认值的对象。对象的属性表示，默认值的名称和值，可为null。</param>
            <param name="constraints">包含路由约束的对象。对象的属性表示，约束的名称和值，可为null。</param>
            <param name="dataTokens">包含路由的数据标记的对象。对象的属性表示，数据标记的名称和值，可为null。</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions">
            <summary>
            注册 Ashx 终结点路由的扩展模式
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.EndpointDataSource,System.String)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="endpointData">路由核心对象</param>
            <param name="template">路由的规则</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.EndpointDataSource,System.String,System.String)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="endpointData">路由核心对象</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="template">路由的规则</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.EndpointDataSource,System.String,System.String,System.String)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="endpointData">路由核心对象</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="controller">控制器名称，可为null</param>
            <param name="template">路由的规则</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.EndpointDataSource,System.String,System.String,System.String,System.String)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="endpointData">路由核心对象</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="controller">控制器名称，可为null</param>
            <param name="action">方法名称，可为null</param>
            <param name="template">路由的规则</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions.MapApiRoute(Microsoft.AspNetCore.Routing.EndpointDataSource,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            创建与AshxApi有关的路由
            </summary>
            <param name="endpointData">路由核心对象</param>
            <param name="areaName">区域名称，可为null</param>
            <param name="template">路由的规则</param>
            <param name="defaults">包含路由参数默认值的对象。对象的属性表示，默认值的名称和值，可为null。</param>
            <param name="constraints">包含路由约束的对象。对象的属性表示，约束的名称和值，可为null。</param>
            <param name="dataTokens">包含路由的数据标记的对象。对象的属性表示，数据标记的名称和值，可为null。</param>
            <returns>路由核心对象</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions">
            <summary>
            Ashx 核心路由 扩展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.UseAshx(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})">
            <summary>
            Ashx路由
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="configureRoutes"><see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder"/></param>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Threading.Tasks.Task})">
            <summary>
            注入 捕获全局异常 对象
            </summary>
            <param name="app">IApplicationBuilder框架对象</param>
            <param name="action">需要提供处理这些异常的委托函数</param>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.GetObject``1(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            获取 已经注册的 服务或数据
            </summary>
            <param name="app">IApplicationBuilder框架对象</param>
            <typeparam name="T">获取的服务类型</typeparam>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.GetObject(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Type)">
            <summary>
            获取 已经注册的 服务或数据
            </summary>
            <param name="app">IApplicationBuilder框架对象</param>
            <param name="type">获取的服务类型</param>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.AddHttpContext(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注入HttpContext对象，实现静态获取
            </summary>
            <param name="app">IApplicationBuilder框架对象</param>
            <returns>IHttpContextAccessor</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.UseIgnoreUrl(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String[])">
            <summary>
            注册 IgnoreUrl （忽略请求地址）
            </summary>
            <param name="app">IApplicationBuilder框架对象</param>
            <param name="urls">需要忽略的地址，必填项</param>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AshxEndpointRouteBuilderExtensions">
            <summary>
            终结点模式扩展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxEndpointRouteBuilderExtensions.MapAshxs(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            启动终结点（默认版）
            </summary>
            <param name="endpoints">对象</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxEndpointRouteBuilderExtensions.MapAshxs(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.Action{Microsoft.AspNetCore.Routing.EndpointDataSource})">
            <summary>
            启动终结点
            </summary>
            <param name="endpoints">对象</param>
            <param name="configureRoutes">要生成的路由委托</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AshxActionEndpointConventionBuilder">
            <summary>
            终结点扩展对象
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxActionEndpointConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})">
            <summary>
            回调已经生成的终结点信息
            </summary>
            <param name="convention"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AshxEndpointDataSource">
            <summary>
            Ashx终结点核心模块
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.AshxEndpointDataSource.Endpoints">
            <summary>
            获取现有终结点
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxEndpointDataSource.InitialLoad(System.Action{Microsoft.AspNetCore.Builder.AshxEndpointDataSource})">
            <summary>
            初始化完成终结点规则
            </summary>
            <param name="configureRoutes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxEndpointDataSource.GetChangeToken">
            <summary>
            获取操作事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AshxEndpointDataSource.MapRoute(System.String,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Object)">
            <summary>
            生成终结点规则
            </summary>
            <param name="template"></param>
            <param name="areaName"></param>
            <param name="defaultsDictionary"></param>
            <param name="constraintsDictionary"></param>
            <param name="dataTokens"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions">
            <summary>
            Ashx 核心对象扩展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.AddAshx(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            启动Ashx路由模式
            </summary>
            <param name="services"></param>
            <returns>IAshxBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.AddAshx(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Tool.Web.Api.ApiCore.AshxOptions})">
            <summary>
            启动Ashx路由模式
            </summary>
            <param name="services">注册对象</param>
            <param name="action">选择委托</param>
            <returns>IAshxBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.AddHttpContext(Tool.Web.Builder.IAshxBuilder)">
            <summary>
            注入HttpContext对象，实现静态获取
            </summary>
            <param name="ashxBuilder">Ashx框架对象</param>
            <returns>IAshxBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.AddObject(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)">
            <summary>
            将用户自定义的数据注册进服务。
            </summary>
            <param name="services">Ashx框架对象</param>
            <param name="_obj">注册的数据</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.AddObject``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)">
            <summary>
            将用户自定义的数据注册进服务。
            </summary>
            <param name="services">Ashx框架对象</param>
            <param name="_obj">注册的数据</param>
            <typeparam name="T"></typeparam>
            <returns>IServiceCollection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.AddObject(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)">
            <summary>
            将用户自定义的数据注册进服务。
            </summary>
            <param name="services">主服务</param>
            <param name="type">注册对象类型</param>
            <param name="_obj">注册的数据</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.SetFormOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Http.Features.FormOptions})">
            <summary>
            设置系统默认配置的<see cref="T:Microsoft.AspNetCore.Http.Features.FormOptions"/>对象属性
            </summary>
            <param name="app">IServiceCollection框架对象</param>
            <param name="action">用于属性配置的方法</param>
            <returns>IServiceCollection框架对象</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SessionServiceExtensions">
            <summary>
            AsSession服务的注册帮助类
            </summary>
            <remarks>代码由逆血提供支持</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SessionServiceExtensions.AddDiySession(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Tool.Web.Session.DiySessionOptions})">
            <summary>
            添加AsSession，暂时可以不需要写，目前还没实现长连接数据绑定，采用内存处理。
            </summary>
            <param name="services"></param>
            <param name="action">必须实现的条件</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SessionServiceExtensions.UseDiySession(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册AsSession
            </summary>
            <param name="app">IApplicationBuilder框架对象</param>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.HostBuilderExtensions">
            <summary>
            HostBuilder扩展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.UseDiyServiceProvider(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            依赖注入（采用自定义模式，替换掉 默认的容器）
            <list type="table">自动注册<see cref="T:Tool.ObjectExtension"/>.Services</list>
            <list type="table">自动注册<see cref="T:Tool.ObjectExtension"/>.Provider</list>
            </summary>
            <param name="builder">信息</param>
            <returns><see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFileListRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsFileListRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsFileListRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileListRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFileListRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileListRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFileListRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileListRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileListRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileListRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CutStringTitleRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutStringTitleRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ReplaceCnCharRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ReplaceCnCharRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CutUrlReturnPathRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CutUrlReturnPathRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFloatRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsFloatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsFloatRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFloatRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFloatRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFloatRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFloatRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFloatRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFloatRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFloatRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIntRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIntRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIntRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIntRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIntRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GetTextFromHTMLRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetTextFromHTMLRegex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ToColorRegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ToColorRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ToColorRegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ToColorRegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ToColorRegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ToColorRegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ToColorRegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ToColorRegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ToColorRegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsBase64StringRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsBase64StringRegex_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCnCharRegex_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsCnCharRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharRegex_9.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsCnCharAndWordAndNumRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCnCharAndWordAndNumRegex_10.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDateRegex_11">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsDateRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsDateRegex_11.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDateRegex_11.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDateRegex_11.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDateRegex_11.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDateRegex_11.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDateRegex_11.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDateRegex_11.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDateRegex_11.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsDecimalFractionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDecimalFractionRegex_12.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsDoEmailRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoEmailRegex_13.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDomainRegex_14">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsDomainRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsDomainRegex_14.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDomainRegex_14.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDomainRegex_14.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDomainRegex_14.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDomainRegex_14.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDomainRegex_14.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDomainRegex_14.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDomainRegex_14.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDoubleRegex_15">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsDoubleRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsDoubleRegex_15.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsEmailRegex_16">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsEmailRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsEmailRegex_16.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsEmailRegex_16.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsEmailRegex_16.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsEmailRegex_16.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsEmailRegex_16.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsEmailRegex_16.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsEmailRegex_16.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsEmailRegex_16.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFileNameRegex_17">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsFileNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsFileNameRegex_17.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIDCard0Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard0Regex_18.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIDCard1Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIDCard1Regex_19.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsImageRegex_20">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsImageRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsImageRegex_20.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsImageRegex_20.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsImageRegex_20.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsImageRegex_20.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsImageRegex_20.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsImageRegex_20.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsImageRegex_20.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsImageRegex_20.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpRegex_21">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIpRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIpRegex_21.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpRegex_21.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpRegex_21.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpRegex_21.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpRegex_21.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpRegex_21.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpRegex_21.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpRegex_21.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIpAndPortRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpAndPortRegex_22.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpSectRegex_23">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIpSectRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIpSectRegex_23.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsLongDateRegex_24">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsLongDateRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsLongDateRegex_24.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsMobileCodeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsMobileCodeRegex_25.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsNegativeIntRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNegativeIntRegex_26.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNickNameRegex_27">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsNickNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNickNameRegex_27.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNumericRegex_28">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsNumericRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsNumericRegex_28.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNumericRegex_28.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNumericRegex_28.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNumericRegex_28.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsNumericRegex_28.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNumericRegex_28.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNumericRegex_28.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsNumericRegex_28.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsPhoneCodeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhoneCodeRegex_29.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsPhysicalPathRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPhysicalPathRegex_30.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsInt0Regex_31">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsInt0Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsInt0Regex_31.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsInt0Regex_31.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsInt0Regex_31.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsInt0Regex_31.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsInt0Regex_31.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsInt0Regex_31.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsInt0Regex_31.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsInt0Regex_31.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsPostalCodeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsPostalCodeRegex_32.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsRelativePathRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsRelativePathRegex_33.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsSafeInputWordsRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeInputWordsRegex_34.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsSafeSqlStringRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafeSqlStringRegex_35.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Replace0Regex_36">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Replace0Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Replace0Regex_36.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Replace0Regex_36.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Replace0Regex_36.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Replace0Regex_36.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Replace0Regex_36.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Replace0Regex_36.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Replace0Regex_36.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafetyRegex_37">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsSafetyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSafetyRegex_37.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSqlRegex_38">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsSqlRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsSqlRegex_38.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlRegex_38.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSqlRegex_38.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlRegex_38.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSqlRegex_38.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlRegex_38.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlRegex_38.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlRegex_38.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsTimeRegex_39">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsTimeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsTimeRegex_39.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsTimeRegex_39.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsTimeRegex_39.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsTimeRegex_39.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsTimeRegex_39.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsTimeRegex_39.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsTimeRegex_39.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsTimeRegex_39.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsUnicodeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUnicodeRegex_40.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUrlRegex_41">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsUrlRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsUrlRegex_41.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUrlRegex_41.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUrlRegex_41.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUrlRegex_41.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUrlRegex_41.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUrlRegex_41.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUrlRegex_41.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUrlRegex_41.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsWordAndNumRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsWordAndNumRegex_42.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUserNameRegex_43">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsUserNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsUserNameRegex_43.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsSqlWhereRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsSqlWhereRegex_44.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIntRegex_45">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIntRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIntRegex_45.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_45.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIntRegex_45.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_45.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIntRegex_45.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_45.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_45.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIntRegex_45.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyWhiteSpace(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a whitespace character.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_95064C55B42AF5461629EEF251E7B2E145398FFCBFBD713EF157A1B2DE7B6B11(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [\t"%&amp;*,/&lt;&gt;cg\s].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptWhiteSpace">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f!\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_3C8400580000000000000000">
            <summary>Supports searching for characters in or not in "\"#$%*/;&lt;&gt;".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_40FF07FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in ".0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_60FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_7060FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "$%&amp;-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_80FFFF0780FFFF07">
            <summary>Supports searching for characters in or not in "GHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_850000043A6238013A623801">
            <summary>Supports searching for characters in or not in " \"':ACDEIMNSTUXacdeimnstux".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_88FF23FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "+/0123456789=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_A2B700080100002800000038">
            <summary>Supports searching for characters in or not in "!%'()*,-/;@[]{|}".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_F878FFA3FEFFFF97FEFFFF47">
            <summary>Supports searching for characters in or not in "#$%&amp;'+,-.0123456789=?ABCDEFGHIJKLMNOPQRSTUVWXYZ\\_abcdefghijklmnopqrstuvwxyz~".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_FFC1FFFF9A6BFFAFFFFFFFFF77FFFFFF">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f!#$'()+-.0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abdefhijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_7F5B1278888193BB55E90C209E921A8AE726FA72D91C3C471711E50DB9F43FE2">
            <summary>Supports searching for characters in or not in "?CDISUcdisuİ".</summary>
        </member>
    </members>
</doc>
