import{_ as n,c as h,a4 as a,j as e,a as t,G as o,w as r,B as i,o as m}from"./chunks/framework.C9bIz6zs.js";const C=JSON.parse('{"title":"Namespace Tool.Utils","description":"","frontmatter":{},"headers":[],"relativePath":"docfx/Tool.Utils.md","filePath":"zh/docfx/Tool.Utils.md"}'),T={name:"docfx/Tool.Utils.md"};function f(d,l,U,u,H,g){const p=i("xref"),s=i("example");return m(),h("div",null,[l[9]||(l[9]=a('<h1 id="namespace-tool-utils" tabindex="-1"><a id="Tool_Utils"></a> Namespace Tool.Utils <a class="header-anchor" href="#namespace-tool-utils" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils&quot;&gt;&lt;/a&gt; Namespace Tool.Utils&quot;">​</a></h1><h3 id="namespaces" tabindex="-1">Namespaces <a class="header-anchor" href="#namespaces" aria-label="Permalink to &quot;Namespaces&quot;">​</a></h3><p><a href="./Tool.Utils.ActionDelegate.html">Tool.Utils.ActionDelegate</a></p><p><a href="./Tool.Utils.Data.html">Tool.Utils.Data</a></p><p><a href="./Tool.Utils.Encryption.html">Tool.Utils.Encryption</a></p><p><a href="./Tool.Utils.FtpHelper.html">Tool.Utils.FtpHelper</a></p><p><a href="./Tool.Utils.Other.html">Tool.Utils.Other</a></p><p><a href="./Tool.Utils.TaskHelper.html">Tool.Utils.TaskHelper</a></p><p><a href="./Tool.Utils.ThreadQueue.html">Tool.Utils.ThreadQueue</a></p><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Tool.Utils.AppSettings.html">AppSettings</a></p><p>获取配置文件数据 (允许修改原文件异步队列式更新)</p><p><a href="./Tool.Utils.Validate.CardDetail.html">Validate.CardDetail</a></p><p>银行卡信息</p><p><a href="./Tool.Utils.Crc32.html">Crc32</a></p><p>提供 CRC32 算法的实现</p><p><a href="./Tool.Utils.DBNullConverter.html">DBNullConverter</a></p>',17)),e("p",null,[l[0]||(l[0]=t("Json ")),o(p,{href:"System.DBNull","data-throw-if-not-resolved":"false"}),l[1]||(l[1]=t(" 将 {} 改Null输出"))]),l[10]||(l[10]=a('<p><a href="./Tool.Utils.DataHelper.html">DataHelper</a></p><p>数据集帮助类</p><p><a href="./Tool.Utils.DataTableProperty.html">DataTableProperty</a></p><p>表示一个 实体字段对应的表下标</p><p><a href="./Tool.Utils.DateConverter.html">DateConverter</a></p><p>Json 标准或自定义日期和时间格式字符串。</p><p><a href="./Tool.Utils.EntityBuilder.html">EntityBuilder</a></p><p>用于提高，对象构造（只支持无参构造），对象取值，对象赋值。</p><p><a href="./Tool.Utils.FileManager.html">FileManager</a></p><p>文件管理器</p><p><a href="./Tool.Utils.FlashLogMessage.html">FlashLogMessage</a></p><p>日志内容</p><p><a href="./Tool.Utils.FolderInfo.html">FolderInfo</a></p><p>文件详情类</p><p><a href="./Tool.Utils.HashHelper.html">HashHelper</a></p><p>提供用于计算指定文件哈希值的方法</p>',16)),o(s,null,{default:r(()=>l[2]||(l[2]=[t("例如计算文件的MD5值: "),e("pre",null,[e("code",{class:"lang-csharp"},'String hashMd5=HashHelper.ComputeMD5("MyFile.txt");')],-1)])),_:1}),o(s,null,{default:r(()=>l[3]||(l[3]=[t("例如计算文件的CRC32值: "),e("pre",null,[e("code",{class:"lang-csharp"},'String hashCrc32 = HashHelper.ComputeCRC32("MyFile.txt");')],-1)])),_:1}),o(s,null,{default:r(()=>l[4]||(l[4]=[t("例如计算文件的SHA1值: "),e("pre",null,[e("code",{class:"lang-csharp"},'String hashSha1 =HashHelper.ComputeSHA1("MyFile.txt");')],-1)])),_:1}),l[11]||(l[11]=a('<p><a href="./Tool.Utils.HttpHelpers.html">HttpHelpers</a></p><p>提供部分的API请求访问类 (内置调用接口 替换为 HttpClient) 注意此类下所有函数调用皆无异常抛出，但为了方便问题排查，增加异常相关日志</p><p><a href="./Tool.Utils.IntPtrHelper.html">IntPtrHelper</a></p><p>关于内存地址读写的操作帮助类</p><p><a href="./Tool.Utils.IocCore.html">IocCore</a></p><p>提供一个完全独立的 Ioc 容器</p><p><a href="./Tool.Utils.IocHelper.html">IocHelper</a></p><p>用于提供全局支持的 TOC 对象</p><p>服务生命周期</p><p>在Microsoft依赖项注入框架中，我们可以使用三种生命周期注册服务，分别是单例（Singleton）、瞬时（Transient）、作用域（Scoped），在上面的代码中， 我使用了AddSingleton()来注册服务。</p><p>使用Singleton服务的优点是我们不会创建多个服务实例，只会创建一个实例，保存到DI容器中，直到程序退出，这不仅效率高，而且性能高，但是有一个要注意的点， 如果在多线程中使用了Singleton,要考虑线程安全的问题，保证它不会有冲突。</p><p>瞬时（Transient）和单例（Singleton）模式是相反的，每次使用时，DI容器都是创建一个新的实例。</p><p>作用域（Scoped），在一个作用域内，会使用同一个实例，像EF Core的DbContext上下文就被注册为作用域服务。</p><p><a href="./Tool.Utils.JsonConverterHelper.html">JsonConverterHelper</a></p><p>获取 系统中可用的 Json 自定义转换对象</p><p><a href="./Tool.Utils.JsonHelper.html">JsonHelper</a></p>',16)),e("p",null,[l[5]||(l[5]=t("对 ")),o(p,{href:"System.Text.Json.JsonSerializer","data-throw-if-not-resolved":"false"}),l[6]||(l[6]=t(" 的拓展类"))]),l[12]||(l[12]=e("p",null,[e("a",{href:"./Tool.Utils.Log.html"},"Log")],-1)),l[13]||(l[13]=e("p",null,"日志工具类",-1)),l[14]||(l[14]=e("p",null,[e("a",{href:"./Tool.Utils.MemorySegment-1.html"},"MemorySegment<T>")],-1)),l[15]||(l[15]=e("p",null,"提供内存连续模型",-1)),l[16]||(l[16]=e("p",null,[e("a",{href:"./Tool.Utils.ObjectPool-1.html"},"ObjectPool<T>")],-1)),l[17]||(l[17]=e("p",null,"自定义的公共对象（重用模型）",-1)),l[18]||(l[18]=e("p",null,[e("a",{href:"./Tool.Utils.ReflectionHelper.html"},"ReflectionHelper")],-1)),e("p",null,[l[7]||(l[7]=t("获取")),o(p,{href:"System.Type","data-throw-if-not-resolved":"false"}),l[8]||(l[8]=t(" 对象的封装类"))]),l[19]||(l[19]=a('<p><a href="./Tool.Utils.TextUtility.html">TextUtility</a></p><p>提供技术支持的类库</p><p><a href="./Tool.Utils.TypeExtension.html">TypeExtension</a></p><p>对Type进行升级</p><p><a href="./Tool.Utils.TypeHelper.html">TypeHelper</a></p><p>类型助手</p><p><a href="./Tool.Utils.TypeParse.html">TypeParse</a></p><p>判读该值是否是可以被强制转换</p><p><a href="./Tool.Utils.Utility.html">Utility</a></p><p>常用方法类</p><p><a href="./Tool.Utils.Validate.html">Validate</a></p><p>各种验证类，包含正则表达式</p><p><a href="./Tool.Utils.Validator.html">Validator</a></p><p>相关正则类（包含常用的正则表达式）高达65种供大家参考学习，使用。</p><h3 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h3><p><a href="./Tool.Utils.JsonEnumerator.html">JsonEnumerator</a></p><p>获取集合源</p><p><a href="./Tool.Utils.JsonVar.html">JsonVar</a></p><p>一种获取 Json 格式数据的实现</p><h3 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h3><p><a href="./Tool.Utils.FlashLogLevel.html">FlashLogLevel</a></p><p>日志等级</p><p><a href="./Tool.Utils.FsoMethod.html">FsoMethod</a></p><p>文件类型</p><p><a href="./Tool.Utils.JsonKeyKind.html">JsonKeyKind</a></p><p>Key的类型</p><p><a href="./Tool.Utils.UserSystem.html">UserSystem</a></p><p>根据 Agent 判断当前请求用户的设备名 枚举</p>',28))])}const S=n(T,[["render",f]]);export{C as __pageData,S as default};
