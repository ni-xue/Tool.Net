import{_ as a,c as t,a2 as o,o as l}from"./chunks/framework.CQii86iU.js";const c=JSON.parse('{"title":"Namespace Tool.Utils.ThreadQueue","description":"","frontmatter":{},"headers":[],"relativePath":"docfx/Tool.Utils.ThreadQueue.md","filePath":"zh/docfx/Tool.Utils.ThreadQueue.md"}'),u={name:"docfx/Tool.Utils.ThreadQueue.md"};function s(r,e,i,h,T,d){return l(),t("div",null,e[0]||(e[0]=[o('<h1 id="namespace-tool-utils-threadqueue" tabindex="-1"><a id="Tool_Utils_ThreadQueue"></a> Namespace Tool.Utils.ThreadQueue <a class="header-anchor" href="#namespace-tool-utils-threadqueue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ThreadQueue&quot;&gt;&lt;/a&gt; Namespace Tool.Utils.ThreadQueue&quot;">​</a></h1><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Tool.Utils.ThreadQueue.ActionLock.html">ActionLock</a></p><p>一个公共锁</p><p><a href="./Tool.Utils.ThreadQueue.ActionQueue-2.html">ActionQueue&lt;T, TResult&gt;</a></p><p>一个(公共线程安全)消息队列任务模型</p><p><a href="./Tool.Utils.ThreadQueue.AtomCountLock.html">AtomCountLock</a></p><p>一个原子计数锁，可以确保多线程下，可调用区域内只能调用固定次数</p><p><a href="./Tool.Utils.ThreadQueue.TaskQueue.html">TaskQueue</a></p><p>一个消息队列任务模型（异步处理任务·线程安全）</p><table><tbody></tbody></table><table><tbody></tbody></table><p><a href="./Tool.Utils.ThreadQueue.TaskQueue-1.html">TaskQueue&lt;T&gt;</a></p><p>一个消息队列任务模型（异步处理任务·线程安全）</p><p><a href="./Tool.Utils.ThreadQueue.TaskQueue-2.html">TaskQueue&lt;T, TResult&gt;</a></p><p>一个消息队列任务模型（异步处理任务·线程安全）</p><p><a href="./Tool.Utils.ThreadQueue.WaitAction-2.html">WaitAction&lt;T, TResult&gt;</a></p><p>创建任务执行对象</p>',18)]))}const n=a(u,[["render",s]]);export{c as __pageData,n as default};
