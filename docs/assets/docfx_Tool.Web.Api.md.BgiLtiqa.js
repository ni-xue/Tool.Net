import{_ as r,c as A,a4 as n,G as t,w as s,j as o,a as e,B as a,o as u}from"./chunks/framework.C9bIz6zs.js";const O=JSON.parse('{"title":"Namespace Tool.Web.Api","description":"","frontmatter":{},"headers":[],"relativePath":"docfx/Tool.Web.Api.md","filePath":"zh/docfx/Tool.Web.Api.md"}'),f={name:"docfx/Tool.Web.Api.md"};function d(m,l,b,T,W,x){const i=a("example"),p=a("xref");return u(),A("div",null,[l[20]||(l[20]=n('<h1 id="namespace-tool-web-api" tabindex="-1"><a id="Tool_Web_Api"></a> Namespace Tool.Web.Api <a class="header-anchor" href="#namespace-tool-web-api" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Web_Api&quot;&gt;&lt;/a&gt; Namespace Tool.Web.Api&quot;">​</a></h1><h3 id="namespaces" tabindex="-1">Namespaces <a class="header-anchor" href="#namespaces" aria-label="Permalink to &quot;Namespaces&quot;">​</a></h3><p><a href="./Tool.Web.Api.ApiCore.html">Tool.Web.Api.ApiCore</a></p><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Tool.Web.Api.ApiAshx.html">ApiAshx</a></p><p>针对于新版Ashx路由模式，的同步，异步，支持</p><p>该控制器，相对于Mvc的控制器轻，应有功能都有，可自由扩展。</p><p>方便实现，您最想实现的效果，最大的优点还是因为他轻量级。</p>',8)),t(i,null,{default:s(()=>l[0]||(l[0]=[e(" Api 方法创建示例： "),o("pre",null,[o("code",{class:"lang-csharp"},'public  GetApi( context)  => Json(new { msg = "路由版本api。" });')],-1)])),_:1}),t(i,null,{default:s(()=>l[1]||(l[1]=[e("Api 方法创建示例：(异步实现) "),o("pre",null,[o("code",{class:"lang-csharp"},'public async  GetTaskApi( context) => await JsonAsync(new { msg = "路由版本api。" });')],-1)])),_:1}),l[21]||(l[21]=o("p",null,[o("a",{href:"./Tool.Web.Api.ApiOut.html"},"ApiOut")],-1)),o("p",null,[l[2]||(l[2]=e("系统默认 ")),t(p,{href:"Tool.Web.Api.MinApi","data-throw-if-not-resolved":"false"}),l[3]||(l[3]=e(" Api输出结果 抽象类，用于普通返回值，特殊返回值建议您自己实现。"))]),l[22]||(l[22]=o("p",null,[o("a",{href:"./Tool.Web.Api.ApiVal.html"},"ApiVal")],-1)),l[23]||(l[23]=o("p",null,"用于 Api 请求参数，类型定义，区分不同阐述的值。",-1)),l[24]||(l[24]=o("p",null,[o("a",{href:"./Tool.Web.Api.Ashx.html"},"Ashx")],-1)),o("p",null,[l[4]||(l[4]=e("针对于一般处理程序，备注一般处理程序必须继承于（")),t(p,{href:"Tool.Web.Api.ApiAshx","data-throw-if-not-resolved":"false"}),l[5]||(l[5]=e(" 类才会生效） 所有状态（用于更好的使用API）"))]),l[25]||(l[25]=n('<p><a href="./Tool.Web.Api.AshxException.html">AshxException</a></p><p>Api的异常处理类</p><p><a href="./Tool.Web.Api.CrossDomain.html">CrossDomain</a></p><p>指定允许其他域名访问，可跨域</p><p>相关配置：</p><p>&#39;Access-Control-Allow-Origin:http://172.20.0.206&#39; 一般用法（*，指定域，动态设置），3是因为*不允许携带认证头和cookies</p><p>&#39;Access-Control-Allow-Credentials:true&#39; 是否允许后续请求携带认证信息（cookies）,该值只能是true,否则不返回</p><p>&#39;Access-Control-Allow-Methods:HEAD,GET,POST,PUT,PATCH,DELETE&#39; 允许的请求类型</p><p>&#39;Access-Control-Allow-Headers:x-requested-with,content-type&#39; 允许的请求头字段</p><p><a href="./Tool.Web.Api.EventStreamOut.html">EventStreamOut</a></p><p>SSE服务器事件流</p><p><a href="./Tool.Web.Api.FileOut.html">FileOut</a></p>',12)),o("p",null,[l[6]||(l[6]=e("系统默认 ")),t(p,{href:"Tool.Web.Api.ApiOut","data-throw-if-not-resolved":"false"}),l[7]||(l[7]=e(" 输出对象的实现类，文件输出处理"))]),l[26]||(l[26]=o("p",null,[o("a",{href:"./Tool.Web.Api.JsonOut.html"},"JsonOut")],-1)),o("p",null,[l[8]||(l[8]=e("系统默认 ")),t(p,{href:"Tool.Web.Api.ApiOut","data-throw-if-not-resolved":"false"}),l[9]||(l[9]=e(" 输出对象的实现类，JSON格式处理"))]),l[27]||(l[27]=o("p",null,[o("a",{href:"./Tool.Web.Api.MinApi.html"},"MinApi")],-1)),l[28]||(l[28]=o("p",null,"针对于新版Ashx路由模式，的同步，异步，支持（此Api为最轻量级，请严格遵循实现写法）",-1)),l[29]||(l[29]=o("p",null,"给你一个快的理由，因为该路由接口类在启动路由时就已经创建，中途调用，无需创建新的实例，达到最大性能优化。",-1)),l[30]||(l[30]=o("p",null,"同时请注意您这个Api类对象的生命周期，将伴随着整个Web应用程序一致，也就意味着类中的所有对象将不是安全的，请合理声明类变量使用。",-1)),t(i,null,{default:s(()=>l[10]||(l[10]=[e(" Api 方法创建示例： "),o("pre",null,[o("code",{class:"lang-csharp"},'public  GetApi( context)  => ApiOut.Json(new { msg = "最小，路由版本api。" });')],-1)])),_:1}),t(i,null,{default:s(()=>l[11]||(l[11]=[e("Api 方法创建示例：(异步实现) "),o("pre",null,[o("code",{class:"lang-csharp"},'public async  GetTaskApi( context) => await ApiOut.JsonAsync(new { msg = "最小，路由版本api。" });')],-1)])),_:1}),l[31]||(l[31]=o("p",null,[o("a",{href:"./Tool.Web.Api.NoContentOut.html"},"NoContentOut")],-1)),l[32]||(l[32]=o("p",null,"无返回结果",-1)),l[33]||(l[33]=o("p",null,[o("a",{href:"./Tool.Web.Api.OnAshxEvent.html"},"OnAshxEvent")],-1)),o("p",null,[l[12]||(l[12]=e("针对于继承 ")),t(p,{href:"Tool.Web.Api.ApiAshx","data-throw-if-not-resolved":"false"}),l[13]||(l[13]=e(" 的类，用于事件方法接口，需要另一个模块驱动的消息接口，可以使用"))]),l[34]||(l[34]=o("p",null,[o("a",{href:"./Tool.Web.Api.RedirectOut.html"},"RedirectOut")],-1)),o("p",null,[l[14]||(l[14]=e("系统默认 ")),t(p,{href:"Tool.Web.Api.ApiOut","data-throw-if-not-resolved":"false"}),l[15]||(l[15]=e(" 跳转地址的实现类，跳转地址302"))]),l[35]||(l[35]=o("p",null,[o("a",{href:"./Tool.Web.Api.ViewOut.html"},"ViewOut")],-1)),o("p",null,[l[16]||(l[16]=e("系统默认 ")),t(p,{href:"Tool.Web.Api.ApiOut","data-throw-if-not-resolved":"false"}),l[17]||(l[17]=e(" 输出对象的实现类，视图页面输出处理"))]),l[36]||(l[36]=o("p",null,[o("a",{href:"./Tool.Web.Api.WriteOut.html"},"WriteOut")],-1)),o("p",null,[l[18]||(l[18]=e("系统默认 ")),t(p,{href:"Tool.Web.Api.ApiOut","data-throw-if-not-resolved":"false"}),l[19]||(l[19]=e(" 输出对象的实现类，文本格式处理"))]),l[37]||(l[37]=o("h3",{id:"interfaces",tabindex:"-1"},[e("Interfaces "),o("a",{class:"header-anchor",href:"#interfaces","aria-label":'Permalink to "Interfaces"'},"​")],-1)),l[38]||(l[38]=o("p",null,[o("a",{href:"./Tool.Web.Api.IApiOut.html"},"IApiOut")],-1)),t(p,{href:"Tool.Web.Api.MinApi","data-throw-if-not-resolved":"false"}),l[39]||(l[39]=n(' Api 返回结果接口，用于实现各种返回输出<h3 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h3><p><a href="./Tool.Web.Api.AshxState.html">AshxState</a></p><p>针对于Api需要接受相应的状态</p><p><a href="./Tool.Web.Api.OnAshxEventState.html">OnAshxEventState</a></p><p>对异步事件类的状态</p><p><a href="./Tool.Web.Api.Val.html">Val</a></p><p>值来源的类型</p><p><a href="./Tool.Web.Api.WriteType.html">WriteType</a></p><p>返回客户端的类型</p>',10))])}const w=r(f,[["render",d]]);export{O as __pageData,w as default};
