import{_ as t,c as o,a4 as a,o as l}from"./chunks/framework.C9bIz6zs.js";const i=JSON.parse('{"title":"Namespace Tool.Sockets.Kernels","description":"","frontmatter":{},"headers":[],"relativePath":"docfx/Tool.Sockets.Kernels.md","filePath":"zh/docfx/Tool.Sockets.Kernels.md"}'),r={name:"docfx/Tool.Sockets.Kernels.md"};function p(s,e,n,c,h,k){return l(),o("div",null,e[0]||(e[0]=[a('<h1 id="namespace-tool-sockets-kernels" tabindex="-1"><a id="Tool_Sockets_Kernels"></a> Namespace Tool.Sockets.Kernels <a class="header-anchor" href="#namespace-tool-sockets-kernels" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Sockets_Kernels&quot;&gt;&lt;/a&gt; Namespace Tool.Sockets.Kernels&quot;">​</a></h1><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Tool.Sockets.Kernels.EnClientEventDrive.html">EnClientEventDrive</a></p><p>事件控制抽象类（客户端版）</p><p><a href="./Tool.Sockets.Kernels.EnServerEventDrive.html">EnServerEventDrive</a></p><p>事件控制抽象类（服务端版）</p><p><a href="./Tool.Sockets.Kernels.EnumEventQueue.html">EnumEventQueue</a></p><p>一个Net连接公共的事件消息体</p><p><a href="./Tool.Sockets.Kernels.KeepAlive.html">KeepAlive</a></p><p>用于长连接的心跳模型</p><p><a href="./Tool.Sockets.Kernels.NetworkConnect-1.html">NetworkConnect&lt;ISocket&gt;</a></p><p>通信公共模板抽象类（客户端版）</p><p><a href="./Tool.Sockets.Kernels.NetworkListener-1.html">NetworkListener&lt;ISocket&gt;</a></p><p>通信公共模板抽象类（服务端版）</p><p><a href="./Tool.Sockets.Kernels.QuicSocket.html">QuicSocket</a></p><p>.Net7 以上支持</p><p><a href="./Tool.Sockets.Kernels.QuicStateObject.html">QuicStateObject</a></p><p>.Net7 以上支持</p><p><a href="./Tool.Sockets.Kernels.SocketEventPool.html">SocketEventPool</a></p><p>Socket异步传输池</p><p><a href="./Tool.Sockets.Kernels.StateObject.html">StateObject</a></p><p>通信公共基础类</p><p><a href="./Tool.Sockets.Kernels.TcpStateObject.html">TcpStateObject</a></p><p>对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起</p><p><a href="./Tool.Sockets.Kernels.UdpStateObject.html">UdpStateObject</a></p><p>对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起</p><p><a href="./Tool.Sockets.Kernels.WebStateObject.html">WebStateObject</a></p><p>对异步接收时的对象状态的封装，将Websocket与接收到的数据封装在一起</p><h3 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h3><p><a href="./Tool.Sockets.Kernels.ApiValue.html">ApiValue</a></p><p>存储对象</p><p><a href="./Tool.Sockets.Kernels.BytesCore.html">BytesCore</a></p><p>资源 对象（必须回收，丢失风险大）</p><p><a href="./Tool.Sockets.Kernels.Ipv4Port.html">Ipv4Port</a></p><p>用于IP:Port信息</p><p><a href="./Tool.Sockets.Kernels.MemoryWriteHeap.html">MemoryWriteHeap</a></p><p>用于处理超过缓冲区大小的包体</p><p><a href="./Tool.Sockets.Kernels.ReceiveBytes-1.html">ReceiveBytes&lt;ISocket&gt;</a></p><p>Socket 通讯资源 对象（必须回收，丢失风险大）</p><p><a href="./Tool.Sockets.Kernels.SendBytes-1.html">SendBytes&lt;ISocket&gt;</a></p><p>Socket 通讯资源 对象（必须回收，丢失风险大）</p><p><a href="./Tool.Sockets.Kernels.UserKey.html">UserKey</a></p><p>用于通信模块Key数据模型</p><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><p><a href="./Tool.Sockets.Kernels.IApiResult.html">IApiResult</a></p><p>接口协议</p><p><a href="./Tool.Sockets.Kernels.IBytesCore.html">IBytesCore</a></p><p>内存管理对象</p><p><a href="./Tool.Sockets.Kernels.IDataPacket.html">IDataPacket</a></p><p>通讯协议模型</p><p><a href="./Tool.Sockets.Kernels.IGetQueOnEnum.html">IGetQueOnEnum</a></p><p>事件处理接口</p><p><a href="./Tool.Sockets.Kernels.INetworkConnect.html">INetworkConnect</a></p><p>连接通信模型</p><p><a href="./Tool.Sockets.Kernels.INetworkConnect-1.html">INetworkConnect&lt;ISocket&gt;</a></p><p>连接通信模型二</p><p><a href="./Tool.Sockets.Kernels.INetworkCore.html">INetworkCore</a></p><p>连接协议顶层接口</p><p><a href="./Tool.Sockets.Kernels.INetworkListener.html">INetworkListener</a></p><p>服务端模型</p><p><a href="./Tool.Sockets.Kernels.INetworkListener-1.html">INetworkListener&lt;ISocket&gt;</a></p><p>服务器模型二</p><h3 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h3><p><a href="./Tool.Sockets.Kernels.EnClient.html">EnClient</a></p><p>Client客户端枚举</p><p><a href="./Tool.Sockets.Kernels.EnServer.html">EnServer</a></p><p>Server服务器枚举</p><p><a href="./Tool.Sockets.Kernels.NetBufferSize.html">NetBufferSize</a></p><p>设置传输大小</p><p><a href="./Tool.Sockets.Kernels.NetFrameState.html">NetFrameState</a></p><p>对NetFrame响应的状态</p><p><a href="./Tool.Sockets.Kernels.ApiValue.ValueType.html">ApiValue.ValueType</a></p><p>用于表示当前类型的实际值</p><h3 id="delegates" tabindex="-1">Delegates <a class="header-anchor" href="#delegates" aria-label="Permalink to &quot;Delegates&quot;">​</a></h3><p><a href="./Tool.Sockets.Kernels.CompletedEvent-1.html">CompletedEvent&lt;T&gt;</a></p><p>Socket事件委托</p><p><a href="./Tool.Sockets.Kernels.IpParserEvent.html">IpParserEvent</a></p><p>Socket IpPort 解释器委托</p><p><a href="./Tool.Sockets.Kernels.ReceiveEvent-1.html">ReceiveEvent&lt;T&gt;</a></p><p>Socket接收数据委托</p>',80)]))}const m=t(r,[["render",p]]);export{i as __pageData,m as default};
