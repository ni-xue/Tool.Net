import{_ as r,c as l,a2 as n,j as e,a,G as i,B as o,o as h}from"./chunks/framework.CQii86iU.js";const T=JSON.parse('{"title":"Class TaskConcurrentDictionary<TKey, TValue>","description":"","frontmatter":{},"headers":[],"relativePath":"docfx/Tool.Utils.Data.TaskConcurrentDictionary-2.md","filePath":"zh/docfx/Tool.Utils.Data.TaskConcurrentDictionary-2.md"}'),p={name:"docfx/Tool.Utils.Data.TaskConcurrentDictionary-2.md"};function k(d,t,y,_,c,u){const s=o("xref");return h(),l("div",null,[t[54]||(t[54]=n('<h1 id="class-taskconcurrentdictionary-tkey-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2"></a> Class TaskConcurrentDictionary&lt;TKey, TValue&gt; <a class="header-anchor" href="#class-taskconcurrentdictionary-tkey-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2&quot;&gt;&lt;/a&gt; Class TaskConcurrentDictionary&lt;TKey, TValue\\&gt;&quot;">​</a></h1><p>Namespace: <a href="./Tool.Utils.Data.html">Tool.Utils.Data</a><br> Assembly: Tool.Net.dll</p><p>完全保证的多线程可等待字典，表示可由多个线程同时访问的键/值对的线程安全集合。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskConcurrentDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ICollection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValuePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValuePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IAsyncEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValuePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span></code></pre></div><h4 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>TKey</code></p><p>字典中的键的类型。</p><p><code>TValue</code></p><p>字典中的值的类型。</p><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a> ← <a href="./Tool.Utils.Data.TaskConcurrentDictionary-2.html">TaskConcurrentDictionary&lt;TKey, TValue&gt;</a></p><h4 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2" target="_blank" rel="noreferrer">IDictionary&lt;TKey, TValue&gt;</a>, <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1" target="_blank" rel="noreferrer">ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</a>, <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noreferrer">IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</a>, <a href="https://learn.microsoft.com/dotnet/api/system.collections.ienumerable" target="_blank" rel="noreferrer">IEnumerable</a>, <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1" target="_blank" rel="noreferrer">IAsyncEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</a></p><h4 id="inherited-members" tabindex="-1">Inherited Members <a class="header-anchor" href="#inherited-members" aria-label="Permalink to &quot;Inherited Members&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noreferrer">object.Equals(object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)" target="_blank" rel="noreferrer">object.Equals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noreferrer">object.GetHashCode()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noreferrer">object.GetType()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noreferrer">object.MemberwiseClone()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.referenceequals" target="_blank" rel="noreferrer">object.ReferenceEquals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noreferrer">object.ToString()</a></p><h4 id="extension-methods" tabindex="-1">Extension Methods <a class="header-anchor" href="#extension-methods" aria-label="Permalink to &quot;Extension Methods&quot;">​</a></h4><p><a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_Add__1_System_Object_System_Object_System_Object_">ObjectExtension.Add&lt;T&gt;(object, object, object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_AsReadOnly__2_System_Collections_Generic_IDictionary___0___1__">DictionaryExtension.AsReadOnly&lt;TKey, TValue&gt;(IDictionary&lt;TKey, TValue&gt;)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_CopyEntity_System_Object_System_Object_System_String___">ObjectExtension.CopyEntity(object, object, params string[])</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_EntityToJson_System_Object_">ObjectExtension.EntityToJson(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_EntityToJson_System_Object_System_Boolean_">ObjectExtension.EntityToJson(object, bool)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_EntityToJson_System_Object_System_Boolean_System_String_">ObjectExtension.EntityToJson(object, bool, string)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_GetDictionary_System_Object_">DictionaryExtension.GetDictionary(object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetFieldKey_System_Object_System_String_System_Boolean__">TypeExtension.GetFieldKey(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetFieldKey__1_System_Object_System_String_System_Boolean__">TypeExtension.GetFieldKey&lt;T&gt;(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetFieldKey_System_Object_System_Type_System_String_System_Boolean__">TypeExtension.GetFieldKey(object, Type, string, out bool)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_GetIntPtr_System_Object_">ObjectExtension.GetIntPtr(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_GetIntPtrInt_System_Object_">ObjectExtension.GetIntPtrInt(object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertieFind_System_Object_System_String_System_Boolean_">TypeExtension.GetPropertieFind(object, string, bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetProperties_System_Object_">TypeExtension.GetProperties(object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertyKey_System_Object_System_String_System_Boolean__">TypeExtension.GetPropertyKey(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertyKey__1_System_Object_System_String_System_Boolean__">TypeExtension.GetPropertyKey&lt;T&gt;(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertyKey_System_Object_System_Type_System_String_System_Boolean__">TypeExtension.GetPropertyKey(object, Type, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetValue_System_Object_System_ComponentModel_PropertyDescriptor_">TypeExtension.GetValue(object, PropertyDescriptor)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetValue_System_Object_System_String_System_Boolean_">TypeExtension.GetValue(object, string, bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetValue_System_Object_System_String_">TypeExtension.GetValue(object, string)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_NewDictionary__2_System_Collections_Generic_IDictionary___0___1__">DictionaryExtension.NewDictionary&lt;TKey, TValue&gt;(IDictionary&lt;TKey, TValue&gt;)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_Read__1_System_Object_System_Object_System_Int32_System_Int32_">ObjectExtension.Read&lt;T&gt;(object, object, int, int)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_Read__1_System_Object_System_Int32_System_Object_System_Int32_System_Int32_">ObjectExtension.Read&lt;T&gt;(object, int, object, int, int)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_Remove__2_System_Collections_Generic_IDictionary___0___1____0___">DictionaryExtension.Remove&lt;TKey, TValue&gt;(IDictionary&lt;TKey, TValue&gt;, params TKey[])</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_SetDictionary_System_Object_System_Collections_Generic_IDictionary_System_String_System_Object__">DictionaryExtension.SetDictionary(object, IDictionary&lt;string, object&gt;)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetFieldKey_System_Object_System_String_System_Object_">TypeExtension.SetFieldKey(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetFieldKey__1_System_Object_System_String_System_Object_">TypeExtension.SetFieldKey&lt;T&gt;(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetFieldKey_System_Object_System_Type_System_String_System_Object_">TypeExtension.SetFieldKey(object, Type, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetPropertyKey_System_Object_System_String_System_Object_">TypeExtension.SetPropertyKey(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetPropertyKey__1_System_Object_System_String_System_Object_">TypeExtension.SetPropertyKey&lt;T&gt;(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetPropertyKey_System_Object_System_Type_System_String_System_Object_">TypeExtension.SetPropertyKey(object, Type, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetValue_System_Object_System_ComponentModel_PropertyDescriptor_System_Object_">TypeExtension.SetValue(object, PropertyDescriptor, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetValue_System_Object_System_String_System_Object_System_Boolean_">TypeExtension.SetValue(object, string, object, bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetValue_System_Object_System_String_System_Object_">TypeExtension.SetValue(object, string, object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToBase64String_System_Object_">ObjectExtension.ToBase64String(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToBytes_System_Object_">ObjectExtension.ToBytes(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToBytes_System_Object_System_Type__">ObjectExtension.ToBytes(object, out Type)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToDictionary_System_Object_">DictionaryExtension.ToDictionary(object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToDictionary__1_System_Object_">DictionaryExtension.ToDictionary&lt;T&gt;(object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToIDictionary_System_Object_">DictionaryExtension.ToIDictionary(object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToIDictionary__1_System_Object_">DictionaryExtension.ToIDictionary&lt;T&gt;(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJson_System_Object_">ObjectExtension.ToJson(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJson_System_Object_System_Text_Json_JsonSerializerOptions_">ObjectExtension.ToJson(object, JsonSerializerOptions)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJsonWeb_System_Object_">ObjectExtension.ToJsonWeb(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJsonWeb_System_Object_System_Action_System_Text_Json_JsonSerializerOptions__">ObjectExtension.ToJsonWeb(object, Action&lt;JsonSerializerOptions&gt;)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToTryVar__1_System_Object___0_">ObjectExtension.ToTryVar&lt;T&gt;(object, T)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToVar__1_System_Object_">ObjectExtension.ToVar&lt;T&gt;(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToVar_System_Object_System_Type_System_Boolean_">ObjectExtension.ToVar(object, Type, bool)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToVar_System_Object_System_String_">ObjectExtension.ToVar(object, string)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToXml_System_Object_">ObjectExtension.ToXml(object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_TryRemove__2_System_Collections_Generic_IDictionary___0___1____0______0___">DictionaryExtension.TryRemove&lt;TKey, TValue&gt;(IDictionary&lt;TKey, TValue&gt;, out TKey[], params TKey[])</a></p><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p>代码由逆血提供支持</p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="taskconcurrentdictionary" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2__ctor"></a> TaskConcurrentDictionary() <a class="header-anchor" href="#taskconcurrentdictionary" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2__ctor&quot;&gt;&lt;/a&gt; TaskConcurrentDictionary\\(\\)&quot;">​</a></h3><p>初始化</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskConcurrentDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="count" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Count"></a> Count <a class="header-anchor" href="#count" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Count&quot;&gt;&lt;/a&gt; Count&quot;">​</a></h3>',25)),e("p",null,[t[0]||(t[0]=a("获取包含在 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[1]||(t[1]=a(" 中的键/值对的数目。"))]),t[55]||(t[55]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Count { get; }</span></span></code></pre></div><h4 id="property-value" tabindex="-1">Property Value <a class="header-anchor" href="#property-value" aria-label="Permalink to &quot;Property Value&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noreferrer">int</a></p><h4 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.overflowexception" target="_blank" rel="noreferrer">OverflowException</a></p><p>字典已包含最大数目的元素 (System.Int32.MaxValue)。</p><h3 id="isempty" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_IsEmpty"></a> IsEmpty <a class="header-anchor" href="#isempty" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_IsEmpty&quot;&gt;&lt;/a&gt; IsEmpty&quot;">​</a></h3>',7)),e("p",null,[t[2]||(t[2]=a("获取一个指示 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[3]||(t[3]=a(" 是否为空的值。"))]),t[56]||(t[56]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IsEmpty { get; }</span></span></code></pre></div><h4 id="property-value-1" tabindex="-1">Property Value <a class="header-anchor" href="#property-value-1" aria-label="Permalink to &quot;Property Value&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><h3 id="isreadonly" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_IsReadOnly"></a> IsReadOnly <a class="header-anchor" href="#isreadonly" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_IsReadOnly&quot;&gt;&lt;/a&gt; IsReadOnly&quot;">​</a></h3>',4)),e("p",null,[t[4]||(t[4]=a("获取一个值，该值指示 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[5]||(t[5]=a(" 是否为只读。（无效参数）"))]),t[57]||(t[57]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IsReadOnly { get; }</span></span></code></pre></div><h4 id="property-value-2" tabindex="-1">Property Value <a class="header-anchor" href="#property-value-2" aria-label="Permalink to &quot;Property Value&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><h3 id="keys" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Keys"></a> Keys <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Keys&quot;&gt;&lt;/a&gt; Keys&quot;">​</a></h3>',4)),e("p",null,[t[6]||(t[6]=a("获取包含 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[7]||(t[7]=a(" 中的键的集合。"))]),t[58]||(t[58]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ICollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Keys { get; }</span></span></code></pre></div><h4 id="property-value-3" tabindex="-1">Property Value <a class="header-anchor" href="#property-value-3" aria-label="Permalink to &quot;Property Value&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1" target="_blank" rel="noreferrer">ICollection</a>&lt;TKey&gt;</p><h3 id="values" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Values"></a> Values <a class="header-anchor" href="#values" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Values&quot;&gt;&lt;/a&gt; Values&quot;">​</a></h3>',4)),e("p",null,[t[8]||(t[8]=a("获取包含 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[9]||(t[9]=a(" 中的值的集合。 (作者并不建议使用该字段，开销有点大)"))]),t[59]||(t[59]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ICollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Values { get; }</span></span></code></pre></div><h4 id="property-value-4" tabindex="-1">Property Value <a class="header-anchor" href="#property-value-4" aria-label="Permalink to &quot;Property Value&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1" target="_blank" rel="noreferrer">ICollection</a>&lt;TValue&gt;</p><h3 id="this-tkey" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Item__0_"></a> this[TKey] <a class="header-anchor" href="#this-tkey" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Item__0_&quot;&gt;&lt;/a&gt; this\\[TKey\\]&quot;">​</a></h3><p>获取或设置与指定的键相关联的值。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TValue </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] { get; set; }</span></span></code></pre></div><h4 id="property-value-5" tabindex="-1">Property Value <a class="header-anchor" href="#property-value-5" aria-label="Permalink to &quot;Property Value&quot;">​</a></h4><p>TValue</p><h4 id="exceptions-1" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-1" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>key 为 null。</p><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.keynotfoundexception" target="_blank" rel="noreferrer">KeyNotFoundException</a></p><p>已检索该属性，并且集合中不存在 key。</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="add-tkey-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Add__0__1_"></a> Add(TKey, TValue) <a class="header-anchor" href="#add-tkey-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Add__0__1_&quot;&gt;&lt;/a&gt; Add\\(TKey, TValue\\)&quot;">​</a></h3>',15)),e("p",null,[t[10]||(t[10]=a("在 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[11]||(t[11]=a(" 中添加一个带有所提供的键和值的元素。"))]),t[60]||(t[60]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>用作要添加的元素的键的对象。</p><p><code>value</code> TValue</p><p>作为要添加的元素的值的对象。</p><h3 id="add-keyvaluepair-tkey-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Add_System_Collections_Generic_KeyValuePair__0__1__"></a> Add(KeyValuePair&lt;TKey, TValue&gt;) <a class="header-anchor" href="#add-keyvaluepair-tkey-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Add_System_Collections_Generic_KeyValuePair__0__1__&quot;&gt;&lt;/a&gt; Add\\(KeyValuePair&lt;TKey, TValue\\&gt;\\)&quot;">​</a></h3>',7)),e("p",null,[t[12]||(t[12]=a("在 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[13]||(t[13]=a(" 中添加一个带有所提供的键和值的元素。"))]),t[61]||(t[61]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValuePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>item</code> <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2" target="_blank" rel="noreferrer">KeyValuePair</a>&lt;TKey, TValue&gt;</p><p>单个对象的键值对</p><h3 id="addorupdate-tkey-task-tvalue-func-tkey-task-tvalue-task-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_AddOrUpdate__0_System_Threading_Tasks_Task__1__System_Func__0_System_Threading_Tasks_Task__1__System_Threading_Tasks_Task__1___"></a> AddOrUpdate(TKey, Task&lt;TValue&gt;, Func&lt;TKey, Task&lt;TValue&gt;, Task&lt;TValue&gt;&gt;) <a class="header-anchor" href="#addorupdate-tkey-task-tvalue-func-tkey-task-tvalue-task-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_AddOrUpdate__0_System_Threading_Tasks_Task__1__System_Func__0_System_Threading_Tasks_Task__1__System_Threading_Tasks_Task__1___&quot;&gt;&lt;/a&gt; AddOrUpdate\\(TKey, Task&lt;TValue\\&gt;, Func&lt;TKey, Task&lt;TValue\\&gt;, Task&lt;TValue\\&gt;\\&gt;\\)&quot;">​</a></h3>',5)),e("p",null,[t[14]||(t[14]=a("使用指定的函数将键/值对添加到 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[15]||(t[15]=a(" 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。"))]),t[62]||(t[62]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddOrUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateValueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>元素的键</p><p><code>addValue</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>新增的内容</p><p><code>updateValueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-3" target="_blank" rel="noreferrer">Func</a>&lt;TKey, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>修改的内容委托</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>返回值</p><h3 id="addorupdate-tkey-func-tkey-task-tvalue-func-tkey-task-tvalue-task-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_AddOrUpdate__0_System_Func__0_System_Threading_Tasks_Task__1___System_Func__0_System_Threading_Tasks_Task__1__System_Threading_Tasks_Task__1___"></a> AddOrUpdate(TKey, Func&lt;TKey, Task&lt;TValue&gt;&gt;, Func&lt;TKey, Task&lt;TValue&gt;, Task&lt;TValue&gt;&gt;) <a class="header-anchor" href="#addorupdate-tkey-func-tkey-task-tvalue-func-tkey-task-tvalue-task-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_AddOrUpdate__0_System_Func__0_System_Threading_Tasks_Task__1___System_Func__0_System_Threading_Tasks_Task__1__System_Threading_Tasks_Task__1___&quot;&gt;&lt;/a&gt; AddOrUpdate\\(TKey, Func&lt;TKey, Task&lt;TValue\\&gt;\\&gt;, Func&lt;TKey, Task&lt;TValue\\&gt;, Task&lt;TValue\\&gt;\\&gt;\\)&quot;">​</a></h3>',12)),e("p",null,[t[16]||(t[16]=a("使用指定的函数将键/值对添加到 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[17]||(t[17]=a(" 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。"))]),t[63]||(t[63]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddOrUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addValueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateValueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>元素的键</p><p><code>addValueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-2" target="_blank" rel="noreferrer">Func</a>&lt;TKey, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>新增的内容委托</p><p><code>updateValueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-3" target="_blank" rel="noreferrer">Func</a>&lt;TKey, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>修改的内容委托</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>返回值</p><h3 id="addorupdate-targ-tkey-func-tkey-targ-task-tvalue-func-tkey-task-tvalue-targ-task-tvalue-targ" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_AddOrUpdate__1__0_System_Func__0___0_System_Threading_Tasks_Task__1___System_Func__0_System_Threading_Tasks_Task__1____0_System_Threading_Tasks_Task__1_____0_"></a> AddOrUpdate&lt;TArg&gt;(TKey, Func&lt;TKey, TArg, Task&lt;TValue&gt;&gt;, Func&lt;TKey, Task&lt;TValue&gt;, TArg, Task&lt;TValue&gt;&gt;, TArg) <a class="header-anchor" href="#addorupdate-targ-tkey-func-tkey-targ-task-tvalue-func-tkey-task-tvalue-targ-task-tvalue-targ" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_AddOrUpdate__1__0_System_Func__0___0_System_Threading_Tasks_Task__1___System_Func__0_System_Threading_Tasks_Task__1____0_System_Threading_Tasks_Task__1_____0_&quot;&gt;&lt;/a&gt; AddOrUpdate&lt;TArg\\&gt;\\(TKey, Func&lt;TKey, TArg, Task&lt;TValue\\&gt;\\&gt;, Func&lt;TKey, Task&lt;TValue\\&gt;, TArg, Task&lt;TValue\\&gt;\\&gt;, TArg\\)&quot;">​</a></h3>',12)),e("p",null,[t[18]||(t[18]=a("使用指定的函数将键/值对添加到 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[19]||(t[19]=a(" 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。"))]),t[64]||(t[64]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddOrUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addValueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateValueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TArg</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factoryArgument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>元素的键</p><p><code>addValueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-3" target="_blank" rel="noreferrer">Func</a>&lt;TKey, TArg, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>新增的内容委托</p><p><code>updateValueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-4" target="_blank" rel="noreferrer">Func</a>&lt;TKey, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;, TArg, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>修改的内容委托</p><p><code>factoryArgument</code> TArg</p><p>传入的额外对象</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>返回值</p><h4 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>TArg</code></p><h3 id="clear" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Clear"></a> Clear() <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Clear&quot;&gt;&lt;/a&gt; Clear\\(\\)&quot;">​</a></h3>',16)),e("p",null,[t[20]||(t[20]=a("从 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[21]||(t[21]=a(" 中移除所有的键和值。"))]),t[65]||(t[65]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="containskey-tkey" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_ContainsKey__0_"></a> ContainsKey(TKey) <a class="header-anchor" href="#containskey-tkey" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_ContainsKey__0_&quot;&gt;&lt;/a&gt; ContainsKey\\(TKey\\)&quot;">​</a></h3>',2)),e("p",null,[t[22]||(t[22]=a("确定 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[23]||(t[23]=a(" 是否包含指定的键。"))]),t[66]||(t[66]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContainsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p>',3)),e("p",null,[t[24]||(t[24]=a("要在 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[25]||(t[25]=a(" 中定位的键。"))]),t[67]||(t[67]=e("h4",{id:"returns-3",tabindex:"-1"},[a("Returns "),e("a",{class:"header-anchor",href:"#returns-3","aria-label":'Permalink to "Returns"'},"​")],-1)),t[68]||(t[68]=e("p",null,[e("a",{href:"https://learn.microsoft.com/dotnet/api/system.boolean",target:"_blank",rel:"noreferrer"},"bool")],-1)),e("p",null,[t[26]||(t[26]=a("如果 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[27]||(t[27]=a(" 包含具有指定键的元素，则为 true；否则为 false。"))]),t[69]||(t[69]=n('<h4 id="exceptions-2" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-2" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>key 为 null。</p><h3 id="getasyncenumerator-cancellationtoken" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_GetAsyncEnumerator_System_Threading_CancellationToken_"></a> GetAsyncEnumerator(CancellationToken) <a class="header-anchor" href="#getasyncenumerator-cancellationtoken" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_GetAsyncEnumerator_System_Threading_CancellationToken_&quot;&gt;&lt;/a&gt; GetAsyncEnumerator\\(CancellationToken\\)&quot;">​</a></h3><p>异步迭代器</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IAsyncEnumerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValuePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAsyncEnumerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>cancellationToken</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noreferrer">CancellationToken</a></p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerator-1" target="_blank" rel="noreferrer">IAsyncEnumerator</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2" target="_blank" rel="noreferrer">KeyValuePair</a>&lt;TKey, TValue&gt;&gt;</p><h3 id="getenumerator" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_GetEnumerator"></a> GetEnumerator() <a class="header-anchor" href="#getenumerator" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_GetEnumerator&quot;&gt;&lt;/a&gt; GetEnumerator\\(\\)&quot;">​</a></h3>',11)),e("p",null,[t[28]||(t[28]=a("返回循环访问 ")),i(s,{href:"Tool.Utils.Data.LazyConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[29]||(t[29]=a(" 的枚举数。"))]),t[70]||(t[70]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IEnumerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValuePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetEnumerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1" target="_blank" rel="noreferrer">IEnumerator</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2" target="_blank" rel="noreferrer">KeyValuePair</a>&lt;TKey, TValue&gt;&gt;</p>',3)),i(s,{href:"Tool.Utils.Data.LazyConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[71]||(t[71]=a(" 的一个枚举数。")),t[72]||(t[72]=e("h3",{id:"getoradd-tkey-func-tkey-task-tvalue",tabindex:"-1"},[e("a",{id:"Tool_Utils_Data_TaskConcurrentDictionary_2_GetOrAdd__0_System_Func__0_System_Threading_Tasks_Task__1___"}),a(" GetOrAdd(TKey, Func<TKey, Task<TValue>>) "),e("a",{class:"header-anchor",href:"#getoradd-tkey-func-tkey-task-tvalue","aria-label":'Permalink to "<a id="Tool_Utils_Data_TaskConcurrentDictionary_2_GetOrAdd__0_System_Func__0_System_Threading_Tasks_Task__1___"></a> GetOrAdd\\(TKey, Func<TKey, Task<TValue\\>\\>\\)"'},"​")],-1)),e("p",null,[t[30]||(t[30]=a("如果该键尚不存在，则使用指定函数将键/值对添加到 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"})]),t[73]||(t[73]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetOrAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>要添加的元素的键。</p><p><code>valueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-2" target="_blank" rel="noreferrer">Func</a>&lt;TKey, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>用于为键生成值的函数</p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为 valueFactory 返回的键的新值。</p><h4 id="exceptions-3" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-3" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>valueFactory 为 null。</p><p><a href="https://learn.microsoft.com/dotnet/api/system.overflowexception" target="_blank" rel="noreferrer">OverflowException</a></p><p>字典已包含最大数目的元素 (System.Int32.MaxValue)。</p><h3 id="getoradd-tkey-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_GetOrAdd__0__1_"></a> GetOrAdd(TKey, TValue) <a class="header-anchor" href="#getoradd-tkey-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_GetOrAdd__0__1_&quot;&gt;&lt;/a&gt; GetOrAdd\\(TKey, TValue\\)&quot;">​</a></h3>',15)),e("p",null,[t[31]||(t[31]=a("如果该键尚不存在，则使用指定函数将键/值对添加到 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"})]),t[74]||(t[74]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetOrAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>要添加的元素的键。</p><p><code>value</code> TValue</p><p>用于为键生成值的函数</p><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为新值。</p><h4 id="exceptions-4" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-4" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>value 为 null。</p><p><a href="https://learn.microsoft.com/dotnet/api/system.overflowexception" target="_blank" rel="noreferrer">OverflowException</a></p><p>字典已包含最大数目的元素 (System.Int32.MaxValue)。</p><h3 id="remove-tkey" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_Remove__0_"></a> Remove(TKey) <a class="header-anchor" href="#remove-tkey" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_Remove__0_&quot;&gt;&lt;/a&gt; Remove\\(TKey\\)&quot;">​</a></h3>',15)),e("p",null,[t[32]||(t[32]=a("尝试从 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[33]||(t[33]=a(" 中移除。"))]),t[75]||(t[75]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>要移除并返回的元素的键。</p><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>如果已成功移除对象，则为 true；否则为 false。</p><h3 id="tostring" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_ToString"></a> ToString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_ToString&quot;&gt;&lt;/a&gt; ToString\\(\\)&quot;">​</a></h3><p>显示结果</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><h3 id="tryadd-tkey-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_TryAdd__0__1_"></a> TryAdd(TKey, TValue) <a class="header-anchor" href="#tryadd-tkey-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_TryAdd__0__1_&quot;&gt;&lt;/a&gt; TryAdd\\(TKey, TValue\\)&quot;">​</a></h3>',13)),e("p",null,[t[34]||(t[34]=a("在 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[35]||(t[35]=a(" 中添加一个带有所提供的键和值的元素。"))]),t[76]||(t[76]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TryAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>用作要添加的元素的键的对象。</p><p><code>value</code> TValue</p><p>作为要添加的元素的值的对象。</p><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p>',8)),e("p",null,[t[36]||(t[36]=a("如果该键/值对已成功添加到 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[37]||(t[37]=a("，则为 true；如果该键已存在，则为 false。"))]),t[77]||(t[77]=n('<h4 id="exceptions-5" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-5" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>value 为 null。</p><p><a href="https://learn.microsoft.com/dotnet/api/system.overflowexception" target="_blank" rel="noreferrer">OverflowException</a></p><p>字典已包含最大数目的元素 (System.Int32.MaxValue)。</p><h3 id="tryadd-tkey-func-tkey-task-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_TryAdd__0_System_Func__0_System_Threading_Tasks_Task__1___"></a> TryAdd(TKey, Func&lt;TKey, Task&lt;TValue&gt;&gt;) <a class="header-anchor" href="#tryadd-tkey-func-tkey-task-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_TryAdd__0_System_Func__0_System_Threading_Tasks_Task__1___&quot;&gt;&lt;/a&gt; TryAdd\\(TKey, Func&lt;TKey, Task&lt;TValue\\&gt;\\&gt;\\)&quot;">​</a></h3>',6)),e("p",null,[t[38]||(t[38]=a("在 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[39]||(t[39]=a(" 中添加一个带有所提供的键和值的元素。"))]),t[78]||(t[78]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TryAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addValueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>用作要添加的元素的键的对象。</p><p><code>addValueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-2" target="_blank" rel="noreferrer">Func</a>&lt;TKey, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>作为要添加的元素的值的委托。</p><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p>',8)),e("p",null,[t[40]||(t[40]=a("如果该键/值对已成功添加到 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[41]||(t[41]=a("，则为 true；如果该键已存在，则为 false。"))]),t[79]||(t[79]=n('<h4 id="exceptions-6" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-6" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>value 为 null。</p><p><a href="https://learn.microsoft.com/dotnet/api/system.overflowexception" target="_blank" rel="noreferrer">OverflowException</a></p><p>字典已包含最大数目的元素 (System.Int32.MaxValue)。</p><h3 id="trygetvalue-tkey-out-task-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_TryGetValue__0_System_Threading_Tasks_Task__1___"></a> TryGetValue(TKey, out Task&lt;TValue&gt;) <a class="header-anchor" href="#trygetvalue-tkey-out-task-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_TryGetValue__0_System_Threading_Tasks_Task__1___&quot;&gt;&lt;/a&gt; TryGetValue\\(TKey, out Task&lt;TValue\\&gt;\\)&quot;">​</a></h3>',6)),e("p",null,[t[42]||(t[42]=a("尝试从 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[43]||(t[43]=a(" 获取与指定的键关联的值。"))]),t[80]||(t[80]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TryGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>要获取的值的键。</p><p><code>value</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p>',5)),e("p",null,[t[44]||(t[44]=a("当此方法返回时，将包含 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[45]||(t[45]=a(" 中具有指定键的对象；如果操作失败，则包含默认值。"))]),t[81]||(t[81]=n('<h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>如果在 System.Collections.Concurrent.ConcurrentDictionary`2 中找到该键，则为 true；否则为 false。</p><h4 id="exceptions-7" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions-7" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noreferrer">ArgumentNullException</a></p><p>key 为 null。</p><h3 id="tryremove-tkey-out-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_TryRemove__0__1__"></a> TryRemove(TKey, out TValue) <a class="header-anchor" href="#tryremove-tkey-out-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_TryRemove__0__1__&quot;&gt;&lt;/a&gt; TryRemove\\(TKey, out TValue\\)&quot;">​</a></h3>',7)),e("p",null,[t[46]||(t[46]=a("尝试从 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[47]||(t[47]=a(" 中移除。"))]),t[82]||(t[82]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TryRemove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TValue</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>要移除并返回的元素的键。</p><p><code>value</code> TValue</p>',5)),e("p",null,[t[48]||(t[48]=a("当此方法返回时，将包含从 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[49]||(t[49]=a(" 中移除的对象；如果 key 不存在，则包含 TValue 类型。"))]),t[83]||(t[83]=n('<h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>如果已成功移除对象，则为 true；否则为 false。</p><h3 id="tryupdate-tkey-task-tvalue-task-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_TryUpdate__0_System_Threading_Tasks_Task__1__System_Threading_Tasks_Task__1__"></a> TryUpdate(TKey, Task&lt;TValue&gt;, Task&lt;TValue&gt;) <a class="header-anchor" href="#tryupdate-tkey-task-tvalue-task-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_TryUpdate__0_System_Threading_Tasks_Task__1__System_Threading_Tasks_Task__1__&quot;&gt;&lt;/a&gt; TryUpdate\\(TKey, Task&lt;TValue\\&gt;, Task&lt;TValue\\&gt;\\)&quot;">​</a></h3>',4)),e("p",null,[t[50]||(t[50]=a("尝试从 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[51]||(t[51]=a(" 中修改数据（对比数据不一致时进行修改）"))]),t[84]||(t[84]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TryUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">comparisonValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>要修改的元素的键</p><p><code>newValue</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>修改的内容</p><p><code>comparisonValue</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>比较的内容</p><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>如果已成功修改对象，则为 true；否则为 false。</p><h3 id="tryupdate-tkey-func-tkey-task-tvalue-task-tvalue" tabindex="-1"><a id="Tool_Utils_Data_TaskConcurrentDictionary_2_TryUpdate__0_System_Func__0_System_Threading_Tasks_Task__1___System_Threading_Tasks_Task__1__"></a> TryUpdate(TKey, Func&lt;TKey, Task&lt;TValue&gt;&gt;, Task&lt;TValue&gt;) <a class="header-anchor" href="#tryupdate-tkey-func-tkey-task-tvalue-task-tvalue" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_Data_TaskConcurrentDictionary_2_TryUpdate__0_System_Func__0_System_Threading_Tasks_Task__1___System_Threading_Tasks_Task__1__&quot;&gt;&lt;/a&gt; TryUpdate\\(TKey, Func&lt;TKey, Task&lt;TValue\\&gt;\\&gt;, Task&lt;TValue\\&gt;\\)&quot;">​</a></h3>',12)),e("p",null,[t[52]||(t[52]=a("尝试从 ")),i(s,{href:"Tool.Utils.Data.TaskConcurrentDictionary%602","data-throw-if-not-resolved":"false"}),t[53]||(t[53]=a(" 中修改数据（对比数据不一致时进行修改）"))]),t[85]||(t[85]=n('<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TryUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addValueFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">comparisonValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>key</code> TKey</p><p>要修改的元素的键</p><p><code>addValueFactory</code> <a href="https://learn.microsoft.com/dotnet/api/system.func-2" target="_blank" rel="noreferrer">Func</a>&lt;TKey, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;&gt;</p><p>修改的内容委托</p><p><code>comparisonValue</code> <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noreferrer">Task</a>&lt;TValue&gt;</p><p>比较的内容</p><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>如果已成功修改对象，则为 true；否则为 false。</p>',11))])}const E=r(p,[["render",k]]);export{T as __pageData,E as default};
