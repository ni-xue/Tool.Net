import{_ as r,c as o,a4 as a,j as i,a as t,G as n,B as l,o as p}from"./chunks/framework.Dj_Z_6xN.js";const b=JSON.parse('{"title":"Class TypeInvoke","description":"","frontmatter":{},"headers":[],"relativePath":"docfx/Tool.Utils.ActionDelegate.TypeInvoke.md","filePath":"zh/docfx/Tool.Utils.ActionDelegate.TypeInvoke.md"}'),h={name:"docfx/Tool.Utils.ActionDelegate.TypeInvoke.md"};function c(d,e,k,_,g,y){const s=l("xref");return p(),o("div",null,[e[4]||(e[4]=a('<h1 id="class-typeinvoke" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke"></a> Class TypeInvoke <a class="header-anchor" href="#class-typeinvoke" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke&quot;&gt;&lt;/a&gt; Class TypeInvoke&quot;">​</a></h1><p>Namespace: <a href="./Tool.Utils.ActionDelegate.html">Tool.Utils.ActionDelegate</a><br> Assembly: Tool.Net.dll</p><p>用于对指定的类的方法进行调用，中级封装</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span></span></code></pre></div><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a> ← <a href="./Tool.Utils.ActionDelegate.TypeInvoke.html">TypeInvoke</a></p><h4 id="inherited-members" tabindex="-1">Inherited Members <a class="header-anchor" href="#inherited-members" aria-label="Permalink to &quot;Inherited Members&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noreferrer">object.Equals(object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)" target="_blank" rel="noreferrer">object.Equals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noreferrer">object.GetHashCode()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noreferrer">object.GetType()</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.referenceequals" target="_blank" rel="noreferrer">object.ReferenceEquals(object?, object?)</a>, <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noreferrer">object.ToString()</a></p><h4 id="extension-methods" tabindex="-1">Extension Methods <a class="header-anchor" href="#extension-methods" aria-label="Permalink to &quot;Extension Methods&quot;">​</a></h4><p><a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_Add__1_System_Object_System_Object_System_Object_">ObjectExtension.Add&lt;T&gt;(object, object, object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_CopyEntity_System_Object_System_Object_System_String___">ObjectExtension.CopyEntity(object, object, params string[])</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_EntityToJson_System_Object_">ObjectExtension.EntityToJson(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_EntityToJson_System_Object_System_Boolean_">ObjectExtension.EntityToJson(object, bool)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_EntityToJson_System_Object_System_Boolean_System_String_">ObjectExtension.EntityToJson(object, bool, string)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_GetDictionary_System_Object_">DictionaryExtension.GetDictionary(object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetFieldKey_System_Object_System_String_System_Boolean__">TypeExtension.GetFieldKey(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetFieldKey__1_System_Object_System_String_System_Boolean__">TypeExtension.GetFieldKey&lt;T&gt;(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetFieldKey_System_Object_System_Type_System_String_System_Boolean__">TypeExtension.GetFieldKey(object, Type, string, out bool)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_GetIntPtr_System_Object_">ObjectExtension.GetIntPtr(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_GetIntPtrInt_System_Object_">ObjectExtension.GetIntPtrInt(object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertieFind_System_Object_System_String_System_Boolean_">TypeExtension.GetPropertieFind(object, string, bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetProperties_System_Object_">TypeExtension.GetProperties(object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertyKey_System_Object_System_String_System_Boolean__">TypeExtension.GetPropertyKey(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertyKey__1_System_Object_System_String_System_Boolean__">TypeExtension.GetPropertyKey&lt;T&gt;(object, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetPropertyKey_System_Object_System_Type_System_String_System_Boolean__">TypeExtension.GetPropertyKey(object, Type, string, out bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetValue_System_Object_System_ComponentModel_PropertyDescriptor_">TypeExtension.GetValue(object, PropertyDescriptor)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetValue_System_Object_System_String_System_Boolean_">TypeExtension.GetValue(object, string, bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_GetValue_System_Object_System_String_">TypeExtension.GetValue(object, string)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_Read__1_System_Object_System_Object_System_Int32_System_Int32_">ObjectExtension.Read&lt;T&gt;(object, object, int, int)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_Read__1_System_Object_System_Int32_System_Object_System_Int32_System_Int32_">ObjectExtension.Read&lt;T&gt;(object, int, object, int, int)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_SetDictionary_System_Object_System_Collections_Generic_IDictionary_System_String_System_Object__">DictionaryExtension.SetDictionary(object, IDictionary&lt;string, object&gt;)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetFieldKey_System_Object_System_String_System_Object_">TypeExtension.SetFieldKey(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetFieldKey__1_System_Object_System_String_System_Object_">TypeExtension.SetFieldKey&lt;T&gt;(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetFieldKey_System_Object_System_Type_System_String_System_Object_">TypeExtension.SetFieldKey(object, Type, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetPropertyKey_System_Object_System_String_System_Object_">TypeExtension.SetPropertyKey(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetPropertyKey__1_System_Object_System_String_System_Object_">TypeExtension.SetPropertyKey&lt;T&gt;(object, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetPropertyKey_System_Object_System_Type_System_String_System_Object_">TypeExtension.SetPropertyKey(object, Type, string, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetValue_System_Object_System_ComponentModel_PropertyDescriptor_System_Object_">TypeExtension.SetValue(object, PropertyDescriptor, object)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetValue_System_Object_System_String_System_Object_System_Boolean_">TypeExtension.SetValue(object, string, object, bool)</a>, <a href="./Tool.Utils.TypeExtension.html#Tool_Utils_TypeExtension_SetValue_System_Object_System_String_System_Object_">TypeExtension.SetValue(object, string, object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToBase64String_System_Object_">ObjectExtension.ToBase64String(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToBytes_System_Object_">ObjectExtension.ToBytes(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToBytes_System_Object_System_Type__">ObjectExtension.ToBytes(object, out Type)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToDictionary_System_Object_">DictionaryExtension.ToDictionary(object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToDictionary__1_System_Object_">DictionaryExtension.ToDictionary&lt;T&gt;(object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToIDictionary_System_Object_">DictionaryExtension.ToIDictionary(object)</a>, <a href="./Tool.Utils.Data.DictionaryExtension.html#Tool_Utils_Data_DictionaryExtension_ToIDictionary__1_System_Object_">DictionaryExtension.ToIDictionary&lt;T&gt;(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJson_System_Object_">ObjectExtension.ToJson(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJson_System_Object_System_Text_Json_JsonSerializerOptions_">ObjectExtension.ToJson(object, JsonSerializerOptions)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJsonWeb_System_Object_">ObjectExtension.ToJsonWeb(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToJsonWeb_System_Object_System_Action_System_Text_Json_JsonSerializerOptions__">ObjectExtension.ToJsonWeb(object, Action&lt;JsonSerializerOptions&gt;)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToTryVar__1_System_Object___0_">ObjectExtension.ToTryVar&lt;T&gt;(object, T)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToVar__1_System_Object_">ObjectExtension.ToVar&lt;T&gt;(object)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToVar_System_Object_System_Type_System_Boolean_">ObjectExtension.ToVar(object, Type, bool)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToVar_System_Object_System_String_">ObjectExtension.ToVar(object, string)</a>, <a href="./Tool.ObjectExtension.html#Tool_ObjectExtension_ToXml_System_Object_">ObjectExtension.ToXml(object)</a></p><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p>代码由逆血提供支持</p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="typeinvoke-string" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_"></a> TypeInvoke(string) <a class="header-anchor" href="#typeinvoke-string" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_&quot;&gt;&lt;/a&gt; TypeInvoke\\(string\\)&quot;">​</a></h3><p>初始化，并赋值</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type)</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>(访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</p><h3 id="typeinvoke-string-params-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_Object___"></a> TypeInvoke(string, params object[]) <a class="header-anchor" href="#typeinvoke-string-params-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_Object___&quot;&gt;&lt;/a&gt; TypeInvoke\\(string, params object\\[\\]\\)&quot;">​</a></h3><p>初始化，并赋值</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type, params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args)</span></span></code></pre></div><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>(访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</p><p><code>args</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a>[]</p><p>与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。</p><h3 id="typeinvoke-string-string" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_String_"></a> TypeInvoke(string, string) <a class="header-anchor" href="#typeinvoke-string-string" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_String_&quot;&gt;&lt;/a&gt; TypeInvoke\\(string, string\\)&quot;">​</a></h3><p>加载指定路径下的dll中的类对象（无参构造）</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absolutepath, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type)</span></span></code></pre></div><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>absolutepath</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>dll的绝对路径</p><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>访问程序集下面指定的类路径</p><h3 id="typeinvoke-string-string-params-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_String_System_Object___"></a> TypeInvoke(string, string, params object[]) <a class="header-anchor" href="#typeinvoke-string-string-params-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_String_System_Object___&quot;&gt;&lt;/a&gt; TypeInvoke\\(string, string, params object\\[\\]\\)&quot;">​</a></h3><p>加载指定路径下的dll中的类对象（有参构造）</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absolutepath, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type, params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args)</span></span></code></pre></div><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>absolutepath</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>dll的绝对路径</p><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>访问程序集下面指定的类路径</p><p><code>args</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a>[]</p><h3 id="typeinvoke-string-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_Object_"></a> TypeInvoke(string, object) <a class="header-anchor" href="#typeinvoke-string-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_String_System_Object_&quot;&gt;&lt;/a&gt; TypeInvoke\\(string, object\\)&quot;">​</a></h3><p>初始化，并赋值</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args)</span></span></code></pre></div><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>(访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</p><p><code>args</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>当前实例化的对象。</p><h3 id="typeinvoke-type" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Type_"></a> TypeInvoke(Type) <a class="header-anchor" href="#typeinvoke-type" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Type_&quot;&gt;&lt;/a&gt; TypeInvoke\\(Type\\)&quot;">​</a></h3><p>初始化，并赋值</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type type)</span></span></code></pre></div><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noreferrer">Type</a></p><p>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</p><h3 id="typeinvoke-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Object_"></a> TypeInvoke(object) <a class="header-anchor" href="#typeinvoke-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Object_&quot;&gt;&lt;/a&gt; TypeInvoke\\(object\\)&quot;">​</a></h3><p>初始化，并赋值</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj)</span></span></code></pre></div><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>obj</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>必须是对象</p><h3 id="typeinvoke-type-params-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Type_System_Object___"></a> TypeInvoke(Type, params object[]) <a class="header-anchor" href="#typeinvoke-type-params-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Type_System_Object___&quot;&gt;&lt;/a&gt; TypeInvoke\\(Type, params object\\[\\]\\)&quot;">​</a></h3><p>初始化，并赋值</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type type, params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args)</span></span></code></pre></div><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noreferrer">Type</a></p><p>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</p><p><code>args</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a>[]</p><p>与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。</p><h3 id="typeinvoke-type-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Type_System_Object_"></a> TypeInvoke(Type, object) <a class="header-anchor" href="#typeinvoke-type-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke__ctor_System_Type_System_Object_&quot;&gt;&lt;/a&gt; TypeInvoke\\(Type, object\\)&quot;">​</a></h3><p>初始化，并赋值</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type type, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args)</span></span></code></pre></div><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noreferrer">Type</a></p><p>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</p><p><code>args</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>当前实例化的对象。</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="getattribute-t-out-string-bool" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetAttribute__1_System_String____System_Boolean_"></a> GetAttribute&lt;T&gt;(out string[], bool) <a class="header-anchor" href="#getattribute-t-out-string-bool" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetAttribute__1_System_String____System_Boolean_&quot;&gt;&lt;/a&gt; GetAttribute&lt;T\\&gt;\\(out string\\[\\], bool\\)&quot;">​</a></h3><p>获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等）</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> only</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>Methods</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>[]</p><p>返回名称</p><p><code>only</code> <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>获取父类的吗？默认包含</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>T[]</p><p>返回一个类型实体</p><h4 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>T</code></p><p>类型</p><h3 id="getattribute-t-out-string-bindingflags" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetAttribute__1_System_String____System_Reflection_BindingFlags_"></a> GetAttribute&lt;T&gt;(out string[], BindingFlags) <a class="header-anchor" href="#getattribute-t-out-string-bindingflags" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetAttribute__1_System_String____System_Reflection_BindingFlags_&quot;&gt;&lt;/a&gt; GetAttribute&lt;T\\&gt;\\(out string\\[\\], BindingFlags\\)&quot;">​</a></h3><p>获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等）</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BindingFlags</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindingFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>Methods</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>[]</p><p>返回名称</p><p><code>bindingFlags</code> <a href="https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags" target="_blank" rel="noreferrer">BindingFlags</a></p><p>自定义返回内容</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>T[]</p><p>返回一个类型实体</p><h4 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>T</code></p><p>类型</p><h3 id="getattribute-t-bindingflags" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetAttribute__1_System_Reflection_BindingFlags_"></a> GetAttribute&lt;T&gt;(BindingFlags) <a class="header-anchor" href="#getattribute-t-bindingflags" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetAttribute__1_System_Reflection_BindingFlags_&quot;&gt;&lt;/a&gt; GetAttribute&lt;T\\&gt;\\(BindingFlags\\)&quot;">​</a></h3><p>获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等）</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BindingFlags</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindingFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>bindingFlags</code> <a href="https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags" target="_blank" rel="noreferrer">BindingFlags</a></p><p>自定义返回内容</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2" target="_blank" rel="noreferrer">Dictionary</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>, T&gt;</p><p>返回一个类型实体</p><h4 id="type-parameters-2" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>T</code></p><p>类型</p><h3 id="getattributeparameterinfo-t" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetAttributeParameterInfo__1"></a> GetAttributeParameterInfo&lt;T&gt;() <a class="header-anchor" href="#getattributeparameterinfo-t" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetAttributeParameterInfo__1&quot;&gt;&lt;/a&gt; GetAttributeParameterInfo&lt;T\\&gt;\\(\\)&quot;">​</a></h3><p>获取该类以及下面的所有类型（字段）</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAttributeParameterInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span></code></pre></div><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2" target="_blank" rel="noreferrer">Dictionary</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>, T&gt;</p><p>返回一个类型实体</p><h4 id="type-parameters-3" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-3" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>T</code></p><p>类型</p><h3 id="getattributeparameterinfo-t-bindingflags" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetAttributeParameterInfo__1_System_Reflection_BindingFlags_"></a> GetAttributeParameterInfo&lt;T&gt;(BindingFlags) <a class="header-anchor" href="#getattributeparameterinfo-t-bindingflags" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetAttributeParameterInfo__1_System_Reflection_BindingFlags_&quot;&gt;&lt;/a&gt; GetAttributeParameterInfo&lt;T\\&gt;\\(BindingFlags\\)&quot;">​</a></h3><p>获取该类以及下面的所有类型（字段）</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAttributeParameterInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BindingFlags</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindingFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>bindingFlags</code> <a href="https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags" target="_blank" rel="noreferrer">BindingFlags</a></p><p>自定义返回内容</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2" target="_blank" rel="noreferrer">Dictionary</a>&lt;<a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a>, T&gt;</p><p>返回一个类型实体</p><h4 id="type-parameters-4" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-4" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>T</code></p><p>类型</p><h3 id="getmethod-string-bool" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetMethod_System_String_System_Boolean_"></a> GetMethod(string, bool) <a class="header-anchor" href="#getmethod-string-bool" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetMethod_System_String_System_Boolean_&quot;&gt;&lt;/a&gt; GetMethod\\(string, bool\\)&quot;">​</a></h3><p>获取该方法类型(“包含非公开”、“包含实例成员”和“包含公开”)</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Method</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> only</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>name</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>方法名(注意该方法必须是非静态方法)</p><p><code>only</code> <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>获取父类的吗？默认包含</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Tool.Utils.ActionDelegate.Method.html">Method</a></p><p>返回一个类型实体</p><h3 id="getmethod-methodinfo" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetMethod_System_Reflection_MethodInfo_"></a> GetMethod(MethodInfo) <a class="header-anchor" href="#getmethod-methodinfo" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetMethod_System_Reflection_MethodInfo_&quot;&gt;&lt;/a&gt; GetMethod\\(MethodInfo\\)&quot;">​</a></h3><p>获取该方法类型(“包含非公开”、“包含实例成员”和“包含公开”)</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Method</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MethodInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>method</code> <a href="https://learn.microsoft.com/dotnet/api/system.reflection.methodinfo" target="_blank" rel="noreferrer">MethodInfo</a></p><p>对象</p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Tool.Utils.ActionDelegate.Method.html">Method</a></p><p>返回一个类型实体</p><h3 id="getmethodinfo-t-string" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetMethodInfo__1_System_String_"></a> GetMethodInfo&lt;T&gt;(string) <a class="header-anchor" href="#getmethodinfo-t-string" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetMethodInfo__1_System_String_&quot;&gt;&lt;/a&gt; GetMethodInfo&lt;T\\&gt;\\(string\\)&quot;">​</a></h3><p>获取类下面的可调用方法</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetMethodInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>MethodName</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>方法名</p><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.reflection.methodinfo" target="_blank" rel="noreferrer">MethodInfo</a></p>',170)),i("p",null,[e[0]||(e[0]=t("返回")),n(s,{href:"System.Reflection.MethodInfo","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=t("对象"))]),e[5]||(e[5]=a('<h4 id="type-parameters-5" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-5" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p><code>T</code></p><p>类</p><h3 id="getmethodinfo-type-string-bool" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetMethodInfo_System_Type_System_String_System_Boolean_"></a> GetMethodInfo(Type, string, bool) <a class="header-anchor" href="#getmethodinfo-type-string-bool" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetMethodInfo_System_Type_System_String_System_Boolean_&quot;&gt;&lt;/a&gt; GetMethodInfo\\(Type, string, bool\\)&quot;">​</a></h3><p>获取类下面的可调用方法</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetMethodInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> only</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-16" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-16" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>type</code> <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noreferrer">Type</a></p><p>类Type</p><p><code>MethodName</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>方法名</p><p><code>only</code> <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>获取父类的吗？默认包含</p><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.reflection.methodinfo" target="_blank" rel="noreferrer">MethodInfo</a></p>',15)),i("p",null,[e[2]||(e[2]=t("返回")),n(s,{href:"System.Reflection.MethodInfo","data-throw-if-not-resolved":"false"}),e[3]||(e[3]=t("对象"))]),e[6]||(e[6]=a('<h3 id="getmethods-bool" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetMethods_System_Boolean_"></a> GetMethods(bool) <a class="header-anchor" href="#getmethods-bool" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetMethods_System_Boolean_&quot;&gt;&lt;/a&gt; GetMethods\\(bool\\)&quot;">​</a></h3><p>获取该类下的所有方法(“包含非公开”、“包含实例成员”和“包含公开”)</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> only</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-17" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-17" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>only</code> <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>获取父类的吗？默认包含</p><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Tool.Utils.ActionDelegate.Method.html">Method</a>[]</p><p>返回一个类型实体</p><h3 id="getobj" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetObj"></a> GetObj() <a class="header-anchor" href="#getobj" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetObj&quot;&gt;&lt;/a&gt; GetObj\\(\\)&quot;">​</a></h3><p>获取当前被实例化的类</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>返回实例化的类</p><h3 id="getparameter-string" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetParameter_System_String_"></a> GetParameter(string) <a class="header-anchor" href="#getparameter-string" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetParameter_System_String_&quot;&gt;&lt;/a&gt; GetParameter\\(string\\)&quot;">​</a></h3><p>获取该方法需要的参数</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-18" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-18" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>name</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>方法名(注意该方法必须是非静态方法)</p><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Tool.Utils.ActionDelegate.Parameter.html">Parameter</a>[]</p><p>返回所有的参数</p><h3 id="getparameter-methodinfo" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetParameter_System_Reflection_MethodInfo_"></a> GetParameter(MethodInfo) <a class="header-anchor" href="#getparameter-methodinfo" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetParameter_System_Reflection_MethodInfo_&quot;&gt;&lt;/a&gt; GetParameter\\(MethodInfo\\)&quot;">​</a></h3><p>获取该方法需要的参数</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MethodInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-19" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-19" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>method</code> <a href="https://learn.microsoft.com/dotnet/api/system.reflection.methodinfo" target="_blank" rel="noreferrer">MethodInfo</a></p><p>对象</p><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Tool.Utils.ActionDelegate.Parameter.html">Parameter</a>[]</p><p>返回所有的参数</p><h3 id="getparameter-params-parameterinfo" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetParameter_System_Reflection_ParameterInfo___"></a> GetParameter(params ParameterInfo[]) <a class="header-anchor" href="#getparameter-params-parameterinfo" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetParameter_System_Reflection_ParameterInfo___&quot;&gt;&lt;/a&gt; GetParameter\\(params ParameterInfo\\[\\]\\)&quot;">​</a></h3><p>获取该方法需要的参数</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">params</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParameterInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">member</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-20" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-20" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>member</code> <a href="https://learn.microsoft.com/dotnet/api/system.reflection.parameterinfo" target="_blank" rel="noreferrer">ParameterInfo</a>[]</p><p>对象</p><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Tool.Utils.ActionDelegate.Parameter.html">Parameter</a>[]</p><p>返回所有的参数</p><h3 id="getproperty-string" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetProperty_System_String_"></a> GetProperty(string) <a class="header-anchor" href="#getproperty-string" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetProperty_System_String_&quot;&gt;&lt;/a&gt; GetProperty\\(string\\)&quot;">​</a></h3><p>获取该类指定的变量的值。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-21" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-21" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>name</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>变量名</p><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>返回该方法的值</p><h3 id="gettype" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_GetType"></a> GetType() <a class="header-anchor" href="#gettype" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_GetType&quot;&gt;&lt;/a&gt; GetType\\(\\)&quot;">​</a></h3><p>获取当前被实例化的类的Type</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noreferrer">Type</a></p><p>返回Type</p><h3 id="invoke-string" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_Invoke_System_String_"></a> Invoke(string) <a class="header-anchor" href="#invoke-string" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_Invoke_System_String_&quot;&gt;&lt;/a&gt; Invoke\\(string\\)&quot;">​</a></h3><p>调起该方法(“包含非公开”、“包含实例成员”和“包含公开”)</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-22" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-22" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>name</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>方法名(注意该方法必须是非静态方法)</p><h4 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>返回该方法执行后的结果</p><h3 id="invoke-string-params-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_Invoke_System_String_System_Object___"></a> Invoke(string, params object[]) <a class="header-anchor" href="#invoke-string-params-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_Invoke_System_String_System_Object___&quot;&gt;&lt;/a&gt; Invoke\\(string, params object\\[\\]\\)&quot;">​</a></h3><p>调起该方法(“包含非公开”、“包含实例成员”和“包含公开”)</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-23" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-23" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>name</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>方法名(注意该方法必须是非静态方法)</p><p><code>parameters</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a>[]</p><p>该方法的指定参数</p><h4 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>返回该方法执行后的结果</p><h3 id="ismethod-string-bool" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_IsMethod_System_String_System_Boolean_"></a> IsMethod(string, bool) <a class="header-anchor" href="#ismethod-string-bool" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_IsMethod_System_String_System_Boolean_&quot;&gt;&lt;/a&gt; IsMethod\\(string, bool\\)&quot;">​</a></h3><p>判断该方法是否存在 (“包含非公开”、“包含实例成员”和“包含公开”)</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IsMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> only</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-24" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-24" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>name</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>方法名(注意该方法必须是非静态方法)</p><p><code>only</code> <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>获取父类的吗？默认包含</p><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noreferrer">bool</a></p><p>返回是否存在</p><h3 id="setproperty-string-object" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_SetProperty_System_String_System_Object_"></a> SetProperty(string, object) <a class="header-anchor" href="#setproperty-string-object" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_SetProperty_System_String_System_Object_&quot;&gt;&lt;/a&gt; SetProperty\\(string, object\\)&quot;">​</a></h3><p>对该类指定的变量赋值。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="parameters-25" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-25" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p><code>name</code> <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>变量名</p><p><code>parameter</code> <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noreferrer">object</a></p><p>值</p><h3 id="tostring" tabindex="-1"><a id="Tool_Utils_ActionDelegate_TypeInvoke_ToString"></a> ToString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Utils_ActionDelegate_TypeInvoke_ToString&quot;&gt;&lt;/a&gt; ToString\\(\\)&quot;">​</a></h3><p>获取当前被实例化的类的，名称包含命名空间</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="returns-19" tabindex="-1">Returns <a class="header-anchor" href="#returns-19" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noreferrer">string</a></p><p>返回类的名称包含命名空间</p>',102))])}const u=r(h,[["render",c]]);export{b as __pageData,u as default};
