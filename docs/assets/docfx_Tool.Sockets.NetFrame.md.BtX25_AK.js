import{_ as l,c as m,a4 as r,j as t,a,G as s,B as n,o as p}from"./chunks/framework.Dj_Z_6xN.js";const S=JSON.parse('{"title":"Namespace Tool.Sockets.NetFrame","description":"","frontmatter":{},"headers":[],"relativePath":"docfx/Tool.Sockets.NetFrame.md","filePath":"zh/docfx/Tool.Sockets.NetFrame.md"}'),i={name:"docfx/Tool.Sockets.NetFrame.md"};function f(d,e,c,u,h,N){const o=n("xref");return p(),m("div",null,[e[4]||(e[4]=r('<h1 id="namespace-tool-sockets-netframe" tabindex="-1"><a id="Tool_Sockets_NetFrame"></a> Namespace Tool.Sockets.NetFrame <a class="header-anchor" href="#namespace-tool-sockets-netframe" aria-label="Permalink to &quot;&lt;a id=&quot;Tool_Sockets_NetFrame&quot;&gt;&lt;/a&gt; Namespace Tool.Sockets.NetFrame&quot;">​</a></h1><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p><a href="./Tool.Sockets.NetFrame.ApiPacket.html">ApiPacket</a></p><p>接口请求数据包</p><p><a href="./Tool.Sockets.NetFrame.ClientFrame.html">ClientFrame</a></p><p>封装的一个TCP框架（客户端）</p><p><a href="./Tool.Sockets.NetFrame.ClientFrameList.html">ClientFrameList</a></p><p>用于连接多服务器，分发消息的客户端帮助类，可以保证线程安全，均衡分发数据包。</p><p><a href="./Tool.Sockets.NetFrame.DataBase.html">DataBase</a></p><p>提供的唯一数据包接口类，必须实现</p><p><a href="./Tool.Sockets.NetFrame.DataNet.html">DataNet</a></p>',11)),t("p",null,[e[0]||(e[0]=a("针对于一般处理程序，备注一般处理程序必须继承于（")),s(o,{href:"Tool.Sockets.NetFrame.DataBase","data-throw-if-not-resolved":"false"}),e[1]||(e[1]=a(" 类才会生效） 所有状态（用于更好的使用 自定义通讯协议规范，实现Api接口）"))]),e[5]||(e[5]=r('<p><a href="./Tool.Sockets.NetFrame.ServerFrame.html">ServerFrame</a></p><p>封装的一个TCP框架（服务端）</p><h3 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h3><p><a href="./Tool.Sockets.NetFrame.GoOut.html">GoOut</a></p><p>默认实现</p><p><a href="./Tool.Sockets.NetFrame.NetResponse.html">NetResponse</a></p><p>请求服务器返回的数据包信息类（请务必回收资源！！！）</p><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><p><a href="./Tool.Sockets.NetFrame.IGoOut.html">IGoOut</a></p>',9)),t("p",null,[e[2]||(e[2]=a("实现")),s(o,{href:"Tool.Sockets.NetFrame.DataBase","data-throw-if-not-resolved":"false"}),e[3]||(e[3]=a("协议，接口输出规范"))]),e[6]||(e[6]=t("p",null,"两种数据格式可一起使用。",-1)),e[7]||(e[7]=t("h3",{id:"enums",tabindex:"-1"},[a("Enums "),t("a",{class:"header-anchor",href:"#enums","aria-label":'Permalink to "Enums"'},"​")],-1)),e[8]||(e[8]=t("p",null,[t("a",{href:"./Tool.Sockets.NetFrame.ProtocolStatus.html"},"ProtocolStatus")],-1)),e[9]||(e[9]=t("p",null,"通信状态",-1))])}const F=l(i,[["render",f]]);export{S as __pageData,F as default};
