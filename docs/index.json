{
  "api/Microsoft.AspNetCore.Builder.ApiRouteBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApiRouteBuilderExtensions.html",
    "title": "Class ApiRouteBuilderExtensions | Tool.Net",
    "keywords": "Class ApiRouteBuilderExtensions Namespace Microsoft.AspNetCore.Builder Assembly Tool.Net.dll Ashx 路由模式扩展 public static class ApiRouteBuilderExtensions Inheritance object ApiRouteBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapApiRoute(IRouteBuilder, string, string, string) 创建与AshxApi有关的路由 public static IRouteBuilder MapApiRoute(this IRouteBuilder routeBuilder, string name, string areaName, string template) Parameters routeBuilder IRouteBuilder 路由核心对象 name string 路由规则名称 areaName string 区域名称，可为null template string 路由的规则 Returns IRouteBuilder 路由核心对象 MapApiRoute(IRouteBuilder, string, string, string, string) 创建与AshxApi有关的路由 public static IRouteBuilder MapApiRoute(this IRouteBuilder routeBuilder, string name, string areaName, string controller, string template) Parameters routeBuilder IRouteBuilder 路由核心对象 name string 路由规则名称 areaName string 区域名称，可为null controller string 控制器名称，可为null template string 路由的规则 Returns IRouteBuilder 路由核心对象 MapApiRoute(IRouteBuilder, string, string, string, string, string) 创建与AshxApi有关的路由 public static IRouteBuilder MapApiRoute(this IRouteBuilder routeBuilder, string name, string areaName, string controller, string action, string template) Parameters routeBuilder IRouteBuilder 路由核心对象 name string 路由规则名称 areaName string 区域名称，可为null controller string 控制器名称，可为null action string 方法名称，可为null template string 路由的规则 Returns IRouteBuilder 路由核心对象 MapApiRoute(IRouteBuilder, string, string, string, string, string, object, object, object) 创建与AshxApi有关的路由 public static IRouteBuilder MapApiRoute(this IRouteBuilder routeBuilder, string name, string areaName, string controller, string action, string template, object defaults, object constraints, object dataTokens) Parameters routeBuilder IRouteBuilder 路由核心对象 name string 路由规则名称 areaName string 区域名称，可为null controller string 控制器名称，可为null action string 方法名称，可为null template string 路由的规则 defaults object 包含路由参数默认值的对象。对象的属性表示，默认值的名称和值，可为null。 constraints object 包含路由约束的对象。对象的属性表示，约束的名称和值，可为null。 dataTokens object 包含路由的数据标记的对象。对象的属性表示，数据标记的名称和值，可为null。 Returns IRouteBuilder 路由核心对象"
  },
  "api/Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApiRouteEndpointBuilderExtensions.html",
    "title": "Class ApiRouteEndpointBuilderExtensions | Tool.Net",
    "keywords": "Class ApiRouteEndpointBuilderExtensions Namespace Microsoft.AspNetCore.Builder Assembly Tool.Net.dll 注册 Ashx 终结点路由的扩展模式 public static class ApiRouteEndpointBuilderExtensions Inheritance object ApiRouteEndpointBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapApiRoute(EndpointDataSource, string) 创建与AshxApi有关的路由 public static EndpointDataSource MapApiRoute(this EndpointDataSource endpointData, string template) Parameters endpointData EndpointDataSource 路由核心对象 template string 路由的规则 Returns EndpointDataSource 路由核心对象 MapApiRoute(EndpointDataSource, string, string) 创建与AshxApi有关的路由 public static EndpointDataSource MapApiRoute(this EndpointDataSource endpointData, string areaName, string template) Parameters endpointData EndpointDataSource 路由核心对象 areaName string 区域名称，可为null template string 路由的规则 Returns EndpointDataSource 路由核心对象 MapApiRoute(EndpointDataSource, string, string, object, object, object) 创建与AshxApi有关的路由 public static EndpointDataSource MapApiRoute(this EndpointDataSource endpointData, string areaName, string template, object defaults, object constraints, object dataTokens) Parameters endpointData EndpointDataSource 路由核心对象 areaName string 区域名称，可为null template string 路由的规则 defaults object 包含路由参数默认值的对象。对象的属性表示，默认值的名称和值，可为null。 constraints object 包含路由约束的对象。对象的属性表示，约束的名称和值，可为null。 dataTokens object 包含路由的数据标记的对象。对象的属性表示，数据标记的名称和值，可为null。 Returns EndpointDataSource 路由核心对象 MapApiRoute(EndpointDataSource, string, string, string) 创建与AshxApi有关的路由 public static EndpointDataSource MapApiRoute(this EndpointDataSource endpointData, string areaName, string controller, string template) Parameters endpointData EndpointDataSource 路由核心对象 areaName string 区域名称，可为null controller string 控制器名称，可为null template string 路由的规则 Returns EndpointDataSource 路由核心对象 MapApiRoute(EndpointDataSource, string, string, string, string) 创建与AshxApi有关的路由 public static EndpointDataSource MapApiRoute(this EndpointDataSource endpointData, string areaName, string controller, string action, string template) Parameters endpointData EndpointDataSource 路由核心对象 areaName string 区域名称，可为null controller string 控制器名称，可为null action string 方法名称，可为null template string 路由的规则 Returns EndpointDataSource 路由核心对象"
  },
  "api/Microsoft.AspNetCore.Builder.AshxActionEndpointConventionBuilder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.AshxActionEndpointConventionBuilder.html",
    "title": "Class AshxActionEndpointConventionBuilder | Tool.Net",
    "keywords": "Class AshxActionEndpointConventionBuilder Namespace Microsoft.AspNetCore.Builder Assembly Tool.Net.dll 终结点扩展对象 public sealed class AshxActionEndpointConventionBuilder : IEndpointConventionBuilder Inheritance object AshxActionEndpointConventionBuilder Implements IEndpointConventionBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods Add(Action<EndpointBuilder>) 回调已经生成的终结点信息 public void Add(Action<EndpointBuilder> convention) Parameters convention Action<EndpointBuilder>"
  },
  "api/Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.AshxApplicationBuilderExtensions.html",
    "title": "Class AshxApplicationBuilderExtensions | Tool.Net",
    "keywords": "Class AshxApplicationBuilderExtensions Namespace Microsoft.AspNetCore.Builder Assembly Tool.Net.dll Ashx 核心路由 扩展类 public static class AshxApplicationBuilderExtensions Inheritance object AshxApplicationBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddHttpContext(IApplicationBuilder) 注入HttpContext对象，实现静态获取 public static IHttpContextAccessor AddHttpContext(this IApplicationBuilder app) Parameters app IApplicationBuilder IApplicationBuilder框架对象 Returns IHttpContextAccessor IHttpContextAccessor GetObject(IApplicationBuilder, Type) 获取 已经注册的 服务或数据 public static object GetObject(this IApplicationBuilder app, Type type) Parameters app IApplicationBuilder IApplicationBuilder框架对象 type Type 获取的服务类型 Returns object IApplicationBuilder GetObject<T>(IApplicationBuilder) 获取 已经注册的 服务或数据 public static T GetObject<T>(this IApplicationBuilder app) Parameters app IApplicationBuilder IApplicationBuilder框架对象 Returns T IApplicationBuilder Type Parameters T 获取的服务类型 UseAshx(IApplicationBuilder, Action<IRouteBuilder>) Ashx路由 public static IApplicationBuilder UseAshx(this IApplicationBuilder app, Action<IRouteBuilder> configureRoutes) Parameters app IApplicationBuilder IApplicationBuilder configureRoutes Action<IRouteBuilder> IRouteBuilder Returns IApplicationBuilder IApplicationBuilder UseExceptionHandler(IApplicationBuilder, Func<HttpContext, Exception, Task>) 注入 捕获全局异常 对象 public static IApplicationBuilder UseExceptionHandler(this IApplicationBuilder app, Func<HttpContext, Exception, Task> action) Parameters app IApplicationBuilder IApplicationBuilder框架对象 action Func<HttpContext, Exception, Task> 需要提供处理这些异常的委托函数 Returns IApplicationBuilder IApplicationBuilder UseIgnoreUrl(IApplicationBuilder, params string[]) 注册 IgnoreUrl （忽略请求地址） public static IApplicationBuilder UseIgnoreUrl(this IApplicationBuilder app, params string[] urls) Parameters app IApplicationBuilder IApplicationBuilder框架对象 urls string[] 需要忽略的地址，必填项 Returns IApplicationBuilder IApplicationBuilder"
  },
  "api/Microsoft.AspNetCore.Builder.AshxEndpointDataSource.html": {
    "href": "api/Microsoft.AspNetCore.Builder.AshxEndpointDataSource.html",
    "title": "Class AshxEndpointDataSource | Tool.Net",
    "keywords": "Class AshxEndpointDataSource Namespace Microsoft.AspNetCore.Builder Assembly Tool.Net.dll Ashx终结点核心模块 public class AshxEndpointDataSource : EndpointDataSource, IDisposable Inheritance object EndpointDataSource AshxEndpointDataSource Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApiRouteEndpointBuilderExtensions.MapApiRoute(EndpointDataSource, string) ApiRouteEndpointBuilderExtensions.MapApiRoute(EndpointDataSource, string, string) ApiRouteEndpointBuilderExtensions.MapApiRoute(EndpointDataSource, string, string, object, object, object) ApiRouteEndpointBuilderExtensions.MapApiRoute(EndpointDataSource, string, string, string) ApiRouteEndpointBuilderExtensions.MapApiRoute(EndpointDataSource, string, string, string, string) ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties Endpoints 获取现有终结点 public override IReadOnlyList<Endpoint> Endpoints { get; } Property Value IReadOnlyList<Endpoint> Methods GetChangeToken() 获取操作事件 public override IChangeToken GetChangeToken() Returns IChangeToken MapRoute(string, string, RouteValueDictionary, RouteValueDictionary, object) 生成终结点规则 public void MapRoute(string template, string areaName, RouteValueDictionary defaultsDictionary, RouteValueDictionary constraintsDictionary, object dataTokens) Parameters template string areaName string defaultsDictionary RouteValueDictionary constraintsDictionary RouteValueDictionary dataTokens object"
  },
  "api/Microsoft.AspNetCore.Builder.AshxEndpointRouteBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.AshxEndpointRouteBuilderExtensions.html",
    "title": "Class AshxEndpointRouteBuilderExtensions | Tool.Net",
    "keywords": "Class AshxEndpointRouteBuilderExtensions Namespace Microsoft.AspNetCore.Builder Assembly Tool.Net.dll 终结点模式扩展 public static class AshxEndpointRouteBuilderExtensions Inheritance object AshxEndpointRouteBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapAshxs(IEndpointRouteBuilder) 启动终结点（默认版） public static AshxActionEndpointConventionBuilder MapAshxs(this IEndpointRouteBuilder endpoints) Parameters endpoints IEndpointRouteBuilder 对象 Returns AshxActionEndpointConventionBuilder MapAshxs(IEndpointRouteBuilder, Action<EndpointDataSource>) 启动终结点 public static AshxActionEndpointConventionBuilder MapAshxs(this IEndpointRouteBuilder endpoints, Action<EndpointDataSource> configureRoutes) Parameters endpoints IEndpointRouteBuilder 对象 configureRoutes Action<EndpointDataSource> 要生成的路由委托 Returns AshxActionEndpointConventionBuilder"
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder | Tool.Net",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes ApiRouteBuilderExtensions Ashx 路由模式扩展 ApiRouteEndpointBuilderExtensions 注册 Ashx 终结点路由的扩展模式 AshxActionEndpointConventionBuilder 终结点扩展对象 AshxApplicationBuilderExtensions Ashx 核心路由 扩展类 AshxEndpointDataSource Ashx终结点核心模块 AshxEndpointRouteBuilderExtensions 终结点模式扩展"
  },
  "api/Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.AshxServiceExtensions.html",
    "title": "Class AshxServiceExtensions | Tool.Net",
    "keywords": "Class AshxServiceExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly Tool.Net.dll Ashx 核心对象扩展类 public static class AshxServiceExtensions Inheritance object AshxServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAshx(IServiceCollection) 启动Ashx路由模式 public static IAshxBuilder AddAshx(this IServiceCollection services) Parameters services IServiceCollection Returns IAshxBuilder IAshxBuilder AddAshx(IServiceCollection, Action<AshxOptions>) 启动Ashx路由模式 public static IAshxBuilder AddAshx(this IServiceCollection services, Action<AshxOptions> action) Parameters services IServiceCollection 注册对象 action Action<AshxOptions> 选择委托 Returns IAshxBuilder IAshxBuilder AddHttpContext(IAshxBuilder) 注入HttpContext对象，实现静态获取 public static IAshxBuilder AddHttpContext(this IAshxBuilder ashxBuilder) Parameters ashxBuilder IAshxBuilder Ashx框架对象 Returns IAshxBuilder IAshxBuilder AddObject(IServiceCollection, object) 将用户自定义的数据注册进服务。 public static IServiceCollection AddObject(this IServiceCollection services, object _obj) Parameters services IServiceCollection Ashx框架对象 _obj object 注册的数据 Returns IServiceCollection IServiceCollection AddObject(IServiceCollection, Type, object) 将用户自定义的数据注册进服务。 public static IServiceCollection AddObject(this IServiceCollection services, Type type, object _obj) Parameters services IServiceCollection 主服务 type Type 注册对象类型 _obj object 注册的数据 Returns IServiceCollection IServiceCollection AddObject<T>(IServiceCollection, T) 将用户自定义的数据注册进服务。 public static IServiceCollection AddObject<T>(this IServiceCollection services, T _obj) Parameters services IServiceCollection Ashx框架对象 _obj T 注册的数据 Returns IServiceCollection IServiceCollection Type Parameters T SetFormOptions(IServiceCollection, Action<FormOptions>) 设置系统默认配置的FormOptions对象属性 public static IServiceCollection SetFormOptions(this IServiceCollection app, Action<FormOptions> action) Parameters app IServiceCollection IServiceCollection框架对象 action Action<FormOptions> 用于属性配置的方法 Returns IServiceCollection IServiceCollection框架对象"
  },
  "api/Microsoft.Extensions.DependencyInjection.SessionServiceExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SessionServiceExtensions.html",
    "title": "Class SessionServiceExtensions | Tool.Net",
    "keywords": "Class SessionServiceExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly Tool.Net.dll AsSession服务的注册帮助类 public static class SessionServiceExtensions Inheritance object SessionServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods AddDiySession(IServiceCollection, Action<DiySessionOptions>) 添加AsSession，暂时可以不需要写，目前还没实现长连接数据绑定，采用内存处理。 public static IServiceCollection AddDiySession(this IServiceCollection services, Action<DiySessionOptions> action) Parameters services IServiceCollection action Action<DiySessionOptions> 必须实现的条件 Returns IServiceCollection IServiceCollection UseDiySession(IApplicationBuilder) 注册AsSession public static IApplicationBuilder UseDiySession(this IApplicationBuilder app) Parameters app IApplicationBuilder IApplicationBuilder框架对象 Returns IApplicationBuilder IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Tool.Net",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes AshxServiceExtensions Ashx 核心对象扩展类 SessionServiceExtensions AsSession服务的注册帮助类"
  },
  "api/Microsoft.Extensions.Hosting.HostBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.Hosting.HostBuilderExtensions.html",
    "title": "Class HostBuilderExtensions | Tool.Net",
    "keywords": "Class HostBuilderExtensions Namespace Microsoft.Extensions.Hosting Assembly Tool.Net.dll HostBuilder扩展 public static class HostBuilderExtensions Inheritance object HostBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseDiyServiceProvider(IHostBuilder) 依赖注入（采用自定义模式，替换掉 默认的容器） public static IHostBuilder UseDiyServiceProvider(this IHostBuilder builder) Parameters builder IHostBuilder 信息 Returns IHostBuilder IHostBuilder"
  },
  "api/Microsoft.Extensions.Hosting.html": {
    "href": "api/Microsoft.Extensions.Hosting.html",
    "title": "Namespace Microsoft.Extensions.Hosting | Tool.Net",
    "keywords": "Namespace Microsoft.Extensions.Hosting Classes HostBuilderExtensions HostBuilder扩展"
  },
  "api/Tool.BoolExtension.html": {
    "href": "api/Tool.BoolExtension.html",
    "title": "Class BoolExtension | Tool.Net",
    "keywords": "Class BoolExtension Namespace Tool Assembly Tool.Net.dll 对Bool进行升级 public static class BoolExtension Inheritance object BoolExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(bool[], bool) 给数组加新的值 public static bool[] Add(this bool[] txt, bool txt1) Parameters txt bool[] bool[] txt1 bool 新增的值 Returns bool[] Contains(bool[], bool) 查找该bool数组中是否存在该值。 public static bool Contains(this bool[] txt, bool txt1) Parameters txt bool[] bool[] txt1 bool 查找的字符 Returns bool 方法存在或不存在 GetArrayIndex(bool[], int, int) 同于获取指定部分的内容 public static bool[] GetArrayIndex(this bool[] obj, int index, int count) Parameters obj bool[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns bool[] 返回一部分的数组内容 ToBytes(bool) 返回二进制流 public static byte[] ToBytes(this bool txt) Parameters txt bool Bool Returns byte[] 返回二进制流"
  },
  "api/Tool.ByteExtension.html": {
    "href": "api/Tool.ByteExtension.html",
    "title": "Class ByteExtension | Tool.Net",
    "keywords": "Class ByteExtension Namespace Tool Assembly Tool.Net.dll 对Byte进行升级 public static class ByteExtension Inheritance object ByteExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(byte[], byte) 给数组加新的值 public static byte[] Add(this byte[] txt, byte txt1) Parameters txt byte[] bool[] txt1 byte 新增的值 Returns byte[] AsArraySegment<T>(Memory<T>) 将Memory<T>转换成ArraySegment<T>（不是拷贝） public static ArraySegment<T> AsArraySegment<T>(this Memory<T> memory) Parameters memory Memory<T> 数据流 Returns ArraySegment<T> 返回ArraySegment<T> Type Parameters T AsArraySegment<T>(ReadOnlyMemory<T>) 将Memory<T>转换成ArraySegment<T>（不是拷贝） public static ArraySegment<T> AsArraySegment<T>(this ReadOnlyMemory<T> memory) Parameters memory ReadOnlyMemory<T> 数据流 Returns ArraySegment<T> 返回ArraySegment<T> Type Parameters T BytesToObject(byte[]) 将一个序列化后的byte[]数组还原 [Obsolete(\"BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.\", DiagnosticId = \"SYSLIB0011\", UrlFormat = \"https://aka.ms/dotnet-warnings/{0}\")] public static object BytesToObject(this byte[] Bytes) Parameters Bytes byte[] Returns object 返回一个原对象 BytesToObject(byte[], Type) 将一个序列化后的byte[]数组还原 （升级版，有效降低内存消耗） public static object BytesToObject(this byte[] Bytes, Type type) Parameters Bytes byte[] 数据流 type Type 转换为原来类的Type Returns object 返回一个原对象 BytesToObject<T>(byte[]) 将一个序列化后的byte[]数组还原 （升级版，有效降低内存消耗） public static T BytesToObject<T>(this byte[] Bytes) Parameters Bytes byte[] 数据流 Returns T 返回一个原对象 Type Parameters T Contains(byte[], byte) 查找该byte数组中是否存在该值。 public static bool Contains(this byte[] txt, byte txt1) Parameters txt byte[] byte[] txt1 byte 查找的字符 Returns bool 方法存在或不存在 Decrement(ref byte) 原子方式-1 public static byte Decrement(this ref byte value) Parameters value byte 值 Returns byte GetArrayIndex(byte[], int, int) 同于获取指定部分的内容 public static byte[] GetArrayIndex(this byte[] obj, int index, int count) Parameters obj byte[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns byte[] 返回一部分的数组内容 Increment(ref byte) 原子方式+1 public static byte Increment(this ref byte value) Parameters value byte 值 Returns byte Read(byte[], byte[], int, int) 重写封装的Copy方法 public static int Read(this byte[] sourceArray, byte[] destinationArray, int sourceIndex, int length) Parameters sourceArray byte[] 源数组对象 destinationArray byte[] 新数组对象 sourceIndex int 源数据开始读取的位置 length int 从源数组取多少？(是指从读取位置开始往后读的数量) Returns int 返回当前新的数组中复制了多少个下标的值 Read(byte[], int, byte[], int, int) 重写封装的Copy方法 public static int Read(this byte[] sourceArray, int sourceIndex, byte[] destinationArray, int destinationIndex, int length) Parameters sourceArray byte[] 源数组对象 sourceIndex int 源数据开始读取的位置 destinationArray byte[] 新数组对象 destinationIndex int 开始存储的位置 length int 从源数组取多少？(是指从读取位置开始往后读的数量) Returns int 返回当前新的数组中复制了多少个下标的值 ToBase64(byte[]) 将对象转换成Base64字符串（编码） public static string ToBase64(this byte[] obj) Parameters obj byte[] Returns string ToBool(byte[]) 转换为Bool类型 public static bool ToBool(this byte[] bt) Parameters bt byte[] byte[] Returns bool 转换为Bool类型 ToByteString(byte[]) 转换为String类型 public static string ToByteString(this byte[] bt) Parameters bt byte[] byte[] Returns string 转换为String类型 ToByteString(byte[], Encoding) 转换为String类型 public static string ToByteString(this byte[] bt, Encoding encoding) Parameters bt byte[] byte[] encoding Encoding 编码格式 Returns string 转换为String类型 ToBytesFile(byte[], string) 将byte数组转换为文件并保存到指定地址(绝对路径)（备注：如果该文件存在，将会被替换） public static void ToBytesFile(this byte[] buff, string savepath) Parameters buff byte[] byte数组 savepath string 保存地址 ToChar(byte[]) 转换为Char类型 public static char ToChar(this byte[] bt) Parameters bt byte[] byte[] Returns char 转换为Char类型 ToDouble(byte[]) 转换为Double类型 public static double ToDouble(this byte[] bt) Parameters bt byte[] byte[] Returns double 转换为Double类型 ToFloat(byte[]) 转换为Float类型 public static float ToFloat(this byte[] bt) Parameters bt byte[] byte[] Returns float 转换为Float类型 ToInt(byte[]) 转换为Int类型 public static int ToInt(this byte[] bt) Parameters bt byte[] byte[] Returns int 转换为Int类型 ToLong(byte[]) 转换为Long类型 public static long ToLong(this byte[] bt) Parameters bt byte[] byte[] Returns long 转换为Long类型 ToShort(byte[]) 转换为Short类型 public static short ToShort(this byte[] bt) Parameters bt byte[] byte[] Returns short 转换为Short类型 ToStrings(byte[]) 转换为16进制 例如“7F-2C-4A”。 public static string ToStrings(this byte[] bt) Parameters bt byte[] byte[] Returns string 转换为16进制"
  },
  "api/Tool.CharExtension.html": {
    "href": "api/Tool.CharExtension.html",
    "title": "Class CharExtension | Tool.Net",
    "keywords": "Class CharExtension Namespace Tool Assembly Tool.Net.dll 对char进行升级 public static class CharExtension Inheritance object CharExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(char[], char) 给数组加新的值 public static char[] Add(this char[] txt, char txt1) Parameters txt char[] char[] txt1 char 新增的值 Returns char[] Contains(char[], char) 查找该char数组中是否存在该值。 public static bool Contains(this char[] txt, char txt1) Parameters txt char[] char[] txt1 char 查找的字符 Returns bool 方法存在或不存在 GetArrayIndex(char[], int, int) 同于获取指定部分的内容 public static char[] GetArrayIndex(this char[] obj, int index, int count) Parameters obj char[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns char[] 返回一部分的数组内容 ToBytes(char) 返回二进制流 public static byte[] ToBytes(this char txt) Parameters txt char Char Returns byte[] 返回二进制流 ToInt(char) 返回Int类型 public static int ToInt(this char txt) Parameters txt char Char Returns int 返回Int类型"
  },
  "api/Tool.DateTimeExtension.html": {
    "href": "api/Tool.DateTimeExtension.html",
    "title": "Class DateTimeExtension | Tool.Net",
    "keywords": "Class DateTimeExtension Namespace Tool Assembly Tool.Net.dll 对DateTime进行升级 public static class DateTimeExtension Inheritance object DateTimeExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(DateTime[], DateTime) 给数组加新的值 public static DateTime[] Add(this DateTime[] txt, DateTime txt1) Parameters txt DateTime[] DateTime[] txt1 DateTime 新增的值 Returns DateTime[] Contains(DateTime[], DateTime) 查找该char数组中是否存在该值。 public static bool Contains(this DateTime[] txt, DateTime txt1) Parameters txt DateTime[] DateTime[] txt1 DateTime 查找的字符 Returns bool 方法存在或不存在 DateMonday(DateTime, DayOfWeek) 返回当前日期指定的星期几 public static DateTime DateMonday(this DateTime dateTime, DayOfWeek Week) Parameters dateTime DateTime DateTime Week DayOfWeek 指定星期几 Returns DateTime 返回当前日期指定的星期几 GetArrayIndex(DateTime[], int, int) 同于获取指定部分的内容 public static DateTime[] GetArrayIndex(this DateTime[] obj, int index, int count) Parameters obj DateTime[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns DateTime[] 返回一部分的数组内容 GetDaysOfMonth(DateTime) 本月有多少天 public static int GetDaysOfMonth(this DateTime dt) Parameters dt DateTime 日期 Returns int 天数 GetDaysOfYear(DateTime) 本年有多少天 public static int GetDaysOfYear(this DateTime idt) Parameters idt DateTime 日期 Returns int 本天在当年的天数 GetMilliseconds(DateTime) 根据实力，计算与当前时间的毫秒差 public static double GetMilliseconds(this DateTime dateTime) Parameters dateTime DateTime DateTime Returns double 适用于获取代码执行时的耗时 GetWeekNameOfDay(DateTime) 返回当前日期的星期名称 public static string GetWeekNameOfDay(this DateTime idt) Parameters idt DateTime 日期 Returns string 星期名称 GetWeekNumberOfDay(DateTime) 返回当前日期的星期编号 public static string GetWeekNumberOfDay(this DateTime idt) Parameters idt DateTime 日期 Returns string 星期数字编号 ToLocalTime(DateTime, bool) 返回 DateTime 类型 ，根据指定时间数字转换 public static long ToLocalTime(this DateTime dateTime, bool tal) Parameters dateTime DateTime 时间类型 tal bool 返回 true 毫秒, false 秒。 Returns long 返回64位时间数字 ToLocalTime(double, bool) 返回 DateTime 类型 ，根据指定时间数字转换 public static DateTime ToLocalTime(double Localtime, bool tal) Parameters Localtime double 指定的时间数字 tal bool true 毫秒, false 秒。 Returns DateTime 返回时间类型"
  },
  "api/Tool.DecimalExtension.html": {
    "href": "api/Tool.DecimalExtension.html",
    "title": "Class DecimalExtension | Tool.Net",
    "keywords": "Class DecimalExtension Namespace Tool Assembly Tool.Net.dll 对Decimal进行升级 public static class DecimalExtension Inheritance object DecimalExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(decimal[], decimal) 给数组加新的值 public static decimal[] Add(this decimal[] txt, decimal txt1) Parameters txt decimal[] Decimal[] txt1 decimal 新增的值 Returns decimal[] Contains(decimal[], decimal) 查找该Decimal数组中是否存在该值。 public static bool Contains(this decimal[] txt, decimal txt1) Parameters txt decimal[] Decimal[] txt1 decimal 查找的字符 Returns bool 方法存在或不存在 GetArrayIndex(decimal[], int, int) 同于获取指定部分的内容 public static decimal[] GetArrayIndex(this decimal[] obj, int index, int count) Parameters obj decimal[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns decimal[] 返回一部分的数组内容 ToInt(decimal, bool) 将数字转换成整数，支持四舍五入，默认不四舍五入。 public static int ToInt(this decimal txt, bool type = false) Parameters txt decimal Decimal type bool true：为需要四舍五入 Returns int 返回整数，带四舍五入"
  },
  "api/Tool.DoubleExtension.html": {
    "href": "api/Tool.DoubleExtension.html",
    "title": "Class DoubleExtension | Tool.Net",
    "keywords": "Class DoubleExtension Namespace Tool Assembly Tool.Net.dll 对Double进行升级 public static class DoubleExtension Inheritance object DoubleExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(double[], double) 给数组加新的值 public static double[] Add(this double[] txt, double txt1) Parameters txt double[] Double[] txt1 double 新增的值 Returns double[] Contains(double[], double) 查找该Double数组中是否存在该值。 public static bool Contains(this double[] txt, double txt1) Parameters txt double[] Double[] txt1 double 查找的字符 Returns bool 方法存在或不存在 GetArrayIndex(double[], int, int) 同于获取指定部分的内容 public static double[] GetArrayIndex(this double[] obj, int index, int count) Parameters obj double[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns double[] 返回一部分的数组内容 ToBytes(double) 返回二进制流 public static byte[] ToBytes(this double txt) Parameters txt double Double Returns byte[] 返回二进制流 ToInt(double, bool) 将数字转换成整数，支持四舍五入，默认不四舍五入。 public static int ToInt(this double txt, bool type = false) Parameters txt double Double type bool true：为需要四舍五入 Returns int 返回整数，带四舍五入"
  },
  "api/Tool.FloatExtension.html": {
    "href": "api/Tool.FloatExtension.html",
    "title": "Class FloatExtension | Tool.Net",
    "keywords": "Class FloatExtension Namespace Tool Assembly Tool.Net.dll 对Float进行升级 public static class FloatExtension Inheritance object FloatExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(float[], float) 给数组加新的值 public static float[] Add(this float[] txt, float txt1) Parameters txt float[] Float[] txt1 float 新增的值 Returns float[] Contains(float[], float) 查找该Float数组中是否存在该值。 public static bool Contains(this float[] txt, float txt1) Parameters txt float[] Float[] txt1 float 查找的字符 Returns bool 方法存在或不存在 GetArrayIndex(float[], int, int) 同于获取指定部分的内容 public static float[] GetArrayIndex(this float[] obj, int index, int count) Parameters obj float[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns float[] 返回一部分的数组内容 ToBytes(float) 返回二进制流 public static byte[] ToBytes(this float txt) Parameters txt float Double Returns byte[] 返回二进制流"
  },
  "api/Tool.GlobalObj.html": {
    "href": "api/Tool.GlobalObj.html",
    "title": "Struct GlobalObj | Tool.Net",
    "keywords": "Struct GlobalObj Namespace Tool Assembly Tool.Net.dll 全局公共对象，支持线程安全访问 public readonly struct GlobalObj Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors GlobalObj(int) 预估初始对象大小 public GlobalObj(int capacity) Parameters capacity int Properties OrigObj 线程安全对象，可供不想 存储对象的朋友简单化对象管理 public ConcurrentDictionary<string, object> OrigObj { get; } Property Value ConcurrentDictionary<string, object> Methods Add(string, object) 向对象添加键值对 public bool Add(string key, object value) Parameters key string 键 value object 值 Returns bool 状态 Get(string, out object) 从对象中获取现有键值 public bool Get(string key, out object value) Parameters key string 键名称 value object 现有值 Returns bool 状态 Get<T>(string, out T) 从对象中获取现有键值 public bool Get<T>(string key, out T value) Parameters key string 键名称 value T 现有值 Returns bool 状态 Type Parameters T 原对象类型"
  },
  "api/Tool.IntExtension.html": {
    "href": "api/Tool.IntExtension.html",
    "title": "Class IntExtension | Tool.Net",
    "keywords": "Class IntExtension Namespace Tool Assembly Tool.Net.dll 对Int进行升级 public static class IntExtension Inheritance object IntExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(int[], int) 给数组加新的值 public static int[] Add(this int[] txt, int txt1) Parameters txt int[] int[] txt1 int 新增的值 Returns int[] Ceiling(int, decimal) 当前数除以一个整数，返回一个向上取整的倍数 public static int Ceiling(this int txt, decimal txt1) Parameters txt int int txt1 decimal 除数 Returns int Contains(int[], int) 查找该int数组中是否存在该值。 public static bool Contains(this int[] txt, int txt1) Parameters txt int[] int[] txt1 int 查找的字符 Returns bool 方法存在或不存在 Decrement(ref int) 原子方式-1 public static int Decrement(this ref int value) Parameters value int 值 Returns int GetArrayIndex(int[], int, int) 同于获取指定部分的内容 public static int[] GetArrayIndex(this int[] obj, int index, int count) Parameters obj int[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns int[] 返回一部分的数组内容 Increment(ref int) 原子方式+1 public static int Increment(this ref int value) Parameters value int 值 Returns int IsWhether(int, int) 用于判断这个整数是不是输入数的倍数 public static bool IsWhether(this int txt, int txt1) Parameters txt int int txt1 int 判断的条件 Returns bool ToBytes(int) 返回二进制流 public static byte[] ToBytes(this int txt) Parameters txt int int Returns byte[] 返回二进制流"
  },
  "api/Tool.LongExtension.html": {
    "href": "api/Tool.LongExtension.html",
    "title": "Class LongExtension | Tool.Net",
    "keywords": "Class LongExtension Namespace Tool Assembly Tool.Net.dll 对long进行升级 public static class LongExtension Inheritance object LongExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(long[], long) 给数组加新的值 public static long[] Add(this long[] txt, long txt1) Parameters txt long[] Long[] txt1 long 新增的值 Returns long[] Ceiling(long, decimal) 当前数除以一个整数，返回一个向上取整的倍数 public static long Ceiling(this long txt, decimal txt1) Parameters txt long int txt1 decimal 除数 Returns long Contains(long[], long) 查找该Long数组中是否存在该值。 public static bool Contains(this long[] txt, long txt1) Parameters txt long[] Long[] txt1 long 查找的字符 Returns bool 方法存在或不存在 Decrement(ref long) 原子方式-1 public static long Decrement(this ref long value) Parameters value long 值 Returns long GetArrayIndex(long[], int, int) 同于获取指定部分的内容 public static long[] GetArrayIndex(this long[] obj, int index, int count) Parameters obj long[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns long[] 返回一部分的数组内容 Increment(ref long) 原子方式+1 public static long Increment(this ref long value) Parameters value long 值 Returns long ToBytes(long) 返回二进制流 public static byte[] ToBytes(this long txt) Parameters txt long Long Returns byte[] 返回二进制流 ToInt(long) 返回Int类型 public static int ToInt(this long txt) Parameters txt long long Returns int 返回Int类型"
  },
  "api/Tool.Net.Explains.html": {
    "href": "api/Tool.Net.Explains.html",
    "title": "Class Explains | Tool.Net",
    "keywords": "Class Explains Namespace Tool.Net Assembly Tool.Net.dll 包相关信息说明类 public class Explains Inheritance object Explains Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Fields AuthorName 作者名称 public const string AuthorName = \"NiXue\" Field Value string Description 作者开发说明 public const string Description = \"该项目不会在变了，一路走来，已经经历了两个春夏秋冬，一路走来，感谢很多伙伴的支持，\\r\\n也使用了几个名字了，在这里我依次罗列出：【UniversalFrame，UniversalFrame.Core】，还有一个名字这里就不提及了，这两个名字均能在NuGet上搜索到，\\r\\n现在已经确定了名字‘Tool.Net’这包的名字好记且符合，框架本身定义，从.Net5开始支持下去。前面的版本请使用以前的版本，最新版本只支持.Net5及之后。\" Field Value string PackageName 包体名称 public const string PackageName = \"Tool.Net\" Field Value string"
  },
  "api/Tool.Net.html": {
    "href": "api/Tool.Net.html",
    "title": "Namespace Tool.Net | Tool.Net",
    "keywords": "Namespace Tool.Net Classes Explains 包相关信息说明类"
  },
  "api/Tool.ObjectExtension.ThreadStart.html": {
    "href": "api/Tool.ObjectExtension.ThreadStart.html",
    "title": "Delegate ObjectExtension.ThreadStart | Tool.Net",
    "keywords": "Delegate ObjectExtension.ThreadStart Namespace Tool Assembly Tool.Net.dll 表示在 System.Threading.Thread 上执行的方法。 [ComVisible(true)] public delegate object ObjectExtension.ThreadStart() Returns object 表示在 System.Threading.Thread 上执行的方法。 Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.ObjectExtension.html": {
    "href": "api/Tool.ObjectExtension.html",
    "title": "Class ObjectExtension | Tool.Net",
    "keywords": "Class ObjectExtension Namespace Tool Assembly Tool.Net.dll 对object类进行升级 public static class ObjectExtension Inheritance object ObjectExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Properties Dynamic 虚拟参数(备注：要引用 Microsoft.CSharp .dll 方可使用) [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static dynamic Dynamic { get; } Property Value dynamic DynamicCount 获取当前包含的虚拟参数数量 [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static int DynamicCount { get; } Property Value int DynamicKeys 获取虚拟键值下面的所有名称 [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static string[] DynamicKeys { get; } Property Value string[] DynamicValues 获取虚拟键值下面的所有内容 [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static dynamic[] DynamicValues { get; } Property Value dynamic[] ProcessThreadCollection 获取当前进程中的所有线程 public static ProcessThreadCollection ProcessThreadCollection { get; } Property Value ProcessThreadCollection Provider 提供用于获取注入对象的服务 public static IServiceProvider Provider { get; } Property Value IServiceProvider Services 提供用于添加对象服务 public static IServiceCollection Services { get; } Property Value IServiceCollection Static 全局公共对象 可以用于 存放任何对象 管理，存在拆箱装箱行为 public static GlobalObj Static { get; } Property Value GlobalObj Thread 获取当前上下文正在运行的当前线程 public static Thread Thread { get; } Property Value Thread Methods Add(object[], object) 给数组加新的值 public static object[] Add(this object[] txt, object txt1) Parameters txt object[] Object[] txt1 object 新增的值 Returns object[] 由于不能直接赋值，采取间接赋值方式 Add<T>(object, object, object) 给数组加新的值(适用于任何数组对象) public static void Add<T>(this object obj, object _obj, object T_obj) Parameters obj object Object[]源数组 _obj object 新数组（为空，但是必须大于原数组一个下标以上） T_obj object 加入的新值 Type Parameters T 数组原类型 BuildProvider() 创建用于获取服务对象 调用该函数，将会释放掉原本的服务 public static void BuildProvider() Contains(object[], object) 查找该Object数组中是否存在该值。 public static bool Contains(this object[] txt, object txt1) Parameters txt object[] Object[] txt1 object 查找的字符 Returns bool 方法存在或不存在 CopyEntity(object, object, params string[]) 将对象拷贝，值类型拷贝，引用类型赋值。 public static bool CopyEntity(this object obj, object origobj, params string[] keys) Parameters obj object 对象 origobj object 拷贝对象 keys string[] 拷贝参数，空，为全拷贝 支持赋值语法 ?=? 注意不支持'空格' Returns bool DynamicAdd(string, object, bool) 添加虚拟参数(备注：如果对象名存在则会在直接修改原对象名内的数据，type字段默认为true，为false时则不进行修改),注明：如果存在多线程添加同一个键值的情况，请自己使用锁解决 [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static void DynamicAdd(string key, object value, bool type = true) Parameters key string value object type bool DynamicObjectkey(string) 获取指定键值的内容（备注：如果键值不存在则返回null） [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static object DynamicObjectkey(string key) Parameters key string 简直名称 Returns object 返回结果 DynamicRemove() 删除全部虚拟参数 [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static void DynamicRemove() DynamicRemove(string) 删除指定名称的虚拟参数（备注：如果键值不存在则不会删除任何键值，不抛出异常） [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static void DynamicRemove(string key) Parameters key string 简直名称 Dynamickey(string) 获取指定键值的内容（备注：如果键值不存在则返回null） [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static dynamic Dynamickey(string key) Parameters key string 简直名称 Returns dynamic 返回结果 Dynamickey<T>(string) 获取指定键值的内容（备注：如果键值不存在则返回null） [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static T Dynamickey<T>(string key) Parameters key string 简直名称 Returns T 返回结果 Type Parameters T EntityToJson(object) 将实体转换为JSON格式字符串 （再三强调，要是实体，而且是单个实体。） public static string EntityToJson(this object obj) Parameters obj object 实体 Returns string 返回JSON字符串 EntityToJson(object, bool) 将实体转换为JSON格式字符串 （再三强调，要是实体，而且是单个实体。） public static string EntityToJson(this object obj, bool IsDate) Parameters obj object 实体 IsDate bool ToJson格式时间，启用转字符串 Returns string 返回JSON字符串 EntityToJson(object, bool, string) 将实体转换为JSON格式字符串 （再三强调，要是实体，而且是单个实体。） public static string EntityToJson(this object obj, bool IsDate, string ToDateString) Parameters obj object 实体 IsDate bool ToJson格式时间，启用转字符串 ToDateString string Date.ToString()的写法。 Returns string 返回JSON字符串 GetArrayIndex(object[], int, int) 同于获取指定部分的内容 public static object[] GetArrayIndex(this object[] obj, int index, int count) Parameters obj object[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns object[] 返回一部分的数组内容 GetIntPtr(object) 获取当前对象的内存空间 public static IntPtr GetIntPtr(this object obj) Parameters obj object 对象 Returns IntPtr 返回指针 GetIntPtrInt(object) 获取当前对象的内存空间 public static int GetIntPtrInt(this object obj) Parameters obj object 对象 Returns int 返回指针 IsNewTask(Task) 判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务 public static Task IsNewTask(this Task task) Parameters task Task 需要完成的任务 Returns Task 返回与原线程不一样的继续线程 IsNewTask(ValueTask) 判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务 public static ValueTask IsNewTask(this ValueTask task) Parameters task ValueTask 需要完成的任务 Returns ValueTask 返回与原线程不一样的继续线程 IsNewTask<TResult>(Task<TResult>) 判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务 public static Task<TResult> IsNewTask<TResult>(this Task<TResult> task) Parameters task Task<TResult> 需要完成的任务 Returns Task<TResult> 返回与原线程不一样的继续线程 Type Parameters TResult IsNewTask<TResult>(ValueTask<TResult>) 判断当前任务是否是使用了新线程完成，如果使用的是当前线程完成任务，将在返回前，启用新线程继续后续任务 public static ValueTask<TResult> IsNewTask<TResult>(this ValueTask<TResult> task) Parameters task ValueTask<TResult> 需要完成的任务 Returns ValueTask<TResult> 返回与原线程不一样的继续线程 Type Parameters TResult IsPropertyExist(string) 判断当前虚拟对象下面是否有该参数 [Obsolete(\"当前变量，已过时，请考虑使用 ObjectExtension.Services 使用 IOC 模式\")] public static bool IsPropertyExist(string propertyname) Parameters propertyname string 参数名 Returns bool MapTo(object, string, params object[]) 实现单线程的访问 public static object MapTo(object obj_T, string Methods, params object[] parameter) Parameters obj_T object 表示一个类对象实力 Methods string 表示调用的对象的一个方法名(注意该方法必须是非静态方法) parameter object[] 该方法的参数,如果该方法没有参数可以为null，如有参数必须和方法参数一致 Returns object MapTo(ThreadStart) 实现单线程的访问 (示例：new ThreadStart(delegate (){}) ) public static object MapTo(ObjectExtension.ThreadStart API) Parameters API ObjectExtension.ThreadStart Returns object MapTo<T>(string) 获取某个类下面的方法，方法对应的委托参数 public static ActionDispatcher<T> MapTo<T>(string Methods) Parameters Methods string 表示调用的对象的方法名 Returns ActionDispatcher<T> Type Parameters T Read<T>(int) 将指定的内存空间内容转换成类型 public static T Read<T>(int address) Parameters address int 内存空间值 Returns T 返回类型对象 Type Parameters T 类型对象 Read<T>(IntPtr) 将指定的内存空间内容转换成类型 public static T Read<T>(IntPtr address) Parameters address IntPtr 内存空间 Returns T 返回类型对象 Type Parameters T 类型对象 Read<T>(object, int, object, int, int) 重写封装的Copy方法 (读取原数组中指定位置的内容) public static int Read<T>(this object sourceArray, int sourceIndex, object destinationArray, int destinationIndex, int length) Parameters sourceArray object 源数组对象 sourceIndex int 源数据开始读取的位置 destinationArray object 新数组对象 destinationIndex int 开始存储的位置 length int 从源数组取多少？(是指从读取位置开始往后读的数量) Returns int 返回当前新的数组中复制了多少个下标的值 Type Parameters T Read<T>(object, object, int, int) 重写封装的Copy方法 (读取原数组中指定位置的内容) public static int Read<T>(this object sourceArray, object destinationArray, int sourceIndex, int length) Parameters sourceArray object 源数组对象 destinationArray object 新数组对象 sourceIndex int 源数据开始读取的位置 length int 从源数组取多少？(是指从读取位置开始往后读的数量) Returns int 返回当前新的数组中复制了多少个下标的值 Type Parameters T RunTask(Func<Task>, TaskCreationOptions, CancellationToken) 原 StartNew 方法的封装·支持对异步模型的线程创建 public static Task RunTask(this Func<Task> task, TaskCreationOptions creationOptions = TaskCreationOptions.None, CancellationToken token = default) Parameters task Func<Task> creationOptions TaskCreationOptions token CancellationToken Returns Task RunTask(Func<ValueTask>, TaskCreationOptions, CancellationToken) 原 StartNew 方法的封装·支持对异步模型的线程创建 public static ValueTask RunTask(this Func<ValueTask> task, TaskCreationOptions creationOptions = TaskCreationOptions.None, CancellationToken token = default) Parameters task Func<ValueTask> creationOptions TaskCreationOptions token CancellationToken Returns ValueTask RunTask<T>(Func<Task<T>>, TaskCreationOptions, CancellationToken) 原 StartNew 方法的封装·支持对异步模型的线程创建 public static Task<T> RunTask<T>(this Func<Task<T>> task, TaskCreationOptions creationOptions = TaskCreationOptions.None, CancellationToken token = default) Parameters task Func<Task<T>> creationOptions TaskCreationOptions token CancellationToken Returns Task<T> 返回结果 Type Parameters T RunTask<T>(Func<ValueTask<T>>, TaskCreationOptions, CancellationToken) 原 StartNew 方法的封装·支持对异步模型的线程创建 public static ValueTask<T> RunTask<T>(this Func<ValueTask<T>> task, TaskCreationOptions creationOptions = TaskCreationOptions.None, CancellationToken token = default) Parameters task Func<ValueTask<T>> creationOptions TaskCreationOptions token CancellationToken Returns ValueTask<T> 返回结果 Type Parameters T ToBase64String(object) 将对象转换成Base64字符串（编码） public static string ToBase64String(this object obj) Parameters obj object Returns string ToBytes(object) 将一个object对象序列化，返回一个byte[]（重要说明：被序列化的对象必须实现 [Serializable] ISerializable特性的结构） [Obsolete(\"BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.\", DiagnosticId = \"SYSLIB0011\", UrlFormat = \"https://aka.ms/dotnet-warnings/{0}\")] public static byte[] ToBytes(this object obj) Parameters obj object 能序列化的对象 Returns byte[] 返回一个byte[] ToBytes(object, out Type) 将一个object对象序列化，返回一个byte[] （升级版，有效降低内存消耗）（重要说明：被序列化的对象必须实现 struct 标记）示例：public struct 类名称 public static byte[] ToBytes(this object obj, out Type type) Parameters obj object 能序列化的对象 type Type 转换为原来类的Type Returns byte[] 返回一个byte[] ToJson(object) 转换为JSON格式字符串 public static string ToJson(this object obj) Parameters obj object object Returns string JSON字符串 ToJson(object, JsonSerializerOptions) 转换为JSON格式字符串 public static string ToJson(this object obj, JsonSerializerOptions jsonSerializerOptions) Parameters obj object object jsonSerializerOptions JsonSerializerOptions 需要的序列化条件 Returns string JSON字符串 ToJsonWeb(object) 转换为JSON格式字符串，针对Web场景定制Json格式 public static string ToJsonWeb(this object obj) Parameters obj object object Returns string JSON字符串 ToJsonWeb(object, Action<JsonSerializerOptions>) 转换为JSON格式字符串，针对Web场景定制Json格式 public static string ToJsonWeb(this object obj, Action<JsonSerializerOptions> action) Parameters obj object object action Action<JsonSerializerOptions> 委托Json任务 Returns string JSON字符串 ToTryVar<T>(object, T) 实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能)（T:适用于转换失败，无法转换时系统返回的默认结果，用于容错） public static T ToTryVar<T>(this object obj, T devalue) Parameters obj object object实体，参数，对象 devalue T 转换失败时使用默认值 Returns T 返回被指定强转的类型。（异常：存在于强转无效） Type Parameters T 对象 ToVar(object, string) 实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能) public static dynamic ToVar(this object obj, string type = null) Parameters obj object object实体，参数，对象 type string 强转类型,如果为空，默认强转成该对象的Type类型(必须要是当前程序集下的对象，才能转换) Returns dynamic 返回被指定强转的类型。（异常：存在于强转无效） ToVar(object, Type, bool) 实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能) public static object ToVar(this object obj, Type type, bool istype = true) Parameters obj object object实体，参数，对象 type Type 指定类型的Type istype bool 表示强转失败时是否抛异常。返回null Returns object 返回被指定强转的类型。（异常：存在于强转无效） ToVar<T>(object) 实现万能的转换(备注：包含数据类型的转换也包含as的功能和(类型)的功能) public static T ToVar<T>(this object obj) Parameters obj object object实体，参数，对象 Returns T 返回被指定强转的类型。（异常：存在于强转无效） Type Parameters T 对象 ToXml(object) 转换为Xml格式字符串 public static string ToXml(this object obj) Parameters obj object object Returns string Xml字符串"
  },
  "api/Tool.ShortExtension.html": {
    "href": "api/Tool.ShortExtension.html",
    "title": "Class ShortExtension | Tool.Net",
    "keywords": "Class ShortExtension Namespace Tool Assembly Tool.Net.dll 对Short进行升级 public static class ShortExtension Inheritance object ShortExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(short[], short) 给数组加新的值 public static short[] Add(this short[] txt, short txt1) Parameters txt short[] Short[] txt1 short 新增的值 Returns short[] Ceiling(short, decimal) 当前数除以一个整数，返回一个向上取整的倍数 public static short Ceiling(this short txt, decimal txt1) Parameters txt short int txt1 decimal 除数 Returns short Contains(short[], short) 查找该Short数组中是否存在该值。 public static bool Contains(this short[] txt, short txt1) Parameters txt short[] Short[] txt1 short 查找的字符 Returns bool 方法存在或不存在 Decrement(ref short) 原子方式-1 public static short Decrement(this ref short value) Parameters value short 值 Returns short GetArrayIndex(short[], int, int) 同于获取指定部分的内容 public static short[] GetArrayIndex(this short[] obj, int index, int count) Parameters obj short[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns short[] 返回一部分的数组内容 Increment(ref short) 原子方式+1 public static short Increment(this ref short value) Parameters value short 值 Returns short ToBytes(short) 返回二进制流 public static byte[] ToBytes(this short txt) Parameters txt short Short Returns byte[] 返回二进制流"
  },
  "api/Tool.Sockets.Kernels.ApiValue.ValueType.html": {
    "href": "api/Tool.Sockets.Kernels.ApiValue.ValueType.html",
    "title": "Enum ApiValue.ValueType | Tool.Net",
    "keywords": "Enum ApiValue.ValueType Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 用于表示当前类型的实际值 public enum ApiValue.ValueType : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Byte = 5 byte DateTime = 6 DateTime Decimal = 4 decimal Dictionary = 8 Dictionary<TKey, TValue> Double = 3 double Int = 1 int List = 7 List<T> Long = 2 long String = 0 string"
  },
  "api/Tool.Sockets.Kernels.ApiValue.html": {
    "href": "api/Tool.Sockets.Kernels.ApiValue.html",
    "title": "Struct ApiValue | Tool.Net",
    "keywords": "Struct ApiValue Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 存储对象 public readonly struct ApiValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors ApiValue(object) 初始化 public ApiValue(object value) Parameters value object Fields Empty 空值原型 public static readonly ApiValue Empty Field Value ApiValue Properties Type 当前对象原型 public ApiValue.ValueType Type { get; } Property Value ApiValue.ValueType Value 原始类型值 public object Value { get; } Property Value object Methods GetValueType(Type) 根据 类型获取对应的枚举 public static ApiValue.ValueType GetValueType(Type type) Parameters type Type 类型 Returns ApiValue.ValueType 对应的枚举 GetVar<T>() 将对象还原成 特定值 public T GetVar<T>() Returns T 得到的值 Type Parameters T 转换的值 ToString() 获取值的结果 public override string ToString() Returns string Operators implicit operator ApiValue(byte) public static implicit operator ApiValue(byte value) Parameters value byte Returns ApiValue implicit operator ApiValue(Dictionary<string, ApiValue>) public static implicit operator ApiValue(Dictionary<string, ApiValue> value) Parameters value Dictionary<string, ApiValue> Returns ApiValue implicit operator ApiValue(List<ApiValue>) public static implicit operator ApiValue(List<ApiValue> value) Parameters value List<ApiValue> Returns ApiValue implicit operator ApiValue(DateTime) public static implicit operator ApiValue(DateTime value) Parameters value DateTime Returns ApiValue implicit operator ApiValue(decimal) public static implicit operator ApiValue(decimal value) Parameters value decimal Returns ApiValue implicit operator ApiValue(double) public static implicit operator ApiValue(double value) Parameters value double Returns ApiValue implicit operator ApiValue(int) public static implicit operator ApiValue(int value) Parameters value int Returns ApiValue implicit operator ApiValue(long) public static implicit operator ApiValue(long value) Parameters value long Returns ApiValue implicit operator ApiValue(string) public static implicit operator ApiValue(string value) Parameters value string Returns ApiValue implicit operator byte(ApiValue) public static implicit operator byte(ApiValue value) Parameters value ApiValue Returns byte implicit operator Dictionary<string, ApiValue>(ApiValue) public static implicit operator Dictionary<string, ApiValue>(ApiValue value) Parameters value ApiValue Returns Dictionary<string, ApiValue> implicit operator List<ApiValue>(ApiValue) public static implicit operator List<ApiValue>(ApiValue value) Parameters value ApiValue Returns List<ApiValue> implicit operator DateTime(ApiValue) public static implicit operator DateTime(ApiValue value) Parameters value ApiValue Returns DateTime implicit operator decimal(ApiValue) public static implicit operator decimal(ApiValue value) Parameters value ApiValue Returns decimal implicit operator double(ApiValue) public static implicit operator double(ApiValue value) Parameters value ApiValue Returns double implicit operator int(ApiValue) public static implicit operator int(ApiValue value) Parameters value ApiValue Returns int implicit operator long(ApiValue) public static implicit operator long(ApiValue value) Parameters value ApiValue Returns long implicit operator string(ApiValue) public static implicit operator string(ApiValue value) Parameters value ApiValue Returns string"
  },
  "api/Tool.Sockets.Kernels.BytesCore.html": {
    "href": "api/Tool.Sockets.Kernels.BytesCore.html",
    "title": "Struct BytesCore | Tool.Net",
    "keywords": "Struct BytesCore Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 资源 对象（必须回收，丢失风险大） public struct BytesCore : IBytesCore, IDisposable, IAsyncDisposable Implements IBytesCore IDisposable IAsyncDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors BytesCore(IMemoryOwner<byte>, int) 资源对象 public BytesCore(IMemoryOwner<byte> dataOwner, int length) Parameters dataOwner IMemoryOwner<byte> 可回收数据对象 length int 包含长度 BytesCore(int) 创建一个内存资源对象 public BytesCore(int length) Parameters length int 内存大小 Fields Empty 获取空对象 public static readonly BytesCore Empty Field Value BytesCore Properties Array 获取连续内存 public readonly ArraySegment<byte> Array { get; } Property Value ArraySegment<byte> IsDispose 获取是否被回收 public readonly bool IsDispose { get; } Property Value bool IsEmpty 是否为空对象 public readonly bool IsEmpty { get; } Property Value bool Length 流长度 public readonly int Length { get; } Property Value int Memory 返回数据 public readonly Memory<byte> Memory { get; } Property Value Memory<byte> Span 返回数据 public readonly Span<byte> Span { get; } Property Value Span<byte> Methods Dispose() 使用完后及时回收 public void Dispose() GetIMemoryOwner() 获取内存器核心 public readonly IMemoryOwner<byte> GetIMemoryOwner() Returns IMemoryOwner<byte> SetMemory(in Memory<byte>) 写入有效的数据包 public readonly void SetMemory(in Memory<byte> memory) Parameters memory Memory<byte> SetMemory(in Memory<byte>, int) 写入有效的数据包 public readonly void SetMemory(in Memory<byte> memory, int start) Parameters memory Memory<byte> start int SetMemory(in Span<byte>) 写入有效的数据包 public readonly void SetMemory(in Span<byte> span) Parameters span Span<byte> SetMemory(in Span<byte>, int) 写入有效的数据包 public readonly void SetMemory(in Span<byte> span, int start) Parameters span Span<byte> start int TransferByte() 移交内存器 public readonly BytesCore TransferByte() Returns BytesCore"
  },
  "api/Tool.Sockets.Kernels.CompletedEvent-1.html": {
    "href": "api/Tool.Sockets.Kernels.CompletedEvent-1.html",
    "title": "Delegate CompletedEvent<T> | Tool.Net",
    "keywords": "Delegate CompletedEvent<T> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Socket事件委托 public delegate ValueTask CompletedEvent<T>(UserKey age0, T age1, DateTime age2) where T : Enum Parameters age0 UserKey 事件key age1 T 事件枚举 age2 DateTime 发生时间 Returns ValueTask ValueTask Type Parameters T 连接对象 Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Sockets.Kernels.EnClient.html": {
    "href": "api/Tool.Sockets.Kernels.EnClient.html",
    "title": "Enum EnClient | Tool.Net",
    "keywords": "Enum EnClient Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Client客户端枚举 [Flags] public enum EnClient : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Close = 16 与服务器断开连接时发生 Connect = 1 连接服务器成功时发生 Fail = 2 连接服务器失败时发生 HeartBeat = 32 心跳包事件（推送后触发） Receive = 8 收到服务器数据时发生 Reconnect = 64 （断线后/连接失败）需要重连时触发 SendMsg = 4 向服务器发送数据时发生"
  },
  "api/Tool.Sockets.Kernels.EnClientEventDrive.html": {
    "href": "api/Tool.Sockets.Kernels.EnClientEventDrive.html",
    "title": "Class EnClientEventDrive | Tool.Net",
    "keywords": "Class EnClientEventDrive Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 事件控制抽象类（客户端版） public abstract class EnClientEventDrive Inheritance object EnClientEventDrive Derived NetworkConnect<ISocket> ClientFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors EnClientEventDrive() 默认构造（公共模板信息） protected EnClientEventDrive() Methods CloseAllEvent() 关闭全部事件 public virtual EnClientEventDrive CloseAllEvent() Returns EnClientEventDrive 返回当前对象，快速配置 CloseAllQueue() 全部事件都设置成主要事件 public virtual EnClientEventDrive CloseAllQueue() Returns EnClientEventDrive 返回当前对象，快速配置 IsEvent(EnClient) 获取该事件是否会触发 public virtual bool IsEvent(EnClient enClient) Parameters enClient EnClient EnClient Returns bool bool IsQueue(EnClient) 获取该事件是否在队列任务中运行 public virtual bool IsQueue(EnClient enClient) Parameters enClient EnClient EnClient Returns bool bool OnInterceptor(EnClient, bool) 设置开启或关闭不想收到的消息事件 public virtual bool OnInterceptor(EnClient enClient, bool state) Parameters enClient EnClient EnClient state bool 等于true时生效，将关闭一切的相关事件 Returns bool 返回true时表示设置成功！ OnIsQueue(EnClient, bool) 设置将EnClient事件，载入或不载入 public virtual bool OnIsQueue(EnClient enClient, bool state) Parameters enClient EnClient EnClient state bool 等于true时，事件由队列线程完成，false时交由任务线程自行完成 Returns bool 返回true时表示设置成功！ OpenAllEvent() 开启全部事件 public virtual EnClientEventDrive OpenAllEvent() Returns EnClientEventDrive 返回当前对象，快速配置 OpenAllQueue() 全部事件都设置成队列事件 public virtual EnClientEventDrive OpenAllQueue() Returns EnClientEventDrive 返回当前对象，快速配置"
  },
  "api/Tool.Sockets.Kernels.EnServer.html": {
    "href": "api/Tool.Sockets.Kernels.EnServer.html",
    "title": "Enum EnServer | Tool.Net",
    "keywords": "Enum EnServer Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Server服务器枚举 [Flags] public enum EnServer : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields ClientClose = 32 当处于连接状态的客户端断开时发生 Close = 64 服务端关闭时发生 Connect = 4 客户端连接服务器成功时发生 Create = 1 服务器创建成功时发生 Fail = 2 服务器创建失败时发生 HeartBeat = 128 心跳包事件（接收后触发） Receive = 16 收到客户端数据时发生 SendMsg = 8 向客户端发送数据时发生"
  },
  "api/Tool.Sockets.Kernels.EnServerEventDrive.html": {
    "href": "api/Tool.Sockets.Kernels.EnServerEventDrive.html",
    "title": "Class EnServerEventDrive | Tool.Net",
    "keywords": "Class EnServerEventDrive Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 事件控制抽象类（服务端版） public abstract class EnServerEventDrive Inheritance object EnServerEventDrive Derived NetworkListener<ISocket> ServerFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors EnServerEventDrive() 默认构造（公共模板信息） protected EnServerEventDrive() Methods CloseAllEvent() 关闭全部事件 public virtual EnServerEventDrive CloseAllEvent() Returns EnServerEventDrive 返回当前对象，快速配置 CloseAllQueue() 全部事件都设置成主要事件 public virtual EnServerEventDrive CloseAllQueue() Returns EnServerEventDrive 返回当前对象，快速配置 IsEvent(EnServer) 获取该事件是否会触发 public virtual bool IsEvent(EnServer enServer) Parameters enServer EnServer EnServer Returns bool bool IsQueue(EnServer) 获取该事件是否在队列任务中运行 public virtual bool IsQueue(EnServer enServer) Parameters enServer EnServer EnServer Returns bool bool OnInterceptor(EnServer, bool) 设置开启或关闭不想收到的消息事件 public virtual bool OnInterceptor(EnServer enServer, bool state) Parameters enServer EnServer EnServer state bool 等于true时生效，将关闭一切的相关事件 Returns bool 返回true时表示设置成功！ OnIsQueue(EnServer, bool) 设置将EnServer事件，载入或不载入 public virtual bool OnIsQueue(EnServer enServer, bool state) Parameters enServer EnServer EnServer state bool 等于true时，事件由队列线程完成，false时交由任务线程自行完成 Returns bool 返回true时表示设置成功！ OpenAllEvent() 开启全部事件 public virtual EnServerEventDrive OpenAllEvent() Returns EnServerEventDrive 返回当前对象，快速配置 OpenAllQueue() 全部事件都设置成队列事件 public virtual EnServerEventDrive OpenAllQueue() Returns EnServerEventDrive 返回当前对象，快速配置"
  },
  "api/Tool.Sockets.Kernels.EnumEventQueue.html": {
    "href": "api/Tool.Sockets.Kernels.EnumEventQueue.html",
    "title": "Class EnumEventQueue | Tool.Net",
    "keywords": "Class EnumEventQueue Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 一个Net连接公共的事件消息体 public class EnumEventQueue Inheritance object EnumEventQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods Complete<T>(in UserKey, T, bool, CompletedEvent<T>) 调用TCP事件队列线程 public ValueTask<IGetQueOnEnum> Complete<T>(in UserKey key, T enAction, bool isQueue, CompletedEvent<T> action) where T : Enum Parameters key UserKey IP enAction T 事件枚举 isQueue bool 是否采用队列处理 action CompletedEvent<T> 委托事件 Returns ValueTask<IGetQueOnEnum> Type Parameters T OnInterceptor(EnClient, bool) 设置开启或关闭不想收到的消息事件（当前设置仅在 INetworkCore 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置） public static bool OnInterceptor(EnClient enClient, bool state) Parameters enClient EnClient EnClient state bool 等于true时生效，将关闭一切的相关事件 Returns bool 返回true时表示设置成功！ OnInterceptor(EnServer, bool) 设置开启或关闭不想收到的消息事件（当前设置仅在 INetworkCore 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置） public static bool OnInterceptor(EnServer enServer, bool state) Parameters enServer EnServer EnServer state bool 等于true时生效，将关闭一切的相关事件 Returns bool 返回true时表示设置成功！ OnIsQueue(EnClient, bool) 设置将EnClient事件，载入或不载入，队列池（当前设置仅在 INetworkCore 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置） public static bool OnIsQueue(EnClient enClient, bool state) Parameters enClient EnClient EnClient state bool 等于true时，事件由队列线程完成，false时交由任务线程自行完成 Returns bool 返回true时表示设置成功！ OnIsQueue(EnServer, bool) 设置将EnServer事件，载入或不载入，队列池（当前设置仅在 INetworkCore 接口，相关构造对象还未创建之前设置有效，是这些通信的公共默认配置） public static bool OnIsQueue(EnServer enServer, bool state) Parameters enServer EnServer EnServer state bool 等于true时，事件由队列线程完成，false时交由任务线程自行完成 Returns bool 返回true时表示设置成功！"
  },
  "api/Tool.Sockets.Kernels.IApiResult.html": {
    "href": "api/Tool.Sockets.Kernels.IApiResult.html",
    "title": "Interface IApiResult | Tool.Net",
    "keywords": "Interface IApiResult Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 接口协议 public interface IApiResult Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Keys 数据源 Dictionary<string, ApiValue> Keys { get; } Property Value Dictionary<string, ApiValue> Stream 流资源 Stream Stream { get; set; } Property Value Stream"
  },
  "api/Tool.Sockets.Kernels.IBytesCore.html": {
    "href": "api/Tool.Sockets.Kernels.IBytesCore.html",
    "title": "Interface IBytesCore | Tool.Net",
    "keywords": "Interface IBytesCore Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 内存管理对象 public interface IBytesCore : IDisposable, IAsyncDisposable Inherited Members IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Array 获取连续内存 ArraySegment<byte> Array { get; } Property Value ArraySegment<byte> IsDispose 获取是否被回收 bool IsDispose { get; } Property Value bool Length 流长度 int Length { get; } Property Value int Memory 返回数据 Memory<byte> Memory { get; } Property Value Memory<byte> OnlyData 仅标记作用 bool OnlyData { get; } Property Value bool Span 返回数据 Span<byte> Span { get; } Property Value Span<byte> Methods GetIMemoryOwner() 获取内存器核心 IMemoryOwner<byte> GetIMemoryOwner() Returns IMemoryOwner<byte> TransferByte() 移交内存器 BytesCore TransferByte() Returns BytesCore"
  },
  "api/Tool.Sockets.Kernels.IDataPacket.html": {
    "href": "api/Tool.Sockets.Kernels.IDataPacket.html",
    "title": "Interface IDataPacket | Tool.Net",
    "keywords": "Interface IDataPacket Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 通讯协议模型 public interface IDataPacket : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties ActionID 事件ID byte ActionID { get; } Property Value byte ActionKey 获取对应消息Key ushort ActionKey { get; } Property Value ushort BufferSize int BufferSize { get; } Property Value int Bytes 携带字节包 Memory<byte> Bytes { get; } Property Value Memory<byte> ClassID 通道ID byte ClassID { get; } Property Value byte IpPort 当为转发时，转发给谁的IpPort Ipv4Port IpPort { get; } Property Value Ipv4Port IsErr 当前包是否发生异常 bool IsErr { get; } Property Value bool IsRelay 是否转发数据，默认不转发 bool IsRelay { get; } Property Value bool IsReply 是否需要有回复消息 bool IsReply { get; } Property Value bool IsSend 当前包是发包还是回复 bool IsSend { get; } Property Value bool IsServer 消息是发送给那一端 bool IsServer { get; } Property Value bool OnlyId 唯一ID Guid OnlyId { get; } Property Value Guid Text 文本数据 string Text { get; } Property Value string TextBytes 文本流数据包 Span<byte> TextBytes { get; } Property Value Span<byte> Methods ByteData<T>(in SendBytes<T>, int) 获取完整字节流 void ByteData<T>(in SendBytes<T> sendBytes, int textSize) Parameters sendBytes SendBytes<T> textSize int Type Parameters T Clone() 克隆完整副本 IDataPacket Clone() Returns IDataPacket Exceptions NotImplementedException CopyTo(bool, bool) 拷贝当前数据 IDataPacket CopyTo(bool isbytes, bool istxet) Parameters isbytes bool istxet bool Returns IDataPacket GetAgentBytes<T>(T) 获取转发模式下专用数据对象 SendBytes<T> GetAgentBytes<T>(T client) Parameters client T Returns SendBytes<T> Type Parameters T Exceptions NotImplementedException ResetValue(bool?, bool?, Ipv4Port?) 设置发送状态 void ResetValue(bool? IsSend = null, bool? IsServer = null, Ipv4Port? IpPort = null) Parameters IsSend bool? IsServer bool? IpPort Ipv4Port? SetErr(string) 设置错误信息 void SetErr(string ex) Parameters ex string TotalSize(out int) 获取包总大小 int TotalSize(out int textSize) Parameters textSize int Returns int"
  },
  "api/Tool.Sockets.Kernels.IGetQueOnEnum.html": {
    "href": "api/Tool.Sockets.Kernels.IGetQueOnEnum.html",
    "title": "Interface IGetQueOnEnum | Tool.Net",
    "keywords": "Interface IGetQueOnEnum Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 事件处理接口 public interface IGetQueOnEnum Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Error 获取当前任务可能发生的错误 Exception Error { get; } Property Value Exception IsSuccess 获取当前任务是否完成 bool IsSuccess { get; } Property Value bool Success 获取默认完成的事件结果 public static IGetQueOnEnum Success { get; } Property Value IGetQueOnEnum SuccessAsync 获取默认完成的事件结果 public static ValueTask<IGetQueOnEnum> SuccessAsync { get; } Property Value ValueTask<IGetQueOnEnum> Methods Wait() 等待任务完成！ void Wait()"
  },
  "api/Tool.Sockets.Kernels.INetworkConnect-1.html": {
    "href": "api/Tool.Sockets.Kernels.INetworkConnect-1.html",
    "title": "Interface INetworkConnect<ISocket> | Tool.Net",
    "keywords": "Interface INetworkConnect<ISocket> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 连接通信模型二 public interface INetworkConnect<ISocket> : INetworkConnect, INetworkCore, IDisposable Type Parameters ISocket Inherited Members INetworkConnect.LocalPoint INetworkConnect.Connected INetworkConnect.SetCompleted(CompletedEvent<EnClient>) INetworkConnect.ConnectAsync(string, int) INetworkConnect.Reconnection() INetworkConnect.OnComplete(in UserKey, EnClient) INetworkConnect.OnInterceptor(EnClient, bool) INetworkConnect.OnIsQueue(EnClient, bool) INetworkConnect.IsEvent(EnClient) INetworkConnect.IsQueue(EnClient) INetworkConnect.Close() INetworkCore.Server INetworkCore.Millisecond INetworkCore.IsClose INetworkCore.IsThreadPool INetworkCore.BufferSize IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods CreateSendBytes(int) 创建发送数据需要用的容器 SendBytes<ISocket> CreateSendBytes(int length) Parameters length int Returns SendBytes<ISocket> SendAsync(SendBytes<ISocket>) 发送数据 ValueTask SendAsync(SendBytes<ISocket> sendBytes) Parameters sendBytes SendBytes<ISocket> Returns ValueTask SetReceived(ReceiveEvent<ISocket>) 接收数据委托 void SetReceived(ReceiveEvent<ISocket> Received) Parameters Received ReceiveEvent<ISocket>"
  },
  "api/Tool.Sockets.Kernels.INetworkConnect.html": {
    "href": "api/Tool.Sockets.Kernels.INetworkConnect.html",
    "title": "Interface INetworkConnect | Tool.Net",
    "keywords": "Interface INetworkConnect Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 连接通信模型 public interface INetworkConnect : INetworkCore, IDisposable Inherited Members INetworkCore.Server INetworkCore.Millisecond INetworkCore.IsClose INetworkCore.IsThreadPool INetworkCore.BufferSize IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Connected 是否连接中 bool Connected { get; } Property Value bool LocalPoint 本机通信IP Ipv4Port LocalPoint { get; } Property Value Ipv4Port Methods Close() 关闭当前连接 void Close() ConnectAsync(string, int) 连接服务器 Task ConnectAsync(string ip, int port) Parameters ip string port int Returns Task IsEvent(EnClient) 获取该事件是否会触发 bool IsEvent(EnClient enClient) Parameters enClient EnClient EnClient Returns bool bool IsQueue(EnClient) 获取该事件是否在队列任务中运行 bool IsQueue(EnClient enClient) Parameters enClient EnClient EnClient Returns bool bool OnComplete(in UserKey, EnClient) 可重写的事件 ValueTask<IGetQueOnEnum> OnComplete(in UserKey key, EnClient enAction) Parameters key UserKey enAction EnClient Returns ValueTask<IGetQueOnEnum> OnInterceptor(EnClient, bool) 设置开启或关闭不想收到的消息事件 bool OnInterceptor(EnClient enClient, bool state) Parameters enClient EnClient EnClient state bool 等于true时生效，将关闭一切的相关事件 Returns bool 返回true时表示设置成功！ OnIsQueue(EnClient, bool) 设置将EnClient事件，载入或不载入 bool OnIsQueue(EnClient enClient, bool state) Parameters enClient EnClient EnClient state bool 等于true时，事件由队列线程完成，false时交由任务线程自行完成 Returns bool 返回true时表示设置成功！ Reconnection() 重连 Task<bool> Reconnection() Returns Task<bool> SetCompleted(CompletedEvent<EnClient>) 相关事件委托 void SetCompleted(CompletedEvent<EnClient> Completed) Parameters Completed CompletedEvent<EnClient>"
  },
  "api/Tool.Sockets.Kernels.INetworkCore.html": {
    "href": "api/Tool.Sockets.Kernels.INetworkCore.html",
    "title": "Interface INetworkCore | Tool.Net",
    "keywords": "Interface INetworkCore Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 连接协议顶层接口 public interface INetworkCore : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties BufferSize 表示通讯的包大小 NetBufferSize BufferSize { get; } Property Value NetBufferSize IsClose 是否关闭 bool IsClose { get; } Property Value bool IsThreadPool 是否启用线程池处理接收数据 bool IsThreadPool { get; } Property Value bool Millisecond 监听控制毫秒 int Millisecond { get; } Property Value int Server 服务器信息 UserKey Server { get; } Property Value UserKey"
  },
  "api/Tool.Sockets.Kernels.INetworkListener-1.html": {
    "href": "api/Tool.Sockets.Kernels.INetworkListener-1.html",
    "title": "Interface INetworkListener<ISocket> | Tool.Net",
    "keywords": "Interface INetworkListener<ISocket> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 服务器模型二 public interface INetworkListener<ISocket> : INetworkListener, INetworkCore, IDisposable Type Parameters ISocket Inherited Members INetworkListener.SetCompleted(CompletedEvent<EnServer>) INetworkListener.StartAsync(string, int) INetworkListener.OnComplete(in UserKey, EnServer) INetworkListener.OnInterceptor(EnServer, bool) INetworkListener.OnIsQueue(EnServer, bool) INetworkListener.IsEvent(EnServer) INetworkListener.IsQueue(EnServer) INetworkListener.Stop() INetworkCore.Server INetworkCore.Millisecond INetworkCore.IsClose INetworkCore.IsThreadPool INetworkCore.BufferSize IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties ListClient 当前连接的用户池 IReadOnlyDictionary<UserKey, ISocket> ListClient { get; } Property Value IReadOnlyDictionary<UserKey, ISocket> Methods CreateSendBytes(ISocket, int) 创建发送数据需要用的容器 SendBytes<ISocket> CreateSendBytes(ISocket client, int length) Parameters client ISocket length int Returns SendBytes<ISocket> SendAsync(SendBytes<ISocket>) 发送数据 ValueTask SendAsync(SendBytes<ISocket> sendBytes) Parameters sendBytes SendBytes<ISocket> Returns ValueTask SetReceived(ReceiveEvent<ISocket>) 接收数据委托 void SetReceived(ReceiveEvent<ISocket> Received) Parameters Received ReceiveEvent<ISocket> TrySocket(in UserKey, out ISocket) 根据key获取连接池中的用户 bool TrySocket(in UserKey key, out ISocket client) Parameters key UserKey client ISocket Returns bool"
  },
  "api/Tool.Sockets.Kernels.INetworkListener.html": {
    "href": "api/Tool.Sockets.Kernels.INetworkListener.html",
    "title": "Interface INetworkListener | Tool.Net",
    "keywords": "Interface INetworkListener Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 服务端模型 public interface INetworkListener : INetworkCore, IDisposable Inherited Members INetworkCore.Server INetworkCore.Millisecond INetworkCore.IsClose INetworkCore.IsThreadPool INetworkCore.BufferSize IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods IsEvent(EnServer) 获取该事件是否会触发 bool IsEvent(EnServer enServer) Parameters enServer EnServer EnServer Returns bool bool IsQueue(EnServer) 获取该事件是否在队列任务中运行 bool IsQueue(EnServer enServer) Parameters enServer EnServer EnServer Returns bool bool OnComplete(in UserKey, EnServer) 可重写的事件 ValueTask<IGetQueOnEnum> OnComplete(in UserKey key, EnServer enAction) Parameters key UserKey enAction EnServer Returns ValueTask<IGetQueOnEnum> OnInterceptor(EnServer, bool) 设置开启或关闭不想收到的消息事件 bool OnInterceptor(EnServer enServer, bool state) Parameters enServer EnServer EnServer state bool 等于true时生效，将关闭一切的相关事件 Returns bool 返回true时表示设置成功！ OnIsQueue(EnServer, bool) 设置将EnServer事件，载入或不载入，队列池 bool OnIsQueue(EnServer enServer, bool state) Parameters enServer EnServer EnServer state bool 等于true时，事件由队列线程完成，false时交由任务线程自行完成 Returns bool 返回true时表示设置成功！ SetCompleted(CompletedEvent<EnServer>) 相关事件委托 void SetCompleted(CompletedEvent<EnServer> Completed) Parameters Completed CompletedEvent<EnServer> StartAsync(string, int) 创建服务器 Task StartAsync(string ip, int port) Parameters ip string port int Returns Task Stop() 关闭服务器 void Stop()"
  },
  "api/Tool.Sockets.Kernels.IpParserEvent.html": {
    "href": "api/Tool.Sockets.Kernels.IpParserEvent.html",
    "title": "Delegate IpParserEvent | Tool.Net",
    "keywords": "Delegate IpParserEvent Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Socket IpPort 解释器委托 public delegate ValueTask<Ipv4Port> IpParserEvent(Ipv4Port age0, Ipv4Port age1) Parameters age0 Ipv4Port 带验证信息 age1 Ipv4Port 发送者信息 Returns ValueTask<Ipv4Port> 有效的Ipv4Port Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Sockets.Kernels.Ipv4Port.html": {
    "href": "api/Tool.Sockets.Kernels.Ipv4Port.html",
    "title": "Struct Ipv4Port | Tool.Net",
    "keywords": "Struct Ipv4Port Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 用于IP:Port信息 public readonly struct Ipv4Port : IEquatable<Ipv4Port> Implements IEquatable<Ipv4Port> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Empty 获取一个空类型 public static Ipv4Port Empty { get; } Property Value Ipv4Port Ip 获取 IPAddress 对象 public IPAddress Ip { get; } Property Value IPAddress IsEmpty 判断当前值是否为空 public bool IsEmpty { get; } Property Value bool Port 获取端口号 public ushort Port { get; } Property Value ushort Span 当前IP:Port信息内存数据 public Span<byte> Span { get; } Property Value Span<byte> Methods CopyTo(Span<byte>) 将IP:Port信息拷贝到内存 public void CopyTo(Span<byte> destination) Parameters destination Span<byte> 内存数据 Equals(object) 比较两个值是否一致 public override bool Equals(object obj) Parameters obj object 比较值 Returns bool 是或否 Equals(Ipv4Port) 判断是否一致 public bool Equals(Ipv4Port other) Parameters other Ipv4Port 比较值 Returns bool 是或否 GetHashCode() 获取哈希值 public override int GetHashCode() Returns int 哈希值 ToString() 获取IP:Port信息 public override string ToString() Returns string 结果 Operators operator ==(Ipv4Port, Ipv4Port) 指示两个 Ipv4Port 结构是否相等。 public static bool operator ==(Ipv4Port a, Ipv4Port b) Parameters a Ipv4Port 相等运算符左侧的结构 b Ipv4Port 相等运算符右侧的结构 Returns bool 如果 true 等于 a，则为 b；否则为 false。 implicit operator Ipv4Port(string) 定义从 string 对象到 Ipv4Port 对象的隐式转换。 public static implicit operator Ipv4Port(string ipport) Parameters ipport string 要转换的对象。 Returns Ipv4Port 转换的 Ipv4Port 对象。 implicit operator string(Ipv4Port) 定义从 Ipv4Port 对象到 string 对象的隐式转换。 public static implicit operator string(Ipv4Port ipport) Parameters ipport Ipv4Port 要转换的对象。 Returns string 转换的 string 对象。 implicit operator Ipv4Port(UserKey) 定义从 UserKey 对象到 Ipv4Port 对象的隐式转换。 public static implicit operator Ipv4Port(UserKey ipport) Parameters ipport UserKey 要转换的对象。 Returns Ipv4Port 转换的 Ipv4Port 对象。 operator !=(Ipv4Port, Ipv4Port) 指示两个 Ipv4Port 结构是否不相等。 public static bool operator !=(Ipv4Port a, Ipv4Port b) Parameters a Ipv4Port 不等运算符左侧的结构 b Ipv4Port 不等运算符右侧的结构 Returns bool 如果 true 不等于 a，则为 b；否则为 false。"
  },
  "api/Tool.Sockets.Kernels.KeepAlive.html": {
    "href": "api/Tool.Sockets.Kernels.KeepAlive.html",
    "title": "Class KeepAlive | Tool.Net",
    "keywords": "Class KeepAlive Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 用于长连接的心跳模型 public class KeepAlive Inheritance object KeepAlive Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors KeepAlive(byte, Func<Task>) 创建心跳对象 public KeepAlive(byte TimeInterval, Func<Task> OnStart) Parameters TimeInterval byte 心跳频率 OnStart Func<Task> 心跳触发器内部捕获了异常 Properties KeepAliveObj 获取持久连接协议 public static Memory<byte> KeepAliveObj { get; } Property Value Memory<byte> TcpKeepObj 获取完整心跳协议（Tcp） public static Memory<byte> TcpKeepObj { get; } Property Value Memory<byte> TimeDelay 检查率 public int TimeDelay { get; } Property Value int TimeInterval 间隔时间，不能小于1秒 public long TimeInterval { get; } Property Value long Methods Close() 关闭心跳系统 public void Close() ResetTime() 重置计数器 public void ResetTime()"
  },
  "api/Tool.Sockets.Kernels.MemoryWriteHeap.html": {
    "href": "api/Tool.Sockets.Kernels.MemoryWriteHeap.html",
    "title": "Struct MemoryWriteHeap | Tool.Net",
    "keywords": "Struct MemoryWriteHeap Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 用于处理超过缓冲区大小的包体 public struct MemoryWriteHeap : IBytesCore, IDisposable, IAsyncDisposable Implements IBytesCore IDisposable IAsyncDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors MemoryWriteHeap(int, Memory<byte>) 创建一个内存资源对象 public MemoryWriteHeap(int length, Memory<byte> memory) Parameters length int 内存大小 memory Memory<byte> 缓冲内存移动 Properties Array 返回数据 public readonly ArraySegment<byte> Array { get; } Property Value ArraySegment<byte> EmptyData 一个连续的空内存 public readonly Memory<byte> EmptyData { get; } Property Value Memory<byte> IsDispose 获取是否被回收 public readonly bool IsDispose { get; } Property Value bool IsEmpty 获取是否被清空 public readonly bool IsEmpty { get; } Property Value bool IsSuccess 表示是否完全读取完成 public readonly bool IsSuccess { get; } Property Value bool Length 流长度 public readonly int Length { get; } Property Value int Memory 返回数据 public readonly Memory<byte> Memory { get; } Property Value Memory<byte> Span 返回数据 public readonly Span<byte> Span { get; } Property Value Span<byte> SpareSize 剩余大小 public readonly int SpareSize { get; } Property Value int WriteIndex 写入索引 public readonly int WriteIndex { get; } Property Value int Methods Dispose() 使用完后及时回收 public void Dispose() Empty() 清空标记 public void Empty() GetIMemoryOwner() 获取内存器核心 public readonly IMemoryOwner<byte> GetIMemoryOwner() Returns IMemoryOwner<byte> GetReceiveBytes<T>(in UserKey, T) 获取完整包返回 public ReceiveBytes<T> GetReceiveBytes<T>(in UserKey IpPort, T Client) Parameters IpPort UserKey Key Client T 连接对象 Returns ReceiveBytes<T> Type Parameters T 连接对象 SetCount(int) 写入有效的接收数据包长度 public void SetCount(int count) Parameters count int TransferByte() 移交内存器 public readonly BytesCore TransferByte() Returns BytesCore"
  },
  "api/Tool.Sockets.Kernels.NetBufferSize.html": {
    "href": "api/Tool.Sockets.Kernels.NetBufferSize.html",
    "title": "Enum NetBufferSize | Tool.Net",
    "keywords": "Enum NetBufferSize Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 设置传输大小 public enum NetBufferSize Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Default = 0 默认有系统分配大小 Size1024K = 1048576 1024KB=1048576 字节（带宽大于1000Mbps）谨慎使用 Size128K = 131072 128KB=131072 字节（带宽大于200Mbps）建议使用 Size16K = 16384 16KB=16384字节（带宽在1Mbps----100Mbps）建议使用 Size2048K = 2097152 2048KB=2097152 字节（带宽大于2000Mbps）谨慎使用 Size256K = 262144 256KB=262144 字节（带宽大于400Mbps）建议使用 Size32K = 32768 32KB=32768字节（带宽大于50Mbps）建议使用 Size4096K = 4194304 4096KB=4194304 字节（带宽大于4000Mbps）谨慎使用 Size512K = 524288 512KB=524288 字节（带宽大于800Mbps）建议使用 Size64K = 65536 64KB=65536字节（带宽大于100Mbps）建议使用 Size8192K = 8388608 8192KB=8388608 字节（带宽大于8000Mbps）谨慎使用 Size8K = 8192 8KB=8192字节（带宽小于1Mbps）建议使用"
  },
  "api/Tool.Sockets.Kernels.NetFrameState.html": {
    "href": "api/Tool.Sockets.Kernels.NetFrameState.html",
    "title": "Enum NetFrameState | Tool.Net",
    "keywords": "Enum NetFrameState Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 对NetFrame响应的状态 public enum NetFrameState Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Default = 0 表示，无任何动作！ Exception = 500 表示，发生异常！ OnlyID = 100 表示，因出现新的相同的消息ID，前一个将被强制关闭，以保证唯一性！ SendFail = 300 数据发送失败，请查看详细错误。 Success = 200 表示，被触发了！ Timeout = 400 表示，超时了！"
  },
  "api/Tool.Sockets.Kernels.NetworkConnect-1.html": {
    "href": "api/Tool.Sockets.Kernels.NetworkConnect-1.html",
    "title": "Class NetworkConnect<ISocket> | Tool.Net",
    "keywords": "Class NetworkConnect<ISocket> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 通信公共模板抽象类（客户端版） public abstract class NetworkConnect<ISocket> : EnClientEventDrive, INetworkConnect<ISocket>, INetworkConnect, INetworkCore, IDisposable Type Parameters ISocket Inheritance object EnClientEventDrive NetworkConnect<ISocket> Implements INetworkConnect<ISocket> INetworkConnect INetworkCore IDisposable Derived TcpClientAsync UdpClientAsync WebClientAsync Inherited Members EnClientEventDrive.OnInterceptor(EnClient, bool) EnClientEventDrive.OnIsQueue(EnClient, bool) EnClientEventDrive.IsEvent(EnClient) EnClientEventDrive.IsQueue(EnClient) EnClientEventDrive.OpenAllEvent() EnClientEventDrive.OpenAllQueue() EnClientEventDrive.CloseAllEvent() EnClientEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors NetworkConnect() 默认构造（公共模板信息） protected NetworkConnect() Properties BufferSize 表示通讯的包大小 public virtual NetBufferSize BufferSize { get; protected init; } Property Value NetBufferSize Connected 获取一个值，该值指示 Client 的基础 Socket 是否已连接到远程主机。 public abstract bool Connected { get; } Property Value bool IsClose 标识客户端是否关闭，改状态为调用关闭方法后的状态。 public abstract bool IsClose { get; } Property Value bool IsThreadPool 是否使用线程池调度接收后的数据 默认 true 开启 public virtual bool IsThreadPool { get; set; } Property Value bool LocalPoint 当前设备的连接信息 public abstract Ipv4Port LocalPoint { get; } Property Value Ipv4Port Millisecond 监听控制毫秒 public abstract int Millisecond { get; set; } Property Value int Server 服务器的连接信息 public abstract UserKey Server { get; } Property Value UserKey Methods Close() TCP关闭 public abstract void Close() ConnectAsync(string, int) 异步连接 public abstract Task ConnectAsync(string ip, int port) Parameters ip string 要连接的服务器的ip地址 port int 要连接的服务器的端口 Returns Task CreateSendBytes(int) 创建数据发送空间 public abstract SendBytes<ISocket> CreateSendBytes(int length) Parameters length int 数据大小 Returns SendBytes<ISocket> Dispose() 关闭连接，回收相关资源 public abstract void Dispose() OnComplete(in UserKey, EnClient) 可供开发重写的事件方法 public abstract ValueTask<IGetQueOnEnum> OnComplete(in UserKey key, EnClient enAction) Parameters key UserKey IP：端口 enAction EnClient 消息类型 Returns ValueTask<IGetQueOnEnum> Reconnection() 重连，返回是否重连，如果没有断开是不会重连的 public abstract Task<bool> Reconnection() Returns Task<bool> SendAsync(SendBytes<ISocket>) 异步发送消息 public abstract ValueTask SendAsync(SendBytes<ISocket> sendBytes) Parameters sendBytes SendBytes<ISocket> 数据包 Returns ValueTask SetCompleted(CompletedEvent<EnClient>) 连接、发送、关闭事件 public abstract void SetCompleted(CompletedEvent<EnClient> Completed) Parameters Completed CompletedEvent<EnClient> SetReceived(ReceiveEvent<ISocket>) 接收到数据事件 public abstract void SetReceived(ReceiveEvent<ISocket> Received) Parameters Received ReceiveEvent<ISocket>"
  },
  "api/Tool.Sockets.Kernels.NetworkListener-1.html": {
    "href": "api/Tool.Sockets.Kernels.NetworkListener-1.html",
    "title": "Class NetworkListener<ISocket> | Tool.Net",
    "keywords": "Class NetworkListener<ISocket> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 通信公共模板抽象类（服务端版） public abstract class NetworkListener<ISocket> : EnServerEventDrive, INetworkListener<ISocket>, INetworkListener, INetworkCore, IDisposable Type Parameters ISocket Inheritance object EnServerEventDrive NetworkListener<ISocket> Implements INetworkListener<ISocket> INetworkListener INetworkCore IDisposable Derived TcpServerAsync UdpServerAsync WebServerAsync Inherited Members EnServerEventDrive.OnInterceptor(EnServer, bool) EnServerEventDrive.OnIsQueue(EnServer, bool) EnServerEventDrive.IsEvent(EnServer) EnServerEventDrive.IsQueue(EnServer) EnServerEventDrive.OpenAllEvent() EnServerEventDrive.OpenAllQueue() EnServerEventDrive.CloseAllEvent() EnServerEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors NetworkListener() 默认构造（公共模板信息） protected NetworkListener() Properties BufferSize 表示通讯的包大小 public virtual NetBufferSize BufferSize { get; protected init; } Property Value NetBufferSize IsClose 标识服务端连接是否关闭 public abstract bool IsClose { get; } Property Value bool IsThreadPool 是否使用线程池调度接收后的数据 默认 true 开启 public virtual bool IsThreadPool { get; set; } Property Value bool ListClient 已建立连接的集合 key:UserKey value:Socket public abstract IReadOnlyDictionary<UserKey, ISocket> ListClient { get; } Property Value IReadOnlyDictionary<UserKey, ISocket> Millisecond 监听控制毫秒 public abstract int Millisecond { get; set; } Property Value int Server 服务器创建时的信息 public abstract UserKey Server { get; } Property Value UserKey Methods CreateSendBytes(ISocket, int) 创建数据发送空间 public abstract SendBytes<ISocket> CreateSendBytes(ISocket client, int length) Parameters client ISocket 收数据的对象 length int 数据大小 Returns SendBytes<ISocket> Dispose() 关闭连接，回收相关资源 public abstract void Dispose() OnComplete(in UserKey, EnServer) 可供开发重写的事件方法 public abstract ValueTask<IGetQueOnEnum> OnComplete(in UserKey key, EnServer enAction) Parameters key UserKey 指定发送对象 enAction EnServer 消息类型 Returns ValueTask<IGetQueOnEnum> SendAsync(SendBytes<ISocket>) 异步发送消息 public abstract ValueTask SendAsync(SendBytes<ISocket> sendBytes) Parameters sendBytes SendBytes<ISocket> 数据包 Returns ValueTask SetCompleted(CompletedEvent<EnServer>) 连接、发送、关闭事件 public abstract void SetCompleted(CompletedEvent<EnServer> Completed) Parameters Completed CompletedEvent<EnServer> SetReceived(ReceiveEvent<ISocket>) 接收到数据事件 public abstract void SetReceived(ReceiveEvent<ISocket> Received) Parameters Received ReceiveEvent<ISocket> StartAsync(string, int) 开始异步监听ip地址的端口 public abstract Task StartAsync(string ip, int port) Parameters ip string port int Returns Task Stop() TCP关闭 public abstract void Stop() TrySocket(in UserKey, out ISocket) 根据IP:Port获取对应的连接对象 public abstract bool TrySocket(in UserKey key, out ISocket client) Parameters key UserKey IP:Port client ISocket 连接对象 Returns bool 返回成功状态"
  },
  "api/Tool.Sockets.Kernels.QuicSocket.html": {
    "href": "api/Tool.Sockets.Kernels.QuicSocket.html",
    "title": "Class QuicSocket | Tool.Net",
    "keywords": "Class QuicSocket Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll .Net7 以上支持 public sealed class QuicSocket Inheritance object QuicSocket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Sockets.Kernels.QuicStateObject.html": {
    "href": "api/Tool.Sockets.Kernels.QuicStateObject.html",
    "title": "Class QuicStateObject | Tool.Net",
    "keywords": "Class QuicStateObject Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll .Net7 以上支持 public class QuicStateObject : StateObject Inheritance object StateObject QuicStateObject Inherited Members StateObject.EmptyIpv4Port StateObject.HeadSize StateObject.KeepAliveObj StateObject.CreateSocket(bool, NetBufferSize) StateObject.SocketIsDispose(Socket) StateObject.HashCodeByte(in Memory<byte>) StateObject.QueueUserWorkItem<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.ReceivedAsync<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.GetIpPort(HttpListenerContext) StateObject.GetIpPort(Socket) StateObject.GetIpPort(EndPoint) StateObject.IsIpPort(string, out Ipv4Port) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods GenerateManualCertificate(string) 生成证书《本地证书》 public static X509Certificate2 GenerateManualCertificate(string name) Parameters name string 域名 Returns X509Certificate2"
  },
  "api/Tool.Sockets.Kernels.ReceiveBytes-1.html": {
    "href": "api/Tool.Sockets.Kernels.ReceiveBytes-1.html",
    "title": "Struct ReceiveBytes<ISocket> | Tool.Net",
    "keywords": "Struct ReceiveBytes<ISocket> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Socket 通讯资源 对象（必须回收，丢失风险大） public readonly struct ReceiveBytes<ISocket> : IBytesCore, IDisposable, IAsyncDisposable Type Parameters ISocket Implements IBytesCore IDisposable IAsyncDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors ReceiveBytes(in UserKey, ISocket, IMemoryOwner<byte>, int, bool) 资源对象 public ReceiveBytes(in UserKey key, ISocket client, IMemoryOwner<byte> dataOwner, int length, bool onlydata) Parameters key UserKey IP端口 client ISocket 连接对象 dataOwner IMemoryOwner<byte> 可回收数据对象 length int 包含长度 onlydata bool 数据包完整 ReceiveBytes(in UserKey, ISocket, int, bool) 资源对象 public ReceiveBytes(in UserKey key, ISocket client, int length, bool onlydata) Parameters key UserKey IP端口 client ISocket 连接对象 length int 包含长度 onlydata bool 数据包完整 ReceiveBytes(in UserKey, ISocket, in BytesCore, bool) 资源对象 public ReceiveBytes(in UserKey key, ISocket client, in BytesCore bytesCore, bool onlydata) Parameters key UserKey IP端口 client ISocket 连接对象 bytesCore BytesCore 可回收数据对象 onlydata bool 数据包完整 Properties Array 获取连续内存 public ArraySegment<byte> Array { get; } Property Value ArraySegment<byte> Client 连接对象 public ISocket Client { get; } Property Value ISocket IsDispose 获取是否被回收 public bool IsDispose { get; } Property Value bool Key 身份标识或IP端口 public UserKey Key { get; } Property Value UserKey Length 流长度 public int Length { get; } Property Value int Memory 返回数据 public Memory<byte> Memory { get; } Property Value Memory<byte> OnlyData 表示是否需要验证数据包 public bool OnlyData { get; } Property Value bool Span 返回数据 public Span<byte> Span { get; } Property Value Span<byte> Methods Dispose() 使用完后及时回收 public void Dispose() GetIMemoryOwner() 获取内存器核心 public IMemoryOwner<byte> GetIMemoryOwner() Returns IMemoryOwner<byte> OrderCount() 获取一个仅在测试时有用的数据 public object OrderCount() Returns object SetMemory(in ReadOnlySequence<byte>) 写入有效的发送数据包 public void SetMemory(in ReadOnlySequence<byte> memories) Parameters memories ReadOnlySequence<byte> SetMemory(in Memory<byte>) 写入有效的接收数据包 public void SetMemory(in Memory<byte> memory) Parameters memory Memory<byte> SetMemory(in Span<byte>) 写入有效的发送数据包 public void SetMemory(in Span<byte> span) Parameters span Span<byte> ToString() 文本信息 public override string ToString() Returns string TransferByte() 移交内存器 public BytesCore TransferByte() Returns BytesCore"
  },
  "api/Tool.Sockets.Kernels.ReceiveEvent-1.html": {
    "href": "api/Tool.Sockets.Kernels.ReceiveEvent-1.html",
    "title": "Delegate ReceiveEvent<T> | Tool.Net",
    "keywords": "Delegate ReceiveEvent<T> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Socket接收数据委托 public delegate ValueTask ReceiveEvent<T>(ReceiveBytes<T> age0) Parameters age0 ReceiveBytes<T> 数据包 Returns ValueTask ValueTask Type Parameters T 连接对象 Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Sockets.Kernels.SendBytes-1.html": {
    "href": "api/Tool.Sockets.Kernels.SendBytes-1.html",
    "title": "Struct SendBytes<ISocket> | Tool.Net",
    "keywords": "Struct SendBytes<ISocket> Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Socket 通讯资源 对象（必须回收，丢失风险大） public readonly struct SendBytes<ISocket> : IBytesCore, IDisposable, IAsyncDisposable Type Parameters ISocket Implements IBytesCore IDisposable IAsyncDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors SendBytes(ISocket, IMemoryOwner<byte>, int, bool) 资源对象 public SendBytes(ISocket client, IMemoryOwner<byte> dataOwner, int length, bool onlydata) Parameters client ISocket 连接对象 dataOwner IMemoryOwner<byte> 可回收数据对象 length int 包含长度 onlydata bool 数据包完整 SendBytes(ISocket, int, bool) 资源对象 public SendBytes(ISocket client, int length, bool onlydata) Parameters client ISocket 连接对象 length int 包含长度 onlydata bool 数据包完整 SendBytes(ISocket, in BytesCore, bool) 资源对象 public SendBytes(ISocket client, in BytesCore bytesCore, bool onlydata) Parameters client ISocket 连接对象 bytesCore BytesCore 可回收数据对象 onlydata bool 数据包完整 Properties Array 获取连续内存 public ArraySegment<byte> Array { get; } Property Value ArraySegment<byte> Client 连接对象 public ISocket Client { get; } Property Value ISocket IsDispose 获取是否被回收 public bool IsDispose { get; } Property Value bool Length 流长度 public int Length { get; } Property Value int Memory 返回数据 public Memory<byte> Memory { get; } Property Value Memory<byte> OnlyData 表示是否需要验证数据包 public bool OnlyData { get; } Property Value bool Span 返回数据 public Span<byte> Span { get; } Property Value Span<byte> Methods Dispose() 使用完后及时回收 public void Dispose() GetIMemoryOwner() 获取内存器核心 public IMemoryOwner<byte> GetIMemoryOwner() Returns IMemoryOwner<byte> GetMemory() 获取有效的发送数据包 public Memory<byte> GetMemory() Returns Memory<byte> GetMemory(uint, byte) 获取有效的发送数据包(UDP协议版) public Memory<byte> GetMemory(uint orderCount, byte code = 0) Parameters orderCount uint 序列ID code byte 协议代号 Returns Memory<byte> SetMemory(in ArraySegment<byte>, int) 写入有效的发送数据包 public void SetMemory(in ArraySegment<byte> bytes, int start = 0) Parameters bytes ArraySegment<byte> start int SetMemory(in Memory<byte>, int) 写入有效的发送数据包 public void SetMemory(in Memory<byte> memory, int start = 0) Parameters memory Memory<byte> start int SetMemory(in Span<byte>, int) 写入有效的发送数据包 public void SetMemory(in Span<byte> span, int start = 0) Parameters span Span<byte> start int Slice(int, int) 用于进行输出缩减包大小 public SendBytes<ISocket> Slice(int start, int length) Parameters start int 只能是0 length int 小于总大小的数 Returns SendBytes<ISocket> Exceptions Exception ToString() 文本信息 public override string ToString() Returns string TransferByte() 移交内存器 public BytesCore TransferByte() Returns BytesCore"
  },
  "api/Tool.Sockets.Kernels.SocketEventPool.html": {
    "href": "api/Tool.Sockets.Kernels.SocketEventPool.html",
    "title": "Class SocketEventPool | Tool.Net",
    "keywords": "Class SocketEventPool Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll Socket异步传输池 public class SocketEventPool Inheritance object SocketEventPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods Pop() public static SocketAsyncEventArgs Pop() Returns SocketAsyncEventArgs"
  },
  "api/Tool.Sockets.Kernels.StateObject.html": {
    "href": "api/Tool.Sockets.Kernels.StateObject.html",
    "title": "Class StateObject | Tool.Net",
    "keywords": "Class StateObject Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 通信公共基础类 public abstract class StateObject Inheritance object StateObject Derived QuicStateObject TcpStateObject UdpStateObject WebStateObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Fields EmptyIpv4Port 默认IP信息 protected static readonly Ipv4Port EmptyIpv4Port Field Value Ipv4Port HeadSize 默认大小 public const int HeadSize = 6 Field Value int Properties KeepAliveObj 获取持久连接协议 public Span<byte> KeepAliveObj { get; } Property Value Span<byte> Methods CreateSocket(bool, NetBufferSize) 创建用于连接的 Socket 对象 public static Socket CreateSocket(bool isTcp, NetBufferSize bufferSize) Parameters isTcp bool 是否是Tcp bufferSize NetBufferSize 缓冲区枚举 Returns Socket Socket 对象 GetIpPort(EndPoint) 根据EndPoint获取IP加端口 public static Ipv4Port GetIpPort(EndPoint iep) Parameters iep EndPoint Returns Ipv4Port GetIpPort(HttpListenerContext) 根据HttpListenerContext获取IP加端口 public static Ipv4Port GetIpPort(HttpListenerContext Context) Parameters Context HttpListenerContext Returns Ipv4Port GetIpPort(Socket) 根据Socket获取IP加端口 public static Ipv4Port GetIpPort(Socket Client) Parameters Client Socket Returns Ipv4Port HashCodeByte(in Memory<byte>) 根据字节获取哈希值 public static int HashCodeByte(in Memory<byte> bytes) Parameters bytes Memory<byte> 字节 Returns int 哈希值 IsIpPort(string, out Ipv4Port) 根据传入字符串验证是否是IP加端口 public static bool IsIpPort(string IpPort, out Ipv4Port ipnum) Parameters IpPort string IP+端口 ipnum Ipv4Port Returns bool QueueUserWorkItem<T>(ReceiveEvent<T>, ReceiveBytes<T>) 任务事件线程池 public static void QueueUserWorkItem<T>(ReceiveEvent<T> receive, ReceiveBytes<T> data) Parameters receive ReceiveEvent<T> 委托 data ReceiveBytes<T> 数据 Type Parameters T 类型 ReceivedAsync<T>(ReceiveEvent<T>, ReceiveBytes<T>) 任务事件单实例 public static ValueTask ReceivedAsync<T>(ReceiveEvent<T> receive, ReceiveBytes<T> data) Parameters receive ReceiveEvent<T> 委托 data ReceiveBytes<T> 数据 Returns ValueTask 任务结果 Type Parameters T 类型 SocketIsDispose(Socket) 获取Socket Disposed 属性 public static bool SocketIsDispose(Socket socket) Parameters socket Socket Returns bool"
  },
  "api/Tool.Sockets.Kernels.TcpStateObject.html": {
    "href": "api/Tool.Sockets.Kernels.TcpStateObject.html",
    "title": "Class TcpStateObject | Tool.Net",
    "keywords": "Class TcpStateObject Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起 public class TcpStateObject : StateObject Inheritance object StateObject TcpStateObject Inherited Members StateObject.EmptyIpv4Port StateObject.HeadSize StateObject.KeepAliveObj StateObject.CreateSocket(bool, NetBufferSize) StateObject.SocketIsDispose(Socket) StateObject.HashCodeByte(in Memory<byte>) StateObject.QueueUserWorkItem<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.ReceivedAsync<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.GetIpPort(HttpListenerContext) StateObject.GetIpPort(Socket) StateObject.GetIpPort(EndPoint) StateObject.IsIpPort(string, out Ipv4Port) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TcpStateObject(Socket) 构造包信息 public TcpStateObject(Socket Client) Parameters Client Socket 对象 TcpStateObject(Socket, int, bool, ReceiveEvent<Socket>) 有参构造 public TcpStateObject(Socket Client, int DataLength, bool OnlyData, ReceiveEvent<Socket> received) Parameters Client Socket 对象 DataLength int 包的大小 OnlyData bool 数据唯一标识 received ReceiveEvent<Socket> 委托函数 Properties Client 为 TCP 网络服务提供客户端连接。 public Socket Client { get; set; } Property Value Socket DataLength 可用最大空间 public int DataLength { get; } Property Value int IpPort 当前对象唯一的IP：端口 public UserKey IpPort { get; set; } Property Value UserKey OnlyData 是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接） public bool OnlyData { get; } Property Value bool Methods ClientClose() 关闭连接 public void ClientClose() Close() 回收对象所以资源 public void Close() IsConnected(Socket) 根据Socket获取当前连接是否已经断开 public static bool IsConnected(Socket Client) Parameters Client Socket Returns bool"
  },
  "api/Tool.Sockets.Kernels.UdpStateObject.html": {
    "href": "api/Tool.Sockets.Kernels.UdpStateObject.html",
    "title": "Class UdpStateObject | Tool.Net",
    "keywords": "Class UdpStateObject Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起 public class UdpStateObject : StateObject Inheritance object StateObject UdpStateObject Inherited Members StateObject.EmptyIpv4Port StateObject.HeadSize StateObject.KeepAliveObj StateObject.CreateSocket(bool, NetBufferSize) StateObject.SocketIsDispose(Socket) StateObject.HashCodeByte(in Memory<byte>) StateObject.QueueUserWorkItem<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.ReceivedAsync<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.GetIpPort(HttpListenerContext) StateObject.GetIpPort(Socket) StateObject.GetIpPort(EndPoint) StateObject.IsIpPort(string, out Ipv4Port) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors UdpStateObject(IUdpCore, int, bool, ReceiveEvent<IUdpCore>) 有参构造 public UdpStateObject(IUdpCore udp, int DataLength, bool OnlyData, ReceiveEvent<IUdpCore> Received) Parameters udp IUdpCore udp信息 DataLength int 包的大小 OnlyData bool 是否保证有效 Received ReceiveEvent<IUdpCore> 完成时事件 Properties DataLength 可用最大空间 public int DataLength { get; } Property Value int IpPort 当前对象唯一的IP：端口 public UserKey IpPort { get; } Property Value UserKey OnlyData 是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接） public bool OnlyData { get; } Property Value bool Udp 当前有个通信信息 public IUdpCore Udp { get; } Property Value IUdpCore Methods Close() 回收对象所以资源 public void Close() IsConnected(Socket) 根据Socket获取当前连接是否已经断开 public static bool IsConnected(Socket Client) Parameters Client Socket Returns bool IsOnLine(int) 当前连接是否在线 public bool IsOnLine(int receiveTimeout) Parameters receiveTimeout int 参数为超时最大值 Returns bool"
  },
  "api/Tool.Sockets.Kernels.UserKey.html": {
    "href": "api/Tool.Sockets.Kernels.UserKey.html",
    "title": "Struct UserKey | Tool.Net",
    "keywords": "Struct UserKey Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 用于通信模块Key数据模型 public readonly struct UserKey : IEquatable<UserKey> Implements IEquatable<UserKey> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors UserKey(string) 将常见Key值转换成可用的UserKey public UserKey(string key) Parameters key string string值 UserKey(Ipv4Port) 将常见Key值转换成可用的UserKey public UserKey(Ipv4Port ipv4Port) Parameters ipv4Port Ipv4Port UserKey值 Properties Empty 获取一个空类型 public static UserKey Empty { get; } Property Value UserKey IsEmpty 判断当前值是否为空 public bool IsEmpty { get; } Property Value bool IsIpv4Port 判断当前值是否是Ipv4Port值 public bool IsIpv4Port { get; } Property Value bool Span 当前Key信息内存数据 public Span<byte> Span { get; } Property Value Span<byte> Methods Equals(object) 比较两个值是否一致 public override bool Equals(object obj) Parameters obj object 比较值 Returns bool 是或否 Equals(UserKey) 判断是否一致 public bool Equals(UserKey other) Parameters other UserKey 比较值 Returns bool 是或否 GetHashCode() 获取哈希值 public override int GetHashCode() Returns int 哈希值 ToString() 获取UserKey信息 public override string ToString() Returns string 结果 Operators operator ==(UserKey, Ipv4Port) 指示UserKey 和 Ipv4Port 结构是否相等。 public static bool operator ==(UserKey a, Ipv4Port b) Parameters a UserKey 相等运算符左侧的结构 b Ipv4Port 相等运算符右侧的结构 Returns bool 如果 true 等于 a，则为 b；否则为 false。 operator ==(UserKey, UserKey) 指示两个 UserKey 结构是否相等。 public static bool operator ==(UserKey a, UserKey b) Parameters a UserKey 相等运算符左侧的结构 b UserKey 相等运算符右侧的结构 Returns bool 如果 true 等于 a，则为 b；否则为 false。 implicit operator UserKey(string) 定义从 string 对象到 UserKey 对象的隐式转换。 public static implicit operator UserKey(string ipport) Parameters ipport string 要转换的对象。 Returns UserKey 转换的 UserKey 对象。 implicit operator UserKey(Ipv4Port) 定义从 Ipv4Port 对象到 UserKey 对象的隐式转换。 public static implicit operator UserKey(Ipv4Port ipport) Parameters ipport Ipv4Port 要转换的对象。 Returns UserKey 转换的 UserKey 对象。 implicit operator string(UserKey) 定义从 UserKey 对象到 string 对象的隐式转换。 public static implicit operator string(UserKey ipport) Parameters ipport UserKey 要转换的对象。 Returns string 转换的 string 对象。 operator !=(UserKey, Ipv4Port) 指示UserKey 和 Ipv4Port 结构是否不相等。 public static bool operator !=(UserKey a, Ipv4Port b) Parameters a UserKey 不等运算符左侧的结构 b Ipv4Port 不等运算符右侧的结构 Returns bool 如果 true 不等于 a，则为 b；否则为 false。 operator !=(UserKey, UserKey) 指示两个 UserKey 结构是否不相等。 public static bool operator !=(UserKey a, UserKey b) Parameters a UserKey 不等运算符左侧的结构 b UserKey 不等运算符右侧的结构 Returns bool 如果 true 不等于 a，则为 b；否则为 false。"
  },
  "api/Tool.Sockets.Kernels.WebStateObject.html": {
    "href": "api/Tool.Sockets.Kernels.WebStateObject.html",
    "title": "Class WebStateObject | Tool.Net",
    "keywords": "Class WebStateObject Namespace Tool.Sockets.Kernels Assembly Tool.Net.dll 对异步接收时的对象状态的封装，将Websocket与接收到的数据封装在一起 public class WebStateObject : StateObject Inheritance object StateObject WebStateObject Inherited Members StateObject.EmptyIpv4Port StateObject.HeadSize StateObject.KeepAliveObj StateObject.CreateSocket(bool, NetBufferSize) StateObject.SocketIsDispose(Socket) StateObject.HashCodeByte(in Memory<byte>) StateObject.QueueUserWorkItem<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.ReceivedAsync<T>(ReceiveEvent<T>, ReceiveBytes<T>) StateObject.GetIpPort(HttpListenerContext) StateObject.GetIpPort(Socket) StateObject.GetIpPort(EndPoint) StateObject.IsIpPort(string, out Ipv4Port) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors WebStateObject(WebSocketContext, int) 服务商构造 public WebStateObject(WebSocketContext context, int DataLength) Parameters context WebSocketContext 对象 DataLength int 包的大小 WebStateObject(in UserKey, WebSocket, int) 连接者构造 public WebStateObject(in UserKey SocketKey, WebSocket Client, int DataLength) Parameters SocketKey UserKey 连接标识 Client WebSocket 对象 DataLength int 包的大小 Properties Client 为 WebSocket 网络服务提供客户端连接。 public WebSocket Client { get; } Property Value WebSocket ListData 接收的数据 public Memory<byte> ListData { get; } Property Value Memory<byte> SocketKey 当前对象唯一的连接票据 public UserKey SocketKey { get; } Property Value UserKey State 返回 WebSocket 连接的当前状态。 public WebSocketState State { get; } Property Value WebSocketState Remarks WebSocket 连接的当前状态。 WebSocketContext 握手后的重要数据 public WebSocketContext WebSocketContext { get; } Property Value WebSocketContext Methods AbortAsync() 关闭当前用户连接以及数据 public Task AbortAsync() Returns Task Close() 回收对象所以资源 public void Close() IsConnected(WebSocket) 根据WebContext获取当前连接是否已经断开 public static bool IsConnected(WebSocket Client) Parameters Client WebSocket Returns bool IsWebIpEffective(string) 返回可用的IP信息 public static Task<string> IsWebIpEffective(string ip) Parameters ip string Returns Task<string>"
  },
  "api/Tool.Sockets.Kernels.html": {
    "href": "api/Tool.Sockets.Kernels.html",
    "title": "Namespace Tool.Sockets.Kernels | Tool.Net",
    "keywords": "Namespace Tool.Sockets.Kernels Classes EnClientEventDrive 事件控制抽象类（客户端版） EnServerEventDrive 事件控制抽象类（服务端版） EnumEventQueue 一个Net连接公共的事件消息体 KeepAlive 用于长连接的心跳模型 NetworkConnect<ISocket> 通信公共模板抽象类（客户端版） NetworkListener<ISocket> 通信公共模板抽象类（服务端版） QuicSocket .Net7 以上支持 QuicStateObject .Net7 以上支持 SocketEventPool Socket异步传输池 StateObject 通信公共基础类 TcpStateObject 对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起 UdpStateObject 对异步接收时的对象状态的封装，将socket与接收到的数据封装在一起 WebStateObject 对异步接收时的对象状态的封装，将Websocket与接收到的数据封装在一起 Structs ApiValue 存储对象 BytesCore 资源 对象（必须回收，丢失风险大） Ipv4Port 用于IP:Port信息 MemoryWriteHeap 用于处理超过缓冲区大小的包体 ReceiveBytes<ISocket> Socket 通讯资源 对象（必须回收，丢失风险大） SendBytes<ISocket> Socket 通讯资源 对象（必须回收，丢失风险大） UserKey 用于通信模块Key数据模型 Interfaces IApiResult 接口协议 IBytesCore 内存管理对象 IDataPacket 通讯协议模型 IGetQueOnEnum 事件处理接口 INetworkConnect 连接通信模型 INetworkConnect<ISocket> 连接通信模型二 INetworkCore 连接协议顶层接口 INetworkListener 服务端模型 INetworkListener<ISocket> 服务器模型二 Enums ApiValue.ValueType 用于表示当前类型的实际值 EnClient Client客户端枚举 EnServer Server服务器枚举 NetBufferSize 设置传输大小 NetFrameState 对NetFrame响应的状态 Delegates CompletedEvent<T> Socket事件委托 IpParserEvent Socket IpPort 解释器委托 ReceiveEvent<T> Socket接收数据委托"
  },
  "api/Tool.Sockets.NetFrame.ApiPacket.html": {
    "href": "api/Tool.Sockets.NetFrame.ApiPacket.html",
    "title": "Class ApiPacket | Tool.Net",
    "keywords": "Class ApiPacket Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 接口请求数据包 public class ApiPacket Inheritance object ApiPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ApiPacket(byte, byte) 数据包初始化 public ApiPacket(byte ClassID, byte ActionID) Parameters ClassID byte 类ID ActionID byte 方法ID ApiPacket(byte, byte, int) 数据包初始化 public ApiPacket(byte ClassID, byte ActionID, int Millisecond) Parameters ClassID byte 类ID ActionID byte 方法ID Millisecond int 请求等待的毫秒 ApiPacket(byte, byte, int, bool) 数据包初始化 public ApiPacket(byte ClassID, byte ActionID, int Millisecond, bool IsReply) Parameters ClassID byte 类ID ActionID byte 方法ID Millisecond int 请求等待的毫秒 IsReply bool 是否需要有回复消息 Properties ActionID 请求的方法ID public byte ActionID { get; } Property Value byte Bytes 当前消息携带的数据流 public ArraySegment<byte> Bytes { get; set; } Property Value ArraySegment<byte> ClassID 请求的类ID public byte ClassID { get; } Property Value byte IsReply 是否需要有回复消息 public bool IsReply { get; } Property Value bool Millisecond 默认等待超时时间为60秒 public int Millisecond { get; } Property Value int Methods Remove(string) 从发送数据中移除所指定的键的值 public bool Remove(string key) Parameters key string 键 Returns bool 是否成功移除 Set(object) 加入数据,如果有则修改（以虚构对象参数传入，请确保已认真读注释。）（支持传输转义） public void Set(object dictionary) Parameters dictionary object 虚构对象 Set(string, object) 加入数据（如果有则修改） public void Set(string key, object value) Parameters key string 键 value object 值（支持传输转义） TryGet(string, out string) 获取键的值 public bool TryGet(string key, out string value) Parameters key string 键 value string 要返回的值 Returns bool 是否存在"
  },
  "api/Tool.Sockets.NetFrame.ClientFrame.html": {
    "href": "api/Tool.Sockets.NetFrame.ClientFrame.html",
    "title": "Class ClientFrame | Tool.Net",
    "keywords": "Class ClientFrame Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 封装的一个TCP框架（客户端） public class ClientFrame : EnClientEventDrive Inheritance object EnClientEventDrive ClientFrame Inherited Members EnClientEventDrive.OnInterceptor(EnClient, bool) EnClientEventDrive.OnIsQueue(EnClient, bool) EnClientEventDrive.IsEvent(EnClient) EnClientEventDrive.IsQueue(EnClient) EnClientEventDrive.OpenAllEvent() EnClientEventDrive.OpenAllQueue() EnClientEventDrive.CloseAllEvent() EnClientEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ClientFrame() 无参构造 public ClientFrame() ClientFrame(NetBufferSize) 初始化包 public ClientFrame(NetBufferSize bufferSize) Parameters bufferSize NetBufferSize 收包规范 ClientFrame(NetBufferSize, bool) 初始化包 public ClientFrame(NetBufferSize bufferSize, bool IsReconnect) Parameters bufferSize NetBufferSize 收包规范 IsReconnect bool 是否在与服务器断开后主动重连？ Properties Connected 获取一个值，该值指示 Client 的基础 Socket 是否已连接到远程主机。 public bool Connected { get; } Property Value bool IsClose 标识客户端是否关闭 public bool IsClose { get; } Property Value bool IsThreadPool 是否使用线程池调度接收后的数据（允许使用者初始化时设置，消息是否有序获取） 默认 true 开启 public bool IsThreadPool { get; init; } Property Value bool LocalPoint 当前设备的连接信息 public Ipv4Port LocalPoint { get; } Property Value Ipv4Port Server 服务器的连接信息 public UserKey Server { get; } Property Value UserKey Methods AddKeepAlive(byte) 添加持久化消息（心跳），防止特殊情况下的断开连接 public void AddKeepAlive(byte TimeInterval) Parameters TimeInterval byte Close() 关闭连接，断开处于连接状态的服务器 public void Close() ConnectAsync(int) 异步连接，连接ip地址为127.0.0.1 public Task ConnectAsync(int port) Parameters port int 要连接的服务器的端口 Returns Task ConnectAsync(string, int) 异步连接 public Task ConnectAsync(string ip, int port) Parameters ip string 要连接的服务器的ip地址 port int 要连接的服务器的端口 Returns Task Reconnection() 重连，返回是否重连，如果没有断开是不会重连的 public Task<bool> Reconnection() Returns Task<bool> Send(ApiPacket) 同步发送消息 public NetResponse Send(ApiPacket api) Parameters api ApiPacket 接口调用信息 Returns NetResponse SendAsync(ApiPacket) 异步发送消息 public ValueTask<NetResponse> SendAsync(ApiPacket api) Parameters api ApiPacket 接口调用信息 Returns ValueTask<NetResponse> SendRelay(string, ApiPacket) 同步发送消息（转发给指定客户端） public NetResponse SendRelay(string IpPort, ApiPacket api) Parameters IpPort string 事件处理的服务器 api ApiPacket 接口调用信息 Returns NetResponse SendRelayAsync(string, ApiPacket) 异步发送消息（转发给指定客户端） public ValueTask<NetResponse> SendRelayAsync(string IpPort, ApiPacket api) Parameters IpPort string 事件处理的服务器 api ApiPacket 接口调用信息 Returns ValueTask<NetResponse> SetCompleted(CompletedEvent<EnClient>) 连接、发送、关闭事件 EnClient public void SetCompleted(CompletedEvent<EnClient> Completed) Parameters Completed CompletedEvent<EnClient>"
  },
  "api/Tool.Sockets.NetFrame.ClientFrameList.html": {
    "href": "api/Tool.Sockets.NetFrame.ClientFrameList.html",
    "title": "Class ClientFrameList | Tool.Net",
    "keywords": "Class ClientFrameList Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 用于连接多服务器，分发消息的客户端帮助类，可以保证线程安全，均衡分发数据包。 public class ClientFrameList : IDisposable Inheritance object ClientFrameList Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ClientFrameList(IEnumerable<ClientFrame>) 初始化一次性加入队列服务器 public ClientFrameList(IEnumerable<ClientFrame> clientFrames) Parameters clientFrames IEnumerable<ClientFrame> 队列服务器 ClientFrameList(IList<ClientFrame>) 初始化一次性加入队列服务器 public ClientFrameList(IList<ClientFrame> clientFrames) Parameters clientFrames IList<ClientFrame> 队列服务器 ClientFrameList(int) 初始化 可为空 public ClientFrameList(int capacity) Parameters capacity int 默认大小 ClientFrameList(params ClientFrame[]) 初始化一次性加入队列服务器 public ClientFrameList(params ClientFrame[] clientFrames) Parameters clientFrames ClientFrame[] 队列服务器 Properties ClientCount 当前拥有的队列数 public int ClientCount { get; } Property Value int this[int] 返回加入的ClientFrame对象 public ClientFrame this[int i] { get; } Parameters i int 下标 Property Value ClientFrame 位于指定索引处的元素。 Methods AddClientFrame(ClientFrame) 主动添加客户端服务 public void AddClientFrame(ClientFrame clientFrame) Parameters clientFrame ClientFrame 客户端 Dispose() 回收连接对象池，释放相关的全部连接 public void Dispose() Reconnection(int) 重连，返回是否重连，如果没有断开是不会重连的 public Task<bool> Reconnection(int i) Parameters i int 要重连的下标 Returns Task<bool> Send(int, ApiPacket) 同步发送消息（多服务器协调发送） public NetResponse Send(int i, ApiPacket api) Parameters i int 向那个服务器端口发包 api ApiPacket 接口调用信息 Returns NetResponse 返回数据包 Send(ApiPacket, out int) 同步发送消息（多服务器协调发送） public NetResponse Send(ApiPacket api, out int i) Parameters api ApiPacket 接口调用信息 i int 返回成功发送包的下标 Returns NetResponse 返回数据包 SendAsync(int, ApiPacket) 异步发送消息（多服务器协调发送） public ValueTask<NetResponse> SendAsync(int i, ApiPacket api) Parameters i int 向那个服务器端口发包 api ApiPacket 接口调用信息 Returns ValueTask<NetResponse> SendAsync(ApiPacket) 异步发送消息（多服务器协调发送） public ValueTask<(NetResponse, int i)> SendAsync(ApiPacket api) Parameters api ApiPacket 接口调用信息 Returns ValueTask<(NetResponse, int i)> 返回数据包，以及下标 SendRelay(string, ApiPacket, out int) 同步发送消息（多服务器协调发送+转发给指定客户端） public NetResponse SendRelay(string IpPort, ApiPacket api, out int i) Parameters IpPort string 事件处理的服务器 api ApiPacket 接口调用信息 i int 返回成功发送包的下标 Returns NetResponse 返回数据包 SendRelayAsync(string, ApiPacket) 异步发送消息（多服务器协调发送+转发给指定客户端） public ValueTask<(NetResponse, int i)> SendRelayAsync(string IpPort, ApiPacket api) Parameters IpPort string 事件处理的服务器 api ApiPacket 接口调用信息 Returns ValueTask<(NetResponse, int i)> 返回数据包，以及下标 Events Completed 绑定多服务器队列统一消息 public event CompletedEvent<EnClient> Completed Event Type CompletedEvent<EnClient>"
  },
  "api/Tool.Sockets.NetFrame.DataBase.html": {
    "href": "api/Tool.Sockets.NetFrame.DataBase.html",
    "title": "Class DataBase | Tool.Net",
    "keywords": "Class DataBase Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 提供的唯一数据包接口类，必须实现 public abstract class DataBase : IDisposable Inheritance object DataBase Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties Array 消息接收的字节流数据 public ArraySegment<byte> Array { get; } Property Value ArraySegment<byte> Bytes 消息接收的字节流数据 public Span<byte> Bytes { get; } Property Value Span<byte> Form 发送的参数 public IReadOnlyDictionary<string, string> Form { get; } Property Value IReadOnlyDictionary<string, string> IPEndPoint 数据交互的方 public Ipv4Port IPEndPoint { get; } Property Value Ipv4Port IsReply 是否需要有回复消息 public bool IsReply { get; } Property Value bool MemoryBytes 消息接收的字节流数据 public Memory<byte> MemoryBytes { get; } Property Value Memory<byte> OnlyID 消息ID public string OnlyID { get; } Property Value string OnlyId 消息ID public Guid OnlyId { get; } Property Value Guid Methods Dispose() 用于开发者重写的回收（可回收使用的非托管资源） protected virtual void Dispose() Initialize(DataNet) 当消息真实有效时被执行，默认返回执行。（该方法是用于给使用者重写的） protected virtual bool Initialize(DataNet dataTcp) Parameters dataTcp DataNet 调用方法信息 Returns bool Json(object) 完成结果,返回Json格式数据 public IGoOut Json(object json) Parameters json object Json格式数据 Returns IGoOut JsonAsync(object) 完成结果,返回Json格式数据 public Task<IGoOut> JsonAsync(object json) Parameters json object Json格式数据 Returns Task<IGoOut> NetException(Exception) 当前API消息发生异常时触发 protected virtual void NetException(Exception ex) Parameters ex Exception 异常信息 Ok() 默认完成结果 public IGoOut Ok() Returns IGoOut Ok(string, ArraySegment<byte>) 完成结果,并输出类容 public IGoOut Ok(string text, ArraySegment<byte> bytes) Parameters text string 文本类容 bytes ArraySegment<byte> 字节流类容 Returns IGoOut OkAsync() 默认完成结果 public Task<IGoOut> OkAsync() Returns Task<IGoOut> OkAsync(string, ArraySegment<byte>) 完成结果,并输出类容 public Task<IGoOut> OkAsync(string text, ArraySegment<byte> bytes) Parameters text string 文本类容 bytes ArraySegment<byte> 字节流类容 Returns Task<IGoOut> Write(ArraySegment<byte>) 完成结果,并输出字节流类容 public IGoOut Write(ArraySegment<byte> bytes) Parameters bytes ArraySegment<byte> 字节流类容 Returns IGoOut Write(string) 完成结果,并输出文本类容 public IGoOut Write(string text) Parameters text string 文本类容 Returns IGoOut WriteAsync(ArraySegment<byte>) 完成结果,并输出字节流类容 public Task<IGoOut> WriteAsync(ArraySegment<byte> bytes) Parameters bytes ArraySegment<byte> 字节流类容 Returns Task<IGoOut> WriteAsync(string) 完成结果,并输出文本类容 public Task<IGoOut> WriteAsync(string text) Parameters text string 文本类容 Returns Task<IGoOut>"
  },
  "api/Tool.Sockets.NetFrame.DataNet.html": {
    "href": "api/Tool.Sockets.NetFrame.DataNet.html",
    "title": "Class DataNet | Tool.Net",
    "keywords": "Class DataNet Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 针对于一般处理程序，备注一般处理程序必须继承于（DataBase 类才会生效） 所有状态（用于更好的使用 自定义通讯协议规范，实现Api接口） [Serializable] [AttributeUsage(AttributeTargets.Constructor|AttributeTargets.Method, Inherited = false)] public class DataNet : Attribute Inheritance object Attribute DataNet Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DataNet(byte) 用于实现构造(带默认参数) public DataNet(byte ID) Parameters ID byte 此处Id,与绑定函数有关，绑定在方法上，为方法ID，构造函数上为类ID Properties ActionID 表示为该方法指定了一个名称，用于对外的访问安全 public byte ActionID { get; } Property Value byte ClassID 表示为该方法指定了一个名称，用于对外的访问安全 public byte ClassID { get; } Property Value byte IsRelay 表示当前类或接口是否允许转发协议访问 public bool IsRelay { get; init; } Property Value bool IsTask 当前是函数是否支持异步 public bool IsTask { get; } Property Value bool Methods 表示该方法的名称 public string Methods { get; } Property Value string Parameters 表示该方法所包含的访问参数 public Parameter[] Parameters { get; } Property Value Parameter[] Pethod 表示该方法的详细信息 public Method Pethod { get; } Property Value Method Methods AddDataTcps(Assembly) 给DataBase相关业务追加新的服务，如果ID相同，将采用替换方式 public static bool AddDataTcps(Assembly assembly) Parameters assembly Assembly 需要验证接口的程序集 Returns bool 程序集中存在接口，为[true/false] GetAttribute<T>() 根据指定的自定义类获取当前接口对象上的Attribute（自定义类） public T GetAttribute<T>() where T : Attribute Returns T 返回Attribute（自定义类） Type Parameters T 指定的Attribute（自定义类） GetAttributes() 获取当前接口对象上的所有Attribute（自定义类） public Attribute[] GetAttributes() Returns Attribute[] 返回所有的Attribute（自定义类）"
  },
  "api/Tool.Sockets.NetFrame.GoOut.html": {
    "href": "api/Tool.Sockets.NetFrame.GoOut.html",
    "title": "Struct GoOut | Tool.Net",
    "keywords": "Struct GoOut Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 默认实现 public readonly struct GoOut : IGoOut Implements IGoOut Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors GoOut(ArraySegment<byte>) 初始化输出结果 public GoOut(ArraySegment<byte> bytes) Parameters bytes ArraySegment<byte> 字节流类容 GoOut(ArraySegment<byte>, string) 初始化输出结果 public GoOut(ArraySegment<byte> bytes, string text) Parameters bytes ArraySegment<byte> 字节流类容 text string 字符串类容 GoOut(string) 初始化输出结果 public GoOut(string text) Parameters text string 字符串类容 Properties Bytes 返回的数据流 public ArraySegment<byte> Bytes { get; } Property Value ArraySegment<byte> Empty 空对象 public static GoOut Empty { get; } Property Value GoOut Text 返回的文本类容 public string Text { get; } Property Value string"
  },
  "api/Tool.Sockets.NetFrame.IGoOut.html": {
    "href": "api/Tool.Sockets.NetFrame.IGoOut.html",
    "title": "Interface IGoOut | Tool.Net",
    "keywords": "Interface IGoOut Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 实现DataBase协议，接口输出规范 两种数据格式可一起使用。 public interface IGoOut Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Bytes 返回的数据流 ArraySegment<byte> Bytes { get; } Property Value ArraySegment<byte> Text 返回的文本类容 string Text { get; } Property Value string"
  },
  "api/Tool.Sockets.NetFrame.NetResponse.html": {
    "href": "api/Tool.Sockets.NetFrame.NetResponse.html",
    "title": "Struct NetResponse | Tool.Net",
    "keywords": "Struct NetResponse Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 请求服务器返回的数据包信息类（请务必回收资源！！！） public readonly struct NetResponse : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors NetResponse(in Guid, bool, NetFrameState, Exception) 未完成时 public NetResponse(in Guid onlyId, bool isreply, NetFrameState state, Exception error) Parameters onlyId Guid isreply bool state NetFrameState error Exception NetResponse(in IDataPacket) 完成后 public NetResponse(in IDataPacket packet) Parameters packet IDataPacket Properties Array 当前消息携带的数据流 public ArraySegment<byte> Array { get; } Property Value ArraySegment<byte> Bytes 当前消息携带的数据流 public Memory<byte> Bytes { get; } Property Value Memory<byte> Error 当前发生的异常 public Exception Error { get; } Property Value Exception IsReply 是否需要有回复消息 public bool IsReply { get; } Property Value bool OnlyId 消息唯一ID public Guid OnlyId { get; } Property Value Guid Span 当前消息携带的数据流 public Span<byte> Span { get; } Property Value Span<byte> State 用于表示当前数据包的执行情况 public NetFrameState State { get; } Property Value NetFrameState Text 数据包（文字类型的数据） public string Text { get; } Property Value string Methods Dispose() 回收资源 public void Dispose()"
  },
  "api/Tool.Sockets.NetFrame.ProtocolStatus.html": {
    "href": "api/Tool.Sockets.NetFrame.ProtocolStatus.html",
    "title": "Enum ProtocolStatus | Tool.Net",
    "keywords": "Enum ProtocolStatus Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 通信状态 [Flags] public enum ProtocolStatus : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Close = 4 已断开 Connect = 1 已连接 Fail = 2 连接失败 Reconnect = 8 重连中 Unknown = 0 未知"
  },
  "api/Tool.Sockets.NetFrame.ServerFrame.html": {
    "href": "api/Tool.Sockets.NetFrame.ServerFrame.html",
    "title": "Class ServerFrame | Tool.Net",
    "keywords": "Class ServerFrame Namespace Tool.Sockets.NetFrame Assembly Tool.Net.dll 封装的一个TCP框架（服务端） public class ServerFrame : EnServerEventDrive Inheritance object EnServerEventDrive ServerFrame Inherited Members EnServerEventDrive.OnInterceptor(EnServer, bool) EnServerEventDrive.OnIsQueue(EnServer, bool) EnServerEventDrive.IsEvent(EnServer) EnServerEventDrive.IsQueue(EnServer) EnServerEventDrive.OpenAllEvent() EnServerEventDrive.OpenAllQueue() EnServerEventDrive.CloseAllEvent() EnServerEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ServerFrame() 无参构造 public ServerFrame() ServerFrame(NetBufferSize) 初始化包 public ServerFrame(NetBufferSize bufferSize) Parameters bufferSize NetBufferSize 收包规范 Properties IsAllowRelay 表示服务器是否接受转发消息（默认接受） public bool IsAllowRelay { get; init; } Property Value bool IsClose 标识服务端连接是否关闭 public bool IsClose { get; } Property Value bool IsThreadPool 是否使用线程池调度接收后的数据（允许使用者初始化时设置，消息是否有序获取） 默认 true 开启 public bool IsThreadPool { get; init; } Property Value bool ListClient 已建立连接的集合 key:ip:port value:Socket public IReadOnlyDictionary<UserKey, Socket> ListClient { get; } Property Value IReadOnlyDictionary<UserKey, Socket> Server 服务器创建时的信息 public UserKey Server { get; } Property Value UserKey Methods ClientClose(Ipv4Port) 关闭存在的连接用户 public bool ClientClose(Ipv4Port ipv4) Parameters ipv4 Ipv4Port IpV4 Returns bool 成功/失败 Close() 关闭服务器并断开所有连接的客户端 public void Close() Send(in Ipv4Port, ApiPacket) 同步发送消息 public NetResponse Send(in Ipv4Port key, ApiPacket api) Parameters key Ipv4Port 发送人的IP api ApiPacket 接口调用信息 Returns NetResponse SendAsync(Ipv4Port, ApiPacket) 异步发送消息 public ValueTask<NetResponse> SendAsync(Ipv4Port key, ApiPacket api) Parameters key Ipv4Port 发送人的IP api ApiPacket 接口调用信息 Returns ValueTask<NetResponse> SetCompleted(CompletedEvent<EnServer>) 连接、发送、关闭事件 EnServer public void SetCompleted(CompletedEvent<EnServer> Completed) Parameters Completed CompletedEvent<EnServer> SetIpParser(IpParserEvent) 实现IP:Port解释器 （返回有效的IP:Port,返回空使用原值） 参数1：发起方信息空表示无发起方，参数2：接收方信息 public void SetIpParser(IpParserEvent IpParser) Parameters IpParser IpParserEvent StartAsync(int) 开始异步监听ip地址的端口 public Task StartAsync(int port) Parameters port int Returns Task StartAsync(string, int) 开始异步监听ip地址的端口 public Task StartAsync(string ip, int port) Parameters ip string port int Returns Task"
  },
  "api/Tool.Sockets.NetFrame.html": {
    "href": "api/Tool.Sockets.NetFrame.html",
    "title": "Namespace Tool.Sockets.NetFrame | Tool.Net",
    "keywords": "Namespace Tool.Sockets.NetFrame Classes ApiPacket 接口请求数据包 ClientFrame 封装的一个TCP框架（客户端） ClientFrameList 用于连接多服务器，分发消息的客户端帮助类，可以保证线程安全，均衡分发数据包。 DataBase 提供的唯一数据包接口类，必须实现 DataNet 针对于一般处理程序，备注一般处理程序必须继承于（DataBase 类才会生效） 所有状态（用于更好的使用 自定义通讯协议规范，实现Api接口） ServerFrame 封装的一个TCP框架（服务端） Structs GoOut 默认实现 NetResponse 请求服务器返回的数据包信息类（请务必回收资源！！！） Interfaces IGoOut 实现DataBase协议，接口输出规范 两种数据格式可一起使用。 Enums ProtocolStatus 通信状态"
  },
  "api/Tool.Sockets.P2PHelpr.P2pClientAsync.html": {
    "href": "api/Tool.Sockets.P2PHelpr.P2pClientAsync.html",
    "title": "Class P2pClientAsync | Tool.Net",
    "keywords": "Class P2pClientAsync Namespace Tool.Sockets.P2PHelpr Assembly Tool.Net.dll 封装一个可用的P2P打洞实现 帮助实现P2P打洞 public static class P2pClientAsync Inheritance object P2pClientAsync Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods P2PConnectAsync(TcpClientAsync, Ipv4Port, Ipv4Port, int) 尝试使用TCP模式进行P2P public static Task P2PConnectAsync(this TcpClientAsync tcpClient, Ipv4Port localEP, Ipv4Port RemoteEP, int TimedDelay = 5000) Parameters tcpClient TcpClientAsync 调起方 localEP Ipv4Port 尝试绑定的IP端口 RemoteEP Ipv4Port 尝试连接的IP端口 TimedDelay int P2P超时等待时长（默认5秒） Returns Task 任务 P2PConnectAsync(UdpClientAsync, Ipv4Port, Ipv4Port, int) 尝试使用UDP模式进行P2P public static Task P2PConnectAsync(this UdpClientAsync udpClient, Ipv4Port localEP, Ipv4Port RemoteEP, int TimedDelay = 5000) Parameters udpClient UdpClientAsync 调起方 localEP Ipv4Port 尝试绑定的IP端口 RemoteEP Ipv4Port 尝试连接的IP端口 TimedDelay int P2P超时等待时长（默认5秒） Returns Task 任务"
  },
  "api/Tool.Sockets.P2PHelpr.P2pServerAsync.html": {
    "href": "api/Tool.Sockets.P2PHelpr.P2pServerAsync.html",
    "title": "Class P2pServerAsync | Tool.Net",
    "keywords": "Class P2pServerAsync Namespace Tool.Sockets.P2PHelpr Assembly Tool.Net.dll 开放用于P2P模块化的支持类 可以获取免费开放的打洞公网服务器支持 public sealed class P2pServerAsync : IDisposable Inheritance object P2pServerAsync Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties LocalEP 用于本地绑定的IP:Port public Ipv4Port LocalEP { get; } Property Value Ipv4Port RemoteEP 用于P2P绑定的IP:Port public Ipv4Port RemoteEP { get; } Property Value Ipv4Port TcpTop TCP验证头 public static Memory<byte> TcpTop { get; } Property Value Memory<byte> UdpTop UDP验证头 public static Memory<byte> UdpTop { get; } Property Value Memory<byte> Methods Dispose() 回收相关资源 public void Dispose() GetFree(IPEndPoint, bool) 用于获取私有P2PServer服务器的通信消息 public static ValueTask<P2pServerAsync> GetFree(IPEndPoint endPoint, bool isTcp) Parameters endPoint IPEndPoint 服务器IP端口 isTcp bool 获取的P2P类型 Returns ValueTask<P2pServerAsync> 成功后的结果 GetFreeTcp() 获取公共的P2PServer服务器的通信消息 TCP版本 public static ValueTask<P2pServerAsync> GetFreeTcp() Returns ValueTask<P2pServerAsync> 成功后的结果 GetFreeUdp() 获取公共的P2PServer服务器的通信消息 UDP版本 public static ValueTask<P2pServerAsync> GetFreeUdp() Returns ValueTask<P2pServerAsync> 成功后的结果 IsP2pAuth(Span<byte>, out Ipv4Port) 验证一个数据流，确定它是否是符合协议的P2P（发起）协议 public static bool IsP2pAuth(Span<byte> span, out Ipv4Port localEP) Parameters span Span<byte> localEP Ipv4Port Returns bool IsP2pWait(Span<byte>, out Ipv4Port) 验证一个数据流，确定它是否是符合协议的P2P（等待）协议 public static bool IsP2pWait(Span<byte> span, out Ipv4Port localEP) Parameters span Span<byte> localEP Ipv4Port Returns bool IsSuccess() 判断是否P2P是否可用 public bool IsSuccess() Returns bool OkWait(CancellationToken) 判断是否通过双方等待验证 public bool OkWait(CancellationToken token) Parameters token CancellationToken Returns bool P2PConnectAsync(TcpClientAsync, Ipv4Port, int) 尝试发起P2P连接，通过服务器验证确保可以更可靠的完成连接 public Task P2PConnectAsync(TcpClientAsync clientAsync, Ipv4Port RemoteEP, int timedDelay = 5000) Parameters clientAsync TcpClientAsync 要建立连接的对象 RemoteEP Ipv4Port 连接的对方设备 timedDelay int 尝试等待超时时间（不能小于1000ms） Returns Task 结果 Exceptions Exception 不可用 或 模式不一致 或 超时！ P2PConnectAsync(UdpClientAsync, Ipv4Port, int) 尝试发起P2P连接，通过服务器验证确保可以更可靠的完成连接 public Task P2PConnectAsync(UdpClientAsync clientAsync, Ipv4Port RemoteEP, int timedDelay = 5000) Parameters clientAsync UdpClientAsync 要建立连接的对象 RemoteEP Ipv4Port 连接的对方设备 timedDelay int 尝试等待超时时间（不能小于1000ms） Returns Task 结果 Exceptions Exception 不可用 或 模式不一致 或 超时！"
  },
  "api/Tool.Sockets.P2PHelpr.html": {
    "href": "api/Tool.Sockets.P2PHelpr.html",
    "title": "Namespace Tool.Sockets.P2PHelpr | Tool.Net",
    "keywords": "Namespace Tool.Sockets.P2PHelpr Classes P2pClientAsync 封装一个可用的P2P打洞实现 帮助实现P2P打洞 P2pServerAsync 开放用于P2P模块化的支持类 可以获取免费开放的打洞公网服务器支持"
  },
  "api/Tool.Sockets.QuicHelper.QuicClientAsync.html": {
    "href": "api/Tool.Sockets.QuicHelper.QuicClientAsync.html",
    "title": "Class QuicClientAsync | Tool.Net",
    "keywords": "Class QuicClientAsync Namespace Tool.Sockets.QuicHelper Assembly Tool.Net.dll .Net7 以上支持 public class QuicClientAsync Inheritance object QuicClientAsync Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持"
  },
  "api/Tool.Sockets.QuicHelper.QuicServerAsync.html": {
    "href": "api/Tool.Sockets.QuicHelper.QuicServerAsync.html",
    "title": "Class QuicServerAsync | Tool.Net",
    "keywords": "Class QuicServerAsync Namespace Tool.Sockets.QuicHelper Assembly Tool.Net.dll .Net7 以上支持 public class QuicServerAsync Inheritance object QuicServerAsync Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持"
  },
  "api/Tool.Sockets.QuicHelper.html": {
    "href": "api/Tool.Sockets.QuicHelper.html",
    "title": "Namespace Tool.Sockets.QuicHelper | Tool.Net",
    "keywords": "Namespace Tool.Sockets.QuicHelper Classes QuicClientAsync .Net7 以上支持 QuicServerAsync .Net7 以上支持"
  },
  "api/Tool.Sockets.TcpHelper.TcpClientAsync.html": {
    "href": "api/Tool.Sockets.TcpHelper.TcpClientAsync.html",
    "title": "Class TcpClientAsync | Tool.Net",
    "keywords": "Class TcpClientAsync Namespace Tool.Sockets.TcpHelper Assembly Tool.Net.dll 封装一个底层异步TCP对象（客户端）IpV4 public class TcpClientAsync : NetworkConnect<Socket>, INetworkConnect<Socket>, INetworkConnect, INetworkCore, IDisposable Inheritance object EnClientEventDrive NetworkConnect<Socket> TcpClientAsync Implements INetworkConnect<Socket> INetworkConnect INetworkCore IDisposable Inherited Members NetworkConnect<Socket>.IsThreadPool NetworkConnect<Socket>.BufferSize EnClientEventDrive.OnInterceptor(EnClient, bool) EnClientEventDrive.OnIsQueue(EnClient, bool) EnClientEventDrive.IsEvent(EnClient) EnClientEventDrive.IsQueue(EnClient) EnClientEventDrive.OpenAllEvent() EnClientEventDrive.OpenAllQueue() EnClientEventDrive.CloseAllEvent() EnClientEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) P2pClientAsync.P2PConnectAsync(TcpClientAsync, Ipv4Port, Ipv4Port, int) Remarks 代码由逆血提供支持 Constructors TcpClientAsync() 创建一个 TcpClientAsync 客户端类 public TcpClientAsync() TcpClientAsync(NetBufferSize) 创建一个 TcpClientAsync 客户端类，确认模式和设置流大小 public TcpClientAsync(NetBufferSize bufferSize) Parameters bufferSize NetBufferSize 包大小枚举 TcpClientAsync(NetBufferSize, bool) 创建一个 TcpClientAsync 客户端类，确认模式和设置流大小 public TcpClientAsync(NetBufferSize bufferSize, bool OnlyData) Parameters bufferSize NetBufferSize 包大小枚举 OnlyData bool 是否启动框架模式 TcpClientAsync(NetBufferSize, bool, bool) 创建一个 TcpClientAsync 客户端类，确认模式和设置流大小 public TcpClientAsync(NetBufferSize bufferSize, bool OnlyData, bool IsReconnect) Parameters bufferSize NetBufferSize 包大小枚举 OnlyData bool 是否启动框架模式 IsReconnect bool 是否在与服务器断开后主动重连？ Properties Client TCP 服务对象 public Socket Client { get; } Property Value Socket Connected 获取一个值，该值指示 Client 的基础 Socket 是否已连接到远程主机。 public override bool Connected { get; } Property Value bool IsClose 标识客户端是否关闭，改状态为调用关闭方法后的状态。 public override bool IsClose { get; } Property Value bool IsReconnect 是否在与服务器断开后主动重连？ public bool IsReconnect { get; } Property Value bool Keep 获取当前心跳信息 public KeepAlive Keep { get; } Property Value KeepAlive LocalPoint 当前设备的连接信息 public override Ipv4Port LocalPoint { get; } Property Value Ipv4Port Millisecond 监听控制毫秒 public override int Millisecond { get; set; } Property Value int OnlyData 是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接） public bool OnlyData { get; } Property Value bool Server 服务器的连接信息 public override UserKey Server { get; } Property Value UserKey Methods AddKeepAlive(byte) 添加持久化消息（心跳），防止特殊情况下的断开连接 public void AddKeepAlive(byte TimeInterval) Parameters TimeInterval byte Close() TCP关闭 public override void Close() ConnectAsync(int) 异步连接，连接ip地址为127.0.0.1 public Task ConnectAsync(int port) Parameters port int 要连接服务端的端口 Returns Task ConnectAsync(string, int) 异步连接 public override Task ConnectAsync(string ip, int port) Parameters ip string 要连接的服务器的ip地址 port int 要连接的服务器的端口 Returns Task ConnectAsync(Ipv4Port) 异步连接 public Task ConnectAsync(Ipv4Port ipv4Port) Parameters ipv4Port Ipv4Port 要连接的服务器的ip地址端口 Returns Task CreateSendBytes(int) 创建数据发送空间 public override SendBytes<Socket> CreateSendBytes(int length = 0) Parameters length int 数据大小 Returns SendBytes<Socket> Exceptions Exception 连接已中断 Dispose() 关闭连接，回收相关资源 public override void Dispose() OnComplete(in UserKey, EnClient) 可供开发重写的事件方法 public override ValueTask<IGetQueOnEnum> OnComplete(in UserKey IpPort, EnClient enAction) Parameters IpPort UserKey IP：端口 enAction EnClient 消息类型 Returns ValueTask<IGetQueOnEnum> Reconnection() 重连，返回是否重连，如果没有断开是不会重连的 public override Task<bool> Reconnection() Returns Task<bool> SendAsync(ArraySegment<byte>) 异步发送消息 public ValueTask SendAsync(ArraySegment<byte> listData) Parameters listData ArraySegment<byte> 数据包 Returns ValueTask SendAsync(string) 异步发送消息 public ValueTask SendAsync(string msg) Parameters msg string 文本数据 Returns ValueTask SendAsync(SendBytes<Socket>) 异步发送消息 public override ValueTask SendAsync(SendBytes<Socket> sendBytes) Parameters sendBytes SendBytes<Socket> 数据包 Returns ValueTask Exceptions ArgumentException OnlyData验证失败 SetCompleted(CompletedEvent<EnClient>) 连接、发送、关闭事件 public override void SetCompleted(CompletedEvent<EnClient> Completed) Parameters Completed CompletedEvent<EnClient> SetReceived(ReceiveEvent<Socket>) 接收到数据事件 public override void SetReceived(ReceiveEvent<Socket> Received) Parameters Received ReceiveEvent<Socket>"
  },
  "api/Tool.Sockets.TcpHelper.TcpServerAsync.html": {
    "href": "api/Tool.Sockets.TcpHelper.TcpServerAsync.html",
    "title": "Class TcpServerAsync | Tool.Net",
    "keywords": "Class TcpServerAsync Namespace Tool.Sockets.TcpHelper Assembly Tool.Net.dll 封装一个底层异步TCP对象（服务端）IpV4 public class TcpServerAsync : NetworkListener<Socket>, INetworkListener<Socket>, INetworkListener, INetworkCore, IDisposable Inheritance object EnServerEventDrive NetworkListener<Socket> TcpServerAsync Implements INetworkListener<Socket> INetworkListener INetworkCore IDisposable Inherited Members NetworkListener<Socket>.IsThreadPool NetworkListener<Socket>.BufferSize EnServerEventDrive.OnInterceptor(EnServer, bool) EnServerEventDrive.OnIsQueue(EnServer, bool) EnServerEventDrive.IsEvent(EnServer) EnServerEventDrive.IsQueue(EnServer) EnServerEventDrive.OpenAllEvent() EnServerEventDrive.OpenAllQueue() EnServerEventDrive.CloseAllEvent() EnServerEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TcpServerAsync() 创建一个 TcpClientAsync 服务器类 public TcpServerAsync() TcpServerAsync(NetBufferSize) 创建一个 TcpClientAsync 服务器类，并确定是否开启框架验证模式保证数据唯一性。 public TcpServerAsync(NetBufferSize size) Parameters size NetBufferSize 数据缓冲区大小 TcpServerAsync(NetBufferSize, bool) 创建一个 TcpClientAsync 服务器类，确认模式和设置流大小 public TcpServerAsync(NetBufferSize size, bool OnlyData) Parameters size NetBufferSize 数据缓冲区大小 OnlyData bool 是否启动框架模式 Properties IsClose 标识服务端连接是否关闭 public override bool IsClose { get; } Property Value bool ListClient 已建立连接的集合 key:UserKey value:Socket public override IReadOnlyDictionary<UserKey, Socket> ListClient { get; } Property Value IReadOnlyDictionary<UserKey, Socket> Millisecond 监听控制毫秒 public override int Millisecond { get; set; } Property Value int OnlyData 是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接） public bool OnlyData { get; } Property Value bool Server 服务器创建时的信息 public override UserKey Server { get; } Property Value UserKey Methods CreateSendBytes(Socket, int) 创建数据发送空间 public override SendBytes<Socket> CreateSendBytes(Socket client, int length = 0) Parameters client Socket 收数据的对象 length int 数据大小 Returns SendBytes<Socket> CreateSendBytes(Ipv4Port, int) 创建数据发送空间 public SendBytes<Socket> CreateSendBytes(Ipv4Port key, int length) Parameters key Ipv4Port 接收者信息 length int 数据大小 Returns SendBytes<Socket> Exceptions Exception 连接已中断 Dispose() 关闭连接，回收相关资源 public override void Dispose() OnComplete(in UserKey, EnServer) 可供开发重写的事件方法 public override ValueTask<IGetQueOnEnum> OnComplete(in UserKey IpPort, EnServer enAction) Parameters IpPort UserKey 指定发送对象 enAction EnServer 消息类型 Returns ValueTask<IGetQueOnEnum> SendAsync(Socket, ArraySegment<byte>) 开始异步发送数据 public ValueTask SendAsync(Socket client, ArraySegment<byte> listData) Parameters client Socket Socket对象 listData ArraySegment<byte> 要发送的内容 Returns ValueTask SendAsync(Socket, string) 开始异步发送数据 public ValueTask SendAsync(Socket client, string msg) Parameters client Socket Socket对象 msg string 要发送的内容 Returns ValueTask SendAsync(Ipv4Port, ArraySegment<byte>) 开始异步发送数据 public ValueTask SendAsync(Ipv4Port key, ArraySegment<byte> listData) Parameters key Ipv4Port 客户端的ip地址和端口号 listData ArraySegment<byte> 要发送的内容 Returns ValueTask SendAsync(Ipv4Port, string) 开始异步发送数据 public ValueTask SendAsync(Ipv4Port key, string msg) Parameters key Ipv4Port 客户端的ip地址和端口号 msg string 要发送的内容 Returns ValueTask SendAsync(SendBytes<Socket>) 异步发送消息 public override ValueTask SendAsync(SendBytes<Socket> sendBytes) Parameters sendBytes SendBytes<Socket> 数据包 Returns ValueTask Exceptions ArgumentException OnlyData验证失败 Exception 连接已断开 SetCompleted(CompletedEvent<EnServer>) 连接、发送、关闭事件 public override void SetCompleted(CompletedEvent<EnServer> Completed) Parameters Completed CompletedEvent<EnServer> SetReceived(ReceiveEvent<Socket>) 接收到数据事件 public override void SetReceived(ReceiveEvent<Socket> Received) Parameters Received ReceiveEvent<Socket> StartAsync(int) 开始异步监听本机127.0.0.1的端口号 public Task StartAsync(int port) Parameters port int Returns Task StartAsync(string, int) 开始异步监听ip地址的端口 public override Task StartAsync(string ip, int port) Parameters ip string port int Returns Task Stop() TCP关闭 public override void Stop() TrySocket(in UserKey, out Socket) 根据IP:Port获取对应的连接对象 public override bool TrySocket(in UserKey key, out Socket client) Parameters key UserKey IP:Port client Socket 连接对象 Returns bool 返回成功状态"
  },
  "api/Tool.Sockets.TcpHelper.html": {
    "href": "api/Tool.Sockets.TcpHelper.html",
    "title": "Namespace Tool.Sockets.TcpHelper | Tool.Net",
    "keywords": "Namespace Tool.Sockets.TcpHelper Classes TcpClientAsync 封装一个底层异步TCP对象（客户端）IpV4 TcpServerAsync 封装一个底层异步TCP对象（服务端）IpV4"
  },
  "api/Tool.Sockets.UdpHelper.IUdpCore.html": {
    "href": "api/Tool.Sockets.UdpHelper.IUdpCore.html",
    "title": "Interface IUdpCore | Tool.Net",
    "keywords": "Interface IUdpCore Namespace Tool.Sockets.UdpHelper Assembly Tool.Net.dll Udp通信核心，管理相关连接信息 public interface IUdpCore : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties DataLength 可用最大空间 int DataLength { get; } Property Value int EndPoint 连接的设备地址信息 UdpEndPoint EndPoint { get; } Property Value UdpEndPoint Ipv4 获取IpV4地址信息 Ipv4Port Ipv4 { get; } Property Value Ipv4Port LimitingSize 控制滑动窗口大小（限制流量）备注：计算得出1000个窗口比较满足大多数环境 public static int LimitingSize { get; set; } Property Value int OnlyData 是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接） bool OnlyData { get; } Property Value bool Socket 连接的对象（请勿脱离框架使用，避免出现各种未知异常） Socket Socket { get; } Property Value Socket SpinWaitTimeout 分配id最大等待时间 public static int SpinWaitTimeout { get; set; } Property Value int Methods CloseAsync() 尝试异步关闭连接 Task CloseAsync() Returns Task GetUdpCore(INetworkCore, UdpEndPoint, Socket, int, bool, int, bool, bool, Func<UserKey, byte, ValueTask>, ReceiveEvent<IUdpCore>) 创建可用的公共UDP核心 public static IUdpCore GetUdpCore(INetworkCore networkCore, UdpEndPoint endPoint, Socket socket, int dataLength, bool onlyData, int replyDelay, bool isserver, bool isp2p, Func<UserKey, byte, ValueTask> complete, ReceiveEvent<IUdpCore> received) Parameters networkCore INetworkCore endPoint UdpEndPoint socket Socket dataLength int onlyData bool replyDelay int isserver bool isp2p bool complete Func<UserKey, byte, ValueTask> received ReceiveEvent<IUdpCore> Returns IUdpCore SendAsync(Memory<byte>) 直接发送数据（警告非对内核完全了解的开发者，请谨慎，会出现各种未知异常！） Task SendAsync(Memory<byte> memory) Parameters memory Memory<byte> 发送的数据 Returns Task"
  },
  "api/Tool.Sockets.UdpHelper.UdpClientAsync.html": {
    "href": "api/Tool.Sockets.UdpHelper.UdpClientAsync.html",
    "title": "Class UdpClientAsync | Tool.Net",
    "keywords": "Class UdpClientAsync Namespace Tool.Sockets.UdpHelper Assembly Tool.Net.dll 封装一个底层异步Udp对象（客户端）IpV4 public class UdpClientAsync : NetworkConnect<IUdpCore>, INetworkConnect<IUdpCore>, INetworkConnect, INetworkCore, IDisposable Inheritance object EnClientEventDrive NetworkConnect<IUdpCore> UdpClientAsync Implements INetworkConnect<IUdpCore> INetworkConnect INetworkCore IDisposable Inherited Members NetworkConnect<IUdpCore>.IsThreadPool NetworkConnect<IUdpCore>.BufferSize EnClientEventDrive.OnInterceptor(EnClient, bool) EnClientEventDrive.OnIsQueue(EnClient, bool) EnClientEventDrive.IsEvent(EnClient) EnClientEventDrive.IsQueue(EnClient) EnClientEventDrive.OpenAllEvent() EnClientEventDrive.OpenAllQueue() EnClientEventDrive.CloseAllEvent() EnClientEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) P2pClientAsync.P2PConnectAsync(UdpClientAsync, Ipv4Port, Ipv4Port, int) Remarks 代码由逆血提供支持 Constructors UdpClientAsync() 创建一个 UdpClientAsync 客户端类 public UdpClientAsync() UdpClientAsync(NetBufferSize) 创建一个 UdpClientAsync 客户端类，确认模式和设置流大小 public UdpClientAsync(NetBufferSize bufferSize) Parameters bufferSize NetBufferSize 包大小枚举 UdpClientAsync(NetBufferSize, bool) 创建一个 UdpClientAsync 客户端类，确认模式和设置流大小 public UdpClientAsync(NetBufferSize bufferSize, bool OnlyData) Parameters bufferSize NetBufferSize 包大小枚举 OnlyData bool 是否启动框架模式 Properties Client UDP 服务对象 public Socket Client { get; } Property Value Socket Connected 获取当前是否已连接到远程主机。 public override bool Connected { get; } Property Value bool IsClose 标识服务端连接是否关闭 public override bool IsClose { get; } Property Value bool Keep 获取当前心跳信息 public KeepAlive Keep { get; } Property Value KeepAlive LocalPoint 当前设备的连接信息 public override Ipv4Port LocalPoint { get; } Property Value Ipv4Port Millisecond 监听控制毫秒 public override int Millisecond { get; set; } Property Value int OnlyData 是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接） public bool OnlyData { get; } Property Value bool ReceiveTimeout 监听最大等待时长（默认60秒） 不得小于5秒 public int ReceiveTimeout { get; init; } Property Value int ReplyDelay 回复消息延迟时间（警告：当前设置仅在开启了OnlyData模式生效，超时未回复会重发，重发最大次数10，依然没有回复将抛出异常！）小于20将不生效使用默认值 public int ReplyDelay { get; init; } Property Value int Server 服务器创建时的信息 public override UserKey Server { get; } Property Value UserKey UdpCore UDP 核心控制器 public IUdpCore UdpCore { get; } Property Value IUdpCore Methods AddKeepAlive(byte) 添加持久化消息（心跳），防止特殊情况下的断开连接 public void AddKeepAlive(byte TimeInterval) Parameters TimeInterval byte Close() UDP关闭 public override void Close() ConnectAsync(int) 异步连接，连接ip地址为127.0.0.1 public Task ConnectAsync(int port) Parameters port int 要连接服务端的端口 Returns Task ConnectAsync(string, int) 发送数据目标 public override Task ConnectAsync(string ip, int port) Parameters ip string 要连接的服务器的ip地址 port int 要连接的服务器的端口 Returns Task Exceptions Exception ConnectAsync(Ipv4Port) 异步连接 public Task ConnectAsync(Ipv4Port ipv4Port) Parameters ipv4Port Ipv4Port 要连接的服务器的ip地址端口 Returns Task CreateSendBytes(int) 创建数据包对象 public override SendBytes<IUdpCore> CreateSendBytes(int length = 0) Parameters length int 数据包大小 Returns SendBytes<IUdpCore> Dispose() 回收UDP相关资源 public override void Dispose() OnComplete(in UserKey, EnClient) 可供开发重写的实现类 public override ValueTask<IGetQueOnEnum> OnComplete(in UserKey IpPort, EnClient enAction) Parameters IpPort UserKey IP：端口 enAction EnClient 消息类型 Returns ValueTask<IGetQueOnEnum> Reconnection() 重连，返回是否重连，如果没有断开是不会重连的 public override Task<bool> Reconnection() Returns Task<bool> SendAsync(ArraySegment<byte>) 异步发送消息 public ValueTask SendAsync(ArraySegment<byte> listData) Parameters listData ArraySegment<byte> 数据包 Returns ValueTask SendAsync(string) 异步发送消息 public ValueTask SendAsync(string msg) Parameters msg string 文本数据 Returns ValueTask SendAsync(SendBytes<IUdpCore>) 开始异步发送数据 public override ValueTask SendAsync(SendBytes<IUdpCore> sendBytes) Parameters sendBytes SendBytes<IUdpCore> 数据包对象 Returns ValueTask Exceptions ArgumentException SetCompleted(CompletedEvent<EnClient>) 连接、发送、关闭事件 public override void SetCompleted(CompletedEvent<EnClient> Completed) Parameters Completed CompletedEvent<EnClient> SetReceived(ReceiveEvent<IUdpCore>) 接收到数据事件 public override void SetReceived(ReceiveEvent<IUdpCore> Received) Parameters Received ReceiveEvent<IUdpCore>"
  },
  "api/Tool.Sockets.UdpHelper.UdpEndPoint.html": {
    "href": "api/Tool.Sockets.UdpHelper.UdpEndPoint.html",
    "title": "Class UdpEndPoint | Tool.Net",
    "keywords": "Class UdpEndPoint Namespace Tool.Sockets.UdpHelper Assembly Tool.Net.dll Udp通信专属模块 public class UdpEndPoint : EndPoint Inheritance object EndPoint UdpEndPoint Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors UdpEndPoint(IPAddress, ushort) 创建一个Udp通信IP地址 public UdpEndPoint(IPAddress address, ushort port) Parameters address IPAddress port ushort Properties Address IP地址信息 public IPAddress Address { get; } Property Value IPAddress AddressFamily IP地址类型 public override AddressFamily AddressFamily { get; } Property Value AddressFamily Ipv4 获取IpV4地址信息 public Ipv4Port Ipv4 { get; } Property Value Ipv4Port Port 通信端口 public ushort Port { get; } Property Value ushort Methods Create(SocketAddress) 根据数据获取EndPoint public override EndPoint Create(SocketAddress socketAddress) Parameters socketAddress SocketAddress Returns EndPoint Exceptions Exception Equals(object) 判断是否一致 public override bool Equals(object obj) Parameters obj object 比较值 Returns bool 是或否 Equals(UdpEndPoint) 判断是否一致 public bool Equals(UdpEndPoint other) Parameters other UdpEndPoint 比较值 Returns bool 是或否 GetHashCode() 获取哈希值 public override int GetHashCode() Returns int Serialize() 获取SocketAddress public override SocketAddress Serialize() Returns SocketAddress ToString() 默认信息 public override string ToString() Returns string TryParse(string, int, out UdpEndPoint) 尝试判断是否可用的IP端口信息 public static bool TryParse(string ip, int port, out UdpEndPoint point) Parameters ip string IP信息 port int 端口信息 point UdpEndPoint 返回的可用对象 Returns bool 是否成功 Exceptions Exception 失败的信息 Operators operator ==(UdpEndPoint, UdpEndPoint) 指示两个 UdpEndPoint 结构是否相等。 public static bool operator ==(UdpEndPoint a, UdpEndPoint b) Parameters a UdpEndPoint 相等运算符左侧的结构 b UdpEndPoint 相等运算符右侧的结构 Returns bool 如果 true 等于 a，则为 b；否则为 false。 operator !=(UdpEndPoint, UdpEndPoint) 指示两个 UdpEndPoint 结构是否不相等。 public static bool operator !=(UdpEndPoint a, UdpEndPoint b) Parameters a UdpEndPoint 不等运算符左侧的结构 b UdpEndPoint 不等运算符右侧的结构 Returns bool 如果 true 不等于 a，则为 b；否则为 false。"
  },
  "api/Tool.Sockets.UdpHelper.UdpServerAsync.html": {
    "href": "api/Tool.Sockets.UdpHelper.UdpServerAsync.html",
    "title": "Class UdpServerAsync | Tool.Net",
    "keywords": "Class UdpServerAsync Namespace Tool.Sockets.UdpHelper Assembly Tool.Net.dll 封装一个底层异步Udp对象（服务端）IpV4 public class UdpServerAsync : NetworkListener<IUdpCore>, INetworkListener<IUdpCore>, INetworkListener, INetworkCore, IDisposable Inheritance object EnServerEventDrive NetworkListener<IUdpCore> UdpServerAsync Implements INetworkListener<IUdpCore> INetworkListener INetworkCore IDisposable Inherited Members NetworkListener<IUdpCore>.IsThreadPool NetworkListener<IUdpCore>.BufferSize EnServerEventDrive.OnInterceptor(EnServer, bool) EnServerEventDrive.OnIsQueue(EnServer, bool) EnServerEventDrive.IsEvent(EnServer) EnServerEventDrive.IsQueue(EnServer) EnServerEventDrive.OpenAllEvent() EnServerEventDrive.OpenAllQueue() EnServerEventDrive.CloseAllEvent() EnServerEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors UdpServerAsync() 创建一个 UdpServerAsync 服务器类 public UdpServerAsync() UdpServerAsync(NetBufferSize) 创建一个 UdpServerAsync 服务器类，并确定是否开启框架验证模式保证数据唯一性。 public UdpServerAsync(NetBufferSize size) Parameters size NetBufferSize 数据缓冲区大小 UdpServerAsync(NetBufferSize, bool) 创建一个 UdpServerAsync 服务器类，确认模式和设置流大小 public UdpServerAsync(NetBufferSize size, bool OnlyData) Parameters size NetBufferSize 数据缓冲区大小 OnlyData bool 是否启动框架模式 Properties IsClose 标识服务端连接是否关闭 public override bool IsClose { get; } Property Value bool ListClient 已建立连接的集合 key:UserKey value:UdpEndPoint public override IReadOnlyDictionary<UserKey, IUdpCore> ListClient { get; } Property Value IReadOnlyDictionary<UserKey, IUdpCore> Millisecond 监听控制毫秒 public override int Millisecond { get; set; } Property Value int OnlyData 是否保证数据唯一性，开启后将采用框架验证保证其每次的数据唯一性，（如果不满足数据条件将直接与其断开连接） public bool OnlyData { get; } Property Value bool ReceiveTimeout 监听每个连接用户的最大等待时长（默认60秒一直等待） 不得小于5秒 public int ReceiveTimeout { get; init; } Property Value int ReplyDelay 回复消息延迟时间（警告：当前设置仅在开启了OnlyData模式生效，超时未回复会重发，重发最大次数10，依然没有回复将抛出异常！）小于20将不生效使用默认值 public int ReplyDelay { get; init; } Property Value int Server 服务器创建时的信息 public override UserKey Server { get; } Property Value UserKey Methods CreateSendBytes(Ipv4Port, int) 创建数据包对象 public SendBytes<IUdpCore> CreateSendBytes(Ipv4Port key, int length) Parameters key Ipv4Port 通信IP:Port length int 数据包大小 Returns SendBytes<IUdpCore> Exceptions Exception CreateSendBytes(IUdpCore, int) 创建数据包对象 public override SendBytes<IUdpCore> CreateSendBytes(IUdpCore client, int length = 0) Parameters client IUdpCore 通信对象 length int 数据包大小 Returns SendBytes<IUdpCore> Dispose() 关闭连接，回收相关资源 public override void Dispose() OnComplete(in UserKey, EnServer) 可供开发重写的实现类 public override ValueTask<IGetQueOnEnum> OnComplete(in UserKey key, EnServer enAction) Parameters key UserKey 指定发送对象 enAction EnServer 消息类型 Returns ValueTask<IGetQueOnEnum> SendAsync(Ipv4Port, ArraySegment<byte>) 开始异步发送数据 public ValueTask SendAsync(Ipv4Port key, ArraySegment<byte> listData) Parameters key Ipv4Port 客户端的ip地址和端口号 listData ArraySegment<byte> 要发送的内容，允许多个包 Returns ValueTask SendAsync(Ipv4Port, string) 开始异步发送数据 public ValueTask SendAsync(Ipv4Port key, string msg) Parameters key Ipv4Port 客户端的ip地址和端口号 msg string 要发送的内容 Returns ValueTask SendAsync(SendBytes<IUdpCore>) 开始异步发送数据 public override ValueTask SendAsync(SendBytes<IUdpCore> sendBytes) Parameters sendBytes SendBytes<IUdpCore> 数据包对象 Returns ValueTask SendAsync(IUdpCore, ArraySegment<byte>) 开始异步发送数据 public ValueTask SendAsync(IUdpCore client, ArraySegment<byte> listData) Parameters client IUdpCore UdpEndPoint对象 listData ArraySegment<byte> 要发送的内容，允许多个包 Returns ValueTask SendAsync(IUdpCore, string) 开始异步发送数据 public ValueTask SendAsync(IUdpCore client, string msg) Parameters client IUdpCore UdpEndPoint对象 msg string 要发送的内容 Returns ValueTask SetCompleted(CompletedEvent<EnServer>) 连接、发送、关闭事件 public override void SetCompleted(CompletedEvent<EnServer> Completed) Parameters Completed CompletedEvent<EnServer> SetReceived(ReceiveEvent<IUdpCore>) 接收到数据事件 public override void SetReceived(ReceiveEvent<IUdpCore> Received) Parameters Received ReceiveEvent<IUdpCore> StartAsync(int) 开始异步监听本机127.0.0.1的端口号 public Task StartAsync(int port) Parameters port int Returns Task StartAsync(string, int) 开始异步监听ip地址的端口 public override Task StartAsync(string ip, int port) Parameters ip string port int Returns Task Stop() UDP关闭 public override void Stop() TrySocket(in UserKey, out IUdpCore) 根据IP:Port获取对应的连接对象 public override bool TrySocket(in UserKey key, out IUdpCore client) Parameters key UserKey IP:Port client IUdpCore 连接对象 Returns bool 返回成功状态"
  },
  "api/Tool.Sockets.UdpHelper.html": {
    "href": "api/Tool.Sockets.UdpHelper.html",
    "title": "Namespace Tool.Sockets.UdpHelper | Tool.Net",
    "keywords": "Namespace Tool.Sockets.UdpHelper Classes UdpClientAsync 封装一个底层异步Udp对象（客户端）IpV4 UdpEndPoint Udp通信专属模块 UdpServerAsync 封装一个底层异步Udp对象（服务端）IpV4 Interfaces IUdpCore Udp通信核心，管理相关连接信息"
  },
  "api/Tool.Sockets.WebHelper.WebClientAsync.html": {
    "href": "api/Tool.Sockets.WebHelper.WebClientAsync.html",
    "title": "Class WebClientAsync | Tool.Net",
    "keywords": "Class WebClientAsync Namespace Tool.Sockets.WebHelper Assembly Tool.Net.dll WebSocket连接对象 public sealed class WebClientAsync : NetworkConnect<WebSocket>, INetworkConnect<WebSocket>, INetworkConnect, INetworkCore, IDisposable Inheritance object EnClientEventDrive NetworkConnect<WebSocket> WebClientAsync Implements INetworkConnect<WebSocket> INetworkConnect INetworkCore IDisposable Inherited Members NetworkConnect<WebSocket>.IsThreadPool NetworkConnect<WebSocket>.BufferSize EnClientEventDrive.OnInterceptor(EnClient, bool) EnClientEventDrive.OnIsQueue(EnClient, bool) EnClientEventDrive.IsEvent(EnClient) EnClientEventDrive.IsQueue(EnClient) EnClientEventDrive.OpenAllEvent() EnClientEventDrive.OpenAllQueue() EnClientEventDrive.CloseAllEvent() EnClientEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors WebClientAsync() 创建一个 WebClientAsync 客户端类 public WebClientAsync() WebClientAsync(NetBufferSize) 创建一个 WebClientAsync 客户端类，确认模式和设置流大小 public WebClientAsync(NetBufferSize bufferSize) Parameters bufferSize NetBufferSize 包大小枚举 WebClientAsync(NetBufferSize, bool) 创建一个 WebClientAsync 客户端类，确认模式和设置流大小 public WebClientAsync(NetBufferSize bufferSize, bool IsReconnect) Parameters bufferSize NetBufferSize 包大小枚举(警告：请务必保证服务端的大小和客户端一致) IsReconnect bool 是否在与服务器断开后主动重连？ Properties Connected 获取当前是否已连接到远程主机。 public override bool Connected { get; } Property Value bool IsClose 标识客户端连接是否关闭 public override bool IsClose { get; } Property Value bool IsReconnect 是否在与服务器断开后主动重连？ public bool IsReconnect { get; } Property Value bool IsSSL 获取指示是否使用安全套接字层 (SSL) 保护 WebSocket 连接的值。 public bool IsSSL { get; init; } Property Value bool Remarks true 如果使用 SSL; 保护 WebSocket 连接，否则为false。 Keep 获取当前心跳信息 public KeepAlive Keep { get; } Property Value KeepAlive LocalPoint 当前设备的连接信息 public override Ipv4Port LocalPoint { get; } Property Value Ipv4Port Millisecond 监听控制毫秒 public override int Millisecond { get; set; } Property Value int Server 服务器创建时的信息 public override UserKey Server { get; } Property Value UserKey Methods AddKeepAlive(byte) 添加持久化消息（心跳），防止特殊情况下的断开连接 public void AddKeepAlive(byte TimeInterval) Parameters TimeInterval byte Close() TCP关闭 public override void Close() ConnectAsync(int) 开始异步连接 WebSocket public Task ConnectAsync(int port) Parameters port int 端口号 Returns Task ConnectAsync(string) 开始异步连接 WebSocket public Task ConnectAsync(string uriPrefix) Parameters uriPrefix string 高级定义法，例如：0.0.0.0:80/tcp，该格式适用 Returns Task ConnectAsync(string, int) 开始异步连接 WebSocket public override Task ConnectAsync(string ip, int port) Parameters ip string 可以使用“*” port int 端口号 Returns Task CreateSendBytes(int) 创建数据包对象 public override SendBytes<WebSocket> CreateSendBytes(int length = 0) Parameters length int 数据包大小 Returns SendBytes<WebSocket> Dispose() 回收UDP相关资源 public override void Dispose() OnComplete(in UserKey, EnClient) 事件方法 public override ValueTask<IGetQueOnEnum> OnComplete(in UserKey key, EnClient enAction) Parameters key UserKey 指定发送对象 enAction EnClient 消息类型 Returns ValueTask<IGetQueOnEnum> Reconnection() 重连，返回是否重连，如果没有断开是不会重连的 public override Task<bool> Reconnection() Returns Task<bool> SendAsync(Memory<byte>) 开始异步发送数据 public ValueTask<bool> SendAsync(Memory<byte> listData) Parameters listData Memory<byte> 要发送的内容 Returns ValueTask<bool> SendAsync(string) 开始异步发送数据 public ValueTask<bool> SendAsync(string msg) Parameters msg string 要发送的内容 Returns ValueTask<bool> SendAsync(SendBytes<WebSocket>) 开始异步发送数据 public override ValueTask SendAsync(SendBytes<WebSocket> sendBytes) Parameters sendBytes SendBytes<WebSocket> 数据包对象 Returns ValueTask SetCompleted(CompletedEvent<EnClient>) 连接、发送、关闭事件 EnClient public override void SetCompleted(CompletedEvent<EnClient> Completed) Parameters Completed CompletedEvent<EnClient> SetInitWebContext(Action<ClientWebSocketOptions>) 在连接发送前，回调可设置的参数 public void SetInitWebContext(Action<ClientWebSocketOptions> initWebOptions) Parameters initWebOptions Action<ClientWebSocketOptions> SetReceived(ReceiveEvent<WebSocket>) 接收到数据事件 public override void SetReceived(ReceiveEvent<WebSocket> Received) Parameters Received ReceiveEvent<WebSocket>"
  },
  "api/Tool.Sockets.WebHelper.WebServerAsync.html": {
    "href": "api/Tool.Sockets.WebHelper.WebServerAsync.html",
    "title": "Class WebServerAsync | Tool.Net",
    "keywords": "Class WebServerAsync Namespace Tool.Sockets.WebHelper Assembly Tool.Net.dll WebServer长连接对象 public sealed class WebServerAsync : NetworkListener<WebSocketContext>, INetworkListener<WebSocketContext>, INetworkListener, INetworkCore, IDisposable Inheritance object EnServerEventDrive NetworkListener<WebSocketContext> WebServerAsync Implements INetworkListener<WebSocketContext> INetworkListener INetworkCore IDisposable Inherited Members NetworkListener<WebSocketContext>.IsThreadPool NetworkListener<WebSocketContext>.BufferSize EnServerEventDrive.OnInterceptor(EnServer, bool) EnServerEventDrive.OnIsQueue(EnServer, bool) EnServerEventDrive.IsEvent(EnServer) EnServerEventDrive.IsQueue(EnServer) EnServerEventDrive.OpenAllEvent() EnServerEventDrive.OpenAllQueue() EnServerEventDrive.CloseAllEvent() EnServerEventDrive.CloseAllQueue() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors WebServerAsync() 创建一个 WebServerAsync 服务器类 public WebServerAsync() WebServerAsync(NetBufferSize) 创建一个 WebServerAsync 服务器类，确认模式和设置流大小 public WebServerAsync(NetBufferSize size) Parameters size NetBufferSize 包大小枚举(警告：请务必保证服务端的大小和客户端一致) Properties IsClose 标识服务端连接是否关闭 public override bool IsClose { get; } Property Value bool IsSSL 获取指示是否使用安全套接字层 (SSL) 保护 WebSocket 连接的值。 public bool IsSSL { get; init; } Property Value bool Remarks true 如果使用 SSL; 保护 WebSocket 连接，否则为false。 ListClient 已建立连接的集合 key:UserKey value:WebSocketContext public override IReadOnlyDictionary<UserKey, WebSocketContext> ListClient { get; } Property Value IReadOnlyDictionary<UserKey, WebSocketContext> Millisecond 监听控制毫秒 public override int Millisecond { get; set; } Property Value int Server 服务器创建时的信息 public override UserKey Server { get; } Property Value UserKey Methods CreateSendBytes(WebSocketContext, int) 创建数据发送空间 public override SendBytes<WebSocketContext> CreateSendBytes(WebSocketContext client, int length = 0) Parameters client WebSocketContext 收数据的对象 length int 数据大小 Returns SendBytes<WebSocketContext> CreateSendBytes(in UserKey, int) 创建数据发送空间 public SendBytes<WebSocketContext> CreateSendBytes(in UserKey key, int length) Parameters key UserKey 接收者信息 length int 数据大小 Returns SendBytes<WebSocketContext> Exceptions Exception 连接已中断 Dispose() 回收资源，并关闭所有连接 public override void Dispose() OnComplete(in UserKey, EnServer) 事件方法 public override ValueTask<IGetQueOnEnum> OnComplete(in UserKey key, EnServer enAction) Parameters key UserKey 指定发送对象 enAction EnServer 消息类型 Returns ValueTask<IGetQueOnEnum> SendAsync(WebSocketContext, Memory<byte>) 开始异步发送数据 public ValueTask<bool> SendAsync(WebSocketContext client, Memory<byte> listData) Parameters client WebSocketContext 客户端密钥 listData Memory<byte> 要发送的内容 Returns ValueTask<bool> SendAsync(WebSocketContext, string) 开始异步发送数据 public ValueTask<bool> SendAsync(WebSocketContext client, string msg) Parameters client WebSocketContext 客户端密钥 msg string 要发送的内容 Returns ValueTask<bool> SendAsync(SendBytes<WebSocketContext>) 异步发送消息 public override ValueTask SendAsync(SendBytes<WebSocketContext> sendBytes) Parameters sendBytes SendBytes<WebSocketContext> 数据包 Returns ValueTask Exceptions ArgumentException Client空 或 已断开连接 SendAsync(UserKey, Memory<byte>) 开始异步发送数据 public ValueTask<bool> SendAsync(UserKey key, Memory<byte> Data) Parameters key UserKey 客户端密钥 Data Memory<byte> 要发送的内容 Returns ValueTask<bool> SendAsync(UserKey, string) 开始异步发送数据 public ValueTask<bool> SendAsync(UserKey key, string msg) Parameters key UserKey 客户端密钥 msg string 要发送的内容 Returns ValueTask<bool> SetCompleted(CompletedEvent<EnServer>) 连接、发送、关闭事件 EnServer public override void SetCompleted(CompletedEvent<EnServer> Completed) Parameters Completed CompletedEvent<EnServer> SetInitWebContext(Func<HttpListenerContext, Task<HttpListenerWebSocketContext>>) 当新连接，创建时，可以自定义之协议，不实现走默认流程（当实现后，返回null时取消后续业务，请自行关闭连接） public void SetInitWebContext(Func<HttpListenerContext, Task<HttpListenerWebSocketContext>> InitWebContext) Parameters InitWebContext Func<HttpListenerContext, Task<HttpListenerWebSocketContext>> SetReceived(ReceiveEvent<WebSocketContext>) 接收到数据事件 public override void SetReceived(ReceiveEvent<WebSocketContext> Received) Parameters Received ReceiveEvent<WebSocketContext> StartAsync(int) 开始异步监听本机127.0.0.1的端口号 public Task StartAsync(int port) Parameters port int 端口号 Returns Task StartAsync(string) 开始异步监听ip地址的端口 public Task StartAsync(string uriPrefix) Parameters uriPrefix string 高级定义法，例如：0.0.0.0:80/tcp，该格式适用 Returns Task StartAsync(string, int) 开始异步监听ip地址的端口 public override Task StartAsync(string ip, int port) Parameters ip string 可以使用“*” port int 端口号 Returns Task Stop() HttpListener关闭 public override void Stop() TrySocket(in UserKey, out WebSocketContext) 根据Key获取对应的连接对象 public override bool TrySocket(in UserKey key, out WebSocketContext client) Parameters key UserKey IP:Port client WebSocketContext 连接对象 Returns bool 返回成功状态"
  },
  "api/Tool.Sockets.WebHelper.html": {
    "href": "api/Tool.Sockets.WebHelper.html",
    "title": "Namespace Tool.Sockets.WebHelper | Tool.Net",
    "keywords": "Namespace Tool.Sockets.WebHelper Classes WebClientAsync WebSocket连接对象 WebServerAsync WebServer长连接对象"
  },
  "api/Tool.SqlCore.BaseDataProvider.html": {
    "href": "api/Tool.SqlCore.BaseDataProvider.html",
    "title": "Class BaseDataProvider | Tool.Net",
    "keywords": "Class BaseDataProvider Namespace Tool.SqlCore Assembly Tool.Net.dll 数据库访问底层父类，继承皆可实现高效开发访问 public abstract class BaseDataProvider Inheritance object BaseDataProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors BaseDataProvider(string, string, IDbProvider) 初始化 底层 默认为SqlServer 数据库的访问 protected BaseDataProvider(string connectionString, string dbProviderName, IDbProvider dbProvider) Parameters connectionString string 连接字符串 dbProviderName string 数据库类型定义名称 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 BaseDataProvider(string, string, IDbProvider, ILogger) 初始化 底层 默认为SqlServer 数据库的访问 protected BaseDataProvider(string connectionString, string dbProviderName, IDbProvider dbProvider, ILogger logger) Parameters connectionString string 连接字符串 dbProviderName string 数据库类型定义名称 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 logger ILogger 用于打印程序日志，可以为null BaseDataProvider(string, DbProviderType, IDbProvider) 初始化 底层 protected BaseDataProvider(string connectionString, DbProviderType dbProviderType, IDbProvider dbProvider) Parameters connectionString string 连接字符串 dbProviderType DbProviderType 数据库类型 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 BaseDataProvider(string, DbProviderType, IDbProvider, ILogger) 初始化 底层 protected BaseDataProvider(string connectionString, DbProviderType dbProviderType, IDbProvider dbProvider, ILogger logger) Parameters connectionString string 连接字符串 dbProviderType DbProviderType 数据库类型 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 logger ILogger 用于打印程序日志，可以为null BaseDataProvider(DbHelper) 初始化 底层 protected BaseDataProvider(DbHelper database) Parameters database DbHelper 操作对象 Properties ConnectionString 链接字符串 protected string ConnectionString { get; } Property Value string Database 数据底层类 protected DbHelper Database { get; } Property Value DbHelper DbProviderName 获取当前访问的数据库类型 protected string DbProviderName { get; } Property Value string DbProviderType 获取当前访问的数据库类型 protected DbProviderType DbProviderType { get; } Property Value DbProviderType IsSqlLog 是否启动SQL日志打印 protected bool IsSqlLog { get; set; } Property Value bool Methods GetPagerSet(PagerParameters) 分页，用于SQL对象的分页 protected virtual PagerSet GetPagerSet(PagerParameters prams) Parameters prams PagerParameters Returns PagerSet GetPagerSetAsync(PagerParameters) 分页，用于SQL对象的分页 protected virtual Task<PagerSet> GetPagerSetAsync(PagerParameters prams) Parameters prams PagerParameters Returns Task<PagerSet> GetTableProvider(string) 表信息对象，用于对单张表的处理 protected virtual ITableProvider GetTableProvider(string tableName) Parameters tableName string 表名 Returns ITableProvider GetTableProvider<T>(string) 表信息对象，用于对单张表的处理，可以通过自己实现接口来完成效果。 protected virtual ITableProvider GetTableProvider<T>(string tableName) where T : ITableProvider, new() Parameters tableName string 表名 Returns ITableProvider Type Parameters T 自己实现的单表操作类"
  },
  "api/Tool.SqlCore.DbHelper.html": {
    "href": "api/Tool.SqlCore.DbHelper.html",
    "title": "Class DbHelper | Tool.Net",
    "keywords": "Class DbHelper Namespace Tool.SqlCore Assembly Tool.Net.dll Sql 核心 操作底层 public class DbHelper Inheritance object DbHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) DbHelperExensions.Delete(DbHelper, string, string, object) DbHelperExensions.Delete(DbHelper, params string[]) DbHelperExensions.DeleteAsync(DbHelper, string, string, object) DbHelperExensions.DeleteAsync(DbHelper, params string[]) DbHelperExensions.DeleteAsync<T>(DbHelper, string, object) DbHelperExensions.Delete<T>(DbHelper, string, object) DbHelperExensions.GetInsertParams(DbHelper, IDictionary<string, object>, out string, out string) DbHelperExensions.GetTextParameter(DbHelper, string, object) DbHelperExensions.GetUpdateParams(DbHelper, IDictionary<string, object>, out string) DbHelperExensions.Insert(DbHelper, string, object) DbHelperExensions.Insert(DbHelper, params string[]) DbHelperExensions.InsertAsync(DbHelper, string, object) DbHelperExensions.InsertAsync(DbHelper, params string[]) DbHelperExensions.InsertAsync<T>(DbHelper, object) DbHelperExensions.Insert<T>(DbHelper, object) DbHelperExensions.Select(DbHelper, string, object) DbHelperExensions.Select(DbHelper, params string[]) DbHelperExensions.SelectArray(DbHelper, CommandType, string, object) DbHelperExensions.SelectArray(DbHelper, string, object) DbHelperExensions.SelectArrayAsync(DbHelper, CommandType, string, object) DbHelperExensions.SelectArrayAsync(DbHelper, string, object) DbHelperExensions.SelectAsync(DbHelper, string, object) DbHelperExensions.SelectAsync(DbHelper, params string[]) DbHelperExensions.SelectAsync<T>(DbHelper, Action<T>) DbHelperExensions.SelectDictionary(DbHelper, CommandType, string, object) DbHelperExensions.SelectDictionary(DbHelper, string, object) DbHelperExensions.SelectDictionaryAsync(DbHelper, CommandType, string, object) DbHelperExensions.SelectDictionaryAsync(DbHelper, string, object) DbHelperExensions.Select<T>(DbHelper, Action<T>) DbHelperExensions.Update(DbHelper, string, string, params object[]) DbHelperExensions.Update(DbHelper, params string[]) DbHelperExensions.UpdateAsync(DbHelper, string, string, params object[]) DbHelperExensions.UpdateAsync(DbHelper, params string[]) DbHelperExensions.UpdateAsync<T>(DbHelper, string, params object[]) DbHelperExensions.Update<T>(DbHelper, string, params object[]) MessageHelper.GetMessage(DbHelper, string, List<DbParameter>) MessageHelper.GetMessage(DbHelper, string, object, params DbParameter[]) MessageHelper.GetMessageAsync(DbHelper, string, List<DbParameter>) MessageHelper.GetMessageAsync(DbHelper, string, object, params DbParameter[]) MessageHelper.GetMessageForDataSet(DbHelper, string, List<DbParameter>) MessageHelper.GetMessageForDataSet(DbHelper, string, object, params DbParameter[]) MessageHelper.GetMessageForDataSetAsync(DbHelper, string, List<DbParameter>) MessageHelper.GetMessageForDataSetAsync(DbHelper, string, object, params DbParameter[]) MessageHelper.GetMessageForObjectAsync<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetMessageForObjectAsync<T>(DbHelper, string, object, params DbParameter[]) MessageHelper.GetMessageForObjectListAsync<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetMessageForObjectListAsync<T>(DbHelper, string, object, params DbParameter[]) MessageHelper.GetMessageForObjectList<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetMessageForObjectList<T>(DbHelper, string, object, params DbParameter[]) MessageHelper.GetMessageForObject<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetMessageForObject<T>(DbHelper, string, object, params DbParameter[]) MessageHelper.GetObjectAsync<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetObjectAsync<T>(DbHelper, string, object) MessageHelper.GetObjectAsync<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) MessageHelper.GetObjectListAsync<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetObjectListAsync<T>(DbHelper, string, object) MessageHelper.GetObjectListAsync<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) MessageHelper.GetObjectList<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetObjectList<T>(DbHelper, string, object) MessageHelper.GetObjectList<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) MessageHelper.GetObject<T>(DbHelper, string, List<DbParameter>) MessageHelper.GetObject<T>(DbHelper, string, object) MessageHelper.GetObject<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) Remarks 代码由逆血提供支持 Constructors DbHelper(string, string, IDbProvider) 有参构造，创建自定义数据库对象 public DbHelper(string connString, string dbProviderName, IDbProvider dbProvider) Parameters connString string Sql链接字符串 dbProviderName string 数据库类型定义名称 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 DbHelper(string, string, IDbProvider, ILogger) 有参构造，创建自定义数据库对象 public DbHelper(string connString, string dbProviderName, IDbProvider dbProvider, ILogger logger) Parameters connString string Sql链接字符串 dbProviderName string 数据库类型定义名称 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 logger ILogger 用于打印程序日志，可以为null DbHelper(string, DbProviderType, IDbProvider) 有参构造，创建内置包含数据库对象 public DbHelper(string connString, DbProviderType dbProviderType, IDbProvider dbProvider) Parameters connString string Sql链接字符串 dbProviderType DbProviderType 数据库类型 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 DbHelper(string, DbProviderType, IDbProvider, ILogger) 有参构造，创建内置包含数据库对象 public DbHelper(string connString, DbProviderType dbProviderType, IDbProvider dbProvider, ILogger logger) Parameters connString string Sql链接字符串 dbProviderType DbProviderType 数据库类型 dbProvider IDbProvider 实现SQL对象类，具有高扩展性 logger ILogger 用于打印程序日志，可以为null Fields LogPath 在开启数据库日志模式后，将日志打印至该路径下。 public const string LogPath = \"Log/Sql/\" Field Value string Properties CommandTimeout 获取或设置 DbCommand.CommandTimeout 最大等待时长（秒） public int CommandTimeout { get; set; } Property Value int ConnectionString 链接Sql字符串 protected string ConnectionString { get; set; } Property Value string DbProviderName 获取当前访问的数据库类型 protected string DbProviderName { get; } Property Value string DbProviderType 获取当前访问的数据库类型 protected DbProviderType DbProviderType { get; } Property Value DbProviderType Factory 数据工厂对象 public DbProviderFactory Factory { get; } Property Value DbProviderFactory IsSqlLog 是否启动SQL日志打印 public bool IsSqlLog { get; set; } Property Value bool IsSqlLogHtml 打印模式，true = 采用HTML打印模式，false = 采用txt打印模式 [Obsolete(\"因模式维护成本较高，且这种方式显示并不美观，将不在维护！\", true)] public bool IsSqlLogHtml { get; set; } Property Value bool Logger 用于支持打印调试日志，必须在开启IsSqlLog 并 Logger 有值时才能使用。 public ILogger Logger { get; } Property Value ILogger Provider IDB提供商 public IDbProvider Provider { get; } Property Value IDbProvider QueryCount 查询计数（请求计数超过最大后会重新计数） public ulong QueryCount { get; set; } Property Value ulong SubPath 打印日志的子路径段 public string SubPath { get; set; } Property Value string Methods CreateCommand() 返回实现 DbCommand 类的提供程序类的一个新实例。 public DbCommand CreateCommand() Returns DbCommand DbCommand 的新实例。 CreateCommand(DbConnection, string, params string[]) 返回SQL数据对象基类 public DbCommand CreateCommand(DbConnection connection, string spName, params string[] sourceColumns) Parameters connection DbConnection 数据库链接对象 spName string 存储过程名 sourceColumns string[] 字符串映射对象 Returns DbCommand CreateCommand(object) 返回实现 DbCommand 类的提供程序类的一个新实例。 public DbCommand CreateCommand(object prams) Parameters prams object 给对象赋值提供的 字典/对象 Returns DbCommand 的新实例。 Exceptions ArgumentNullException CreateCommandAsync(DbConnection, string, params string[]) 返回SQL数据对象基类 public Task<DbCommand> CreateCommandAsync(DbConnection connection, string spName, params string[] sourceColumns) Parameters connection DbConnection 数据库链接对象 spName string 存储过程名 sourceColumns string[] 字符串映射对象 Returns Task<DbCommand> CreateCommandBuilder() 返回实现 DbCommandBuilder 类的提供程序类的一个新实例。 public DbCommandBuilder CreateCommandBuilder() Returns DbCommandBuilder DbCommandBuilder 的新实例。 CreateCommandBuilder(object) 返回实现 DbCommandBuilder 类的提供程序类的一个新实例。 public DbCommandBuilder CreateCommandBuilder(object prams) Parameters prams object 给对象赋值提供的 字典/对象 Returns DbCommandBuilder DbCommandBuilder 的新实例。 CreateCommandBuilder<T>() 返回实现 DbCommandBuilder 类的提供程序类的一个新实例。 public T CreateCommandBuilder<T>() where T : DbCommandBuilder Returns T DbCommandBuilder 的新实例。 Type Parameters T 指定数据库的 DbCommandBuilder 实现类 CreateCommandBuilder<T>(object) 返回实现 DbCommandBuilder 类的提供程序类的一个新实例。 public T CreateCommandBuilder<T>(object prams) where T : DbCommandBuilder Parameters prams object 给对象赋值提供的 字典/对象 Returns T DbCommandBuilder 的新实例。 Type Parameters T 指定数据库的 DbCommandBuilder 实现类 CreateCommand<T>() 返回实现 DbCommand 类的提供程序类的一个新实例。 public T CreateCommand<T>() where T : DbCommand Returns T DbCommand 的新实例。 Type Parameters T 指定数据库的 DbCommand 实现类 CreateCommand<T>(object) 返回实现 DbCommand 类的提供程序类的一个新实例。 public T CreateCommand<T>(object prams) where T : DbCommand Parameters prams object 给对象赋值提供的 字典/对象 Returns T 的新实例。 Type Parameters T Exceptions ArgumentNullException CreateConnection() 返回实现 DbConnection 类的提供程序类的一个新实例。 public DbConnection CreateConnection() Returns DbConnection DbConnection 的新实例。 CreateConnection(object) 返回实现 DbConnection 类的提供程序类的一个新实例。 public DbConnection CreateConnection(object prams) Parameters prams object 给对象赋值提供的 字典/对象 Returns DbConnection DbConnection 的新实例。 CreateConnectionStringBuilder() 返回实现 DbConnectionStringBuilder 类的提供程序类的一个新实例。 public DbConnectionStringBuilder CreateConnectionStringBuilder() Returns DbConnectionStringBuilder DbConnectionStringBuilder 的新实例。 CreateConnectionStringBuilder(object) 返回实现 DbConnectionStringBuilder 类的提供程序类的一个新实例。 public DbConnectionStringBuilder CreateConnectionStringBuilder(object prams) Parameters prams object 给对象赋值提供的 字典/对象 Returns DbConnectionStringBuilder DbConnectionStringBuilder 的新实例。 CreateConnectionStringBuilder<T>() 返回实现 DbConnectionStringBuilder 类的提供程序类的一个新实例。 public T CreateConnectionStringBuilder<T>() where T : DbConnectionStringBuilder Returns T DbConnectionStringBuilder 的新实例。 Type Parameters T 指定数据库的 DbConnectionStringBuilder 实现类 CreateConnectionStringBuilder<T>(object) 返回实现 DbConnectionStringBuilder 类的提供程序类的一个新实例。 public T CreateConnectionStringBuilder<T>(object prams) where T : DbConnectionStringBuilder Parameters prams object 给对象赋值提供的 字典/对象 Returns T DbConnectionStringBuilder 的新实例。 Type Parameters T 指定数据库的 DbConnectionStringBuilder 实现类 CreateConnection<T>() 返回实现 DbConnection 类的提供程序类的一个新实例。 public T CreateConnection<T>() where T : DbConnection Returns T DbConnection 的新实例。 Type Parameters T 指定数据库的 DbConnection 实现类 CreateConnection<T>(object) 返回实现 DbConnection 类的提供程序类的一个新实例。 public T CreateConnection<T>(object prams) where T : DbConnection Parameters prams object 给对象赋值提供的 字典/对象 Returns T DbConnection 的新实例。 Type Parameters T 指定数据库的 DbConnection 实现类 CreateDataAdapter() 返回实现 DbDataAdapter 类的提供程序类的一个新实例。 public DbDataAdapter CreateDataAdapter() Returns DbDataAdapter DbDataAdapter 的新实例。 CreateDataAdapter(object) 返回实现 DbDataAdapter 类的提供程序类的一个新实例。 public DbDataAdapter CreateDataAdapter(object prams) Parameters prams object 给对象赋值提供的 字典/对象 Returns DbDataAdapter DbDataAdapter 的新实例。 CreateDataAdapter<T>() 返回实现 DbDataAdapter 类的提供程序类的一个新实例。 public T CreateDataAdapter<T>() where T : DbDataAdapter Returns T DbDataAdapter 的新实例。 Type Parameters T 指定数据库的 DbDataAdapter 实现类 CreateDataAdapter<T>(object) 返回实现 DbDataAdapter 类的提供程序类的一个新实例。 public T CreateDataAdapter<T>(object prams) where T : DbDataAdapter Parameters prams object 给对象赋值提供的 字典/对象 Returns T DbDataAdapter 的新实例。 Type Parameters T 指定数据库的 DbDataAdapter 实现类 CreateDataSourceEnumerator() 返回实现 DbDataSourceEnumerator 类的提供程序类的一个新实例。 public DbDataSourceEnumerator CreateDataSourceEnumerator() Returns DbDataSourceEnumerator DbDataSourceEnumerator 的新实例。 CreateDataSourceEnumerator(object) 返回实现 DbDataSourceEnumerator 类的提供程序类的一个新实例。 public DbDataSourceEnumerator CreateDataSourceEnumerator(object prams) Parameters prams object 给对象赋值提供的 字典/对象 Returns DbDataSourceEnumerator DbDataSourceEnumerator 的新实例。 CreateDataSourceEnumerator<T>() 返回实现 DbDataSourceEnumerator 类的提供程序类的一个新实例。 public T CreateDataSourceEnumerator<T>() where T : DbDataSourceEnumerator Returns T DbDataSourceEnumerator 的新实例。 Type Parameters T 指定数据库的 DbDataSourceEnumerator 实现类 CreateDataSourceEnumerator<T>(object) 返回实现 DbDataSourceEnumerator 类的提供程序类的一个新实例。 public T CreateDataSourceEnumerator<T>(object prams) where T : DbDataSourceEnumerator Parameters prams object 给对象赋值提供的 字典/对象 Returns T DbDataSourceEnumerator 的新实例。 Type Parameters T 指定数据库的 DbDataSourceEnumerator 实现类 CreateParameter() 返回实现 DbParameter 类的提供程序类的一个新实例。 public DbParameter CreateParameter() Returns DbParameter DbParameter 的新实例。 CreateParameter(object) 返回实现 DbParameter 类的提供程序类的一个新实例。 public DbParameter CreateParameter(object prams) Parameters prams object 给对象赋值提供的 字典/对象 Returns DbParameter DbParameter 的新实例。 CreateParameter<T>() 返回实现 DbParameter 类的提供程序类的一个新实例。 public T CreateParameter<T>() where T : DbParameter Returns T DbParameter 的新实例。 Type Parameters T 指定数据库的 DbParameter 实现类 CreateParameter<T>(object) 返回实现 DbParameter 类的提供程序类的一个新实例。 public T CreateParameter<T>(object prams) where T : DbParameter Parameters prams object 给对象赋值提供的 字典/对象 Returns T DbParameter 的新实例。 Type Parameters T 指定数据库的 DbParameter 实现类 CreateTransaction() 返回实现 DbTransaction 类的提供程序类的一个新实例。 public DbTransaction CreateTransaction() Returns DbTransaction DbTransaction 的新实例。 CreateTransaction(IsolationLevel) 返回实现 DbTransaction 类的提供程序类的一个新实例。 public DbTransaction CreateTransaction(IsolationLevel isolationLevel) Parameters isolationLevel IsolationLevel 指定的事物类型 Returns DbTransaction DbTransaction 的新实例。 CreateTransactionAsync() 返回实现 DbTransaction 类的提供程序类的一个新实例。 public Task<DbTransaction> CreateTransactionAsync() Returns Task<DbTransaction> DbTransaction 的新实例。 CreateTransactionAsync(IsolationLevel) 返回实现 DbTransaction 类的提供程序类的一个新实例。 public Task<DbTransaction> CreateTransactionAsync(IsolationLevel isolationLevel) Parameters isolationLevel IsolationLevel 指定的事物类型 Returns Task<DbTransaction> DbTransaction 的新实例。 CreateTransactionAsync<T>() 返回实现 DbTransaction 类的提供程序类的一个新实例。 public Task<T> CreateTransactionAsync<T>() where T : DbTransaction Returns Task<T> DbTransaction 的新实例。 Type Parameters T 指定数据库的 DbTransaction 实现类 CreateTransactionAsync<T>(IsolationLevel) 返回实现 DbTransaction 类的提供程序类的一个新实例。 public Task<T> CreateTransactionAsync<T>(IsolationLevel isolationLevel) where T : DbTransaction Parameters isolationLevel IsolationLevel 指定的事物类型 Returns Task<T> DbTransaction 的新实例。 Type Parameters T 指定数据库的 DbTransaction 实现类 CreateTransaction<T>() 返回实现 DbTransaction 类的提供程序类的一个新实例。 public T CreateTransaction<T>() where T : DbTransaction Returns T DbTransaction 的新实例。 Type Parameters T 指定数据库的 DbTransaction 实现类 CreateTransaction<T>(IsolationLevel) 返回实现 DbTransaction 类的提供程序类的一个新实例。 public T CreateTransaction<T>(IsolationLevel isolationLevel) where T : DbTransaction Parameters isolationLevel IsolationLevel 指定的事物类型 Returns T DbTransaction 的新实例。 Type Parameters T 指定数据库的 DbTransaction 实现类 EmptyCachedParameterSet() 清空缓存的参数集（会清空所有的参数信息） public void EmptyCachedParameterSet() ExecuteCommandWithSplitter(string) 执行拆分命令 拆分符（\\r\\nGO\\r\\n） public void ExecuteCommandWithSplitter(string commandText) Parameters commandText string SQL语句 ExecuteCommandWithSplitter(string, string) 执行拆分命令 public void ExecuteCommandWithSplitter(string commandText, string splitter) Parameters commandText string SQL语句 splitter string 拆分符 ExecuteCommandWithSplitterAsync(string) 执行拆分命令 拆分符（\\r\\nGO\\r\\n） public Task ExecuteCommandWithSplitterAsync(string commandText) Parameters commandText string SQL语句 Returns Task ExecuteCommandWithSplitterAsync(string, string) 执行拆分命令 public Task ExecuteCommandWithSplitterAsync(string commandText, string splitter) Parameters commandText string SQL语句 splitter string 拆分符 Returns Task ExecuteDataSet(CommandType, string) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(CommandType commandType, string commandText) Parameters commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 Returns DataSet ExecuteDataSet(CommandType, string, params DbParameter[]) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 commandParameters DbParameter[] 参数对象 Returns DataSet ExecuteDataSet(CommandType, string, object) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(CommandType commandType, string commandText, object prams) Parameters commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 prams object 对字符串进行映射 Returns DataSet ExecuteDataSet(DbConnection, CommandType, string) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库链接对象 commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 Returns DataSet ExecuteDataSet(DbConnection, CommandType, string, params DbParameter[]) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns DataSet ExecuteDataSet(DbConnection, string, params object[]) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(DbConnection connection, string spName, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns DataSet ExecuteDataSet(DbTransaction, CommandType, string) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns DataSet ExecuteDataSet(DbTransaction, CommandType, string, params DbParameter[]) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns DataSet ExecuteDataSet(DbTransaction, string, params object[]) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns DataSet ExecuteDataSet(string) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(string commandText) Parameters commandText string Sql字符串 Returns DataSet ExecuteDataSet(string, object) 执行SQL获取DataSet数据源 public DataSet ExecuteDataSet(string commandText, object prams) Parameters commandText string Sql字符串 prams object 对字符串进行映射 Returns DataSet ExecuteDataSetAsync(CommandType, string) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(CommandType commandType, string commandText) Parameters commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 Returns Task<DataSet> ExecuteDataSetAsync(CommandType, string, params DbParameter[]) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 commandParameters DbParameter[] 参数对象 Returns Task<DataSet> ExecuteDataSetAsync(CommandType, string, object) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(CommandType commandType, string commandText, object prams) Parameters commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 prams object 对字符串进行映射 Returns Task<DataSet> ExecuteDataSetAsync(DbConnection, CommandType, string) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库链接对象 commandType CommandType 指定如何解释命令字符串。 commandText string Sql字符串 Returns Task<DataSet> ExecuteDataSetAsync(DbConnection, CommandType, string, params DbParameter[]) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<DataSet> ExecuteDataSetAsync(DbConnection, string, params object[]) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(DbConnection connection, string spName, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<DataSet> ExecuteDataSetAsync(DbTransaction, CommandType, string) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<DataSet> ExecuteDataSetAsync(DbTransaction, CommandType, string, params DbParameter[]) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<DataSet> ExecuteDataSetAsync(DbTransaction, string, params object[]) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<DataSet> ExecuteDataSetAsync(string) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(string commandText) Parameters commandText string Sql字符串 Returns Task<DataSet> ExecuteDataSetAsync(string, object) 执行SQL获取DataSet数据源 public Task<DataSet> ExecuteDataSetAsync(string commandText, object prams) Parameters commandText string Sql字符串 prams object 对字符串进行映射 Returns Task<DataSet> ExecuteDatasetTypedParams(DbConnection, string, DataRow) 根据SQL获取DataSet public DataSet ExecuteDatasetTypedParams(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数 Returns DataSet ExecuteDatasetTypedParams(DbTransaction, string, DataRow) 根据SQL获取DataSet public DataSet ExecuteDatasetTypedParams(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数 Returns DataSet ExecuteDatasetTypedParams(string, DataRow) 根据SQL获取DataSet public DataSet ExecuteDatasetTypedParams(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数 Returns DataSet ExecuteDatasetTypedParamsAsync(DbConnection, string, DataRow) 根据SQL获取DataSet public Task<DataSet> ExecuteDatasetTypedParamsAsync(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数 Returns Task<DataSet> ExecuteDatasetTypedParamsAsync(DbTransaction, string, DataRow) 根据SQL获取DataSet public Task<DataSet> ExecuteDatasetTypedParamsAsync(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数 Returns Task<DataSet> ExecuteDatasetTypedParamsAsync(string, DataRow) 根据SQL获取DataSet public Task<DataSet> ExecuteDatasetTypedParamsAsync(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数 Returns Task<DataSet> ExecuteNonQuery(CommandType, string) 根据SQL返回受影响行数 public int ExecuteNonQuery(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns int ExecuteNonQuery(CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns int ExecuteNonQuery(CommandType, string, object) 根据SQL返回受影响行数 public int ExecuteNonQuery(CommandType commandType, string commandText, object prams) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 prams object 字符串映射对象 Returns int ExecuteNonQuery(DbConnection, CommandType, string) 根据SQL返回受影响行数 public int ExecuteNonQuery(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns int ExecuteNonQuery(DbConnection, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns int ExecuteNonQuery(DbConnection, string, params object[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(DbConnection connection, string spName, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns int ExecuteNonQuery(DbTransaction, CommandType, string) 根据SQL返回受影响行数 public int ExecuteNonQuery(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns int ExecuteNonQuery(DbTransaction, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns int ExecuteNonQuery(DbTransaction, string, params object[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns int ExecuteNonQuery(DbTransaction, params SqlTextParameter[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(DbTransaction transaction, params SqlTextParameter[] sqlTexts) Parameters transaction DbTransaction SQL事物对象 sqlTexts SqlTextParameter[] SQL操作对象SqlTextParameter[] Returns int 返回受影响行数 ExecuteNonQuery(out object, CommandType, string) 根据SQL返回受影响行数 public int ExecuteNonQuery(out object id, CommandType commandType, string commandText) Parameters id object 返回第一行第一列的id commandType CommandType CommandType对象 commandText string SQL字符串 Returns int ExecuteNonQuery(out object, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(out object id, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters id object 返回第一行第一列的id commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns int ExecuteNonQuery(out object, DbConnection, CommandType, string) 根据SQL返回受影响行数 public int ExecuteNonQuery(out object id, DbConnection connection, CommandType commandType, string commandText) Parameters id object 返回第一行第一列的id connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns int ExecuteNonQuery(out object, DbConnection, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(out object id, DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters id object 返回第一行第一列的id connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns int ExecuteNonQuery(out object, DbTransaction, CommandType, string) 根据SQL返回受影响行数 public int ExecuteNonQuery(out object id, DbTransaction transaction, CommandType commandType, string commandText) Parameters id object 返回第一行第一列的id transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns int ExecuteNonQuery(out object, DbTransaction, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public int ExecuteNonQuery(out object id, DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters id object 返回第一行第一列的id transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns int ExecuteNonQuery(out object, string) 根据SQL返回受影响行数 public int ExecuteNonQuery(out object id, string commandText) Parameters id object 返回第一行第一列的id commandText string SQL字符串 Returns int ExecuteNonQuery(string) 根据SQL返回受影响行数 public int ExecuteNonQuery(string commandText) Parameters commandText string SQL字符串 Returns int ExecuteNonQuery(string, object) 根据SQL返回受影响行数 public int ExecuteNonQuery(string commandText, object prams) Parameters commandText string SQL字符串 prams object 字符串映射对象 Returns int 受影响行数 ExecuteNonQueryAsync(CommandType, string) 根据SQL返回受影响行数(异步等待) public Task<int> ExecuteNonQueryAsync(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<int> ExecuteNonQueryAsync(CommandType, string, params DbParameter[]) 根据SQL返回受影响行数(异步等待) public Task<int> ExecuteNonQueryAsync(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<int> ExecuteNonQueryAsync(CommandType, string, object) 根据SQL返回受影响行数(异步等待) public Task<int> ExecuteNonQueryAsync(CommandType commandType, string commandText, object prams) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 prams object 字符串映射对象 Returns Task<int> ExecuteNonQueryAsync(DbConnection, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryAsync(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<int> ExecuteNonQueryAsync(DbTransaction, CommandType, string) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryAsync(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<int> ExecuteNonQueryAsync(DbTransaction, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryAsync(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<int> ExecuteNonQueryAsync(DbTransaction, string, params object[]) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryAsync(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<int> ExecuteNonQueryAsync(DbTransaction, params SqlTextParameter[]) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryAsync(DbTransaction transaction, params SqlTextParameter[] sqlTexts) Parameters transaction DbTransaction SQL事物对象 sqlTexts SqlTextParameter[] SQL操作对象SqlTextParameter[] Returns Task<int> 返回受影响行数 ExecuteNonQueryAsync(string) 根据SQL返回受影响行数(异步等待) public Task<int> ExecuteNonQueryAsync(string commandText) Parameters commandText string SQL字符串 Returns Task<int> ExecuteNonQueryAsync(string, object) 根据SQL返回受影响行数(异步等待) public Task<int> ExecuteNonQueryAsync(string commandText, object prams) Parameters commandText string SQL字符串 prams object 字符串映射对象 Returns Task<int> 受影响行数 ExecuteNonQueryIdAsync(CommandType, string) 根据SQL返回受影响行数 public Task<SqlNonQuery> ExecuteNonQueryIdAsync(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<SqlNonQuery> 返回第一行第一列的id ExecuteNonQueryIdAsync(CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public Task<SqlNonQuery> ExecuteNonQueryIdAsync(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<SqlNonQuery> 返回第一行第一列的id ExecuteNonQueryIdAsync(DbConnection, CommandType, string) 根据SQL返回受影响行数 public Task<SqlNonQuery> ExecuteNonQueryIdAsync(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<SqlNonQuery> 返回第一行第一列的id ExecuteNonQueryIdAsync(DbConnection, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public Task<SqlNonQuery> ExecuteNonQueryIdAsync(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<SqlNonQuery> 返回第一行第一列的id ExecuteNonQueryIdAsync(DbTransaction, CommandType, string) 根据SQL返回受影响行数 public Task<SqlNonQuery> ExecuteNonQueryIdAsync(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<SqlNonQuery> 返回第一行第一列的id ExecuteNonQueryIdAsync(DbTransaction, CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public Task<SqlNonQuery> ExecuteNonQueryIdAsync(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<SqlNonQuery> 返回第一行第一列的id ExecuteNonQueryIdAsync(string) 根据SQL返回受影响行数 public Task<SqlNonQuery> ExecuteNonQueryIdAsync(string commandText) Parameters commandText string SQL字符串 Returns Task<SqlNonQuery> 返回第一行第一列的id ExecuteNonQueryTypedParams(DbConnection, string, DataRow) 根据SQL返回受影响行数 public int ExecuteNonQueryTypedParams(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns int ExecuteNonQueryTypedParams(DbTransaction, string, DataRow) 根据SQL返回受影响行数 public int ExecuteNonQueryTypedParams(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns int ExecuteNonQueryTypedParams(string, DataRow) 根据SQL返回受影响行数 public int ExecuteNonQueryTypedParams(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数对象 Returns int ExecuteNonQueryTypedParamsAsync(DbConnection, string, DataRow) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryTypedParamsAsync(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<int> ExecuteNonQueryTypedParamsAsync(DbTransaction, string, DataRow) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryTypedParamsAsync(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<int> ExecuteNonQueryTypedParamsAsync(string, DataRow) 根据SQL返回受影响行数 public Task<int> ExecuteNonQueryTypedParamsAsync(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<int> ExecuteObjectAsync<T>(string) 执行查询SQL返回查询结果，转换为对象 public Task<T> ExecuteObjectAsync<T>(string commandText) Parameters commandText string SQL字符串 Returns Task<T> Type Parameters T 实体对象 ExecuteObjectAsync<T>(string, List<DbParameter>) 执行查询SQL返回查询结果，转换为对象 public Task<T> ExecuteObjectAsync<T>(string commandText, List<DbParameter> prams) Parameters commandText string SQL字符串 prams List<DbParameter> 表示 List<T> 的参数 Returns Task<T> Type Parameters T 实体对象 ExecuteObjectAsync<T>(string, object) 执行查询SQL返回查询结果，转换为对象 public Task<T> ExecuteObjectAsync<T>(string commandText, object prams) Parameters commandText string SQL字符串 prams object 表示字符串映射参数 Returns Task<T> Type Parameters T 实体对象 ExecuteObjectListAsync<T>(string) 执行查询SQL返回查询结果集合，转换为IList<T>对象集合 public Task<IList<T>> ExecuteObjectListAsync<T>(string commandText) Parameters commandText string SQL字符串 Returns Task<IList<T>> Type Parameters T 实体对象 ExecuteObjectListAsync<T>(string, List<DbParameter>) 执行查询SQL返回查询结果集合，转换为IList<T>对象集合 public Task<IList<T>> ExecuteObjectListAsync<T>(string commandText, List<DbParameter> prams) Parameters commandText string SQL字符串 prams List<DbParameter> 表示 List<T> 的参数 Returns Task<IList<T>> Type Parameters T 实体对象 ExecuteObjectListAsync<T>(string, object) 执行查询SQL返回查询结果集合，转换为IList<T>对象集合 public Task<IList<T>> ExecuteObjectListAsync<T>(string commandText, object prams) Parameters commandText string SQL字符串 prams object 表示字符串映射参数 Returns Task<IList<T>> Type Parameters T 实体对象 ExecuteObjectList<T>(string) 执行查询SQL返回查询结果集合，转换为IList<T>对象集合 public IList<T> ExecuteObjectList<T>(string commandText) Parameters commandText string SQL字符串 Returns IList<T> Type Parameters T 实体对象 ExecuteObjectList<T>(string, List<DbParameter>) 执行查询SQL返回查询结果集合，转换为IList<T>对象集合 public IList<T> ExecuteObjectList<T>(string commandText, List<DbParameter> prams) Parameters commandText string SQL字符串 prams List<DbParameter> 表示 List<T> 的参数 Returns IList<T> Type Parameters T 实体对象 ExecuteObjectList<T>(string, object) 执行查询SQL返回查询结果集合，转换为IList<T>对象集合 public IList<T> ExecuteObjectList<T>(string commandText, object prams) Parameters commandText string SQL字符串 prams object 表示字符串映射参数 Returns IList<T> Type Parameters T 实体对象 ExecuteObject<T>(string) 执行查询SQL返回查询结果，转换为对象 public T ExecuteObject<T>(string commandText) Parameters commandText string SQL字符串 Returns T Type Parameters T 实体对象 ExecuteObject<T>(string, List<DbParameter>) 执行查询SQL返回查询结果，转换为对象 public T ExecuteObject<T>(string commandText, List<DbParameter> prams) Parameters commandText string SQL字符串 prams List<DbParameter> 表示 List<T> 的参数 Returns T Type Parameters T 实体对象 ExecuteObject<T>(string, object) 执行查询SQL返回查询结果，转换为对象 public T ExecuteObject<T>(string commandText, object prams) Parameters commandText string SQL字符串 prams object 表示字符串映射参数 Returns T Type Parameters T 实体对象 ExecuteReader(CommandType, string) 执行SQL返回数据流 public DbDataReader ExecuteReader(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns DbDataReader ExecuteReader(CommandType, string, params DbParameter[]) 执行存储过程返回数据流 public DbDataReader ExecuteReader(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns DbDataReader ExecuteReader(DbConnection, CommandType, string) 执行存储过程返回数据流 public DbDataReader ExecuteReader(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns DbDataReader ExecuteReader(DbConnection, CommandType, string, params DbParameter[]) 执行存储过程返回数据流 public DbDataReader ExecuteReader(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns DbDataReader ExecuteReader(DbConnection, string, params object[]) 执行存储过程返回数据流 public DbDataReader ExecuteReader(DbConnection connection, string spName, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns DbDataReader ExecuteReader(DbTransaction, CommandType, string) 执行存储过程返回数据流 public DbDataReader ExecuteReader(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns DbDataReader ExecuteReader(DbTransaction, CommandType, string, params DbParameter[]) 执行存储过程返回数据流 public DbDataReader ExecuteReader(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns DbDataReader ExecuteReader(DbTransaction, string, params object[]) 执行存储过程返回数据流 public DbDataReader ExecuteReader(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns DbDataReader ExecuteReader(string, params object[]) 执行存储过程返回数据流 public DbDataReader ExecuteReader(string spName, params object[] parameterValues) Parameters spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns DbDataReader ExecuteReaderAsync(CommandType, string) 执行SQL返回数据流 public Task<DbDataReader> ExecuteReaderAsync(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<DbDataReader> ExecuteReaderAsync(CommandType, string, params DbParameter[]) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<DbDataReader> ExecuteReaderAsync(DbConnection, CommandType, string) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<DbDataReader> ExecuteReaderAsync(DbConnection, CommandType, string, params DbParameter[]) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<DbDataReader> ExecuteReaderAsync(DbConnection, string, params object[]) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(DbConnection connection, string spName, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<DbDataReader> ExecuteReaderAsync(DbTransaction, CommandType, string) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<DbDataReader> ExecuteReaderAsync(DbTransaction, CommandType, string, params DbParameter[]) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<DbDataReader> ExecuteReaderAsync(DbTransaction, string, params object[]) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<DbDataReader> ExecuteReaderAsync(string, params object[]) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderAsync(string spName, params object[] parameterValues) Parameters spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<DbDataReader> ExecuteReaderTypedParams(DbConnection, string, DataRow) 执行存储过程返回数据流 public DbDataReader ExecuteReaderTypedParams(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns DbDataReader ExecuteReaderTypedParams(DbTransaction, string, DataRow) 执行存储过程返回数据流 public DbDataReader ExecuteReaderTypedParams(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns DbDataReader ExecuteReaderTypedParams(string, DataRow) 执行存储过程返回数据流 public DbDataReader ExecuteReaderTypedParams(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数对象 Returns DbDataReader ExecuteReaderTypedParamsAsync(DbConnection, string, DataRow) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderTypedParamsAsync(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<DbDataReader> ExecuteReaderTypedParamsAsync(DbTransaction, string, DataRow) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderTypedParamsAsync(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<DbDataReader> ExecuteReaderTypedParamsAsync(string, DataRow) 执行存储过程返回数据流 public Task<DbDataReader> ExecuteReaderTypedParamsAsync(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<DbDataReader> ExecuteScalar(CommandType, string) 返回一个数据对象 public object ExecuteScalar(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns object ExecuteScalar(CommandType, string, params DbParameter[]) 返回一个数据对象 public object ExecuteScalar(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns object ExecuteScalar(DbConnection, CommandType, string) 返回一个数据对象 public object ExecuteScalar(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns object ExecuteScalar(DbConnection, CommandType, string, params DbParameter[]) 返回一个数据对象 public object ExecuteScalar(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns object ExecuteScalar(DbConnection, string, params object[]) 返回一个数据对象 public object ExecuteScalar(DbConnection connection, string spName, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns object ExecuteScalar(DbTransaction, CommandType, string) 返回一个数据对象 public object ExecuteScalar(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns object ExecuteScalar(DbTransaction, CommandType, string, params DbParameter[]) 返回一个数据对象 public object ExecuteScalar(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns object ExecuteScalar(DbTransaction, string, params object[]) 返回一个数据对象 public object ExecuteScalar(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns object ExecuteScalarAsync(CommandType, string) 返回一个数据对象 public Task<object> ExecuteScalarAsync(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<object> ExecuteScalarAsync(CommandType, string, params DbParameter[]) 返回一个数据对象 public Task<object> ExecuteScalarAsync(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<object> ExecuteScalarAsync(DbConnection, CommandType, string) 返回一个数据对象 public Task<object> ExecuteScalarAsync(DbConnection connection, CommandType commandType, string commandText) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<object> ExecuteScalarAsync(DbConnection, CommandType, string, params DbParameter[]) 返回一个数据对象 public Task<object> ExecuteScalarAsync(DbConnection connection, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<object> ExecuteScalarAsync(DbConnection, string, params object[]) 返回一个数据对象 public Task<object> ExecuteScalarAsync(DbConnection connection, string spName, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<object> ExecuteScalarAsync(DbTransaction, CommandType, string) 返回一个数据对象 public Task<object> ExecuteScalarAsync(DbTransaction transaction, CommandType commandType, string commandText) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<object> ExecuteScalarAsync(DbTransaction, CommandType, string, params DbParameter[]) 返回一个数据对象 public Task<object> ExecuteScalarAsync(DbTransaction transaction, CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<object> ExecuteScalarAsync(DbTransaction, string, params object[]) 返回一个数据对象 public Task<object> ExecuteScalarAsync(DbTransaction transaction, string spName, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 parameterValues object[] 字符串映射对象 Returns Task<object> ExecuteScalarToStr(CommandType, string) 执行SQL返回string类型的数据 public string ExecuteScalarToStr(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns string ExecuteScalarToStr(CommandType, string, params DbParameter[]) 执行SQL返回string类型的数据 public string ExecuteScalarToStr(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns string ExecuteScalarToStrAsync(CommandType, string) 执行SQL返回string类型的数据 public Task<string> ExecuteScalarToStrAsync(CommandType commandType, string commandText) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 Returns Task<string> ExecuteScalarToStrAsync(CommandType, string, params DbParameter[]) 执行SQL返回string类型的数据 public Task<string> ExecuteScalarToStrAsync(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 commandParameters DbParameter[] 字符串映射对象 Returns Task<string> ExecuteScalarTypedParams(DbConnection, string, DataRow) 执行SQL返回object类型的数据 public object ExecuteScalarTypedParams(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns object ExecuteScalarTypedParams(DbTransaction, string, DataRow) 执行SQL返回object类型的数据 public object ExecuteScalarTypedParams(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns object ExecuteScalarTypedParams(string, DataRow) 执行SQL返回object类型的数据 public object ExecuteScalarTypedParams(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数对象 Returns object ExecuteScalarTypedParamsAsync(DbConnection, string, DataRow) 执行SQL返回object类型的数据 public Task<object> ExecuteScalarTypedParamsAsync(DbConnection connection, string spName, DataRow dataRow) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<object> ExecuteScalarTypedParamsAsync(DbTransaction, string, DataRow) 执行SQL返回object类型的数据 public Task<object> ExecuteScalarTypedParamsAsync(DbTransaction transaction, string spName, DataRow dataRow) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<object> ExecuteScalarTypedParamsAsync(string, DataRow) 执行SQL返回object类型的数据 public Task<object> ExecuteScalarTypedParamsAsync(string spName, DataRow dataRow) Parameters spName string 存储过程名 dataRow DataRow 参数对象 Returns Task<object> FillDataSet(CommandType, string, DataSet, string[]) 通过SQL获取数据对象DataSet public void FillDataSet(CommandType commandType, string commandText, DataSet dataSet, string[] tableNames) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 dataSet DataSet 返回的数据对象 tableNames string[] 对应的表名称 FillDataSet(CommandType, string, DataSet, string[], params DbParameter[]) 通过SQL获取数据对象DataSet public void FillDataSet(CommandType commandType, string commandText, DataSet dataSet, string[] tableNames, params DbParameter[] commandParameters) Parameters commandType CommandType CommandType对象 commandText string SQL字符串 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 commandParameters DbParameter[] 字符串映射对象 FillDataSet(DbConnection, CommandType, string, DataSet, string[]) 通过SQL获取数据对象DataSet public void FillDataSet(DbConnection connection, CommandType commandType, string commandText, DataSet dataSet, string[] tableNames) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 FillDataSet(DbConnection, CommandType, string, DataSet, string[], params DbParameter[]) 通过SQL获取数据对象DataSet public void FillDataSet(DbConnection connection, CommandType commandType, string commandText, DataSet dataSet, string[] tableNames, params DbParameter[] commandParameters) Parameters connection DbConnection 数据库连接对象 commandType CommandType CommandType对象 commandText string SQL字符串 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 commandParameters DbParameter[] 字符串映射对象 FillDataSet(DbConnection, string, DataSet, string[], params object[]) 通过SQL获取数据对象DataSet public void FillDataSet(DbConnection connection, string spName, DataSet dataSet, string[] tableNames, params object[] parameterValues) Parameters connection DbConnection 数据库连接对象 spName string 存储过程名 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 parameterValues object[] 字符串映射对象 FillDataSet(DbTransaction, CommandType, string, DataSet, string[]) 通过SQL获取数据对象DataSet public void FillDataSet(DbTransaction transaction, CommandType commandType, string commandText, DataSet dataSet, string[] tableNames) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 FillDataSet(DbTransaction, CommandType, string, DataSet, string[], params DbParameter[]) 通过SQL获取数据对象DataSet public void FillDataSet(DbTransaction transaction, CommandType commandType, string commandText, DataSet dataSet, string[] tableNames, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 commandType CommandType CommandType对象 commandText string SQL字符串 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 commandParameters DbParameter[] 字符串映射对象 FillDataSet(DbTransaction, string, DataSet, string[], params object[]) 通过SQL获取数据对象DataSet public void FillDataSet(DbTransaction transaction, string spName, DataSet dataSet, string[] tableNames, params object[] parameterValues) Parameters transaction DbTransaction SQL事物对象 spName string 存储过程名 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 parameterValues object[] 字符串映射对象 FillDataSet(string, DataSet, string[], params object[]) 通过SQL获取数据对象DataSet public void FillDataSet(string spName, DataSet dataSet, string[] tableNames, params object[] parameterValues) Parameters spName string 存储过程名 dataSet DataSet 返回的数据对象 tableNames string[] DataSet对象中的列名 parameterValues object[] 字符串映射对象 GetAndSetConnectionString(string) 获取当前连接字符串或修改 public string GetAndSetConnectionString(string connectionstring = null) Parameters connectionstring string 为null时，不修改。 Returns string GetCachedParameterSet(string) 获取缓存的参数集，每次返回的都是克隆数据 public DbParameter[] GetCachedParameterSet(string commandText) Parameters commandText string 缓存数据集的名称 Returns DbParameter[] GetEmptyTable(string) 根据表名返回当前这张表 public DataTable GetEmptyTable(string tableName) Parameters tableName string Returns DataTable GetEmptyTableAsync(string) 根据表名返回当前这张表 public Task<DataTable> GetEmptyTableAsync(string tableName) Parameters tableName string Returns Task<DataTable> GetInParam(string, object) 绑定数据 （例如：@id=1） public DbParameter GetInParam(string paraName, object paraValue) Parameters paraName string 名字 paraValue object 数据 Returns DbParameter GetOutParam(string, object, Type, int) 绑定数据 public DbParameter GetOutParam(string paraName, object paraValue, Type paraType, int size) Parameters paraName string 名字 paraValue object 数据 paraType Type 类型 size int 大小 Returns DbParameter GetOutParam(string, Type) 返回数据 public DbParameter GetOutParam(string paraName, Type paraType) Parameters paraName string 名字 paraType Type 类型 Returns DbParameter GetOutParam(string, Type, int) 返回数据 public DbParameter GetOutParam(string paraName, Type paraType, int size) Parameters paraName string 名字 paraType Type 类型 size int 大小 Returns DbParameter GetPagerSet(PagerParameters) 分页函数 实现至 IDbProvider 接口 GetPagerSet 方法 public PagerSet GetPagerSet(PagerParameters pager) Parameters pager PagerParameters 相关参数 Returns PagerSet GetPagerSetAsync(PagerParameters) 分页函数 实现至 IDbProvider 接口 GetPagerSet 方法 public Task<PagerSet> GetPagerSetAsync(PagerParameters pager) Parameters pager PagerParameters 相关参数 Returns Task<PagerSet> GetParam(string, object, ParameterDirection) 绑定数据 public DbParameter GetParam(string paraName, object paraValue, ParameterDirection direction) Parameters paraName string 名字 paraValue object 数据 direction ParameterDirection 数据库对应类型 Returns DbParameter GetParam(string, object, ParameterDirection, Type, string) 绑定数据 public DbParameter GetParam(string paraName, object paraValue, ParameterDirection direction, Type paraType, string sourceColumn) Parameters paraName string 名字 paraValue object 数据 direction ParameterDirection 数据库对应类型 paraType Type 类型 sourceColumn string 源列 Returns DbParameter GetParam(string, object, ParameterDirection, Type, string, int) 绑定数据 public DbParameter GetParam(string paraName, object paraValue, ParameterDirection direction, Type paraType, string sourceColumn, int size) Parameters paraName string 名字 paraValue object 数据 direction ParameterDirection 数据库对应类型 paraType Type 类型 sourceColumn string 源列 size int 大小 Returns DbParameter GetReturnParam() 获取存储过程执行，返回结果参数 , 默认参数：ReturnValue。 public DbParameter GetReturnParam() Returns DbParameter GetReturnParam(string) 获取存储过程执行，返回结果参数。 public DbParameter GetReturnParam(string paraName) Parameters paraName string 参数名 Returns DbParameter GetSpParameterSet(string) 根据存储过程名获得存储过程所需要的参数 public DbParameter[] GetSpParameterSet(string spName) Parameters spName string 储过程名 Returns DbParameter[] GetSpParameterSet(string, bool) 根据存储过程名获得存储过程所需要的参数 public DbParameter[] GetSpParameterSet(string spName, bool includeReturnValueParameter) Parameters spName string 储过程名 includeReturnValueParameter bool 是否包含的返回值参数 Returns DbParameter[] GetSpParameterSetAsync(string) 根据存储过程名获得存储过程所需要的参数 public Task<DbParameter[]> GetSpParameterSetAsync(string spName) Parameters spName string 储过程名 Returns Task<DbParameter[]> GetSpParameterSetAsync(string, bool) 根据存储过程名获得存储过程所需要的参数 public Task<DbParameter[]> GetSpParameterSetAsync(string spName, bool includeReturnValueParameter) Parameters spName string 储过程名 includeReturnValueParameter bool 是否包含的返回值参数 Returns Task<DbParameter[]> Query(string) 根据SQL语句，查询返回查询结果。 public DataSet Query(string commandText) Parameters commandText string SQL语句 Returns DataSet 返回数据集合 Query(string, object) 根据SQL语句，查询返回查询结果。 public DataSet Query(string commandText, object parameter) Parameters commandText string SQL语句 parameter object SQL参数 Returns DataSet 返回数据集合 QueryAsync(string) 根据SQL语句，查询返回查询结果。 public Task<DataSet> QueryAsync(string commandText) Parameters commandText string SQL语句 Returns Task<DataSet> 返回数据集合 QueryAsync(string, object) 根据SQL语句，查询返回查询结果。 public Task<DataSet> QueryAsync(string commandText, object parameter) Parameters commandText string SQL语句 parameter object SQL参数 Returns Task<DataSet> 返回数据集合 QueryAsync<T>(string) 根据SQL语句，查询返回查询结果。 public Task<T> QueryAsync<T>(string commandText) where T : new() Parameters commandText string SQL语句 Returns Task<T> 返回一个实体 Type Parameters T 转换的实体 QueryAsync<T>(string, object) 根据SQL语句，查询返回查询结果。 public Task<T> QueryAsync<T>(string commandText, object parameter) where T : new() Parameters commandText string SQL语句 parameter object SQL参数 Returns Task<T> 返回一个实体 Type Parameters T 转换的实体 QueryListAsync<T>(string) 根据SQL语句，查询返回查询结果。 public Task<IList<T>> QueryListAsync<T>(string commandText) where T : new() Parameters commandText string SQL语句 Returns Task<IList<T>> 返回一个实体数组 Type Parameters T 转换的实体 QueryListAsync<T>(string, object) 根据SQL语句，查询返回查询结果。 public Task<IList<T>> QueryListAsync<T>(string commandText, object parameter) where T : new() Parameters commandText string SQL语句 parameter object SQL参数 Returns Task<IList<T>> 返回一个实体数组 Type Parameters T 转换的实体 QueryList<T>(string) 根据SQL语句，查询返回查询结果。 public IList<T> QueryList<T>(string commandText) where T : new() Parameters commandText string SQL语句 Returns IList<T> 返回一个实体数组 Type Parameters T 转换的实体 QueryList<T>(string, object) 根据SQL语句，查询返回查询结果。 public IList<T> QueryList<T>(string commandText, object parameter) where T : new() Parameters commandText string SQL语句 parameter object SQL参数 Returns IList<T> 返回一个实体数组 Type Parameters T 转换的实体 Query<T>(string) 根据SQL语句，查询返回查询结果。 public T Query<T>(string commandText) where T : new() Parameters commandText string SQL语句 Returns T 返回一个实体 Type Parameters T 转换的实体 Query<T>(string, object) 根据SQL语句，查询返回查询结果。 public T Query<T>(string commandText, object parameter) where T : new() Parameters commandText string SQL语句 parameter object SQL参数 Returns T 返回一个实体 Type Parameters T 转换的实体 ResetDbProvider() 回收当前数据核心对象一切资源 public void ResetDbProvider() RunProc(string) 执行存储过程返回受影响行数 public int RunProc(string procName) Parameters procName string 存储过程名 Returns int RunProc(string, List<DbParameter>) 执行存储过程返回结果 public int RunProc(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns int RunProc(string, List<DbParameter>, out DbDataReader) 执行存储过程返回结果 public void RunProc(string procName, List<DbParameter> prams, out DbDataReader reader) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 reader DbDataReader 返回 DbDataReader 对象 RunProc(string, List<DbParameter>, out DataSet) 根据存储过程，返回DataSet数据 public void RunProc(string procName, List<DbParameter> prams, out DataSet ds) Parameters procName string 存储过程名 prams List<DbParameter> 参数 ds DataSet 返回DataSet数据 RunProc(string, List<DbParameter>, out object) 执行存储过程返回结果 public void RunProc(string procName, List<DbParameter> prams, out object obj) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 obj object 返回 object 对象 RunProc(string, out DbDataReader) 执行存储过程返回结果 public void RunProc(string procName, out DbDataReader reader) Parameters procName string 存储过程名 reader DbDataReader 返回 DbDataReader 对象 RunProc(string, DbParameter[]) 执行存储过程返回结果 public int RunProc(string procName, DbParameter[] prams) Parameters procName string 存储过程名 prams DbParameter[] 表示 DbParameter[] 的参数 Returns int RunProc(string, out DataSet) 执行存储过程返回结果 public void RunProc(string procName, out DataSet ds) Parameters procName string 存储过程名 ds DataSet 返回 DataSet 对象 RunProc(string, out object) 执行存储过程返回结果 public void RunProc(string procName, out object obj) Parameters procName string 存储过程名 obj object 返回 object 对象 RunProcAsync(string) 执行存储过程返回受影响行数 public Task<int> RunProcAsync(string procName) Parameters procName string 存储过程名 Returns Task<int> RunProcAsync(string, List<DbParameter>) 执行存储过程返回结果 public Task<int> RunProcAsync(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns Task<int> RunProcAsync(string, DbParameter[]) 执行存储过程返回结果 public Task<int> RunProcAsync(string procName, DbParameter[] prams) Parameters procName string 存储过程名 prams DbParameter[] 表示 DbParameter[] 的参数 Returns Task<int> RunProcDataReaderAsync(string) 执行存储过程返回结果 public Task<DbDataReader> RunProcDataReaderAsync(string procName) Parameters procName string 存储过程名 Returns Task<DbDataReader> Remarks 返回 DbDataReader 对象 RunProcDataReaderAsync(string, List<DbParameter>) 执行存储过程返回结果 public Task<DbDataReader> RunProcDataReaderAsync(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns Task<DbDataReader> 返回 DbDataReader 对象 RunProcDataSetAsync(string) 执行存储过程返回结果 public Task<DataSet> RunProcDataSetAsync(string procName) Parameters procName string 存储过程名 Returns Task<DataSet> Remarks 返回 DataSet 对象 RunProcDataSetAsync(string, List<DbParameter>) 根据存储过程，返回DataSet数据 public Task<DataSet> RunProcDataSetAsync(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 参数 Returns Task<DataSet> 返回DataSet数据 RunProcExecuteScalarAsync(string) 执行存储过程返回结果 public Task<object> RunProcExecuteScalarAsync(string procName) Parameters procName string 存储过程名 Returns Task<object> 返回 object 对象 RunProcExecuteScalarAsync(string, List<DbParameter>) 执行存储过程返回结果 public Task<object> RunProcExecuteScalarAsync(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns Task<object> 返回 object 对象 RunProcObjectAsync<T>(string) 执行存储过程返回结果 public Task<T> RunProcObjectAsync<T>(string procName) Parameters procName string 存储过程名 Returns Task<T> Type Parameters T 实体对象 RunProcObjectAsync<T>(string, List<DbParameter>) 执行存储过程返回结果 public Task<T> RunProcObjectAsync<T>(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns Task<T> Type Parameters T 实体对象 RunProcObjectListAsync<T>(string) 执行存储过程返回结果 IList<T>数据集合 public Task<IList<T>> RunProcObjectListAsync<T>(string procName) Parameters procName string 存储过程名 Returns Task<IList<T>> Type Parameters T 实体对象 RunProcObjectListAsync<T>(string, List<DbParameter>) 执行存储过程返回结果 IList<T>数据集合 public Task<IList<T>> RunProcObjectListAsync<T>(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns Task<IList<T>> Type Parameters T 实体对象 RunProcObjectList<T>(string) 执行存储过程返回结果 IList<T>数据集合 public IList<T> RunProcObjectList<T>(string procName) Parameters procName string 存储过程名 Returns IList<T> Type Parameters T 实体对象 RunProcObjectList<T>(string, List<DbParameter>) 执行存储过程返回结果 IList<T>数据集合 public IList<T> RunProcObjectList<T>(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns IList<T> Type Parameters T 实体对象 RunProcObject<T>(string) 执行存储过程返回结果 public T RunProcObject<T>(string procName) Parameters procName string 存储过程名 Returns T Type Parameters T 实体对象 RunProcObject<T>(string, List<DbParameter>) 执行存储过程返回结果 public T RunProcObject<T>(string procName, List<DbParameter> prams) Parameters procName string 存储过程名 prams List<DbParameter> 表示 List<T> 的参数 Returns T Type Parameters T 实体对象 SetCacheParameterSet(string, params DbParameter[]) 添加缓存参数集 public void SetCacheParameterSet(string commandText, params DbParameter[] commandParameters) Parameters commandText string 缓存数据集的名称 commandParameters DbParameter[] 缓存的数据集 SetDictionaryParam(object) 将匿名对象转换成Dictionary<TKey, TValue>对象集合 public IDictionary<string, object> SetDictionaryParam(object parameter) Parameters parameter object 匿名对象 Returns IDictionary<string, object> Dictionary<TKey, TValue>对象集合 SetLogger(ILogger) 提供一个通道用于替换日志或关闭日志。 public void SetLogger(ILogger logger) Parameters logger ILogger 用于打印程序日志，可以为null SetParameterList(IDictionary<string, object>, bool) 将匿名对象转换成DbParameter[]对象集合 public List<DbParameter> SetParameterList(IDictionary<string, object> parameter, bool isnull = false) Parameters parameter IDictionary<string, object> IDictionary<TKey, TValue>对象 isnull bool 是否允许为空 Returns List<DbParameter> DbParameter[]对象集合 SetParameterList(object) 将匿名对象转换成DbParameter[]对象集合 public List<DbParameter> SetParameterList(object parameter) Parameters parameter object 匿名对象 Returns List<DbParameter> DbParameter[]对象集合 SetParameters(object) 将匿名对象转换成DbParameter[]对象集合 public DbParameter[] SetParameters(object parameter) Parameters parameter object 匿名对象 Returns DbParameter[] DbParameter[]对象集合 TransExecuteNonQuery(CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public DbTransResult TransExecuteNonQuery(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType 执行类型 commandText string SQL语句 commandParameters DbParameter[] 参数 Returns DbTransResult TransExecuteNonQuery(CommandType, string, object) 根据SQL返回受影响行数 public DbTransResult TransExecuteNonQuery(CommandType commandType, string commandText, object commandParameters) Parameters commandType CommandType 执行类型 commandText string SQL语句 commandParameters object 参数 Returns DbTransResult TransExecuteNonQuery(params SqlTextParameter[]) 根据SQL返回受影响行数 public DbTransResult TransExecuteNonQuery(params SqlTextParameter[] sqlTexts) Parameters sqlTexts SqlTextParameter[] SQL操作对象SqlTextParameter[] Returns DbTransResult TransExecuteNonQueryAsync(CommandType, string, params DbParameter[]) 根据SQL返回受影响行数 public Task<DbTransResult> TransExecuteNonQueryAsync(CommandType commandType, string commandText, params DbParameter[] commandParameters) Parameters commandType CommandType 执行类型 commandText string SQL语句 commandParameters DbParameter[] 参数 Returns Task<DbTransResult> TransExecuteNonQueryAsync(CommandType, string, object) 根据SQL返回受影响行数 public Task<DbTransResult> TransExecuteNonQueryAsync(CommandType commandType, string commandText, object commandParameters) Parameters commandType CommandType 执行类型 commandText string SQL语句 commandParameters object 参数 Returns Task<DbTransResult> TransExecuteNonQueryAsync(params SqlTextParameter[]) 根据SQL返回受影响行数 public Task<DbTransResult> TransExecuteNonQueryAsync(params SqlTextParameter[] sqlTexts) Parameters sqlTexts SqlTextParameter[] SQL操作对象SqlTextParameter[] Returns Task<DbTransResult> UpdateDataSet(DbCommand, DbCommand, DbCommand, DataSet, string) 更新数据集 public void UpdateDataSet(DbCommand insertCommand, DbCommand deleteCommand, DbCommand updateCommand, DataSet dataSet, string tableName) Parameters insertCommand DbCommand deleteCommand DbCommand updateCommand DbCommand dataSet DataSet tableName string 表名 UpdateDataSet(DataSet, string) 更新数据集 public void UpdateDataSet(DataSet dataSet, string tableName) Parameters dataSet DataSet 更改成的数据集 tableName string 表名"
  },
  "api/Tool.SqlCore.DbHelperExensions.html": {
    "href": "api/Tool.SqlCore.DbHelperExensions.html",
    "title": "Class DbHelperExensions | Tool.Net",
    "keywords": "Class DbHelperExensions Namespace Tool.SqlCore Assembly Tool.Net.dll 对DbHelper 对象，提供扩展支持 public static class DbHelperExensions Inheritance object DbHelperExensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Delete(DbHelper, string, string, object) 删除单张表数据 public static int Delete(this DbHelper dbHelper, string TableName, string where, object prams) Parameters dbHelper DbHelper 数据库引擎 TableName string 表名 where string 删除的条件 prams object 删除条件的参数,可以是任何类型的键值对 Returns int Delete(DbHelper, params string[]) 删除多多张表数据 public static int Delete(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多张表删除语句 Returns int DeleteAsync(DbHelper, string, string, object) 删除单张表数据 public static Task<int> DeleteAsync(this DbHelper dbHelper, string TableName, string where, object prams) Parameters dbHelper DbHelper 数据库引擎 TableName string 表名 where string 删除的条件 prams object 删除条件的参数,可以是任何类型的键值对 Returns Task<int> DeleteAsync(DbHelper, params string[]) 删除多多张表数据 public static Task<int> DeleteAsync(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多张表删除语句 Returns Task<int> DeleteAsync<T>(DbHelper, string, object) 删除单张表数据 public static Task<int> DeleteAsync<T>(this DbHelper dbHelper, string where, object prams) where T : new() Parameters dbHelper DbHelper 数据库引擎 where string 删除的条件 prams object 删除条件的参数,可以是任何类型的键值对 Returns Task<int> Type Parameters T Delete<T>(DbHelper, string, object) 删除单张表数据 public static int Delete<T>(this DbHelper dbHelper, string where, object prams) where T : new() Parameters dbHelper DbHelper 数据库引擎 where string 删除的条件 prams object 删除条件的参数,可以是任何类型的键值对 Returns int Type Parameters T GetDataColumnSchema(DbDataReader) 获取DataTable表信息不含数据 public static DataTable GetDataColumnSchema(this DbDataReader dataReader) Parameters dataReader DbDataReader 原数据对象 Returns DataTable GetDataColumnSchemaAsync(DbDataReader) 获取DataTable表信息不含数据 public static Task<DataTable> GetDataColumnSchemaAsync(this DbDataReader dataReader) Parameters dataReader DbDataReader 原数据对象 Returns Task<DataTable> GetDataSet(DbDataReader) 将DbDataReader对象，中数据转换为 DataSet public static DataSet GetDataSet(this DbDataReader dataReader) Parameters dataReader DbDataReader 原数据对象 Returns DataSet 返回可读集合字典 GetDataSetAsync(DbDataReader) 将DbDataReader对象，中数据转换为 DataSet public static Task<DataSet> GetDataSetAsync(this DbDataReader dataReader) Parameters dataReader DbDataReader 原数据对象 Returns Task<DataSet> 返回可读集合字典 GetDataTable(DbDataReader) 将DbDataReader对象，中数据转换为 DataTable public static DataTable GetDataTable(this DbDataReader dataReader) Parameters dataReader DbDataReader 原数据对象 Returns DataTable 返回可读集合字典 GetDataTableAsync(DbDataReader) 将DbDataReader对象，中数据转换为 DataTable public static Task<DataTable> GetDataTableAsync(this DbDataReader dataReader) Parameters dataReader DbDataReader 原数据对象 Returns Task<DataTable> 返回可读集合字典 GetInsertParams(DbHelper, IDictionary<string, object>, out string, out string) 根据键值对生成 Insert 部分语法，和值添加对象 public static List<DbParameter> GetInsertParams(this DbHelper database, IDictionary<string, object> keyValues, out string key, out string value) Parameters database DbHelper 数据库引擎 keyValues IDictionary<string, object> 数据集键值对 key string 返回生成的部分SQL语句 value string 返回生成的部分SQL语句 Returns List<DbParameter> List<T> GetListHash(DbDataReader, bool) 将DbDataReader对象，中数据转换为集合字典 public static IList<IDictionary<string, object>> GetListHash(this DbDataReader dataReader, bool isnull = false) Parameters dataReader DbDataReader 原数据对象 isnull bool 是否处理Null值，true时将不包含在字典中 Returns IList<IDictionary<string, object>> 返回可读集合字典 GetListHashAsync(DbDataReader, bool) 将DbDataReader对象，中数据转换为集合字典 public static Task<IList<IDictionary<string, object>>> GetListHashAsync(this DbDataReader dataReader, bool isnull = false) Parameters dataReader DbDataReader 原数据对象 isnull bool 是否处理Null值，true时将不包含在字典中 Returns Task<IList<IDictionary<string, object>>> 返回可读集合字典 GetReaderArray(DbDataReader, bool) 将DbDataReader对象，中数据转换为 二维数组集合 public static ArrayList GetReaderArray(this DbDataReader dataReader, bool isnull = false) Parameters dataReader DbDataReader 原数据对象 isnull bool 是否处理Null值，true时将不包含在二维数组中 Returns ArrayList 返回可读二维数组集合 GetReaderArrayAsync(DbDataReader, bool) 将DbDataReader对象，中数据转换为 二维数组集合 public static Task<ArrayList> GetReaderArrayAsync(this DbDataReader dataReader, bool isnull = false) Parameters dataReader DbDataReader 原数据对象 isnull bool 是否处理Null值，true时将不包含在二维数组中 Returns Task<ArrayList> 返回可读二维数组集合 GetReader<T>() 一个测试阶段的 实体转换函数 public static Func<DbDataReader, T> GetReader<T>() Returns Func<DbDataReader, T> Type Parameters T GetTextParameter(DbHelper, string, object) 提供快捷方式，匿名对象实现 public static SqlTextParameter GetTextParameter(this DbHelper dbHelper, string commandText, object prams) Parameters dbHelper DbHelper 数据库引擎 commandText string 执行的SQL语句 prams object 携带的参数可以是Null,可以是任何类型的键值对 Returns SqlTextParameter 返回SqlTextParameter对象 GetUpdateParams(DbHelper, IDictionary<string, object>, out string) 根据键值对生成 Update 部分语法，和值添加对象 public static List<DbParameter> GetUpdateParams(this DbHelper database, IDictionary<string, object> keyValues, out string strsql) Parameters database DbHelper 数据库引擎 keyValues IDictionary<string, object> 数据集键值对 strsql string 返回生成的部分SQL语句 Returns List<DbParameter> List<T> Insert(DbHelper, string, object) 插入一条结果 public static int Insert(this DbHelper dbHelper, string TableName, object prams) Parameters dbHelper DbHelper 数据库引擎 TableName string 表名 prams object 实体类，虚构对象,任何类型的键值对 Returns int Insert(DbHelper, params string[]) 插入多条结果，可以是多张不同的表 public static int Insert(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多条插入语句 Returns int InsertAsync(DbHelper, string, object) 插入一条结果 public static Task<int> InsertAsync(this DbHelper dbHelper, string TableName, object prams) Parameters dbHelper DbHelper 数据库引擎 TableName string 表名 prams object 实体类，虚构对象,任何类型的键值对 Returns Task<int> InsertAsync(DbHelper, params string[]) 插入多条结果，可以是多张不同的表 public static Task<int> InsertAsync(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多条插入语句 Returns Task<int> InsertAsync<T>(DbHelper, object) 插入一条结果 public static Task<int> InsertAsync<T>(this DbHelper dbHelper, object prams) where T : new() Parameters dbHelper DbHelper 数据库引擎 prams object 实体类，虚构对象,任何类型的键值对 Returns Task<int> Type Parameters T Insert<T>(DbHelper, object) 插入一条结果 public static int Insert<T>(this DbHelper dbHelper, object prams) where T : new() Parameters dbHelper DbHelper 数据库引擎 prams object 实体类，虚构对象,任何类型的键值对 Returns int Type Parameters T Select(DbHelper, string, object) 查询单张表 public static DataTable Select(this DbHelper dbHelper, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns DataTable Select(DbHelper, params string[]) 查询多张表 public static DataSet Select(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多条查询语句 Returns DataSet SelectArray(DbHelper, CommandType, string, object) 查询单张表 public static ArrayList SelectArray(this DbHelper dbHelper, CommandType command, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 command CommandType 执行模式 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns ArrayList SelectArray(DbHelper, string, object) 查询单张表 public static ArrayList SelectArray(this DbHelper dbHelper, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns ArrayList SelectArrayAsync(DbHelper, CommandType, string, object) 查询单张表 public static Task<ArrayList> SelectArrayAsync(this DbHelper dbHelper, CommandType command, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 command CommandType 执行模式 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns Task<ArrayList> SelectArrayAsync(DbHelper, string, object) 查询单张表 public static Task<ArrayList> SelectArrayAsync(this DbHelper dbHelper, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns Task<ArrayList> SelectAsync(DbHelper, string, object) 查询单张表 public static Task<DataTable> SelectAsync(this DbHelper dbHelper, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns Task<DataTable> SelectAsync(DbHelper, params string[]) 查询多张表 public static Task<DataSet> SelectAsync(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多条查询语句 Returns Task<DataSet> SelectAsync<T>(DbHelper, Action<T>) 查询单张表 public static Task<IList<T>> SelectAsync<T>(this DbHelper dbHelper, Action<T> prams = null) where T : new() Parameters dbHelper DbHelper 数据库引擎 prams Action<T> 查询条件 Returns Task<IList<T>> Type Parameters T SelectDictionary(DbHelper, CommandType, string, object) 查询单张表 public static IList<IDictionary<string, object>> SelectDictionary(this DbHelper dbHelper, CommandType command, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 command CommandType 执行模式 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns IList<IDictionary<string, object>> SelectDictionary(DbHelper, string, object) 查询单张表 public static IList<IDictionary<string, object>> SelectDictionary(this DbHelper dbHelper, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns IList<IDictionary<string, object>> SelectDictionaryAsync(DbHelper, CommandType, string, object) 查询单张表 public static Task<IList<IDictionary<string, object>>> SelectDictionaryAsync(this DbHelper dbHelper, CommandType command, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 command CommandType 执行模式 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns Task<IList<IDictionary<string, object>>> SelectDictionaryAsync(DbHelper, string, object) 查询单张表 public static Task<IList<IDictionary<string, object>>> SelectDictionaryAsync(this DbHelper dbHelper, string commandText, object prams = null) Parameters dbHelper DbHelper 数据库引擎 commandText string 查询语句 prams object 实体类，虚构对象,任何类型的键值对 Returns Task<IList<IDictionary<string, object>>> Select<T>(DbHelper, Action<T>) 查询单张表 public static IList<T> Select<T>(this DbHelper dbHelper, Action<T> prams = null) where T : new() Parameters dbHelper DbHelper 数据库引擎 prams Action<T> 查询条件 Returns IList<T> Type Parameters T Update(DbHelper, string, string, params object[]) 修改单表结果 public static int Update(this DbHelper dbHelper, string TableName, string where, params object[] prams) Parameters dbHelper DbHelper 数据库引擎 TableName string 表名 where string 修改的条件，无需写 WHERE 直接条件 prams object[] 修改表的参数 Or 修改条件的参数,可以是任何类型的键值对 Returns int Update(DbHelper, params string[]) 修改多表结果 public static int Update(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多条插入语句 Returns int UpdateAsync(DbHelper, string, string, params object[]) 修改单表结果 public static Task<int> UpdateAsync(this DbHelper dbHelper, string TableName, string where, params object[] prams) Parameters dbHelper DbHelper 数据库引擎 TableName string 表名 where string 修改的条件，无需写 WHERE 直接条件 prams object[] 修改表的参数 Or 修改条件的参数,可以是任何类型的键值对 Returns Task<int> UpdateAsync(DbHelper, params string[]) 修改多表结果 public static Task<int> UpdateAsync(this DbHelper dbHelper, params string[] commandTexts) Parameters dbHelper DbHelper 数据库引擎 commandTexts string[] 多条插入语句 Returns Task<int> UpdateAsync<T>(DbHelper, string, params object[]) 修改单表结果 public static Task<int> UpdateAsync<T>(this DbHelper dbHelper, string where, params object[] prams) where T : new() Parameters dbHelper DbHelper 数据库引擎 where string 修改的条件 prams object[] 修改表的参数 Or 修改条件的参数,可以是任何类型的键值对 Returns Task<int> Type Parameters T Update<T>(DbHelper, string, params object[]) 修改单表结果 public static int Update<T>(this DbHelper dbHelper, string where, params object[] prams) where T : new() Parameters dbHelper DbHelper 数据库引擎 where string 修改的条件 prams object[] 修改表的参数 Or 修改条件的参数,可以是任何类型的键值对 Returns int Type Parameters T WhereStr(string) 避免问题where 第一位不能为空格 public static string WhereStr(string where) Parameters where string Returns string"
  },
  "api/Tool.SqlCore.DbParameterCache.html": {
    "href": "api/Tool.SqlCore.DbParameterCache.html",
    "title": "Class DbParameterCache | Tool.Net",
    "keywords": "Class DbParameterCache Namespace Tool.SqlCore Assembly Tool.Net.dll 本地数据库参数缓存 public class DbParameterCache Inheritance object DbParameterCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DbParameterCache(DbParameter[]) 创建默认缓存 public DbParameterCache(DbParameter[] parameters) Parameters parameters DbParameter[] DbParameterCache(Task<DbParameter[]>) 创建等待缓存 public DbParameterCache(Task<DbParameter[]> taskParameters) Parameters taskParameters Task<DbParameter[]> Methods CloneParameters() 克隆一个副本DbParameter[] public DbParameter[] CloneParameters() Returns DbParameter[] DbParameter[] CloneParametersAsync() 克隆一个副本DbParameter[] public Task<DbParameter[]> CloneParametersAsync() Returns Task<DbParameter[]> DbParameter[]"
  },
  "api/Tool.SqlCore.DbProviderType.html": {
    "href": "api/Tool.SqlCore.DbProviderType.html",
    "title": "Enum DbProviderType | Tool.Net",
    "keywords": "Enum DbProviderType Namespace Tool.SqlCore Assembly Tool.Net.dll 数据库类型枚举 public enum DbProviderType : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields MySql = 3 MySql 数据库 OleDb = 6 OleDb 数据库(例如：xls格式的文件) Oracle = 4 Oracle 数据库 SQLite = 5 SQLite 数据库 SqlServer = 1 SqlServer 数据库 （SDK:System.Data.SqlClient） SqlServer1 = 2 SqlServer 数据库 （SKD:Microsoft.Data.SqlClient） Unknown = 0 表示未知数据库类型，指特殊指定数据库"
  },
  "api/Tool.SqlCore.DbTransResult.html": {
    "href": "api/Tool.SqlCore.DbTransResult.html",
    "title": "Class DbTransResult | Tool.Net",
    "keywords": "Class DbTransResult Namespace Tool.SqlCore Assembly Tool.Net.dll 用于提供事物执行情况，返回事物发生的结果 public class DbTransResult Inheritance object DbTransResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DbTransResult(bool, int, Exception) 对象构造函数 public DbTransResult(bool success, int rows, Exception exception) Parameters success bool 完成情况 rows int 受影响行数 exception Exception 发生的异常 Properties Exception 表示执行中发生的特殊情况（异常） public Exception Exception { get; } Property Value Exception Rows 受影响行数（无需解释） public int Rows { get; } Property Value int Success 事物是否提交成功（状态） public bool Success { get; } Property Value bool"
  },
  "api/Tool.SqlCore.DbTransactionExensions.html": {
    "href": "api/Tool.SqlCore.DbTransactionExensions.html",
    "title": "Class DbTransactionExensions | Tool.Net",
    "keywords": "Class DbTransactionExensions Namespace Tool.SqlCore Assembly Tool.Net.dll 对DbTransaction 对象，提供扩展支持 public static class DbTransactionExensions Inheritance object DbTransactionExensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods ExecuteNonQuery(DbTransaction, DbHelper, string, params DbParameter[]) SQL事物执行（增/改/删）相关操作 public static DbTransResult ExecuteNonQuery(this DbTransaction transaction, DbHelper dbHelper, string commandText, params DbParameter[] commandParameters) Parameters transaction DbTransaction SQL事物对象 dbHelper DbHelper 数据库引擎 commandText string 执行的SQL语句 commandParameters DbParameter[] 携带的参数可以是Null Returns DbTransResult ExecuteNonQuery(DbTransaction, DbHelper, string, object) SQL事物执行（增/改/删）相关操作 public static DbTransResult ExecuteNonQuery(this DbTransaction transaction, DbHelper dbHelper, string commandText, object parameters) Parameters transaction DbTransaction SQL事物对象 dbHelper DbHelper 数据库引擎 commandText string 执行的SQL语句 parameters object 携带的参数可以是Null，虚构参数 Returns DbTransResult ExecuteNonQuery(DbTransaction, DbHelper, params SqlTextParameter[]) SQL事物执行（增/改/删）相关操作 public static DbTransResult ExecuteNonQuery(this DbTransaction transaction, DbHelper dbHelper, params SqlTextParameter[] sqlTexts) Parameters transaction DbTransaction SQL事物对象 dbHelper DbHelper 数据库引擎 sqlTexts SqlTextParameter[] SQL操作对象SqlTextParameter[] Returns DbTransResult ExecuteNonQueryAsync(DbTransaction, DbHelper, params SqlTextParameter[]) SQL事物执行（增/改/删）相关操作 public static Task<DbTransResult> ExecuteNonQueryAsync(this DbTransaction transaction, DbHelper dbHelper, params SqlTextParameter[] sqlTexts) Parameters transaction DbTransaction SQL事物对象 dbHelper DbHelper 数据库引擎 sqlTexts SqlTextParameter[] SQL操作对象SqlTextParameter[] Returns Task<DbTransResult>"
  },
  "api/Tool.SqlCore.IDbProvider-1.html": {
    "href": "api/Tool.SqlCore.IDbProvider-1.html",
    "title": "Interface IDbProvider<T> | Tool.Net",
    "keywords": "Interface IDbProvider<T> Namespace Tool.SqlCore Assembly Tool.Net.dll SQL数据化的模型接口 public interface IDbProvider<T> : IDbProvider where T : Enum Type Parameters T 数据类型枚举 Inherited Members IDbProvider.DeriveParameters(IDbCommand) IDbProvider.GetLastIdSql() IDbProvider.Instance(DbProviderType, string) IDbProvider.IsBackupDatabase() IDbProvider.IsCompactDatabase() IDbProvider.IsDbOptimize() IDbProvider.IsFullTextSearchEnabled() IDbProvider.IsShrinkData() IDbProvider.IsStoreProc() IDbProvider.GetParam(ref DbParameter, object, ParameterDirection, Type, string, int) IDbProvider.GetInsertParams(DbHelper, IDictionary<string, object>, out string, out string) IDbProvider.GetUpdateParams(DbHelper, IDictionary<string, object>, out string) IDbProvider.GetPagerSet(DbHelper, PagerParameters) IDbProvider.GetPagerSetAsync(DbHelper, PagerParameters) IDbProvider.ParameterPrefix Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods ConvertToLocalDbType(Type) 根据Type类型获取对应的数据库类型，请自行写实现 T ConvertToLocalDbType(Type t) Parameters t Type Type类型 Returns T 类型 ConvertToLocalDbTypeString(Type) 根据Type类型获取对应的类型字符串 string ConvertToLocalDbTypeString(Type netType) Parameters netType Type Type类型 Returns string 类型字符串"
  },
  "api/Tool.SqlCore.IDbProvider.html": {
    "href": "api/Tool.SqlCore.IDbProvider.html",
    "title": "Interface IDbProvider | Tool.Net",
    "keywords": "Interface IDbProvider Namespace Tool.SqlCore Assembly Tool.Net.dll SQL数据化的模型接口 public interface IDbProvider Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties ParameterPrefix 参数表示符号 '@' 或 ':' string ParameterPrefix { get; } Property Value string Methods DeriveParameters(IDbCommand) 读取存储过程参数填充到 IDbCommand.Parameters 集合（内置实现采用虚构委托，如在意性能请自行实现，示例：DbCommandBuilder.DeriveParameters(cmd) 每个数据库下面都有对应的实现类。） void DeriveParameters(IDbCommand cmd) Parameters cmd IDbCommand 数据库对象 GetInsertParams(DbHelper, IDictionary<string, object>, out string, out string) 根据键值对生成 Insert 部分语法，和值添加对象 List<DbParameter> GetInsertParams(DbHelper database, IDictionary<string, object> keyValues, out string key, out string value) Parameters database DbHelper 数据库引擎 keyValues IDictionary<string, object> 数据集键值对 key string 返回生成的部分SQL语句 value string 返回生成的部分SQL语句 Returns List<DbParameter> List<T> GetLastIdSql() 获取插入数据的主键ID（SQL） string GetLastIdSql() Returns string GetPagerSet(DbHelper, PagerParameters) 分页核心方法，建议重写，底层默认实现 SqlServer 分页。 PagerSet GetPagerSet(DbHelper dbHelper, PagerParameters pramsPager) Parameters dbHelper DbHelper 数据库引擎 pramsPager PagerParameters 分页参数 Returns PagerSet 返回分页对象实体 GetPagerSetAsync(DbHelper, PagerParameters) 分页核心方法，建议重写，底层默认实现 SqlServer 分页。 Task<PagerSet> GetPagerSetAsync(DbHelper dbHelper, PagerParameters pramsPager) Parameters dbHelper DbHelper pramsPager PagerParameters 分页参数 Returns Task<PagerSet> 返回分页对象实体 GetParam(ref DbParameter, object, ParameterDirection, Type, string, int) 绑定数据，需要用户实现，默认不实现，内置采用系统默认类型，满足基本类型的对应 void GetParam(ref DbParameter paraObj, object paraValue, ParameterDirection direction, Type paraType, string sourceColumn, int size) Parameters paraObj DbParameter 数据库映射对象 paraValue object 值 direction ParameterDirection 指定查询内的有关 DataSet 的参数的类型。 paraType Type 类型 sourceColumn string 源列 size int 大小 GetUpdateParams(DbHelper, IDictionary<string, object>, out string) 根据键值对生成 Update 部分语法，和值添加对象 List<DbParameter> GetUpdateParams(DbHelper database, IDictionary<string, object> keyValues, out string strsql) Parameters database DbHelper 数据库引擎 keyValues IDictionary<string, object> 数据集键值对 strsql string 返回生成的部分SQL语句 Returns List<DbParameter> List<T> Instance(DbProviderType, string) 获取当前对象的实例 DbProviderFactory Instance(DbProviderType dbProviderType, string dbProviderName) Parameters dbProviderType DbProviderType 数据库类型 dbProviderName string 数据库类型定义名称 Returns DbProviderFactory IsBackupDatabase() 无用，返回true bool IsBackupDatabase() Returns bool IsCompactDatabase() 无用，返回true bool IsCompactDatabase() Returns bool IsDbOptimize() 无用，返回true bool IsDbOptimize() Returns bool IsFullTextSearchEnabled() 无用，返回true bool IsFullTextSearchEnabled() Returns bool IsShrinkData() 无用，返回true bool IsShrinkData() Returns bool IsStoreProc() 无用，返回true bool IsStoreProc() Returns bool"
  },
  "api/Tool.SqlCore.IMessage.html": {
    "href": "api/Tool.SqlCore.IMessage.html",
    "title": "Interface IMessage | Tool.Net",
    "keywords": "Interface IMessage Namespace Tool.SqlCore Assembly Tool.Net.dll 存储过程操作类（返回的消息对象）接口 public interface IMessage Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties Content 存储过程返回信息 string Content { get; set; } Property Value string EntityList 返回的数据集合 ArrayList EntityList { get; set; } Property Value ArrayList MessageID 返回的状态ID int MessageID { get; set; } Property Value int Success 执行成功与否（状态） bool Success { get; set; } Property Value bool Methods AddEntity(ArrayList) 给数据集合赋值 void AddEntity(ArrayList entityList) Parameters entityList ArrayList 一个数据集合 AddEntity(object) 添加数据到集合 void AddEntity(object entity) Parameters entity object 数据源 ResetEntityList() 清除所有返回的数据集合 void ResetEntityList()"
  },
  "api/Tool.SqlCore.ITableProvider.html": {
    "href": "api/Tool.SqlCore.ITableProvider.html",
    "title": "Interface ITableProvider | Tool.Net",
    "keywords": "Interface ITableProvider Namespace Tool.SqlCore Assembly Tool.Net.dll 单表操作对象 （接口） public interface ITableProvider Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties Database 核心数据对象 DbHelper Database { get; set; } Property Value DbHelper TableName 表名 string TableName { get; set; } Property Value string Methods BatchCommitData(DataSet, string[][]) 批量提交数据 void BatchCommitData(DataSet dataSet, string[][] columnMapArray) Parameters dataSet DataSet DataSet对象 columnMapArray string[][] 列映射数组 BatchCommitData(DataTable, string[][]) 批量提交数据 void BatchCommitData(DataTable table, string[][] columnMapArray) Parameters table DataTable DataTable对象 columnMapArray string[][] 列映射数组 CommitData(DataTable) 插入新的数据 void CommitData(DataTable dt) Parameters dt DataTable DataTable对象 Delete(string) 删除该表数据 int Delete(string where) Parameters where string 指定的删除条件 Returns int Delete(string, object) 删除该表数据 int Delete(string where, object prams) Parameters where string 指定的删除条件 prams object 对虚构参数进行映射 Returns int DeleteAsync(string) 删除该表数据 Task<int> DeleteAsync(string where) Parameters where string 指定的删除条件 Returns Task<int> DeleteAsync(string, object) 删除该表数据 Task<int> DeleteAsync(string where, object prams) Parameters where string 指定的删除条件 prams object 对虚构参数进行映射 Returns Task<int> Get(string) 查询该表信息 DataTable Get(string where) Parameters where string 指定的查询条件 Returns DataTable DataTable对象 Get(string, object) 查询该表信息 DataTable Get(string where, object prams) Parameters where string 指定的查询条件 prams object 对字符串进行映射 Returns DataTable DataTable对象 Get(string, object, params string[]) 查询该表信息 DataTable Get(string where, object prams, params string[] fields) Parameters where string 指定的查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns DataTable DataTable对象 Get(string, params string[]) 查询该表信息 DataTable Get(string where, params string[] fields) Parameters where string 指定的查询条件 fields string[] 要查询的字段 Returns DataTable DataTable对象 GetAsync(string) 查询该表信息 Task<DataTable> GetAsync(string where) Parameters where string 指定的查询条件 Returns Task<DataTable> DataTable对象 GetAsync(string, object) 查询该表信息 Task<DataTable> GetAsync(string where, object prams) Parameters where string 指定的查询条件 prams object 对字符串进行映射 Returns Task<DataTable> DataTable对象 GetAsync(string, object, params string[]) 查询该表信息 Task<DataTable> GetAsync(string where, object prams, params string[] fields) Parameters where string 指定的查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<DataTable> DataTable对象 GetAsync(string, params string[]) 查询该表信息 Task<DataTable> GetAsync(string where, params string[] fields) Parameters where string 指定的查询条件 fields string[] 要查询的字段 Returns Task<DataTable> DataTable对象 GetEmptyTable() 获取空表 DataTable GetEmptyTable() Returns DataTable DataTable对象 GetEmptyTableAsync() 获取空表 Task<DataTable> GetEmptyTableAsync() Returns Task<DataTable> DataTable对象 GetObjectAsync<T>(string) 获取对象 Task<T> GetObjectAsync<T>(string where) Parameters where string 查询条件 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectAsync<T>(string, object) 获取对象 Task<T> GetObjectAsync<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectAsync<T>(string, object, params string[]) 获取对象 Task<T> GetObjectAsync<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectAsync<T>(string, params string[]) 获取对象 Task<T> GetObjectAsync<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectListAsync<T>(string) 获取对象列表 Task<IList<T>> GetObjectListAsync<T>(string where) Parameters where string 查询条件 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectListAsync<T>(string, object) 获取对象列表 Task<IList<T>> GetObjectListAsync<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectListAsync<T>(string, object, params string[]) 获取对象列表 Task<IList<T>> GetObjectListAsync<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectListAsync<T>(string, params string[]) 获取对象列表 Task<IList<T>> GetObjectListAsync<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string) 获取对象列表 IList<T> GetObjectList<T>(string where) Parameters where string 查询条件 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string, object) 获取对象列表 IList<T> GetObjectList<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string, object, params string[]) 获取对象列表 IList<T> GetObjectList<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string, params string[]) 获取对象列表 IList<T> GetObjectList<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObject<T>(string) 获取对象 T GetObject<T>(string where) Parameters where string 查询条件 Returns T 返回实体对象 Type Parameters T 实体对象 GetObject<T>(string, object) 获取对象 T GetObject<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns T 返回实体对象 Type Parameters T 实体对象 GetObject<T>(string, object, params string[]) 获取对象 T GetObject<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns T 返回实体对象 Type Parameters T 实体对象 GetObject<T>(string, params string[]) 获取对象 T GetObject<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns T 返回实体对象 Type Parameters T 实体对象 GetOne(string) 获取当前查询的数据的第一行 DataRow GetOne(string where) Parameters where string 查询条件 Returns DataRow 返回第一条数据 GetOne(string, object) 获取当前查询的数据的第一行 DataRow GetOne(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns DataRow 返回第一条数据 GetOne(string, object, params string[]) 获取当前查询的数据的第一行 DataRow GetOne(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns DataRow 返回第一条数据 GetOne(string, params string[]) 获取当前查询的数据的第一行 DataRow GetOne(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns DataRow 返回第一条数据 GetOneAsync(string) 获取当前查询的数据的第一行 Task<DataRow> GetOneAsync(string where) Parameters where string 查询条件 Returns Task<DataRow> 返回第一条数据 GetOneAsync(string, object) 获取当前查询的数据的第一行 Task<DataRow> GetOneAsync(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns Task<DataRow> 返回第一条数据 GetOneAsync(string, object, params string[]) 获取当前查询的数据的第一行 Task<DataRow> GetOneAsync(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<DataRow> 返回第一条数据 GetOneAsync(string, params string[]) 获取当前查询的数据的第一行 Task<DataRow> GetOneAsync(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns Task<DataRow> 返回第一条数据 GetRecordsCount(string) 查询行数 int GetRecordsCount(string where) Parameters where string 查询条件 Returns int 返回行数 GetRecordsCountAsync(string) 查询行数 Task<int> GetRecordsCountAsync(string where) Parameters where string 查询条件 Returns Task<int> 返回行数 Initialize(DbHelper, string) 初始化绑定数据对象 void Initialize(DbHelper Database, string TableName) Parameters Database DbHelper 核心数据对象 TableName string 表名 Insert(Dictionary<string, object>) 插入新的数据 int Insert(Dictionary<string, object> keyValues) Parameters keyValues Dictionary<string, object> 键值对的数据集 Returns int Insert(Dictionary<string, object>, out object) 插入新的数据 int Insert(Dictionary<string, object> keyValues, out object ID) Parameters keyValues Dictionary<string, object> 键值对的数据集 ID object 获取插入数据的ID Returns int Insert(DataRow) 插入新的数据 void Insert(DataRow row) Parameters row DataRow 新数据DataRow对象 Insert(object) 插入新的数据 int Insert(object prams) Parameters prams object 对字符串进行映射 Returns int Insert(object, out object) 插入新的数据 int Insert(object prams, out object ID) Parameters prams object 对字符串进行映射 ID object 获取插入数据的ID Returns int InsertAsync(Dictionary<string, object>) 插入新的数据 Task<int> InsertAsync(Dictionary<string, object> keyValues) Parameters keyValues Dictionary<string, object> 键值对的数据集 Returns Task<int> InsertAsync(object) 插入新的数据 Task<int> InsertAsync(object prams) Parameters prams object 对字符串进行映射 Returns Task<int> InsertIdAsync(Dictionary<string, object>) 插入新的数据 Task<SqlNonQuery> InsertIdAsync(Dictionary<string, object> keyValues) Parameters keyValues Dictionary<string, object> 键值对的数据集 Returns Task<SqlNonQuery> InsertIdAsync(object) 插入新的数据 Task<SqlNonQuery> InsertIdAsync(object prams) Parameters prams object 对字符串进行映射 Returns Task<SqlNonQuery> NewRow() 新行 DataRow NewRow() Returns DataRow DataRow对象 NewRowAsync() 新行 Task<DataRow> NewRowAsync() Returns Task<DataRow> DataRow对象 Update(Dictionary<string, object>, string) 修改数据 int Update(Dictionary<string, object> keyValues, string where) Parameters keyValues Dictionary<string, object> 修改的键值对集合 where string 指定的修改的条件 Returns int Update(object, string) 修改数据 int Update(object prams, string where) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 Returns int Update(object, string, object) 修改数据 int Update(object prams, string where, object parameter) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 parameter object 警告：where 条件的参数，切记字符串映射名不要与字段名同名 Returns int UpdateAsync(Dictionary<string, object>, string) 修改数据 Task<int> UpdateAsync(Dictionary<string, object> keyValues, string where) Parameters keyValues Dictionary<string, object> 修改的键值对集合 where string 指定的修改的条件 Returns Task<int> UpdateAsync(object, string) 修改数据 Task<int> UpdateAsync(object prams, string where) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 Returns Task<int> UpdateAsync(object, string, object) 修改数据 Task<int> UpdateAsync(object prams, string where, object parameter) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 parameter object 警告：where 条件的参数，切记字符串映射名不要与字段名同名 Returns Task<int>"
  },
  "api/Tool.SqlCore.Message.html": {
    "href": "api/Tool.SqlCore.Message.html",
    "title": "Class Message | Tool.Net",
    "keywords": "Class Message Namespace Tool.SqlCore Assembly Tool.Net.dll 存储过程操作类（返回的消息对象） [Serializable] public class Message : IMessage Inheritance object Message Implements IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors Message() 初始化参数 public Message() Message(bool) 初始化参数 public Message(bool isSuccess) Parameters isSuccess bool 执行结果 Message(bool, string) 初始化参数 public Message(bool isSuccess, string content) Parameters isSuccess bool 执行结果 content string 输出内容 Message(bool, string, ArrayList) 初始化参数 public Message(bool isSuccess, string content, ArrayList entityList) Parameters isSuccess bool 执行结果 content string 输出内容 entityList ArrayList 数据集 Message(List<DbParameter>) 初始化参数 public Message(List<DbParameter> prams) Parameters prams List<DbParameter> SQL数据对象 Message(int, string) 初始化参数 public Message(int messageID, string content) Parameters messageID int 消息ID content string 输出内容 Message(int, string, ArrayList) 初始化参数 public Message(int messageID, string content, ArrayList entityList) Parameters messageID int 消息ID content string 输出内容 entityList ArrayList 数据集 Properties Content 存储过程返回信息 public string Content { get; set; } Property Value string EntityList 返回的数据集合 public ArrayList EntityList { get; set; } Property Value ArrayList MessageID 返回的状态ID public int MessageID { get; set; } Property Value int Prams 获取当前存储过程的参数信息 public List<DbParameter> Prams { get; } Property Value List<DbParameter> Success 执行成功与否（状态） public bool Success { get; set; } Property Value bool Methods AddEntity(ArrayList) 给数据集合赋值 public void AddEntity(ArrayList entityList) Parameters entityList ArrayList 一个数据集合 AddEntity(object) 添加数据到集合 public void AddEntity(object entity) Parameters entity object 数据源 GetEntityList<T>(int) 获取数组下对应下标的数据 public T GetEntityList<T>(int index) Parameters index int Returns T 返回结果 Type Parameters T 返回的指定类型 GetPramsName(string) 根据参数名称获取参数值 public object GetPramsName(string Name) Parameters Name string 参数名称,模糊查询，尽量精确变量名称 Returns object 返回参数值 ResetEntityList() 清除所有返回的数据集合 public void ResetEntityList()"
  },
  "api/Tool.SqlCore.MessageHelper.html": {
    "href": "api/Tool.SqlCore.MessageHelper.html",
    "title": "Class MessageHelper | Tool.Net",
    "keywords": "Class MessageHelper Namespace Tool.SqlCore Assembly Tool.Net.dll 存储过程操作类 public static class MessageHelper Inheritance object MessageHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods GetMessage(List<DbParameter>) 根据存储过程返回一个Message对象 public static Message GetMessage(List<DbParameter> prams) Parameters prams List<DbParameter> 存储过程参数 Returns Message 返回存储过程对象Message GetMessage(DbHelper, string, List<DbParameter>) 根据存储过程返回一个object对象 public static Message GetMessage(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Message 返回存储过程对象Message GetMessage(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个object对象 public static Message GetMessage(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Message 返回存储过程对象Message GetMessageAsync(DbHelper, string, List<DbParameter>) 根据存储过程返回一个object对象 public static Task<Message> GetMessageAsync(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Task<Message> 返回存储过程对象Message GetMessageAsync(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个object对象 public static Task<Message> GetMessageAsync(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Task<Message> 返回存储过程对象Message GetMessageForDataSet(DbHelper, string, List<DbParameter>) 根据存储过程返回一个DataSet对象 public static Message GetMessageForDataSet(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Message 返回存储过程对象Message GetMessageForDataSet(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个DataSet对象 public static Message GetMessageForDataSet(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Message 返回存储过程对象Message GetMessageForDataSetAsync(DbHelper, string, List<DbParameter>) 根据存储过程返回一个DataSet对象 public static Task<Message> GetMessageForDataSetAsync(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Task<Message> 返回存储过程对象Message GetMessageForDataSetAsync(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个DataSet对象 public static Task<Message> GetMessageForDataSetAsync(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Task<Message> 返回存储过程对象Message GetMessageForObjectAsync<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个实体对象 public static Task<Message> GetMessageForObjectAsync<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Task<Message> 返回存储过程对象Message Type Parameters T 实体类 GetMessageForObjectAsync<T>(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个实体对象 public static Task<Message> GetMessageForObjectAsync<T>(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Task<Message> 返回存储过程对象Message Type Parameters T 实体类 GetMessageForObjectListAsync<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个实体对象数组 public static Task<Message> GetMessageForObjectListAsync<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Task<Message> 返回存储过程对象Message Type Parameters T 实体类 GetMessageForObjectListAsync<T>(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个实体对象数组 public static Task<Message> GetMessageForObjectListAsync<T>(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Task<Message> 返回存储过程对象Message Type Parameters T 实体类 GetMessageForObjectList<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个实体对象数组 public static Message GetMessageForObjectList<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Message 返回存储过程对象Message Type Parameters T 实体类 GetMessageForObjectList<T>(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个实体对象数组 public static Message GetMessageForObjectList<T>(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Message 返回存储过程对象Message Type Parameters T 实体类 GetMessageForObject<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个实体对象 public static Message GetMessageForObject<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Message 返回存储过程对象Message Type Parameters T 实体类 GetMessageForObject<T>(DbHelper, string, object, params DbParameter[]) 根据存储过程返回一个实体对象 public static Message GetMessageForObject<T>(this DbHelper database, string procName, object prams, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameter DbParameter[] 具有返回值的参数 Returns Message 返回存储过程对象Message Type Parameters T 实体类 GetObjectAsync<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个泛型对象 public static Task<T> GetObjectAsync<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Task<T> 泛型对象 Type Parameters T 实体类 GetObjectAsync<T>(DbHelper, string, object) 根据存储过程返回一个泛型对象 public static Task<T> GetObjectAsync<T>(this DbHelper database, string procName, object prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 Returns Task<T> 泛型对象 Type Parameters T 实体类 GetObjectAsync<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) 根据存储过程返回一个泛型对象 public static Task<T> GetObjectAsync<T>(this DbHelper database, string procName, object prams, out List<DbParameter> parameters, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameters List<DbParameter> 返回DbParameter[]对象集合 parameter DbParameter[] 具有返回值的参数 Returns Task<T> 泛型对象 Type Parameters T 实体类 GetObjectListAsync<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个泛型数组对象 public static Task<IList<T>> GetObjectListAsync<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns Task<IList<T>> 泛型数组对象 Type Parameters T 实体类 GetObjectListAsync<T>(DbHelper, string, object) 根据存储过程返回一个泛型数组对象 public static Task<IList<T>> GetObjectListAsync<T>(this DbHelper database, string procName, object prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 Returns Task<IList<T>> 泛型数组对象 Type Parameters T 实体类 GetObjectListAsync<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) 根据存储过程返回一个泛型数组对象 public static Task<IList<T>> GetObjectListAsync<T>(this DbHelper database, string procName, object prams, out List<DbParameter> parameters, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameters List<DbParameter> 返回DbParameter[]对象集合 parameter DbParameter[] 具有返回值的参数 Returns Task<IList<T>> 泛型数组对象 Type Parameters T 实体类 GetObjectList<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个泛型数组对象 public static IList<T> GetObjectList<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns IList<T> 泛型数组对象 Type Parameters T 实体类 GetObjectList<T>(DbHelper, string, object) 根据存储过程返回一个泛型数组对象 public static IList<T> GetObjectList<T>(this DbHelper database, string procName, object prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 Returns IList<T> 泛型数组对象 Type Parameters T 实体类 GetObjectList<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) 根据存储过程返回一个泛型数组对象 public static IList<T> GetObjectList<T>(this DbHelper database, string procName, object prams, out List<DbParameter> parameters, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameters List<DbParameter> 返回DbParameter[]对象集合 parameter DbParameter[] 具有返回值的参数 Returns IList<T> 泛型数组对象 Type Parameters T 实体类 GetObject<T>(DbHelper, string, List<DbParameter>) 根据存储过程返回一个泛型对象 public static T GetObject<T>(this DbHelper database, string procName, List<DbParameter> prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams List<DbParameter> 存储过程参数 Returns T 泛型对象 Type Parameters T 实体类 GetObject<T>(DbHelper, string, object) 根据存储过程返回一个泛型对象 public static T GetObject<T>(this DbHelper database, string procName, object prams) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 Returns T 泛型对象 Type Parameters T 实体类 GetObject<T>(DbHelper, string, object, out List<DbParameter>, params DbParameter[]) 根据存储过程返回一个泛型对象 public static T GetObject<T>(this DbHelper database, string procName, object prams, out List<DbParameter> parameters, params DbParameter[] parameter) Parameters database DbHelper 数据底层对象 procName string 存储过程名 prams object 存储过程参数 parameters List<DbParameter> 返回DbParameter[]对象集合 parameter DbParameter[] 具有返回值的参数 Returns T 泛型对象 Type Parameters T 实体类"
  },
  "api/Tool.SqlCore.PagerManager.html": {
    "href": "api/Tool.SqlCore.PagerManager.html",
    "title": "Class PagerManager | Tool.Net",
    "keywords": "Class PagerManager Namespace Tool.SqlCore Assembly Tool.Net.dll SQL分页核心类，目前暂时已被废除，后续会考虑实际情况，补充几种数据库的分页SQL。 public class PagerManager Inheritance object PagerManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods GetFieldString(string[], string[]) 将查询SQL字段的对象拼接 public static string GetFieldString(string[] fields, string[] fieldAlias) Parameters fields string[] 字段数组 fieldAlias string[] 别名的字段数组 Returns string 返回查询的SQL字段字符串"
  },
  "api/Tool.SqlCore.PagerParameters.html": {
    "href": "api/Tool.SqlCore.PagerParameters.html",
    "title": "Class PagerParameters | Tool.Net",
    "keywords": "Class PagerParameters Namespace Tool.SqlCore Assembly Tool.Net.dll 根据指定分页信息查询SQL public class PagerParameters Inheritance object PagerParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors PagerParameters() 实例化分页对象 public PagerParameters() PagerParameters(string, string, int) 实例化分页对象 public PagerParameters(string table, string pkey, int pageIndex) Parameters table string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） pageIndex int 页索引 PagerParameters(string, string, int, int) 实例化分页对象 public PagerParameters(string table, string pkey, int pageIndex, int pageSize) Parameters table string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） pageIndex int 页索引 pageSize int 页大小 PagerParameters(string, string, int, string) 实例化分页对象 public PagerParameters(string table, string pkey, int pageIndex, string whereStr) Parameters table string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） pageIndex int 页索引 whereStr string 查询条件 PagerParameters(string, string, string, int, int) 实例化分页对象 public PagerParameters(string table, string pkey, string whereStr, int pageIndex, int pageSize) Parameters table string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） whereStr string 查询条件 pageIndex int 页索引 pageSize int 页大小 PagerParameters(string, string, string, int, int, string[]) 实例化分页对象 public PagerParameters(string table, string pkey, string whereStr, int pageIndex, int pageSize, string[] fields) Parameters table string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） whereStr string 查询条件 pageIndex int 页索引 pageSize int 页大小 fields string[] SQL表查询的字段 PagerParameters(string, string, string, int, int, string[], bool) 实例化分页对象 public PagerParameters(string sql, string pkey, string whereStr, int pageIndex, int pageSize, string[] fields, bool issql) Parameters sql string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） whereStr string 查询条件 pageIndex int 页索引 pageSize int 页大小 fields string[] SQL表查询的字段 issql bool 使用表名还是使用SQL执行分页（true：SQL，false：表名） PagerParameters(string, string, string, int, int, string[], string[]) 实例化分页对象 public PagerParameters(string table, string pkey, string whereStr, int pageIndex, int pageSize, string[] fields, string[] fieldAlias) Parameters table string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） whereStr string 查询条件 pageIndex int 页索引 pageSize int 页大小 fields string[] SQL表查询的字段 fieldAlias string[] SQL表查询的字段 AS 别名 PagerParameters(string, string, string, int, int, string[], string[], bool) 实例化分页对象 public PagerParameters(string sql, string pkey, string whereStr, int pageIndex, int pageSize, string[] fields, string[] fieldAlias, bool issql) Parameters sql string 查询表名 pkey string 显示方式，例如：倒序，顺序（ORDER By ID DESC） whereStr string 查询条件 pageIndex int 页索引 pageSize int 页大小 fields string[] SQL表查询的字段 fieldAlias string[] SQL表查询的字段 AS 别名 issql bool 使用表名还是使用SQL执行分页（true：SQL，false：表名） Properties FieldAlias SQL表查询的字段 AS 别名 public string[] FieldAlias { get; set; } Property Value string[] Fields SQL表查询的字段 public string[] Fields { get; set; } Property Value string[] IsSql 使用表名还是使用SQL执行分页（true：SQL，false：表名） public bool IsSql { get; set; } Property Value bool PKey 显示方式，例如：倒序，顺序（ORDER By ID DESC） public string PKey { get; set; } Property Value string PageIndex 页索引 public int PageIndex { get; set; } Property Value int PageSize 页大小 public int PageSize { get; set; } Property Value int Table 表名 public string Table { get; set; } Property Value string WhereStr 查询条件 public string WhereStr { get; set; } Property Value string"
  },
  "api/Tool.SqlCore.PagerSet.html": {
    "href": "api/Tool.SqlCore.PagerSet.html",
    "title": "Class PagerSet | Tool.Net",
    "keywords": "Class PagerSet Namespace Tool.SqlCore Assembly Tool.Net.dll 分页数据对象 [Serializable] public class PagerSet Inheritance object PagerSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors PagerSet() 实例化，无参构造 public PagerSet() PagerSet(int, int, int, int, DataSet) 实例化，对象 public PagerSet(int pageIndex, int pageSize, int pageCount, int recordCount, DataSet pageSet) Parameters pageIndex int 页索引 pageSize int 页大小 pageCount int 可分为多少页 recordCount int SQL数据表总行数 pageSet DataSet 数据对象 Properties PageCount 可分为多少页（页数） public int PageCount { get; set; } Property Value int PageEntitys 获取时加载的实体类 public object PageEntitys { get; } Property Value object PageIndex 页索引 public int PageIndex { get; set; } Property Value int PageSet 源数据集合 public DataSet PageSet { get; set; } Property Value DataSet PageSize 页大小 public int PageSize { get; set; } Property Value int PageTable 源数据集合第一条 public DataTable PageTable { get; set; } Property Value DataTable RecordCount SQL数据表总行数 public int RecordCount { get; set; } Property Value int Methods CheckedPageSet() 可用于验证当前DataSet，PageSet 是否非空 public bool CheckedPageSet() Returns bool 返回状态 PageSetJson() 返回当前DataSet，PageTable 的JSON格式字符串数组 public string[] PageSetJson() Returns string[] JSON格式字符串数组 PageSetJson(bool) 返回当前DataSet，PageTable 的JSON格式字符串数组 public string[] PageSetJson(bool IsDate) Parameters IsDate bool ToJson格式时间，启用转字符串 Returns string[] JSON格式字符串数组 PageSetJson(bool, string) 返回当前DataSet，PageTable 的JSON格式字符串数组 public string[] PageSetJson(bool IsDate, string ToDateString) Parameters IsDate bool ToJson格式时间，启用转字符串 ToDateString string Date.ToString()的写法。 Returns string[] JSON格式字符串数组 PageTableJson() 返回当前DataTable，PageTable 的JSON格式字符串 public string PageTableJson() Returns string JSON格式字符串 PageTableJson(bool) 返回当前DataTable，PageTable 的JSON格式字符串 public string PageTableJson(bool IsDate) Parameters IsDate bool ToJson格式时间，启用转字符串 Returns string JSON格式字符串 PageTableJson(bool, string) 返回当前DataTable，PageTable 的JSON格式字符串 public string PageTableJson(bool IsDate, string ToDateString) Parameters IsDate bool ToJson格式时间，启用转字符串 ToDateString string Date.ToString()的写法。 Returns string JSON格式字符串 PageToEntityList<T>() 将DataTable对象 转换为 实体对象数组 (优化版) public void PageToEntityList<T>() where T : new() Type Parameters T 实体对象"
  },
  "api/Tool.SqlCore.ProviderFactory.html": {
    "href": "api/Tool.SqlCore.ProviderFactory.html",
    "title": "Class ProviderFactory | Tool.Net",
    "keywords": "Class ProviderFactory Namespace Tool.SqlCore Assembly Tool.Net.dll DbProviderFactory工厂类 public class ProviderFactory Inheritance object ProviderFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods AddFactory(string, string, bool) 将现有数据库对象注入实现 public static void AddFactory(string providerInvariantName, string strType, bool throwOnError) Parameters providerInvariantName string 注册的名称 strType string \"System.Data.SqlClient.SqlClientFactory, System.Data.SqlClient\" throwOnError bool 如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。 AddFactory(string, Type) 将现有数据库对象注入实现 public static void AddFactory(string providerInvariantName, Type providerFactoryClass) Parameters providerInvariantName string 注册的名称 providerFactoryClass Type 对应的数据库Type AddFactory(DbProviderType, Type) 将现有数据库对象注入实现 public static void AddFactory(DbProviderType providerType, Type providerFactoryClass) Parameters providerType DbProviderType 注册数据库类型 providerFactoryClass Type 对应的数据库Type AddFactory<DbProviderFactory>(string) 将现有数据库对象注入实现 public static void AddFactory<DbProviderFactory>(string providerInvariantName) where DbProviderFactory : DbProviderFactory Parameters providerInvariantName string 注册的名称 Type Parameters DbProviderFactory AddFactory<DbProviderFactory>(DbProviderType) 将现有数据库对象注入实现 public static void AddFactory<DbProviderFactory>(DbProviderType providerType) where DbProviderFactory : DbProviderFactory Parameters providerType DbProviderType 注册数据库类型 Type Parameters DbProviderFactory GetDbProviderFactory(DbProviderType) 获取指定类型的数据库对应的DbProviderFactory public static DbProviderFactory GetDbProviderFactory(DbProviderType providerType) Parameters providerType DbProviderType 数据库类型枚举 Returns DbProviderFactory GetFactory(string) 加载指定数据库类型的DbProviderFactory public static DbProviderFactory GetFactory(string providerName) Parameters providerName string 数据库类型引用信息 Returns DbProviderFactory GetProviderInvariantName(DbProviderType) 获取指定数据库类型对应的程序集名称 public static string GetProviderInvariantName(DbProviderType providerType) Parameters providerType DbProviderType 数据库类型枚举 Returns string"
  },
  "api/Tool.SqlCore.ProxyFactory.CreateInstanceHandler.html": {
    "href": "api/Tool.SqlCore.ProxyFactory.CreateInstanceHandler.html",
    "title": "Delegate ProxyFactory.CreateInstanceHandler | Tool.Net",
    "keywords": "Delegate ProxyFactory.CreateInstanceHandler Namespace Tool.SqlCore Assembly Tool.Net.dll 实现回调数据接口 public delegate object ProxyFactory.CreateInstanceHandler(object[] parameters) Parameters parameters object[] Returns object Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.SqlCore.ProxyFactory.html": {
    "href": "api/Tool.SqlCore.ProxyFactory.html",
    "title": "Class ProxyFactory | Tool.Net",
    "keywords": "Class ProxyFactory Namespace Tool.SqlCore Assembly Tool.Net.dll 底层添加数据库方法 public sealed class ProxyFactory Inheritance object ProxyFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods CreateInstance<T>() 添加数据库 public static T CreateInstance<T>() Returns T Type Parameters T 数据访问类 CreateInstance<T>(params object[]) 添加数据库 public static T CreateInstance<T>(params object[] parameters) Parameters parameters object[] 数据库连接字符串 Returns T Type Parameters T 数据访问类"
  },
  "api/Tool.SqlCore.SqlNonQuery.html": {
    "href": "api/Tool.SqlCore.SqlNonQuery.html",
    "title": "Class SqlNonQuery | Tool.Net",
    "keywords": "Class SqlNonQuery Namespace Tool.SqlCore Assembly Tool.Net.dll 异步返回带有主键的影响信息 public record SqlNonQuery : IEquatable<SqlNonQuery> Inheritance object SqlNonQuery Implements IEquatable<SqlNonQuery> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Id 主键Id public object Id { get; set; } Property Value object RowsCount 影响行数 public int RowsCount { get; set; } Property Value int"
  },
  "api/Tool.SqlCore.SqlTextParameter.html": {
    "href": "api/Tool.SqlCore.SqlTextParameter.html",
    "title": "Class SqlTextParameter | Tool.Net",
    "keywords": "Class SqlTextParameter Namespace Tool.SqlCore Assembly Tool.Net.dll 高效的多表安全操作实体 public class SqlTextParameter Inheritance object SqlTextParameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors SqlTextParameter(CommandType, string, DbParameter[]) 创建查询语句 public SqlTextParameter(CommandType commandType, string commandText, DbParameter[] parameters) Parameters commandType CommandType Sql的类型 commandText string 执行的SQL语句 parameters DbParameter[] 携带的参数可以是Null SqlTextParameter(string) 创建查询语句 public SqlTextParameter(string commandText) Parameters commandText string 执行的SQL语句 SqlTextParameter(string, DbParameter[]) 创建查询语句 public SqlTextParameter(string commandText, DbParameter[] parameters) Parameters commandText string 执行的SQL语句 parameters DbParameter[] 携带的参数可以是Null Properties CommandText 执行的SQL语句 public string CommandText { get; set; } Property Value string CommandType 表示Sql的类型 public CommandType CommandType { get; set; } Property Value CommandType Parameters 携带的参数可以是Null public DbParameter[] Parameters { get; set; } Property Value DbParameter[]"
  },
  "api/Tool.SqlCore.TableProvider.html": {
    "href": "api/Tool.SqlCore.TableProvider.html",
    "title": "Class TableProvider | Tool.Net",
    "keywords": "Class TableProvider Namespace Tool.SqlCore Assembly Tool.Net.dll 单表操作对象，系统提供，如果有特殊需求，建议重新实现接口完成。 public class TableProvider : ITableProvider Inheritance object TableProvider Implements ITableProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TableProvider() 无参构造，接口自动实现 public TableProvider() TableProvider(DbHelper, string) 有参构造 public TableProvider(DbHelper database, string tableName) Parameters database DbHelper 数据源对象 tableName string 表名 Properties Database 核心数据对象 public DbHelper Database { get; set; } Property Value DbHelper TableName 表名 public string TableName { get; set; } Property Value string Methods BatchCommitData(DataSet, string[][]) 批量提交数据 public void BatchCommitData(DataSet dataSet, string[][] columnMapArray) Parameters dataSet DataSet DataSet对象 columnMapArray string[][] 列映射数组 BatchCommitData(DataTable, string[][]) 批量提交数据 public void BatchCommitData(DataTable table, string[][] columnMapArray) Parameters table DataTable DataTable对象 columnMapArray string[][] 列映射数组 CommitData(DataTable) 插入新的数据 public void CommitData(DataTable dt) Parameters dt DataTable DataTable对象 Delete(string) 删除该表数据 public int Delete(string where) Parameters where string 指定的删除条件 Returns int 受影响行数 Delete(string, object) 删除该表数据 public int Delete(string where, object prams) Parameters where string 指定的删除条件 prams object 对字符串进行映射 Returns int 受影响行数 DeleteAsync(string) 删除该表数据 public Task<int> DeleteAsync(string where) Parameters where string 指定的删除条件 Returns Task<int> 受影响行数 DeleteAsync(string, object) 删除该表数据 public Task<int> DeleteAsync(string where, object prams) Parameters where string 指定的删除条件 prams object 对字符串进行映射 Returns Task<int> 受影响行数 Get(string) 查询该表信息 public DataTable Get(string where) Parameters where string 指定的查询条件 Returns DataTable DataTable对象 Get(string, object) 查询该表信息 public DataTable Get(string where, object prams) Parameters where string 指定的查询条件 prams object 对字符串进行映射 Returns DataTable DataTable对象 Get(string, object, params string[]) 查询该表信息 public DataTable Get(string where, object prams, params string[] fields) Parameters where string 指定的查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns DataTable DataTable对象 Get(string, params string[]) 查询该表信息 public DataTable Get(string where, params string[] fields) Parameters where string 指定的查询条件 fields string[] 要查询的字段 Returns DataTable DataTable对象 GetAsync(string) 查询该表信息 public Task<DataTable> GetAsync(string where) Parameters where string 指定的查询条件 Returns Task<DataTable> DataTable对象 GetAsync(string, object) 查询该表信息 public Task<DataTable> GetAsync(string where, object prams) Parameters where string 指定的查询条件 prams object 对字符串进行映射 Returns Task<DataTable> DataTable对象 GetAsync(string, object, params string[]) 查询该表信息 public Task<DataTable> GetAsync(string where, object prams, params string[] fields) Parameters where string 指定的查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<DataTable> DataTable对象 GetAsync(string, params string[]) 查询该表信息 public Task<DataTable> GetAsync(string where, params string[] fields) Parameters where string 指定的查询条件 fields string[] 要查询的字段 Returns Task<DataTable> DataTable对象 GetEmptyTable() 获取空表 public DataTable GetEmptyTable() Returns DataTable DataTable对象 GetEmptyTableAsync() 获取空表 public Task<DataTable> GetEmptyTableAsync() Returns Task<DataTable> DataTable对象 GetObjectAsync<T>(string) 获取对象 public Task<T> GetObjectAsync<T>(string where) Parameters where string 查询条件 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectAsync<T>(string, object) 获取对象 public Task<T> GetObjectAsync<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectAsync<T>(string, object, params string[]) 获取对象 public Task<T> GetObjectAsync<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectAsync<T>(string, params string[]) 获取对象 public Task<T> GetObjectAsync<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns Task<T> 返回实体对象 Type Parameters T 实体对象 GetObjectListAsync<T>(string) 获取对象列表 public Task<IList<T>> GetObjectListAsync<T>(string where) Parameters where string 查询条件 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectListAsync<T>(string, object) 获取对象列表 public Task<IList<T>> GetObjectListAsync<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectListAsync<T>(string, object, params string[]) 获取对象列表 public Task<IList<T>> GetObjectListAsync<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectListAsync<T>(string, params string[]) 获取对象列表 public Task<IList<T>> GetObjectListAsync<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns Task<IList<T>> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string) 获取对象列表 public IList<T> GetObjectList<T>(string where) Parameters where string 查询条件 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string, object) 获取对象列表 public IList<T> GetObjectList<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string, object, params string[]) 获取对象列表 public IList<T> GetObjectList<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObjectList<T>(string, params string[]) 获取对象列表 public IList<T> GetObjectList<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns IList<T> 返回实体对象集合 Type Parameters T 实体对象 GetObject<T>(string) 获取对象 public T GetObject<T>(string where) Parameters where string 查询条件 Returns T 返回实体对象 Type Parameters T 实体对象 GetObject<T>(string, object) 获取对象 public T GetObject<T>(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns T 返回实体对象 Type Parameters T 实体对象 GetObject<T>(string, object, params string[]) 获取对象 public T GetObject<T>(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns T 返回实体对象 Type Parameters T 实体对象 GetObject<T>(string, params string[]) 获取对象 public T GetObject<T>(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns T 返回实体对象 Type Parameters T 实体对象 GetOne(string) 获取当前查询的数据的第一行 public DataRow GetOne(string where) Parameters where string 查询条件 Returns DataRow 返回第一条数据 GetOne(string, object) 获取当前查询的数据的第一行 public DataRow GetOne(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns DataRow 返回第一条数据 GetOne(string, object, params string[]) 获取当前查询的数据的第一行 public DataRow GetOne(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns DataRow 返回第一条数据 GetOne(string, params string[]) 获取当前查询的数据的第一行 public DataRow GetOne(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns DataRow 返回第一条数据 GetOneAsync(string) 获取当前查询的数据的第一行 public Task<DataRow> GetOneAsync(string where) Parameters where string 查询条件 Returns Task<DataRow> 返回第一条数据 GetOneAsync(string, object) 获取当前查询的数据的第一行 public Task<DataRow> GetOneAsync(string where, object prams) Parameters where string 查询条件 prams object 对字符串进行映射 Returns Task<DataRow> 返回第一条数据 GetOneAsync(string, object, params string[]) 获取当前查询的数据的第一行 public Task<DataRow> GetOneAsync(string where, object prams, params string[] fields) Parameters where string 查询条件 prams object 对字符串进行映射 fields string[] 要查询的字段 Returns Task<DataRow> 返回第一条数据 GetOneAsync(string, params string[]) 获取当前查询的数据的第一行 public Task<DataRow> GetOneAsync(string where, params string[] fields) Parameters where string 查询条件 fields string[] 要查询的字段 Returns Task<DataRow> 返回第一条数据 GetRecordsCount(string) 查询行数 public int GetRecordsCount(string where) Parameters where string 查询条件 Returns int 返回行数 GetRecordsCountAsync(string) 查询行数 public Task<int> GetRecordsCountAsync(string where) Parameters where string 查询条件 Returns Task<int> 返回行数 Insert(Dictionary<string, object>) 插入新的数据 public int Insert(Dictionary<string, object> keyValues) Parameters keyValues Dictionary<string, object> 键值对的数据集 Returns int 返回受影响数 Insert(Dictionary<string, object>, out object) 插入新的数据 public int Insert(Dictionary<string, object> keyValues, out object ID) Parameters keyValues Dictionary<string, object> 键值对的数据集 ID object 获取插入数据的ID Returns int 返回受影响数 Insert(DataRow) 插入新的数据 public void Insert(DataRow row) Parameters row DataRow 新数据DataRow对象 Insert(object) 插入新的数据 public int Insert(object prams) Parameters prams object 对虚构参数进行映射 Returns int 返回受影响数 Insert(object, out object) 插入新的数据 public int Insert(object prams, out object ID) Parameters prams object 对字符串进行映射 ID object 获取插入数据的ID Returns int 返回受影响数 InsertAsync(Dictionary<string, object>) 插入新的数据 public Task<int> InsertAsync(Dictionary<string, object> keyValues) Parameters keyValues Dictionary<string, object> 键值对的数据集 Returns Task<int> 返回受影响数 InsertAsync(object) 插入新的数据 public Task<int> InsertAsync(object prams) Parameters prams object 对虚构参数进行映射 Returns Task<int> 返回受影响数 InsertIdAsync(Dictionary<string, object>) 插入新的数据 public Task<SqlNonQuery> InsertIdAsync(Dictionary<string, object> keyValues) Parameters keyValues Dictionary<string, object> 键值对的数据集 Returns Task<SqlNonQuery> 返回受影响数 InsertIdAsync(object) 插入新的数据 public Task<SqlNonQuery> InsertIdAsync(object prams) Parameters prams object 对字符串进行映射 Returns Task<SqlNonQuery> 返回受影响数 NewRow() 新行 public DataRow NewRow() Returns DataRow DataRow对象 NewRowAsync() 新行 public Task<DataRow> NewRowAsync() Returns Task<DataRow> DataRow对象 Update(Dictionary<string, object>, string) 修改数据 public int Update(Dictionary<string, object> keyValues, string where) Parameters keyValues Dictionary<string, object> 修改的键值对集合 where string 指定的修改的条件 Returns int Update(object, string) 修改数据 public int Update(object prams, string where) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 Returns int Update(object, string, object) 修改数据 public int Update(object prams, string where, object parameter) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 parameter object 警告：where 条件的参数，切记字符串映射名不要与字段名同名 Returns int UpdateAsync(Dictionary<string, object>, string) 修改数据 public Task<int> UpdateAsync(Dictionary<string, object> keyValues, string where) Parameters keyValues Dictionary<string, object> 修改的键值对集合 where string 指定的修改的条件 Returns Task<int> UpdateAsync(object, string) 修改数据 public Task<int> UpdateAsync(object prams, string where) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 Returns Task<int> UpdateAsync(object, string, object) 修改数据 public Task<int> UpdateAsync(object prams, string where, object parameter) Parameters prams object 对虚构参数进行映射 where string 指定的修改的条件 parameter object 警告：where 条件的参数，切记字符串映射名不要与字段名同名 Returns Task<int>"
  },
  "api/Tool.SqlCore.html": {
    "href": "api/Tool.SqlCore.html",
    "title": "Namespace Tool.SqlCore | Tool.Net",
    "keywords": "Namespace Tool.SqlCore Classes BaseDataProvider 数据库访问底层父类，继承皆可实现高效开发访问 DbHelper Sql 核心 操作底层 DbHelperExensions 对DbHelper 对象，提供扩展支持 DbParameterCache 本地数据库参数缓存 DbTransResult 用于提供事物执行情况，返回事物发生的结果 DbTransactionExensions 对DbTransaction 对象，提供扩展支持 Message 存储过程操作类（返回的消息对象） MessageHelper 存储过程操作类 PagerManager SQL分页核心类，目前暂时已被废除，后续会考虑实际情况，补充几种数据库的分页SQL。 PagerParameters 根据指定分页信息查询SQL PagerSet 分页数据对象 ProviderFactory DbProviderFactory工厂类 ProxyFactory 底层添加数据库方法 SqlNonQuery 异步返回带有主键的影响信息 SqlTextParameter 高效的多表安全操作实体 TableProvider 单表操作对象，系统提供，如果有特殊需求，建议重新实现接口完成。 Interfaces IDbProvider SQL数据化的模型接口 IDbProvider<T> SQL数据化的模型接口 IMessage 存储过程操作类（返回的消息对象）接口 ITableProvider 单表操作对象 （接口） Enums DbProviderType 数据库类型枚举 Delegates ProxyFactory.CreateInstanceHandler 实现回调数据接口"
  },
  "api/Tool.StringExtension.html": {
    "href": "api/Tool.StringExtension.html",
    "title": "Class StringExtension | Tool.Net",
    "keywords": "Class StringExtension Namespace Tool Assembly Tool.Net.dll 对string类进行升级 public static class StringExtension Inheritance object StringExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Fields sqlStr 默认包含的（防止注入类型） public const string sqlStr = \"dbo.|.dbo.|break;|case |when |between |then |chr |add |alter |create |net |cmd=|while |count |union |from |use |and |top |or |iframe |script |insert |delete |select |update |exec |char |varchar |mid |drop |declare |commit |rollback | tran|truncate | where | in |cursor |exec |begin |open |xp_|sp_|master |--|0x\" Field Value string Methods Add(string[], string[], string) 给数组加新的值 public static void Add(this string[] txts, string[] _txts, string txt) Parameters txts string[] string[] _txts string[] 新数组（为空，但是必须大于原数组一个下标以上） txt string 新增的值 Change(string[], string, int) 修改当前数组的某个下标的内容 public static void Change(this string[] txts, string ChangeTxt, int length) Parameters txts string[] 源数据 ChangeTxt string 修改的内容 length int 下标位置 Contains(string[], string) 查找该string数组中是否存在该值。 public static bool Contains(this string[] txt, string txt1) Parameters txt string[] string[] txt1 string 查找的字符 Returns bool 方法存在或不存在 ConvertHzToPz_Gb2312(string) 将字符串中的中文转成拼音 public static string ConvertHzToPz_Gb2312(this string value) Parameters value string 字符串 Returns string 返回完整的拼音 DirtyContainsAny(string, string) 对当前字符串进行脏字验证 public static bool DirtyContainsAny(this string text, string dirty) Parameters text string String dirty string 自定义脏字字符串以“|”分割 Returns bool 存在返回，true否则为false DirtyContainsAny(string, params string[]) 对当前字符串进行脏字验证 public static bool DirtyContainsAny(this string text, params string[] texts) Parameters text string String texts string[] 自定义脏字数组 Returns bool 存在返回，true否则为false DirtyContainsAnys(string, string) 对当前字符串进行脏字验证，返回存在的所有脏字，及下标 public static object DirtyContainsAnys(this string text, string dirty) Parameters text string String dirty string 自定义脏字字符串以“|”分割 Returns object 返回存在的所有脏字，及下标 DirtyContainsAnys(string, params string[]) 对当前字符串进行脏字验证，返回存在的所有脏字，及下标 public static object DirtyContainsAnys(this string text, params string[] texts) Parameters text string String texts string[] 自定义脏字数组 Returns object 返回存在的所有脏字，及下标 DirtyDetection(string, string) 对当前字符串进行脏字检测，并净化 public static string DirtyDetection(this string text, string dirty) Parameters text string String dirty string 自定义脏字字符串以“|”分割 Returns string 返回被净化后字符串 DirtyDetection(string, string, char) 对当前字符串进行脏字检测，并净化 public static string DirtyDetection(this string text, string dirty, char symbol) Parameters text string String dirty string 自定义脏字字符串以“|”分割 symbol char 将存在的脏字替换为？？？ Returns string 返回被净化后字符串 DirtyDetection(string, string[]) 对当前字符串进行脏字检测，并净化 public static string DirtyDetection(this string text, string[] texts) Parameters text string String texts string[] 自定义脏字数组 Returns string 返回被净化后字符串 DirtyDetection(string, string[], char) 对当前字符串进行脏字检测，并净化 public static string DirtyDetection(this string text, string[] texts, char symbol) Parameters text string String texts string[] 自定义脏字数组 symbol char 将存在的脏字替换为？？？ Returns string 返回被净化后字符串 EqualsNotCase(string, string) 对吧字符串是否相同，注明：不区分大小写的。 public static bool EqualsNotCase(this string txt, string txt1) Parameters txt string 字符串 txt1 string 对比字符串 Returns bool 返回bool类型 GetArrayIndex(string[], int, int) 同于获取指定部分的内容 public static string[] GetArrayIndex(this string[] obj, int index, int count) Parameters obj string[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns string[] 返回一部分的数组内容 GetGuid(bool) 由连字符分隔的32位随机数 public static string GetGuid(bool type = true) Parameters type bool 返回两个结果，true是去掉分隔符的，false是未去掉的 Returns string GuidTo16String() 根据GUID获取16位的唯一字符串 public static string GuidTo16String() Returns string GuidToLongID() 根据GUID获取19位的唯一数字序列 public static long GuidToLongID() Returns long Json(string) 转换成Dictionary<TKey, TValue>对象 （默认允许Json中包含注释） public static Dictionary<string, object> Json(this string txt) Parameters txt string String Returns Dictionary<string, object> 转换成Dictionary对象 Json(string, JsonDocumentOptions) 转换成Dictionary<TKey, TValue>对象 public static Dictionary<string, object> Json(this string txt, JsonDocumentOptions options = default) Parameters txt string String options JsonDocumentOptions 解析时用到的配置信息 Returns Dictionary<string, object> 转换成Dictionary对象 JsonDynamic(string, JsonDocumentOptions) 转换成虚构实体对象 public static dynamic JsonDynamic(this string txt, JsonDocumentOptions options = default) Parameters txt string String options JsonDocumentOptions 解析时用到的配置信息 Returns dynamic 转换成虚构实体对象 JsonList(string) 转换成 List{Dictionary{string, object}} 对象 （默认允许Json中包含注释） public static List<Dictionary<string, object>> JsonList(this string txt) Parameters txt string String Returns List<Dictionary<string, object>> 转换成Dictionary对象 JsonList(string, JsonDocumentOptions) 转换成 List{Dictionary{string, object}} 对象 public static List<Dictionary<string, object>> JsonList(this string txt, JsonDocumentOptions options = default) Parameters txt string String options JsonDocumentOptions 解析时用到的配置信息 Returns List<Dictionary<string, object>> 转换成Dictionary对象 JsonList<T>(string) 转换成实体数组 public static List<T> JsonList<T>(this string txt) Parameters txt string String Returns List<T> 转换成实体数组 Type Parameters T 转换的实体 JsonList<T>(string, JsonSerializerOptions) 转换成实体数组 public static List<T> JsonList<T>(this string txt, JsonSerializerOptions jsonSerializerOptions) Parameters txt string String jsonSerializerOptions JsonSerializerOptions 需要的序列化条件 Returns List<T> 转换成实体数组 Type Parameters T 转换的实体 JsonObject(string, JsonDocumentOptions) 转换成object对象 public static object JsonObject(this string txt, JsonDocumentOptions options = default) Parameters txt string String options JsonDocumentOptions 解析时用到的配置信息 Returns object object对象 Exceptions SystemException 该字符串不存在任何内容！ JsonVar(string, JsonDocumentOptions) 一种获取 Json 格式数据的实现 public static JsonVar JsonVar(this string txt, JsonDocumentOptions options = default) Parameters txt string Json 格式字符串 options JsonDocumentOptions 解析时用到的配置信息 Returns JsonVar 转换成特殊结构对象，用于获取值 Json<T>(string) 转换成实体类 public static T Json<T>(this string txt) Parameters txt string String Returns T 转换成实体类 Type Parameters T 转换的实体 Json<T>(string, JsonSerializerOptions) 转换成实体类 public static T Json<T>(this string txt, JsonSerializerOptions jsonSerializerOptions) Parameters txt string String jsonSerializerOptions JsonSerializerOptions 需要的序列化条件 Returns T 转换成实体类 Type Parameters T 转换的实体 MD5Lower(string, bool) 获取加密的MD5，小写的（特意备注：这里是指将你输入的字符串加密成MD5后转为小写，有些傻子以为是先将字符串转小写后加密） public static string MD5Lower(this string md5_txt, bool IsMD5 = true) Parameters md5_txt string String IsMD5 bool 表示加密为：32位或者16位（默认32位） Returns string 返回MD5 MD5Upper(string, bool) 获取加密的MD5，大写的（特意备注：这里是指将你输入的字符串加密成MD5后转为大写，有些傻子以为是先将字符串转大写后加密） public static string MD5Upper(this string md5_txt, bool IsMD5 = true) Parameters md5_txt string String IsMD5 bool 表示加密为：32位或者16位（默认32位） Returns string 返回MD5 SHA1(string) 将字符串进行SHA1加密 public static string SHA1(this string sha_txt) Parameters sha_txt string String Returns string 返回SHA1 SHA256(string) 将字符串进行SHA256加密 public static string SHA256(this string sha256_txt) Parameters sha256_txt string String Returns string 返回SHA256 SQLFilter(string) 过滤非法关键字（使用自带常量） public static bool SQLFilter(this string keyword) Parameters keyword string 带验证的SQL Returns bool SQLFilter(string, string) 过滤非法关键字，这个可以按照项目灵活配置 public static bool SQLFilter(this string keyword, string sqlStr) Parameters keyword string 带验证的SQL sqlStr string 验证的防注入类型字符串，以“|”区分 Returns bool SQLFilter(string, params string[]) 过滤非法关键字，这个可以按照项目灵活配置 public static bool SQLFilter(this string keyword, params string[] sqlStr) Parameters keyword string 带验证的SQL sqlStr string[] 验证的防注入类型（必须大写） Returns bool Split(string, params string[]) 返回的字符串数组包含此字符串中的子字符串（由指定字符串数组的元素分隔）。 参数指定是否返回空数组元素。 public static string[] Split(this string txt, params string[] separator) Parameters txt string 字符串 separator string[] 指定字符串数组的元素分隔 Returns string[] 返回一个数组 StrToPinyin(string) 获得一个字符串的汉语拼音码 (首字母) public static string StrToPinyin(this string value) Parameters value string 字符串 Returns string 汉语拼音码,该字符串只包含大写的英文字母 StringDecode(string) 使用指定的编码对象对 string 字符串进行解码。 public static string StringDecode(this string txt) Parameters txt string string Returns string 返回解码结果 StringDecode(string, Encoding) 使用指定的编码对象对 string 字符串进行解码。 public static string StringDecode(this string txt, Encoding encoding) Parameters txt string encoding Encoding 指定编码格式 Returns string 返回解码结果 StringEncode(string) 使用指定的编码对象对 string 字符串进行编码。 public static string StringEncode(this string txt) Parameters txt string string Returns string 返回编码结果 StringEncode(string, Encoding) 使用指定的编码对象对 string 字符串进行编码。 public static string StringEncode(this string txt, Encoding encoding) Parameters txt string string encoding Encoding 指定编码格式 Returns string 返回编码结果 ToBytes(string) 返回二进制流 public static byte[] ToBytes(this string txt) Parameters txt string String Returns byte[] 返回二进制流 ToBytes(string, Encoding) 返回二进制流 public static byte[] ToBytes(this string txt, Encoding encoding) Parameters txt string String encoding Encoding 指定格式 Returns byte[] 返回二进制流 ToDateTime(string) 返回时间类型 public static DateTime ToDateTime(this string txt) Parameters txt string String Returns DateTime 返回时间类型 ToDecimal(string) 返回十进制数 public static decimal ToDecimal(this string txt) Parameters txt string String Returns decimal 返回十进制数 ToDouble(string) 返回双精度浮点数 public static double ToDouble(this string txt) Parameters txt string String Returns double 返回双精度浮点数 ToFileBytes(string) 将文件转换为byte数组（如果没有找到则返回零的数组） public static byte[] ToFileBytes(this string path) Parameters path string 文件地址(绝对路径) Returns byte[] 转换后的byte数组（如果没有找到则返回零的数组） ToInt(string) 返回Int类型 public static int ToInt(this string txt) Parameters txt string String Returns int 返回Int类型 ToInts(string[]) 将String数组转成Int数组 public static int[] ToInts(this string[] txt) Parameters txt string[] String[] Returns int[] 注释：如出现无法转换的，这抛出异常 ToLong(string) 返回Int类型 public static long ToLong(this string txt) Parameters txt string String Returns long 返回Int类型 UnBase64String(string) 将对Base64字符串换成象转（解码） public static byte[] UnBase64String(this string value) Parameters value string Base64字符串 Returns byte[] 返回一个源对象 Xml<T>(string) 将Xml格式字符串转换为对象 public static T Xml<T>(this string txt) where T : class Parameters txt string 要转类型XML字符串 Returns T 对象 Type Parameters T"
  },
  "api/Tool.UintExtension.html": {
    "href": "api/Tool.UintExtension.html",
    "title": "Class UintExtension | Tool.Net",
    "keywords": "Class UintExtension Namespace Tool Assembly Tool.Net.dll 对uint进行升级 public static class UintExtension Inheritance object UintExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(uint[], uint) 给数组加新的值 public static uint[] Add(this uint[] txt, uint txt1) Parameters txt uint[] Uint[] txt1 uint 新增的值 Returns uint[] Ceiling(uint, decimal) 当前数除以一个整数，返回一个向上取整的倍数 public static uint Ceiling(this uint txt, decimal txt1) Parameters txt uint int txt1 decimal 除数 Returns uint Contains(uint[], uint) 查找该Uint数组中是否存在该值。 public static bool Contains(this uint[] txt, uint txt1) Parameters txt uint[] Uint[] txt1 uint 查找的字符 Returns bool 方法存在或不存在 Decrement(ref uint) 原子方式-1 public static uint Decrement(this ref uint value) Parameters value uint 值 Returns uint GetArrayIndex(uint[], int, int) 同于获取指定部分的内容 public static uint[] GetArrayIndex(this uint[] obj, int index, int count) Parameters obj uint[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns uint[] 返回一部分的数组内容 Increment(ref uint) 原子方式+1 public static uint Increment(this ref uint value) Parameters value uint 值 Returns uint ToBytes(uint) 返回二进制流 public static byte[] ToBytes(this uint txt) Parameters txt uint Uint Returns byte[] 返回二进制流"
  },
  "api/Tool.UlongExtension.html": {
    "href": "api/Tool.UlongExtension.html",
    "title": "Class UlongExtension | Tool.Net",
    "keywords": "Class UlongExtension Namespace Tool Assembly Tool.Net.dll 对ulong进行升级 public static class UlongExtension Inheritance object UlongExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(ulong[], ulong) 给数组加新的值 public static ulong[] Add(this ulong[] txt, ulong txt1) Parameters txt ulong[] Ulong[] txt1 ulong 新增的值 Returns ulong[] Ceiling(ulong, decimal) 当前数除以一个整数，返回一个向上取整的倍数 public static ulong Ceiling(this ulong txt, decimal txt1) Parameters txt ulong int txt1 decimal 除数 Returns ulong Contains(ulong[], ulong) 查找该Ulong数组中是否存在该值。 public static bool Contains(this ulong[] txt, ulong txt1) Parameters txt ulong[] Ulong[] txt1 ulong 查找的字符 Returns bool 方法存在或不存在 Decrement(ref ulong) 原子方式-1 public static ulong Decrement(this ref ulong value) Parameters value ulong 值 Returns ulong GetArrayIndex(ulong[], int, int) 同于获取指定部分的内容 public static ulong[] GetArrayIndex(this ulong[] obj, int index, int count) Parameters obj ulong[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns ulong[] 返回一部分的数组内容 Increment(ref ulong) 原子方式+1 public static ulong Increment(this ref ulong value) Parameters value ulong 值 Returns ulong ToBytes(ulong) 返回二进制流 public static byte[] ToBytes(this ulong txt) Parameters txt ulong Ulong Returns byte[] 返回二进制流"
  },
  "api/Tool.UshortExtension.html": {
    "href": "api/Tool.UshortExtension.html",
    "title": "Class UshortExtension | Tool.Net",
    "keywords": "Class UshortExtension Namespace Tool Assembly Tool.Net.dll 对ushort进行升级 public static class UshortExtension Inheritance object UshortExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Add(ushort[], ushort) 给数组加新的值 public static ushort[] Add(this ushort[] txt, ushort txt1) Parameters txt ushort[] Ushort[] txt1 ushort 新增的值 Returns ushort[] Ceiling(ushort, decimal) 当前数除以一个整数，返回一个向上取整的倍数 public static ushort Ceiling(this ushort txt, decimal txt1) Parameters txt ushort int txt1 decimal 除数 Returns ushort Contains(ushort[], ushort) 查找该Ushort数组中是否存在该值。 public static bool Contains(this ushort[] txt, ushort txt1) Parameters txt ushort[] Ushort[] txt1 ushort 查找的字符 Returns bool 方法存在或不存在 Decrement(ref ushort) 原子方式-1 public static ushort Decrement(this ref ushort value) Parameters value ushort 值 Returns ushort GetArrayIndex(ushort[], int, int) 同于获取指定部分的内容 public static ushort[] GetArrayIndex(this ushort[] obj, int index, int count) Parameters obj ushort[] 对象数组 index int 从下标N开始 count int 到下标N结束 Returns ushort[] 返回一部分的数组内容 Increment(ref ushort) 原子方式+1 public static ushort Increment(this ref ushort value) Parameters value ushort 值 Returns ushort ToBytes(ushort) 返回二进制流 public static byte[] ToBytes(this ushort txt) Parameters txt ushort Ushort Returns byte[] 返回二进制流"
  },
  "api/Tool.Utils.ActionDelegate.ActionDispatcher-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.ActionDispatcher-1.html",
    "title": "Class ActionDispatcher<T> | Tool.Net",
    "keywords": "Class ActionDispatcher<T> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(object) public class ActionDispatcher<T> : ActionDispatcher<T, object>, IActionDispatcher<T>, IActionDispatcher Type Parameters T Inheritance object ActionDispatcher<T, object> ActionDispatcher<T> Implements IActionDispatcher<T> IActionDispatcher Derived ActionDispatcher Inherited Members ActionDispatcher<T, object>.IsVoid ActionDispatcher<T, object>.IsTask ActionDispatcher<T, object>.ReturnType ActionDispatcher<T, object>.Method ActionDispatcher<T, object>.Parameters ActionDispatcher<T, object>.Name ActionDispatcher<T, object>.IsStatic ActionDispatcher<T, object>.MethodEnum ActionDispatcher<T, object>.Invoke(T, params object[]) ActionDispatcher<T, object>.InvokeAsync(T, params object[]) ActionDispatcher<T, object>.Execute(T, params object[]) ActionDispatcher<T, object>.VoidExecute(T, params object[]) ActionDispatcher<T, object>.ExecuteAsync(T, object[]) ActionDispatcher<T, object>.VoidExecuteAsync(T, object[]) ActionDispatcher<T, object>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) DispatcherCore.AsAction<T, TResult>(IActionDispatcher) DispatcherCore.AsAction<T, TResult>(IActionDispatcher<T>) Remarks 代码由逆血提供支持 Constructors ActionDispatcher(MethodInfo) 初始化对象 public ActionDispatcher(MethodInfo methodInfo) Parameters methodInfo MethodInfo 方法对象 ActionDispatcher(MethodInfo, Type) 初始化对象 public ActionDispatcher(MethodInfo methodInfo, Type classtype) Parameters methodInfo MethodInfo 方法对象 classtype Type 调用类类型（明确调用类） Methods InvokeAsync<E>(T, params object[]) 可不区分是否有返回值的调用方法,返回泛型值 public Task<E> InvokeAsync<E>(T CallClass, params object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns Task<E> 返回方法的返回值 Type Parameters E Invoke<E>(T, params object[]) 可不区分是否有返回值的调用方法,返回泛型值 public E Invoke<E>(T CallClass, params object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns E 返回方法的返回值 Type Parameters E"
  },
  "api/Tool.Utils.ActionDelegate.ActionDispatcher-2.html": {
    "href": "api/Tool.Utils.ActionDelegate.ActionDispatcher-2.html",
    "title": "Class ActionDispatcher<T, TResult> | Tool.Net",
    "keywords": "Class ActionDispatcher<T, TResult> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(TResult) public class ActionDispatcher<T, TResult> : IActionDispatcher<T>, IActionDispatcher Type Parameters T 调用类 TResult 返回值 Inheritance object ActionDispatcher<T, TResult> Implements IActionDispatcher<T> IActionDispatcher Derived ActionDispatcher<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) DispatcherCore.AsAction<T, TResult>(IActionDispatcher) DispatcherCore.AsAction<T, TResult>(IActionDispatcher<T>) Remarks 代码由逆血提供支持 Constructors ActionDispatcher(MethodInfo) 初始化对象 public ActionDispatcher(MethodInfo methodInfo) Parameters methodInfo MethodInfo 方法对象 ActionDispatcher(MethodInfo, Type) 初始化对象 public ActionDispatcher(MethodInfo methodInfo, Type classtype) Parameters methodInfo MethodInfo 方法对象 classtype Type 调用类类型（明确调用类） Properties IsStatic 是否是静态方法 public bool IsStatic { get; } Property Value bool IsTask 是否是 异步函数？ public bool IsTask { get; } Property Value bool IsVoid 是否无返回值 public bool IsVoid { get; } Property Value bool Method 当前方法的执行信息 public MethodInfo Method { get; } Property Value MethodInfo MethodEnum 方法的公开类型 public MethodFlags MethodEnum { get; } Property Value MethodFlags Name 方法名称 public string Name { get; } Property Value string Parameters 方法参数 public Parameter[] Parameters { get; } Property Value Parameter[] ReturnType 调用接口的返回值 public Type ReturnType { get; } Property Value Type Methods Execute(T, params object[]) 调用方法有返回值(注明：如调用的是静态方法，类参数可为 null) public TResult Execute(T CallClass, params object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns TResult 返回方法的返回值 ExecuteAsync(T, object[]) 调用方法有返回值(注明：如调用的是静态方法，类参数可为 null) public Task<TResult> ExecuteAsync(T CallClass, object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns Task<TResult> 返回方法的返回值 Invoke(T, params object[]) 可不区分是否有返回值的调用方法 public TResult Invoke(T CallClass, params object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns TResult 返回方法的返回值 InvokeAsync(T, params object[]) 可不区分是否有返回值的调用方法 public Task<TResult> InvokeAsync(T CallClass, params object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns Task<TResult> 返回方法的返回值 ToString() 返回方法信息缩写 public override string ToString() Returns string VoidExecute(T, params object[]) 调用方法无返回值(注明：如调用的是静态方法，类参数可为 null) public void VoidExecute(T CallClass, params object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 VoidExecuteAsync(T, object[]) 调用方法无返回值(注明：如调用的是静态方法，类参数可为 null) public Task VoidExecuteAsync(T CallClass, object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns Task"
  },
  "api/Tool.Utils.ActionDelegate.ActionDispatcher.html": {
    "href": "api/Tool.Utils.ActionDelegate.ActionDispatcher.html",
    "title": "Class ActionDispatcher | Tool.Net",
    "keywords": "Class ActionDispatcher Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(object) public class ActionDispatcher : ActionDispatcher<object>, IActionDispatcher<object>, IActionDispatcher Inheritance object ActionDispatcher<object, object> ActionDispatcher<object> ActionDispatcher Implements IActionDispatcher<object> IActionDispatcher Inherited Members ActionDispatcher<object>.Invoke<E>(object, params object[]) ActionDispatcher<object>.InvokeAsync<E>(object, params object[]) ActionDispatcher<object, object>.IsVoid ActionDispatcher<object, object>.IsTask ActionDispatcher<object, object>.ReturnType ActionDispatcher<object, object>.Method ActionDispatcher<object, object>.Parameters ActionDispatcher<object, object>.Name ActionDispatcher<object, object>.IsStatic ActionDispatcher<object, object>.MethodEnum ActionDispatcher<object, object>.Invoke(object, params object[]) ActionDispatcher<object, object>.InvokeAsync(object, params object[]) ActionDispatcher<object, object>.Execute(object, params object[]) ActionDispatcher<object, object>.VoidExecute(object, params object[]) ActionDispatcher<object, object>.ExecuteAsync(object, object[]) ActionDispatcher<object, object>.VoidExecuteAsync(object, object[]) ActionDispatcher<object, object>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) DispatcherCore.AsAction<T, TResult>(IActionDispatcher) DispatcherCore.AsAction<T, TResult>(IActionDispatcher<T>) Remarks 代码由逆血提供支持 Constructors ActionDispatcher(MethodInfo) 初始化对象 public ActionDispatcher(MethodInfo methodInfo) Parameters methodInfo MethodInfo 方法对象"
  },
  "api/Tool.Utils.ActionDelegate.ActionExecutor-2.html": {
    "href": "api/Tool.Utils.ActionDelegate.ActionExecutor-2.html",
    "title": "Delegate ActionExecutor<E, TResult> | Tool.Net",
    "keywords": "Delegate ActionExecutor<E, TResult> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 有返回值的委托 public delegate TResult ActionExecutor<in E, out TResult>(E callclass, object[] parameters) Parameters callclass E parameters object[] Returns TResult Type Parameters E TResult Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.ActionHelper-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.ActionHelper-1.html",
    "title": "Class ActionHelper<T> | Tool.Net",
    "keywords": "Class ActionHelper<T> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 根据 指定类，获取该类下面指定的 ActionDispatcher<T> 集合， ActionDispatcher<T>类的扩展帮助类 public sealed class ActionHelper<T> : IEnumerable Type Parameters T 类对象 Inheritance object ActionHelper<T> Implements IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors ActionHelper(Type, MethodFlags) 获取指定类的方法 public ActionHelper(Type type, MethodFlags methodFlags) Parameters type Type 指定获取类的Type methodFlags MethodFlags 根据查找类型，获得相应方法 ActionHelper(MethodFlags) 获取指定类的方法 public ActionHelper(MethodFlags methodFlags) Parameters methodFlags MethodFlags 根据查找类型，获得相应方法 Properties ActionMethods 当前类下面的所有方法 public List<ActionMethod<T>> ActionMethods { get; } Property Value List<ActionMethod<T>> Count 可访问的方法数量 public int Count { get; } Property Value int this[int] 根据下标获取指定方法 public ActionMethod<T> this[int i] { get; } Parameters i int 下标 Property Value ActionMethod<T> MethodFlag 当前类查询的方法条件 public MethodFlags MethodFlag { get; } Property Value MethodFlags Methods GetActionMethodHelper(Type, MethodFlags) 获取指定类的方法 等同于NEW public static ActionHelper<T> GetActionMethodHelper(Type type, MethodFlags methodFlags) Parameters type Type 指定获取类的Type methodFlags MethodFlags 根据查找类型，获得相应方法 Returns ActionHelper<T> 返回要获取的类下面的方法 GetActionMethodHelper(MethodFlags) 获取指定类的方法 等同于NEW public static ActionHelper<T> GetActionMethodHelper(MethodFlags methodFlags) Parameters methodFlags MethodFlags 根据查找类型，获得相应方法 Returns ActionHelper<T> 返回要获取的类下面的方法 GetEnumerator() 返回一个循环访问集合的枚举器。 public IEnumerator GetEnumerator() Returns IEnumerator GetName(string) 根据方法名获取方法 public List<ActionMethod<T>> GetName(string name) Parameters name string 方法名称 Returns List<ActionMethod<T>> 返回匹配到的方法 ToString() 返回方法信息缩写 public override string ToString() Returns string"
  },
  "api/Tool.Utils.ActionDelegate.ActionMethod-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.ActionMethod-1.html",
    "title": "Class ActionMethod<T> | Tool.Net",
    "keywords": "Class ActionMethod<T> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 调用方法信息 public class ActionMethod<T> Type Parameters T 类对象 Inheritance object ActionMethod<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ActionMethod(MethodInfo) 初始化 public ActionMethod(MethodInfo methodInfo) Parameters methodInfo MethodInfo 方法 ActionMethod(MethodInfo, Type) 初始化 public ActionMethod(MethodInfo methodInfo, Type ClassType) Parameters methodInfo MethodInfo 方法 ClassType Type 类的Type Properties Action 方法委托 public ActionDispatcher<T> Action { get; } Property Value ActionDispatcher<T> IsBase 是不是继承类方法 public bool IsBase { get; } Property Value bool IsStatic 是否是静态方法 public bool IsStatic { get; } Property Value bool IsTask 是否是 异步函数？ public bool IsTask { get; } Property Value bool IsVoid 是否无返回值 public bool IsVoid { get; } Property Value bool MethodEnum 方法的公开类型 public MethodFlags MethodEnum { get; } Property Value MethodFlags Name 方法名称 public string Name { get; } Property Value string Parameters 方法参数 public Parameter[] Parameters { get; } Property Value Parameter[] Methods ToString() 返回方法信息缩写 public override string ToString() Returns string"
  },
  "api/Tool.Utils.ActionDelegate.ClassDispatcher-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.ClassDispatcher-1.html",
    "title": "Class ClassDispatcher<T> | Tool.Net",
    "keywords": "Class ClassDispatcher<T> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 根据 ConstructorInfo 对象，创建一个委托，实现类调用，提高性能，支持各种返回值 public class ClassDispatcher<T> Type Parameters T 返回任何类型 Inheritance object ClassDispatcher<T> Derived ClassDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ClassDispatcher() 根据构造函数，创建对象委托 public ClassDispatcher() ClassDispatcher(ConstructorInfo) 根据构造函数，创建对象委托 public ClassDispatcher(ConstructorInfo constructor) Parameters constructor ConstructorInfo 构造函数对象 ClassDispatcher(Type) 根据构造函数，创建对象委托 public ClassDispatcher(Type classtype) Parameters classtype Type 对象类型 Properties Parameters 方法参数 public Parameter[] Parameters { get; } Property Value Parameter[] Type 实例化对象类型 public Type Type { get; } Property Value Type Methods GetClass(ConstructorInfo) 通过构造器，直接获取相关构造委托 public static NewClass<T> GetClass(ConstructorInfo constructor) Parameters constructor ConstructorInfo 构造器 Returns NewClass<T> 构造委托 Invoke(params object[]) 创建 New 对象 public T Invoke(params object[] parameters) Parameters parameters object[] 参数 Returns T 返回 New 新对象"
  },
  "api/Tool.Utils.ActionDelegate.ClassDispatcher.html": {
    "href": "api/Tool.Utils.ActionDelegate.ClassDispatcher.html",
    "title": "Class ClassDispatcher | Tool.Net",
    "keywords": "Class ClassDispatcher Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 根据 ConstructorInfo 对象，创建一个委托，实现类调用，提高性能，支持各种返回值 public sealed class ClassDispatcher : ClassDispatcher<object> Inheritance object ClassDispatcher<object> ClassDispatcher Inherited Members ClassDispatcher<object>.Type ClassDispatcher<object>.Parameters ClassDispatcher<object>.Invoke(params object[]) ClassDispatcher<object>.GetClass(ConstructorInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors ClassDispatcher(ConstructorInfo) 根据构造函数，创建对象委托 public ClassDispatcher(ConstructorInfo constructor) Parameters constructor ConstructorInfo 构造函数对象 ClassDispatcher(Type) 根据构造函数，创建对象委托 public ClassDispatcher(Type classtype) Parameters classtype Type 对象类型 Methods Invoke<T>(params object[]) 创建 New 对象 public T Invoke<T>(params object[] parameters) Parameters parameters object[] 参数 Returns T 返回 New 新对象 Type Parameters T"
  },
  "api/Tool.Utils.ActionDelegate.ClassField.html": {
    "href": "api/Tool.Utils.ActionDelegate.ClassField.html",
    "title": "Enum ClassField | Tool.Net",
    "keywords": "Enum ClassField Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 表示 获取 的范围 public enum ClassField Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields All = 0 读写 Get = 1 读 Set = 2 写"
  },
  "api/Tool.Utils.ActionDelegate.ClassFieldDispatcher.GetClassField.html": {
    "href": "api/Tool.Utils.ActionDelegate.ClassFieldDispatcher.GetClassField.html",
    "title": "Delegate ClassFieldDispatcher.GetClassField | Tool.Net",
    "keywords": "Delegate ClassFieldDispatcher.GetClassField Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 定义类成员取值函数 public delegate IDictionary<string, object> ClassFieldDispatcher.GetClassField(object callclass) Parameters callclass object Returns IDictionary<string, object> Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.ClassFieldDispatcher.SetClassField.html": {
    "href": "api/Tool.Utils.ActionDelegate.ClassFieldDispatcher.SetClassField.html",
    "title": "Delegate ClassFieldDispatcher.SetClassField | Tool.Net",
    "keywords": "Delegate ClassFieldDispatcher.SetClassField Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 定义类成员赋值函数 public delegate void ClassFieldDispatcher.SetClassField(object callclass, IDictionary<string, object> parameters) Parameters callclass object parameters IDictionary<string, object> Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.ClassFieldDispatcher.html": {
    "href": "api/Tool.Utils.ActionDelegate.ClassFieldDispatcher.html",
    "title": "Class ClassFieldDispatcher | Tool.Net",
    "keywords": "Class ClassFieldDispatcher Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 类中字段赋值，创建一个委托，实现类调用，提高性能 (赋值/取值) public class ClassFieldDispatcher Inheritance object ClassFieldDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ClassFieldDispatcher(Type, ClassField) 根据类，创建对象委托 public ClassFieldDispatcher(Type classtype, ClassField classField = ClassField.All) Parameters classtype Type 类对象类型 classField ClassField 默认读取所有行为 ClassFieldDispatcher(Type, ClassField, PropertyInfo[]) 根据类，创建对象委托 public ClassFieldDispatcher(Type classtype, ClassField classField, PropertyInfo[] properties) Parameters classtype Type 类对象类型 classField ClassField 默认读取所有行为 properties PropertyInfo[] 类的指定参数 Properties Field 覆盖功能 public ClassField Field { get; } Property Value ClassField KeyParameters 获取当前类所有字段字典 public IDictionary<string, PropertyInfo> KeyParameters { get; } Property Value IDictionary<string, PropertyInfo> Parameters 类成员（只包含公开的成员，如遇到上层类有意隐藏下层类，只使用上层类成员） public PropertyInfo[] Parameters { get; } Property Value PropertyInfo[] Type 实例化对象类型 public Type Type { get; } Property Value Type Methods Get(object) 从类中获取所有可读值 public IDictionary<string, object> Get(object _class) Parameters _class object 类对象 Returns IDictionary<string, object> 返回值集合 GetClassFields(Type, ref PropertyInfo[]) 通过构造器，直接获取相关取值委托 public static ClassFieldDispatcher.GetClassField GetClassFields(Type classtype, ref PropertyInfo[] propertyInfos) Parameters classtype Type 类 propertyInfos PropertyInfo[] 类参数 Returns ClassFieldDispatcher.GetClassField 取值委托 Set(object, IDictionary<string, object>) 向类传入修改集合 public void Set(object _class, IDictionary<string, object> parameters) Parameters _class object 类对象 parameters IDictionary<string, object> 值集合(字典如标记忽略大小写赋值，就能实现特定行为) SetClassFields(Type, ref PropertyInfo[]) 通过构造器，直接获取相关赋值委托 public static ClassFieldDispatcher.SetClassField SetClassFields(Type classtype, ref PropertyInfo[] propertyInfos) Parameters classtype Type 类 propertyInfos PropertyInfo[] 类参数 Returns ClassFieldDispatcher.SetClassField 赋值委托或无法委托因为都是只读"
  },
  "api/Tool.Utils.ActionDelegate.DispatcherCore.html": {
    "href": "api/Tool.Utils.ActionDelegate.DispatcherCore.html",
    "title": "Class DispatcherCore | Tool.Net",
    "keywords": "Class DispatcherCore Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 创建通用调用函数模型 public static class DispatcherCore Inheritance object DispatcherCore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMake(MethodInfo, params Type[]) 给无形参的方法指定参数类型 public static MethodInfo AddMake(this MethodInfo method, params Type[] typeArguments) Parameters method MethodInfo 方法 typeArguments Type[] 指定形参 Returns MethodInfo 返回具有形参的方法 Exceptions ArgumentNullException 值为空 AsAction<T, TResult>(IActionDispatcher) 动态获取通用模型原型 public static ActionDispatcher<T, TResult> AsAction<T, TResult>(this IActionDispatcher action) Parameters action IActionDispatcher Returns ActionDispatcher<T, TResult> 原始模型 Type Parameters T 类泛型 TResult 返回值泛型 AsAction<T, TResult>(IActionDispatcher<T>) 动态获取通用模型原型 public static ActionDispatcher<T, TResult> AsAction<T, TResult>(this IActionDispatcher<T> action) Parameters action IActionDispatcher<T> Returns ActionDispatcher<T, TResult> 原始模型 Type Parameters T 类泛型 TResult 返回值泛型 GetExecutor(MethodInfo) 创建不同的委托 public static Delegate GetExecutor(MethodInfo methodInfo) Parameters methodInfo MethodInfo Returns Delegate 返回委托类型 GetExecutor(MethodInfo, Type) 创建不同的委托 public static Delegate GetExecutor(MethodInfo methodInfo, Type classtype) Parameters methodInfo MethodInfo 方法对象 classtype Type 调用的返回类 Returns Delegate 调用委托 GetExecutor<TResult>(MethodInfo, Type) 创建不同的委托 public static Delegate GetExecutor<TResult>(MethodInfo methodInfo, Type classtype) Parameters methodInfo MethodInfo 方法对象 classtype Type 调用的返回类 Returns Delegate 调用委托 Type Parameters TResult 调用返回类型 GetExecutor<E, TResult>(MethodInfo) 创建不同的委托 public static Delegate GetExecutor<E, TResult>(MethodInfo methodInfo) Parameters methodInfo MethodInfo 方法对象 Returns Delegate 调用委托 Type Parameters E 调用函数使用类 TResult 调用返回类型 GetExecutor<E, TResult>(MethodInfo, Type) 创建不同的委托 public static Delegate GetExecutor<E, TResult>(MethodInfo methodInfo, Type classtype) Parameters methodInfo MethodInfo 方法对象 classtype Type 调用的返回类 Returns Delegate 调用委托 Type Parameters E 调用函数使用类 TResult 调用返回类型 GetExecutor<E, TResult>(MethodInfo, Type, params Type[]) 创建不同的委托（泛型方法版） public static Delegate GetExecutor<E, TResult>(MethodInfo methodInfo, Type classtype, params Type[] typeArguments) Parameters methodInfo MethodInfo 方法对象 classtype Type 调用的返回类 typeArguments Type[] 未泛型方法提供的形参 Returns Delegate 调用委托 Type Parameters E 调用函数使用类 TResult 调用返回类型 IsAssignableFrom<T>(Type) 判断是否存在继承关系 -> T=ReturnType public static bool IsAssignableFrom<T>(Type ReturnType) Parameters ReturnType Type 判断类型 Returns bool Type Parameters T 原始信息 IsTask(Type) 判断是否是无返回结果的异步类型 public static bool IsTask(Type ReturnType) Parameters ReturnType Type Returns bool IsTaskTuple(Type) 是否是含返回值异步类型 public static bool IsTaskTuple(Type ReturnType) Parameters ReturnType Type Returns bool IsTask<T>(MethodInfo) 判断有返回值的方法 public static bool IsTask<T>(MethodInfo method) Parameters method MethodInfo 方法信息 Returns bool 是或否 Type Parameters T 返回值是否与他有关 Exceptions ArgumentNullException IsVoid(Type) 是否是无返回值的方法 public static bool IsVoid(Type ReturnType) Parameters ReturnType Type Returns bool MethodIsTask(Type, out bool) 判断一个类型是是不是 Task or Task<TResult> or ValueTask or ValueTask<TResult> public static bool MethodIsTask(Type ReturnType, out bool isvoid) Parameters ReturnType Type 类型 isvoid bool 有无返回值 Returns bool MethodIsValueTask(Type) 判断是否是 ValueTask or ValueTask<TResult> public static bool MethodIsValueTask(Type ReturnType) Parameters ReturnType Type Returns bool ObjectAsync<TResult, T>(Task<TResult>) 有用转换 public static Task<T> ObjectAsync<TResult, T>(Task<TResult> task) Parameters task Task<TResult> Returns Task<T> Type Parameters TResult T ObjectValueAsync<TResult, T>(ValueTask<TResult>) 有用转换 public static Task<T> ObjectValueAsync<TResult, T>(ValueTask<TResult> task) Parameters task ValueTask<TResult> Returns Task<T> Type Parameters TResult T"
  },
  "api/Tool.Utils.ActionDelegate.IActionDispatcher-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.IActionDispatcher-1.html",
    "title": "Interface IActionDispatcher<T> | Tool.Net",
    "keywords": "Interface IActionDispatcher<T> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 可实现的接口，方便用于高度自实现模块 public interface IActionDispatcher<in T> : IActionDispatcher Type Parameters T 类泛型 Inherited Members IActionDispatcher.IsVoid IActionDispatcher.IsTask IActionDispatcher.ReturnType IActionDispatcher.Method IActionDispatcher.Parameters IActionDispatcher.Name IActionDispatcher.IsStatic IActionDispatcher.MethodEnum Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) DispatcherCore.AsAction<T, TResult>(IActionDispatcher) DispatcherCore.AsAction<T, TResult>(IActionDispatcher<T>) Methods VoidExecute(T, params object[]) 调用方法无返回值(注明：如调用的是静态方法，类参数可为 null) void VoidExecute(T CallClass, params object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 VoidExecuteAsync(T, object[]) 调用方法无返回值(注明：如调用的是静态方法，类参数可为 null) Task VoidExecuteAsync(T CallClass, object[] parameters) Parameters CallClass T 调用方法的类 parameters object[] 参数 Returns Task"
  },
  "api/Tool.Utils.ActionDelegate.IActionDispatcher.html": {
    "href": "api/Tool.Utils.ActionDelegate.IActionDispatcher.html",
    "title": "Interface IActionDispatcher | Tool.Net",
    "keywords": "Interface IActionDispatcher Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 可实现的接口，方便用于高度自实现模块 public interface IActionDispatcher Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) DispatcherCore.AsAction<T, TResult>(IActionDispatcher) Properties IsStatic 是否是静态方法 bool IsStatic { get; } Property Value bool IsTask 是否是 异步函数？ bool IsTask { get; } Property Value bool IsVoid 是否有返回值，默认没有 bool IsVoid { get; } Property Value bool Method 当前方法的执行信息 MethodInfo Method { get; } Property Value MethodInfo MethodEnum 方法的公开类型 MethodFlags MethodEnum { get; } Property Value MethodFlags Name 方法名称 string Name { get; } Property Value string Parameters 方法参数 Parameter[] Parameters { get; } Property Value Parameter[] ReturnType 调用接口的返回值 Type ReturnType { get; } Property Value Type"
  },
  "api/Tool.Utils.ActionDelegate.Method.html": {
    "href": "api/Tool.Utils.ActionDelegate.Method.html",
    "title": "Class Method | Tool.Net",
    "keywords": "Class Method Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 获取指定类下面的所有方法，低级封装 public sealed class Method Inheritance object Method Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties Name 方法的名称 public string Name { get; } Property Value string ReflectedType 所在的类名称 public string ReflectedType { get; } Property Value string ReturnType 方法的返回类型 public Type ReturnType { get; } Property Value Type ReturnTypeName 方法的返回类型字符串 public string ReturnTypeName { get; } Property Value string TypeName 名称：类型 public string TypeName { get; } Property Value string"
  },
  "api/Tool.Utils.ActionDelegate.MethodFlags.html": {
    "href": "api/Tool.Utils.ActionDelegate.MethodFlags.html",
    "title": "Enum MethodFlags | Tool.Net",
    "keywords": "Enum MethodFlags Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 方法查询的定义 [Flags] public enum MethodFlags : short Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Base = 2 是否包含父类 Default = 0 不指定绑定标志。（默认获取全部） Internal = 32 当前程序集方法（内部） Private = 8 私有方法 Protected = 16 继承方法（受保护） Public = 4 公开方法 Static = 1 静态方法"
  },
  "api/Tool.Utils.ActionDelegate.NewClass-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.NewClass-1.html",
    "title": "Delegate NewClass<E> | Tool.Net",
    "keywords": "Delegate NewClass<E> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 定义构造函数 public delegate E NewClass<out E>(object[] parameters) Parameters parameters object[] 包含的参数 Returns E Type Parameters E 创建的类 Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.Parameter.html": {
    "href": "api/Tool.Utils.ActionDelegate.Parameter.html",
    "title": "Class Parameter | Tool.Net",
    "keywords": "Class Parameter Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 获取指定类下面的所有方法的成员，低级封装 public class Parameter Inheritance object Parameter Derived ApiParameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors Parameter(ParameterInfo) 初始化，并赋值 public Parameter(ParameterInfo parameter) Parameters parameter ParameterInfo 原对象模型 Parameter(Parameter) 复制元数据到新的对象 public Parameter(Parameter parameter) Parameters parameter Parameter Properties DefaultValue 参数默认值 public object DefaultValue { get; } Property Value object GetParameter 参数对象原型 public ParameterInfo GetParameter { get; } Property Value ParameterInfo IsDBNull 默认值是不是 DBNull 类型 public bool IsDBNull { get; } Property Value bool IsType 变量类型是不是：（string，short，int, long, byte, bool, char, decimal, double, float, object, ushort, uint, ulong, DateTime 类型可以为加?）时为 true public bool IsType { get; } Property Value bool Name 变量名称 public string Name { get; } Property Value string ParameterObj 值类型初始值 public object ParameterObj { get; } Property Value object ParameterType 变量类型的Type public Type ParameterType { get; } Property Value Type SpaceType 变量类型的命名空间 public string SpaceType { get; } Property Value string Type 变量类型 public string Type { get; } Property Value string"
  },
  "api/Tool.Utils.ActionDelegate.PropertyDescriptor.GetClassProperty.html": {
    "href": "api/Tool.Utils.ActionDelegate.PropertyDescriptor.GetClassProperty.html",
    "title": "Delegate PropertyDescriptor.GetClassProperty | Tool.Net",
    "keywords": "Delegate PropertyDescriptor.GetClassProperty Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 定义类成员取值函数 public delegate object PropertyDescriptor.GetClassProperty(object callclass) Parameters callclass object Returns object Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.PropertyDescriptor.SetClassProperty.html": {
    "href": "api/Tool.Utils.ActionDelegate.PropertyDescriptor.SetClassProperty.html",
    "title": "Delegate PropertyDescriptor.SetClassProperty | Tool.Net",
    "keywords": "Delegate PropertyDescriptor.SetClassProperty Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 定义类成员赋值函数 public delegate void PropertyDescriptor.SetClassProperty(object callclass, object parameters) Parameters callclass object parameters object Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.PropertyDescriptor.html": {
    "href": "api/Tool.Utils.ActionDelegate.PropertyDescriptor.html",
    "title": "Class PropertyDescriptor | Tool.Net",
    "keywords": "Class PropertyDescriptor Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 对象财产托管调度器 public class PropertyDescriptor Inheritance object PropertyDescriptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors PropertyDescriptor(Type, FieldInfo) 尝试获取可用的财产 public PropertyDescriptor(Type classtype, FieldInfo fieldInfo) Parameters classtype Type 对象信息 fieldInfo FieldInfo 财产 PropertyDescriptor(Type, PropertyInfo) 尝试获取可用的财产 public PropertyDescriptor(Type classtype, PropertyInfo property) Parameters classtype Type 对象信息 property PropertyInfo 财产 Properties CanRead 是否可读 public bool CanRead { get; } Property Value bool CanWrite 是否可写 public bool CanWrite { get; } Property Value bool IsStatic 是否是静态变量 public bool IsStatic { get; } Property Value bool Member 类信息基类PropertyInfo或FieldInfo public MemberInfo Member { get; } Property Value MemberInfo TypeEnum 财产描述 public PropertyEnum TypeEnum { get; } Property Value PropertyEnum Methods GetValue(object) 获取指定变量值 public object GetValue(object obj) Parameters obj object 对象源 Returns object 返回变量值 SetValue(object, object) 修改指定变量值 public void SetValue(object obj, object value) Parameters obj object 对象源 value object 修改的值"
  },
  "api/Tool.Utils.ActionDelegate.PropertyEnum.html": {
    "href": "api/Tool.Utils.ActionDelegate.PropertyEnum.html",
    "title": "Enum PropertyEnum | Tool.Net",
    "keywords": "Enum PropertyEnum Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 相关类型枚举描述 public enum PropertyEnum Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Field = 1 FieldInfo 类字段 Property = 0 PropertyInfo 类属性字段"
  },
  "api/Tool.Utils.ActionDelegate.TaskActionExecutor-2.html": {
    "href": "api/Tool.Utils.ActionDelegate.TaskActionExecutor-2.html",
    "title": "Delegate TaskActionExecutor<E, TResult> | Tool.Net",
    "keywords": "Delegate TaskActionExecutor<E, TResult> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 有返回值的异步委托 public delegate Task<TResult> TaskActionExecutor<in E, TResult>(E callclass, object[] parameters) Parameters callclass E parameters object[] Returns Task<TResult> Type Parameters E TResult Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.TypeInvoke.html": {
    "href": "api/Tool.Utils.ActionDelegate.TypeInvoke.html",
    "title": "Class TypeInvoke | Tool.Net",
    "keywords": "Class TypeInvoke Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 用于对指定的类的方法进行调用，中级封装 public sealed class TypeInvoke Inheritance object TypeInvoke Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TypeInvoke(object) 初始化，并赋值 public TypeInvoke(object obj) Parameters obj object 必须是对象 TypeInvoke(string) 初始化，并赋值 public TypeInvoke(string type) Parameters type string (访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。 TypeInvoke(string, object) 初始化，并赋值 public TypeInvoke(string type, object args) Parameters type string (访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。 args object 当前实例化的对象。 TypeInvoke(string, params object[]) 初始化，并赋值 public TypeInvoke(string type, params object[] args) Parameters type string (访问程序集下面指定的类路径)要获取的类型的程序集限定名称。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。 args object[] 与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。 TypeInvoke(string, string) 加载指定路径下的dll中的类对象（无参构造） public TypeInvoke(string absolutepath, string type) Parameters absolutepath string dll的绝对路径 type string 访问程序集下面指定的类路径 TypeInvoke(string, string, params object[]) 加载指定路径下的dll中的类对象（有参构造） public TypeInvoke(string absolutepath, string type, params object[] args) Parameters absolutepath string dll的绝对路径 type string 访问程序集下面指定的类路径 args object[] TypeInvoke(Type) 初始化，并赋值 public TypeInvoke(Type type) Parameters type Type 表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。 TypeInvoke(Type, object) 初始化，并赋值 public TypeInvoke(Type type, object args) Parameters type Type 表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。 args object 当前实例化的对象。 TypeInvoke(Type, params object[]) 初始化，并赋值 public TypeInvoke(Type type, params object[] args) Parameters type Type 表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。 args object[] 与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。 Methods GetAttributeParameterInfo<T>() 获取该类以及下面的所有类型（字段） public Dictionary<string, T> GetAttributeParameterInfo<T>() Returns Dictionary<string, T> 返回一个类型实体 Type Parameters T 类型 GetAttributeParameterInfo<T>(BindingFlags) 获取该类以及下面的所有类型（字段） public Dictionary<string, T> GetAttributeParameterInfo<T>(BindingFlags bindingFlags) Parameters bindingFlags BindingFlags 自定义返回内容 Returns Dictionary<string, T> 返回一个类型实体 Type Parameters T 类型 GetAttribute<T>(BindingFlags) 获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等） public Dictionary<string, T> GetAttribute<T>(BindingFlags bindingFlags) Parameters bindingFlags BindingFlags 自定义返回内容 Returns Dictionary<string, T> 返回一个类型实体 Type Parameters T 类型 GetAttribute<T>(out string[], bool) 获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等） public T[] GetAttribute<T>(out string[] Methods, bool only = true) Parameters Methods string[] 返回名称 only bool 获取父类的吗？默认包含 Returns T[] 返回一个类型实体 Type Parameters T 类型 GetAttribute<T>(out string[], BindingFlags) 获取该类以及下面的所有类型（包涵，方法变量，字段，接口等等） public T[] GetAttribute<T>(out string[] Methods, BindingFlags bindingFlags) Parameters Methods string[] 返回名称 bindingFlags BindingFlags 自定义返回内容 Returns T[] 返回一个类型实体 Type Parameters T 类型 GetMethod(MethodInfo) 获取该方法类型(“包含非公开”、“包含实例成员”和“包含公开”) public static Method GetMethod(MethodInfo method) Parameters method MethodInfo 对象 Returns Method 返回一个类型实体 GetMethod(string, bool) 获取该方法类型(“包含非公开”、“包含实例成员”和“包含公开”) public Method GetMethod(string name, bool only = true) Parameters name string 方法名(注意该方法必须是非静态方法) only bool 获取父类的吗？默认包含 Returns Method 返回一个类型实体 GetMethodInfo(Type, string, bool) 获取类下面的可调用方法 public static MethodInfo GetMethodInfo(Type type, string MethodName, bool only = true) Parameters type Type 类Type MethodName string 方法名 only bool 获取父类的吗？默认包含 Returns MethodInfo 返回MethodInfo对象 GetMethodInfo<T>(string) 获取类下面的可调用方法 public static MethodInfo GetMethodInfo<T>(string MethodName) Parameters MethodName string 方法名 Returns MethodInfo 返回MethodInfo对象 Type Parameters T 类 GetMethods(bool) 获取该类下的所有方法(“包含非公开”、“包含实例成员”和“包含公开”) public Method[] GetMethods(bool only = true) Parameters only bool 获取父类的吗？默认包含 Returns Method[] 返回一个类型实体 GetObj() 获取当前被实例化的类 public object GetObj() Returns object 返回实例化的类 GetParameter(MethodInfo) 获取该方法需要的参数 public static Parameter[] GetParameter(MethodInfo method) Parameters method MethodInfo 对象 Returns Parameter[] 返回所有的参数 GetParameter(params ParameterInfo[]) 获取该方法需要的参数 public static Parameter[] GetParameter(params ParameterInfo[] member) Parameters member ParameterInfo[] 对象 Returns Parameter[] 返回所有的参数 GetParameter(string) 获取该方法需要的参数 public Parameter[] GetParameter(string name) Parameters name string 方法名(注意该方法必须是非静态方法) Returns Parameter[] 返回所有的参数 GetProperty(string) 获取该类指定的变量的值。 public object GetProperty(string name) Parameters name string 变量名 Returns object 返回该方法的值 GetType() 获取当前被实例化的类的Type public Type GetType() Returns Type 返回Type Invoke(string) 调起该方法(“包含非公开”、“包含实例成员”和“包含公开”) public object Invoke(string name) Parameters name string 方法名(注意该方法必须是非静态方法) Returns object 返回该方法执行后的结果 Invoke(string, params object[]) 调起该方法(“包含非公开”、“包含实例成员”和“包含公开”) public object Invoke(string name, params object[] parameters) Parameters name string 方法名(注意该方法必须是非静态方法) parameters object[] 该方法的指定参数 Returns object 返回该方法执行后的结果 IsMethod(string, bool) 判断该方法是否存在 (“包含非公开”、“包含实例成员”和“包含公开”) public bool IsMethod(string name, bool only = true) Parameters name string 方法名(注意该方法必须是非静态方法) only bool 获取父类的吗？默认包含 Returns bool 返回是否存在 SetProperty(string, object) 对该类指定的变量赋值。 public void SetProperty(string name, object parameter) Parameters name string 变量名 parameter object 值 ToString() 获取当前被实例化的类的，名称包含命名空间 public override string ToString() Returns string 返回类的名称包含命名空间"
  },
  "api/Tool.Utils.ActionDelegate.TypePropertyDescriptor.html": {
    "href": "api/Tool.Utils.ActionDelegate.TypePropertyDescriptor.html",
    "title": "Class TypePropertyDescriptor | Tool.Net",
    "keywords": "Class TypePropertyDescriptor Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 引用对象属性构造器 public class TypePropertyDescriptor Inheritance object TypePropertyDescriptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TypePropertyDescriptor(Type) 初始化属性构造器 public TypePropertyDescriptor(Type type) Parameters type Type Properties ClassType 数据源Type public Type ClassType { get; } Property Value Type Fields 获取该对象的变量 public FieldInfo[] Fields { get; } Property Value FieldInfo[] KeyFields 获取当前类所有变量字典 public IDictionary<string, FieldInfo> KeyFields { get; } Property Value IDictionary<string, FieldInfo> KeyParameters 获取当前类所有成员字典 public IDictionary<string, PropertyInfo> KeyParameters { get; } Property Value IDictionary<string, PropertyInfo> PropertyInfos 获取该对象的成员 public PropertyInfo[] PropertyInfos { get; } Property Value PropertyInfo[] Methods GetField(object, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public object GetField(object obj, string name, out bool isexist) Parameters obj object 对象源 name string 变量名称 isexist bool 是否可以获取 Returns object 返回变量值 GetProperty(object, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public object GetProperty(object obj, string name, out bool isexist) Parameters obj object 对象源 name string 变量名称 isexist bool 是否可以修改 Returns object 返回变量值 SetField(object, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public bool SetField(object obj, string name, object value) Parameters obj object 对象源 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 SetProperty(object, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public bool SetProperty(object obj, string name, object value) Parameters obj object 对象源 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 TryField(string, out PropertyDescriptor) 获取指定PropertyDescriptor变量 public bool TryField(string name, out PropertyDescriptor property) Parameters name string 变量名称 property PropertyDescriptor 对象财产托管调度器 Returns bool 返回变量值 TryProperty(string, out PropertyDescriptor) 获取指定PropertyDescriptor变量 public bool TryProperty(string name, out PropertyDescriptor property) Parameters name string 变量名称 property PropertyDescriptor 对象财产托管调度器 Returns bool 返回变量值"
  },
  "api/Tool.Utils.ActionDelegate.VoidActionExecutor-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.VoidActionExecutor-1.html",
    "title": "Delegate VoidActionExecutor<E> | Tool.Net",
    "keywords": "Delegate VoidActionExecutor<E> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 无返回值的委托 public delegate void VoidActionExecutor<in E>(E callclass, object[] parameters) Parameters callclass E parameters object[] Type Parameters E Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.VoidTaskActionExecutor-1.html": {
    "href": "api/Tool.Utils.ActionDelegate.VoidTaskActionExecutor-1.html",
    "title": "Delegate VoidTaskActionExecutor<E> | Tool.Net",
    "keywords": "Delegate VoidTaskActionExecutor<E> Namespace Tool.Utils.ActionDelegate Assembly Tool.Net.dll 无返回值的异步委托 public delegate Task VoidTaskActionExecutor<in E>(E callclass, object[] parameters) Parameters callclass E parameters object[] Returns Task Type Parameters E Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool)"
  },
  "api/Tool.Utils.ActionDelegate.html": {
    "href": "api/Tool.Utils.ActionDelegate.html",
    "title": "Namespace Tool.Utils.ActionDelegate | Tool.Net",
    "keywords": "Namespace Tool.Utils.ActionDelegate Classes ActionDispatcher 根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(object) ActionDispatcher<T> 根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(object) ActionDispatcher<T, TResult> 根据 MethodInfo 对象，创建一个委托，实现方法调用，提高性能，支持各种返回值(TResult) ActionHelper<T> 根据 指定类，获取该类下面指定的 ActionDispatcher<T> 集合， ActionDispatcher<T>类的扩展帮助类 ActionMethod<T> 调用方法信息 ClassDispatcher 根据 ConstructorInfo 对象，创建一个委托，实现类调用，提高性能，支持各种返回值 ClassDispatcher<T> 根据 ConstructorInfo 对象，创建一个委托，实现类调用，提高性能，支持各种返回值 ClassFieldDispatcher 类中字段赋值，创建一个委托，实现类调用，提高性能 (赋值/取值) DispatcherCore 创建通用调用函数模型 Method 获取指定类下面的所有方法，低级封装 Parameter 获取指定类下面的所有方法的成员，低级封装 PropertyDescriptor 对象财产托管调度器 TypeInvoke 用于对指定的类的方法进行调用，中级封装 TypePropertyDescriptor 引用对象属性构造器 Interfaces IActionDispatcher 可实现的接口，方便用于高度自实现模块 IActionDispatcher<T> 可实现的接口，方便用于高度自实现模块 Enums ClassField 表示 获取 的范围 MethodFlags 方法查询的定义 PropertyEnum 相关类型枚举描述 Delegates ActionExecutor<E, TResult> 有返回值的委托 ClassFieldDispatcher.GetClassField 定义类成员取值函数 ClassFieldDispatcher.SetClassField 定义类成员赋值函数 NewClass<E> 定义构造函数 PropertyDescriptor.GetClassProperty 定义类成员取值函数 PropertyDescriptor.SetClassProperty 定义类成员赋值函数 TaskActionExecutor<E, TResult> 有返回值的异步委托 VoidActionExecutor<E> 无返回值的委托 VoidTaskActionExecutor<E> 无返回值的异步委托"
  },
  "api/Tool.Utils.AppSettings.html": {
    "href": "api/Tool.Utils.AppSettings.html",
    "title": "Class AppSettings | Tool.Net",
    "keywords": "Class AppSettings Namespace Tool.Utils Assembly Tool.Net.dll 获取配置文件数据 (允许修改原文件异步队列式更新) public sealed class AppSettings Inheritance object AppSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields FileName 主配置文件名 public const string FileName = \"appsettings.json\" Field Value string FileNameDevelopment 调试配置文件名 public const string FileNameDevelopment = \"appsettings.Development.json\" Field Value string Properties Configuration 项目配置文件获取对象 public static IConfigurationRoot Configuration { get; } Property Value IConfigurationRoot CurrentDirectory 获取当前配置文件的路径 public static string CurrentDirectory { get; } Property Value string this[string] 获取key值 public string this[string key] { get; } Parameters key string Property Value string Methods AddJsonFile(string) 根据你提供的地址获取配置文件信息 public static IConfiguration AddJsonFile(string filePath) Parameters filePath string 配置文件路径 Returns IConfiguration 返回指定对象 Get(string, bool) 获取appSettings的value public static string Get(string key, bool throwOnError = true) Parameters key string 名称 throwOnError bool true 表示在找不到该键值时引发异常；false 则表示返回 null。 Returns string 返回值，如果键值名称不存在则返回 Nullable GetChildren() 获取直接子代配置子节。 public static IEnumerable<IConfigurationSection> GetChildren() Returns IEnumerable<IConfigurationSection> 配置子部分。 GetInt(string, bool) 获取appSettings的value public static int GetInt(string key, bool throwOnError = true) Parameters key string 名称 throwOnError bool true 表示在找不到该键值时引发异常；false 则表示返回 null。 Returns int 返回值，如果键值名称不存在则返回0 GetReloadToken() 返回Microsoft.Extensions.Primitives.IChangeToken，可用于观察重新加载此配置时。 public static IChangeToken GetReloadToken() Returns IChangeToken 一个Microsoft.Extensions.Primitives.IChangeToken。 GetSection(string) 获取具有指定键的配置子节。 public static IConfigurationSection GetSection(string key) Parameters key string 配置部分的键。 Returns IConfigurationSection 这个 Microsoft.Extensions.Configuration.IConfigurationSection Events SetEvent 注册修改 IConfiguration 值的事件 （将取消默认实现的同步修改文件） public static event Action<string, string> SetEvent Event Type Action<string, string>"
  },
  "api/Tool.Utils.Crc32.html": {
    "href": "api/Tool.Utils.Crc32.html",
    "title": "Class Crc32 | Tool.Net",
    "keywords": "Class Crc32 Namespace Tool.Utils Assembly Tool.Net.dll 提供 CRC32 算法的实现 public class Crc32 : HashAlgorithm, ICryptoTransform, IDisposable Inheritance object HashAlgorithm Crc32 Implements ICryptoTransform IDisposable Inherited Members HashAlgorithm.HashSizeValue HashAlgorithm.HashValue HashAlgorithm.State HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.Dispose(bool) HashAlgorithm.HashCore(ReadOnlySpan<byte>) HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.TryHashFinal(Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors Crc32() public Crc32() Crc32(uint, uint) public Crc32(uint polynomial, uint seed) Parameters polynomial uint seed uint Fields DefaultPolynomial public const uint DefaultPolynomial = 3988292384 Field Value uint DefaultSeed public const uint DefaultSeed = 4294967295 Field Value uint Methods Compute(byte[]) public static uint Compute(byte[] buffer) Parameters buffer byte[] Returns uint Compute(uint, byte[]) public static uint Compute(uint seed, byte[] buffer) Parameters seed uint buffer byte[] Returns uint Compute(uint, uint, byte[]) public static uint Compute(uint polynomial, uint seed, byte[] buffer) Parameters polynomial uint seed uint buffer byte[] Returns uint HashCore(byte[], int, int) protected override void HashCore(byte[] buffer, int start, int length) Parameters buffer byte[] start int length int HashFinal() protected override byte[] HashFinal() Returns byte[] Initialize() 初始化参数 public override void Initialize()"
  },
  "api/Tool.Utils.DBNullConverter.html": {
    "href": "api/Tool.Utils.DBNullConverter.html",
    "title": "Class DBNullConverter | Tool.Net",
    "keywords": "Class DBNullConverter Namespace Tool.Utils Assembly Tool.Net.dll Json DBNull 将 {} 改Null输出 public class DBNullConverter : JsonConverter<DBNull> Inheritance object JsonConverter JsonConverter<DBNull> DBNullConverter Inherited Members JsonConverter<DBNull>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DBNullConverter() 注册 DBNull 将 {} 改Null输出 public DBNullConverter() Methods CanConvert(Type) 验证是否支持类型 public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool Read(ref Utf8JsonReader, Type, JsonSerializerOptions) 将字符串转换成原数据 public override DBNull Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns DBNull Write(Utf8JsonWriter, DBNull, JsonSerializerOptions) 将原数据转换成字符串 public override void Write(Utf8JsonWriter writer, DBNull value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value DBNull options JsonSerializerOptions"
  },
  "api/Tool.Utils.Data.ArrayExtension.html": {
    "href": "api/Tool.Utils.Data.ArrayExtension.html",
    "title": "Class ArrayExtension | Tool.Net",
    "keywords": "Class ArrayExtension Namespace Tool.Utils.Data Assembly Tool.Net.dll 对Array类进行升级 public static class ArrayExtension Inheritance object ArrayExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods ArrayAdd(Array, object, out Array) 给数组加新的值,效率不高，不建议循环使用,目前只适合一维数组 public static void ArrayAdd(this Array array, object obj, out Array _array) Parameters array Array 数据源 obj object 添加的数据 _array Array 返回一个新数组 ArrayAdd(ref Array, object) 给数组加新的值,效率不高，不建议循环使用,目前只适合一维数组 public static void ArrayAdd(ref Array array, object obj) Parameters array Array 数据源 obj object 添加的数据 GetEnumerator<T>(Array) 返回 Array 的 Enumerator<T>。 public static Enumerator<T> GetEnumerator<T>(this Array array) Parameters array Array 当前数据源 Returns Enumerator<T> 返回 Array 的 Enumerator<T>。 Type Parameters T 当前类型 Read(Array, long, Array, long, long) 重写封装的Copy方法（暂时未写，不用调用了） public static int Read(this Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length) Parameters sourceArray Array 源数组对象 sourceIndex long 源数据开始读取的位置 destinationArray Array 新数组对象 destinationIndex long 开始存储的位置 length long 从源数组取多少？ Returns int"
  },
  "api/Tool.Utils.Data.DataRowExtension.html": {
    "href": "api/Tool.Utils.Data.DataRowExtension.html",
    "title": "Class DataRowExtension | Tool.Net",
    "keywords": "Class DataRowExtension Namespace Tool.Utils.Data Assembly Tool.Net.dll 对DataRow进行升级 public static class DataRowExtension Inheritance object DataRowExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods DataRowToEntity<T>(DataRow) 将DataRow对象 转换为 实体对象（旧版本） [Obsolete(\"当前方法，已被弃用，有更新的方法，请使用（ToEntity<T>）方法\", false)] public static T DataRowToEntity<T>(this DataRow dataRow) where T : new() Parameters dataRow DataRow 数据源 Returns T 返回实体对象 Type Parameters T 实体对象 IsEmpty(DataRow) 判断DataRow对象中的是否为空，行为空，对象为空 public static bool IsEmpty(this DataRow dataRow) Parameters dataRow DataRow DataRow对象 Returns bool 返回bool类型 RowToJson(DataRow) 序列化AjaxJson（DataRow） public static string RowToJson(this DataRow dataRow) Parameters dataRow DataRow DataRow Returns string 返回JSON字符串 RowToJson(DataRow, bool) 序列化AjaxJson（DataRow） public static string RowToJson(this DataRow dataRow, bool IsDate) Parameters dataRow DataRow DataRow IsDate bool ToJson格式时间，启用转字符串 Returns string 返回JSON字符串 RowToJson(DataRow, bool, string) 序列化AjaxJson（DataRow） public static string RowToJson(this DataRow dataRow, bool IsDate, string ToDateString) Parameters dataRow DataRow DataRow IsDate bool ToJson格式时间，启用转字符串 ToDateString string Date.ToString()的写法。 Returns string 返回JSON字符串 ToDictionary(DataRow) （DataRow）转换 Dictionary<TKey, TValue> 集合 public static Dictionary<string, object> ToDictionary(this DataRow dataRow) Parameters dataRow DataRow DataRow Returns Dictionary<string, object> 返回Dictionary ToDictionary(DataRow[]) （DataRow[]）转换 Dictionary<TKey, TValue> 集合 public static List<Dictionary<string, object>> ToDictionary(this DataRow[] dataRows) Parameters dataRows DataRow[] DataRow[] Returns List<Dictionary<string, object>> 返回List{Dictionary{string, object}} ToEntityList<T>(DataRowCollection) 将DataRowCollection 对象 转换为 实体对象数组 (优化版) public static T[] ToEntityList<T>(this DataRowCollection dataRows) where T : new() Parameters dataRows DataRowCollection 数据源 Returns T[] 返回实体对象数组 Type Parameters T 实体对象 ToEntity<T>(DataRow) 将DataRow对象 转换为 实体对象（新版本） public static T ToEntity<T>(this DataRow dataRow) where T : new() Parameters dataRow DataRow 数据源 Returns T 返回实体对象 Type Parameters T 实体对象 ToObject(DataRow) （DataRow）转换 object 对象 public static dynamic ToObject(this DataRow dataRow) Parameters dataRow DataRow DataRow Returns dynamic 返回dynamic ToObject(DataRowCollection) （DataRowCollection）转换 object 集合 public static dynamic[] ToObject(this DataRowCollection dataRows) Parameters dataRows DataRowCollection DataRowCollection Returns dynamic[] 返回dynamic[] ToObject(DataRowCollection, int) （DataRowCollection）转换 object public static dynamic ToObject(this DataRowCollection dataRows, int index) Parameters dataRows DataRowCollection DataRowCollection index int 要读取的那一条数组的下标 Returns dynamic 返回dynamic"
  },
  "api/Tool.Utils.Data.DataSetExtension.html": {
    "href": "api/Tool.Utils.Data.DataSetExtension.html",
    "title": "Class DataSetExtension | Tool.Net",
    "keywords": "Class DataSetExtension Namespace Tool.Utils.Data Assembly Tool.Net.dll 对DataSet进行升级 public static class DataSetExtension Inheritance object DataSetExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods IsEmpty(DataSet) 判断DataSet对象中的是否为空，行为空，对象为空（验证每张表，只要其中包含一张表有值，都成立。） public static bool IsEmpty(this DataSet data) Parameters data DataSet DataSet对象 Returns bool 返回bool类型 SetToJson(DataSet) 序列化AjaxJson（DataSet） public static string[] SetToJson(this DataSet data) Parameters data DataSet DataSet Returns string[] 返回JSON字符串 SetToJson(DataSet, bool) 序列化AjaxJson（DataSet） public static string[] SetToJson(this DataSet data, bool IsDate) Parameters data DataSet DataSet IsDate bool ToJson格式时间，启用转字符串 Returns string[] 返回JSON字符串 SetToJson(DataSet, bool, string) 序列化AjaxJson（DataSet） public static string[] SetToJson(this DataSet data, bool IsDate, string ToDateString) Parameters data DataSet DataSet IsDate bool ToJson格式时间，启用转字符串 ToDateString string Date.ToString()的写法。 Returns string[] 返回JSON字符串 ToDictionary(DataSet) （DataTable）转换 List<T> 集合 public static List<List<Dictionary<string, object>>> ToDictionary(this DataSet data) Parameters data DataSet DataSet Returns List<List<Dictionary<string, object>>> 返回Dictionary"
  },
  "api/Tool.Utils.Data.DataTableExtension.html": {
    "href": "api/Tool.Utils.Data.DataTableExtension.html",
    "title": "Class DataTableExtension | Tool.Net",
    "keywords": "Class DataTableExtension Namespace Tool.Utils.Data Assembly Tool.Net.dll 对DataTable进行升级 public static class DataTableExtension Inheritance object DataTableExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods CloneArray(DataTable, ArrayList) 将 ArrayList 集合数据克隆到 DataTable 中 public static void CloneArray(this DataTable table, ArrayList objects) Parameters table DataTable DataTable objects ArrayList 数据集合 CloneArray(DataTable, JsonVar) 将 ArrayList 集合数据克隆到 DataTable 中 public static void CloneArray(this DataTable table, JsonVar json) Parameters table DataTable DataTable json JsonVar Json数据 DataTableToEntityList<T>(DataTable) 将DataTable对象 转换为 List<T>实体对象 (老版) [Obsolete(\"当前方法，已被弃用，有更新的方法，请使用（ToEntityList<T>）方法\", false)] public static IList<T> DataTableToEntityList<T>(this DataTable table) where T : new() Parameters table DataTable 数据源 Returns IList<T> 返回List<T>实体对象 Type Parameters T 实体对象 DataTableToEntity<T>(DataTable) 将DataTable对象 转换为 实体对象 (老版) [Obsolete(\"当前方法，已被弃用，有更新的方法，请使用（ToEntity<T>）方法\", false)] public static T DataTableToEntity<T>(this DataTable table) where T : new() Parameters table DataTable 数据源 Returns T 返回实体对象 Type Parameters T 实体对象 IsEmpty(DataTable) 判断DataTable对象中的是否为空，行为空，对象为空 public static bool IsEmpty(this DataTable table) Parameters table DataTable DataTable对象 Returns bool 返回bool类型 TableToJson(DataTable) 序列化AjaxJson（DataTable） public static string TableToJson(this DataTable table) Parameters table DataTable DataTable Returns string 返回JSON字符串 TableToJson(DataTable, bool) 序列化AjaxJson（DataTable） public static string TableToJson(this DataTable table, bool IsDate) Parameters table DataTable DataTable IsDate bool ToJson格式时间，启用转字符串 Returns string 返回JSON字符串 TableToJson(DataTable, bool, string) 序列化AjaxJson（DataTable） public static string TableToJson(this DataTable table, bool IsDate, string ToDateString) Parameters table DataTable DataTable IsDate bool ToJson格式时间，启用转字符串 ToDateString string Date.ToString()的写法。 Returns string 返回JSON字符串 ToArray(DataTable) （DataTable）转换 ArrayList 集合 public static ArrayList ToArray(this DataTable table) Parameters table DataTable DataTable Returns ArrayList 返回ArrayList ToArrayIf(DataTable, Func<string, object, object>) （DataTable）转换 ArrayList 集合（结果可自定义） public static ArrayList ToArrayIf(this DataTable table, Func<string, object, object> func) Parameters table DataTable DataTable func Func<string, object, object> 用于指定特殊结果的函数 Returns ArrayList 返回ArrayList ToDictionary(DataTable) （DataTable）转换 Dictionary<TKey, TValue> 集合 public static List<Dictionary<string, object>> ToDictionary(this DataTable table) Parameters table DataTable DataTable Returns List<Dictionary<string, object>> 返回Dictionary ToDictionaryIf(DataTable, Func<string, object, object>) （DataTable）转换 Dictionary<TKey, TValue> 集合（结果可自定义） public static List<Dictionary<string, object>> ToDictionaryIf(this DataTable table, Func<string, object, object> func) Parameters table DataTable DataTable func Func<string, object, object> 用于指定特殊结果的函数 Returns List<Dictionary<string, object>> 返回Dictionary ToEntityList<T>(DataTable) 将DataTable对象 转换为 实体对象数组 (优化版) public static IList<T> ToEntityList<T>(this DataTable dataTable) where T : new() Parameters dataTable DataTable 数据源 Returns IList<T> 返回实体对象数组 Type Parameters T 实体对象 ToEntityList<T>(DataTable, params int[]) 将DataTable对象 转换为 实体对象数组 (优化版) public static IList<T> ToEntityList<T>(this DataTable dataTable, params int[] indexs) where T : new() Parameters dataTable DataTable 数据源 indexs int[] 要获取的多个下标的数据 Returns IList<T> 返回实体对象数组 Type Parameters T 实体对象 ToEntity<T>(DataTable) 将DataTable对象 转换为 实体对象，不管有表中有几条数据指读出第一条 (优化版) public static T ToEntity<T>(this DataTable dataTable) where T : new() Parameters dataTable DataTable 数据源 Returns T 返回实体对象数组 Type Parameters T 实体对象 ToEntity<T>(DataTable, int) 将DataTable对象 转换为 实体对象，不管有表中有几条数据只读出一条 (优化版) public static T ToEntity<T>(this DataTable dataTable, int index) where T : new() Parameters dataTable DataTable 数据源 index int 要读取的那一条数组的下标 Returns T 返回实体对象数组 Type Parameters T 实体对象 ToObject(DataTable) （DataTable）转换 object 集合 public static dynamic[] ToObject(this DataTable dataTable) Parameters dataTable DataTable DataTable Returns dynamic[] 返回dynamic[]"
  },
  "api/Tool.Utils.Data.DictionaryExtension.html": {
    "href": "api/Tool.Utils.Data.DictionaryExtension.html",
    "title": "Class DictionaryExtension | Tool.Net",
    "keywords": "Class DictionaryExtension Namespace Tool.Utils.Data Assembly Tool.Net.dll 对Dictionary进行升级 public static class DictionaryExtension Inheritance object DictionaryExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods AsReadOnly<TKey, TValue>(IDictionary<TKey, TValue>) 将键值对转换成只读类型键值对 public static ReadOnlyDictionary<TKey, TValue> AsReadOnly<TKey, TValue>(this IDictionary<TKey, TValue> keys) Parameters keys IDictionary<TKey, TValue> 原本键值对 Returns ReadOnlyDictionary<TKey, TValue> 只读键值对 Type Parameters TKey 键 TValue 值 GetArrayIndex<TKey, TValue>(Dictionary<TKey, TValue>, int, int) 同于获取指定部分的内容 public static Dictionary<TKey, TValue> GetArrayIndex<TKey, TValue>(this Dictionary<TKey, TValue> keyValuePairs, int index, int count) where TKey : new() where TValue : new() Parameters keyValuePairs Dictionary<TKey, TValue> 对象数组 index int 从下标N开始 count int 到下标N结束 Returns Dictionary<TKey, TValue> 返回一部分的数组内容 Type Parameters TKey TValue GetDictionary(object) 获取对象结果集IDictionary<TKey, TValue> public static IDictionary<string, object> GetDictionary(this object source) Parameters source object 对象 Returns IDictionary<string, object> IDictionary<TKey, TValue>对象结果集 GetParamAscii<TKey, TValue>(Dictionary<TKey, TValue>) 按照ASCII码从小到大排序（示例： 1, 2, A, B, a, b 这是格式循序） public static Dictionary<TKey, TValue> GetParamAscii<TKey, TValue>(this Dictionary<TKey, TValue> keyValuePairs) Parameters keyValuePairs Dictionary<TKey, TValue> Dictionary Returns Dictionary<TKey, TValue> 返回重新排序好的结果 Type Parameters TKey TValue NewDictionary<TKey, TValue>(IDictionary<TKey, TValue>) 将 IDictionary<TKey, TValue>对象 拷贝创建新 Dictionary<TKey, TValue>对象 public static Dictionary<TKey, TValue> NewDictionary<TKey, TValue>(this IDictionary<TKey, TValue> oldDictionary) Parameters oldDictionary IDictionary<TKey, TValue> IDictionary<TKey, TValue>对象 Returns Dictionary<TKey, TValue> Dictionary<TKey, TValue> Type Parameters TKey 键 TValue 值 Remove<TKey, TValue>(IDictionary<TKey, TValue>, params TKey[]) 批量删除 IDictionary<TKey, TValue>对象 出现不包含的会返回 false public static bool Remove<TKey, TValue>(this IDictionary<TKey, TValue> keys, params TKey[] key) Parameters keys IDictionary<TKey, TValue> IDictionary<TKey, TValue>对象 key TKey[] 需要删除的键值集合 Returns bool Dictionary<TKey, TValue> Type Parameters TKey 键 TValue 值 SetDictionary(object, IDictionary<string, object>) 给对象赋值，使用字典赋值 public static void SetDictionary(this object source, IDictionary<string, object> parameters) Parameters source object 对象 parameters IDictionary<string, object> 赋值键值对 ToDictionary(object) 将对象转换成Dictionary<TKey, TValue> public static Dictionary<string, object> ToDictionary(this object source) Parameters source object 对象 Returns Dictionary<string, object> Dictionary<TKey, TValue> ToDictionary<T>(object) 将对象转换成IDictionary<TKey, TValue> public static Dictionary<string, T> ToDictionary<T>(this object source) Parameters source object 对象 Returns Dictionary<string, T> IDictionary<TKey, TValue> Type Parameters T ToIDictionary(object) 将对象转换成IDictionary<TKey, TValue> public static IDictionary<string, object> ToIDictionary(this object source) Parameters source object 对象 Returns IDictionary<string, object> IDictionary<TKey, TValue> ToIDictionary<T>(object) 将对象转换成IDictionary<TKey, TValue> public static IDictionary<string, T> ToIDictionary<T>(this object source) Parameters source object 对象 Returns IDictionary<string, T> IDictionary<TKey, TValue> Type Parameters T TryRemove<TKey, TValue>(IDictionary<TKey, TValue>, out TKey[], params TKey[]) 批量删除 IDictionary<TKey, TValue>对象 中的值 public static bool TryRemove<TKey, TValue>(this IDictionary<TKey, TValue> keys, out TKey[] trykey, params TKey[] key) Parameters keys IDictionary<TKey, TValue> IDictionary<TKey, TValue>对象 trykey TKey[] 删除失败时返回无法删除的哪些项。 key TKey[] 需要删除的键值集合 Returns bool Dictionary<TKey, TValue> Type Parameters TKey 键 TValue 值"
  },
  "api/Tool.Utils.Data.Enumerator-1.html": {
    "href": "api/Tool.Utils.Data.Enumerator-1.html",
    "title": "Struct Enumerator<T> | Tool.Net",
    "keywords": "Struct Enumerator<T> Namespace Tool.Utils.Data Assembly Tool.Net.dll 返回 Array 的 Enumerator<T>。 [Serializable] public struct Enumerator<T> : IEnumerator Type Parameters T 当前类型 Implements IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Current 获取集合中的当前元素。 public T Current { get; } Property Value T 集合中的当前元素。 Index 当前下标 public int Index { get; } Property Value int Length 总数 public int Length { get; } Property Value int Methods MoveNext() 将枚举数推进到集合的下一个元素。 public bool MoveNext() Returns bool 如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。 Exceptions InvalidOperationException 在创建了枚举数后集合被修改了。 Reset() 将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。 public void Reset() Exceptions InvalidOperationException 在创建了枚举数后集合被修改了。"
  },
  "api/Tool.Utils.Data.LazyConcurrentDictionary-2.html": {
    "href": "api/Tool.Utils.Data.LazyConcurrentDictionary-2.html",
    "title": "Class LazyConcurrentDictionary<TKey, TValue> | Tool.Net",
    "keywords": "Class LazyConcurrentDictionary<TKey, TValue> Namespace Tool.Utils.Data Assembly Tool.Net.dll 完全保证的多线程延迟加载字典，表示可由多个线程同时访问的键/值对的线程安全集合。 public class LazyConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters TKey 字典中的键的类型。 TValue 字典中的值的类型。 Inheritance object LazyConcurrentDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods DictionaryExtension.AsReadOnly<TKey, TValue>(IDictionary<TKey, TValue>) DictionaryExtension.NewDictionary<TKey, TValue>(IDictionary<TKey, TValue>) DictionaryExtension.Remove<TKey, TValue>(IDictionary<TKey, TValue>, params TKey[]) DictionaryExtension.TryRemove<TKey, TValue>(IDictionary<TKey, TValue>, out TKey[], params TKey[]) ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors LazyConcurrentDictionary() 初始化 public LazyConcurrentDictionary() Properties Count 获取包含在 LazyConcurrentDictionary<TKey, TValue> 中的键/值对的数目。 public int Count { get; } Property Value int 包含在 LazyConcurrentDictionary<TKey, TValue> 中的键/值对的数目。 Exceptions OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 IsEmpty 获取一个指示 LazyConcurrentDictionary<TKey, TValue> 是否为空的值。 public bool IsEmpty { get; } Property Value bool 如果 System.Collections.Concurrent.ConcurrentDictionary`2 为空，则为 true；否则为 false。 IsReadOnly 获取一个值，该值指示 LazyConcurrentDictionary<TKey, TValue> 是否为只读。（无效参数） public bool IsReadOnly { get; } Property Value bool this[TKey] 获取或设置与指定的键相关联的值。 public TValue this[TKey key] { get; set; } Parameters key TKey 要获取或设置的值的键。 Property Value TValue 位于指定索引处的键/值对。 Exceptions ArgumentNullException key 为 null。 KeyNotFoundException 已检索该属性，并且集合中不存在 key。 Keys 获取包含 LazyConcurrentDictionary<TKey, TValue> 中的键的集合。 public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> LazyConcurrentDictionary<TKey, TValue> 中的键的集合。 Values 获取包含 LazyConcurrentDictionary<TKey, TValue> 中的值的集合。 (作者并不建议使用该字段，开销有点大) public ICollection<TValue> Values { get; } Property Value ICollection<TValue> 包含 LazyConcurrentDictionary<TKey, TValue> 中的值的集合。 Methods Add(KeyValuePair<TKey, TValue>) 在 LazyConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public void Add(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> 单个对象的键值对 Add(TKey, TValue) 在 LazyConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public void Add(TKey key, TValue value) Parameters key TKey 用作要添加的元素的键的对象。 value TValue 作为要添加的元素的值的对象。 AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) 使用指定的函数将键/值对添加到 LazyConcurrentDictionary<TKey, TValue> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。 public TValue AddOrUpdate(TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) Parameters key TKey 元素的键 addValueFactory Func<TKey, TValue> 新增的内容委托 updateValueFactory Func<TKey, TValue, TValue> 修改的内容委托 Returns TValue 返回值 AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>) 使用指定的函数将键/值对添加到 LazyConcurrentDictionary<TKey, TValue> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。 public TValue AddOrUpdate(TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) Parameters key TKey 元素的键 addValue TValue 新增的内容 updateValueFactory Func<TKey, TValue, TValue> 修改的内容委托 Returns TValue 返回值 AddOrUpdate<TArg>(TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg) 使用指定的函数将键/值对添加到 LazyConcurrentDictionary<TKey, TValue> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。 public TValue AddOrUpdate<TArg>(TKey key, Func<TKey, TArg, TValue> addValueFactory, Func<TKey, TValue, TArg, TValue> updateValueFactory, TArg factoryArgument) Parameters key TKey 元素的键 addValueFactory Func<TKey, TArg, TValue> 新增的内容委托 updateValueFactory Func<TKey, TValue, TArg, TValue> 修改的内容委托 factoryArgument TArg 传入的额外对象 Returns TValue 返回值 Type Parameters TArg Clear() 从 LazyConcurrentDictionary<TKey, TValue> 中移除所有的键和值。 public void Clear() ContainsKey(TKey) 确定 LazyConcurrentDictionary<TKey, TValue> 是否包含指定的键。 public bool ContainsKey(TKey key) Parameters key TKey 要在 LazyConcurrentDictionary<TKey, TValue> 中定位的键。 Returns bool 如果 LazyConcurrentDictionary<TKey, TValue> 包含具有指定键的元素，则为 true；否则为 false。 Exceptions ArgumentNullException key 为 null。 GetEnumerator() 返回循环访问 LazyConcurrentDictionary<TKey, TValue> 的枚举数。 public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> LazyConcurrentDictionary<TKey, TValue> 的一个枚举数。 GetOrAdd(TKey, Func<TKey, TValue>) 如果该键尚不存在，则使用指定函数将键/值对添加到 LazyConcurrentDictionary<TKey, TValue> public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory) Parameters key TKey 要添加的元素的键。 valueFactory Func<TKey, TValue> 用于为键生成值的函数 Returns TValue 键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为 valueFactory 返回的键的新值。 Exceptions ArgumentNullException valueFactory 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 GetOrAdd(TKey, TValue) 如果该键尚不存在，则使用指定函数将键/值对添加到 LazyConcurrentDictionary<TKey, TValue> public TValue GetOrAdd(TKey key, TValue value) Parameters key TKey 要添加的元素的键。 value TValue 用于为键生成值的函数 Returns TValue 键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为新值。 Exceptions ArgumentNullException value 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 Remove(TKey) 尝试从 LazyConcurrentDictionary<TKey, TValue> 中移除。 public bool Remove(TKey key) Parameters key TKey 要移除并返回的元素的键。 Returns bool 如果已成功移除对象，则为 true；否则为 false。 ToString() 显示结果 public override string ToString() Returns string TryAdd(TKey, Func<TKey, TValue>) 在 LazyConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public bool TryAdd(TKey key, Func<TKey, TValue> addValueFactory) Parameters key TKey 用作要添加的元素的键的对象。 addValueFactory Func<TKey, TValue> 作为要添加的元素的值的委托。 Returns bool 如果该键/值对已成功添加到 LazyConcurrentDictionary<TKey, TValue>，则为 true；如果该键已存在，则为 false。 Exceptions ArgumentNullException value 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 TryAdd(TKey, TValue) 在 LazyConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public bool TryAdd(TKey key, TValue value) Parameters key TKey 用作要添加的元素的键的对象。 value TValue 作为要添加的元素的值的对象。 Returns bool 如果该键/值对已成功添加到 LazyConcurrentDictionary<TKey, TValue>，则为 true；如果该键已存在，则为 false。 Exceptions ArgumentNullException value 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 TryGetValue(TKey, out TValue) 尝试从 LazyConcurrentDictionary<TKey, TValue> 获取与指定的键关联的值。 public bool TryGetValue(TKey key, out TValue value) Parameters key TKey 要获取的值的键。 value TValue 当此方法返回时，将包含 LazyConcurrentDictionary<TKey, TValue> 中具有指定键的对象；如果操作失败，则包含默认值。 Returns bool 如果在 System.Collections.Concurrent.ConcurrentDictionary`2 中找到该键，则为 true；否则为 false。 Exceptions ArgumentNullException key 为 null。 TryRemove(TKey, out TValue) 尝试从 LazyConcurrentDictionary<TKey, TValue> 中移除。 public bool TryRemove(TKey key, out TValue value) Parameters key TKey 要移除并返回的元素的键。 value TValue 当此方法返回时，将包含从 LazyConcurrentDictionary<TKey, TValue> 中移除的对象；如果 key 不存在，则包含 TValue 类型。 Returns bool 如果已成功移除对象，则为 true；否则为 false。 TryUpdate(TKey, Func<TKey, TValue>, TValue) 尝试从 LazyConcurrentDictionary<TKey, TValue> 中修改数据（对比数据不一致时进行修改） public bool TryUpdate(TKey key, Func<TKey, TValue> addValueFactory, TValue comparisonValue) Parameters key TKey 要修改的元素的键 addValueFactory Func<TKey, TValue> 修改的内容委托 comparisonValue TValue 比较的内容 Returns bool 如果已成功修改对象，则为 true；否则为 false。 TryUpdate(TKey, TValue, TValue) 尝试从 LazyConcurrentDictionary<TKey, TValue> 中修改数据（对比数据不一致时进行修改） public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue) Parameters key TKey 要修改的元素的键 newValue TValue 修改的内容 comparisonValue TValue 比较的内容 Returns bool 如果已成功修改对象，则为 true；否则为 false。"
  },
  "api/Tool.Utils.Data.ListExtension.html": {
    "href": "api/Tool.Utils.Data.ListExtension.html",
    "title": "Class ListExtension | Tool.Net",
    "keywords": "Class ListExtension Namespace Tool.Utils.Data Assembly Tool.Net.dll 对List进行升级 public static class ListExtension Inheritance object ListExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods EntitysToJson(IList) 将实体转换为JSON格式字符串 （再三强调，要是实体，而且是实集合必须是List<T>。） public static string EntitysToJson(this IList list) Parameters list IList 实体 Returns string 返回JSON字符串 EntitysToJson(IList, bool) 将实体转换为JSON格式字符串 （再三强调，要是实体，而且是实集合必须是List<T>。） public static string EntitysToJson(this IList list, bool IsDate) Parameters list IList 实体 IsDate bool ToJson格式时间，启用转字符串 Returns string 返回JSON字符串 EntitysToJson(IList, bool, string) 将实体转换为JSON格式字符串 （再三强调，要是实体，而且是实集合必须是List<T>。） public static string EntitysToJson(this IList list, bool IsDate, string ToDateString) Parameters list IList 实体 IsDate bool ToJson格式时间，启用转字符串 ToDateString string Date.ToString()的写法。 Returns string 返回JSON字符串 GetArrayIndex<T>(IList<T>, int, int) 同于获取指定部分的内容 public static List<T> GetArrayIndex<T>(this IList<T> list, int index, int count) where T : new() Parameters list IList<T> 对象数组 index int 从下标N开始 count int 到下标N结束 Returns List<T> 返回一部分的数组内容 Type Parameters T GetParamASCII<T>(List<T>) 按照ASCII码从小到大排序（未实现）（示例： 1, 2, A, B, a, b 这是格式循序） public static List<T> GetParamASCII<T>(this List<T> list) where T : new() Parameters list List<T> List Returns List<T> 返回重新排序好的结果 Type Parameters T TrueForAll<T>(IList<T>, Predicate<T>) 确定是否 List<T> 中的每个元素都与指定的谓词所定义的条件相匹配。 public static bool TrueForAll<T>(this IList<T> routs, Predicate<T> match) where T : new() Parameters routs IList<T> List数组 match Predicate<T> 条件 Returns bool 该方法返回，成功，或失败。 Type Parameters T 类型"
  },
  "api/Tool.Utils.Data.TaskConcurrentDictionary-2.html": {
    "href": "api/Tool.Utils.Data.TaskConcurrentDictionary-2.html",
    "title": "Class TaskConcurrentDictionary<TKey, TValue> | Tool.Net",
    "keywords": "Class TaskConcurrentDictionary<TKey, TValue> Namespace Tool.Utils.Data Assembly Tool.Net.dll 完全保证的多线程可等待字典，表示可由多个线程同时访问的键/值对的线程安全集合。 public class TaskConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Type Parameters TKey 字典中的键的类型。 TValue 字典中的值的类型。 Inheritance object TaskConcurrentDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable IAsyncEnumerable<KeyValuePair<TKey, TValue>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods DictionaryExtension.AsReadOnly<TKey, TValue>(IDictionary<TKey, TValue>) DictionaryExtension.NewDictionary<TKey, TValue>(IDictionary<TKey, TValue>) DictionaryExtension.Remove<TKey, TValue>(IDictionary<TKey, TValue>, params TKey[]) DictionaryExtension.TryRemove<TKey, TValue>(IDictionary<TKey, TValue>, out TKey[], params TKey[]) ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TaskConcurrentDictionary() 初始化 public TaskConcurrentDictionary() Properties Count 获取包含在 TaskConcurrentDictionary<TKey, TValue> 中的键/值对的数目。 public int Count { get; } Property Value int 包含在 TaskConcurrentDictionary<TKey, TValue> 中的键/值对的数目。 Exceptions OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 IsEmpty 获取一个指示 TaskConcurrentDictionary<TKey, TValue> 是否为空的值。 public bool IsEmpty { get; } Property Value bool 如果 System.Collections.Concurrent.ConcurrentDictionary`2 为空，则为 true；否则为 false。 IsReadOnly 获取一个值，该值指示 TaskConcurrentDictionary<TKey, TValue> 是否为只读。（无效参数） public bool IsReadOnly { get; } Property Value bool this[TKey] 获取或设置与指定的键相关联的值。 public TValue this[TKey key] { get; set; } Parameters key TKey 要获取或设置的值的键。 Property Value TValue 位于指定索引处的键/值对。 Exceptions ArgumentNullException key 为 null。 KeyNotFoundException 已检索该属性，并且集合中不存在 key。 Keys 获取包含 TaskConcurrentDictionary<TKey, TValue> 中的键的集合。 public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> TaskConcurrentDictionary<TKey, TValue> 中的键的集合。 Values 获取包含 TaskConcurrentDictionary<TKey, TValue> 中的值的集合。 (作者并不建议使用该字段，开销有点大) public ICollection<TValue> Values { get; } Property Value ICollection<TValue> 包含 TaskConcurrentDictionary<TKey, TValue> 中的值的集合。 Methods Add(KeyValuePair<TKey, TValue>) 在 TaskConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public void Add(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> 单个对象的键值对 Add(TKey, TValue) 在 TaskConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public void Add(TKey key, TValue value) Parameters key TKey 用作要添加的元素的键的对象。 value TValue 作为要添加的元素的值的对象。 AddOrUpdate(TKey, Func<TKey, Task<TValue>>, Func<TKey, Task<TValue>, Task<TValue>>) 使用指定的函数将键/值对添加到 TaskConcurrentDictionary<TKey, TValue> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。 public Task<TValue> AddOrUpdate(TKey key, Func<TKey, Task<TValue>> addValueFactory, Func<TKey, Task<TValue>, Task<TValue>> updateValueFactory) Parameters key TKey 元素的键 addValueFactory Func<TKey, Task<TValue>> 新增的内容委托 updateValueFactory Func<TKey, Task<TValue>, Task<TValue>> 修改的内容委托 Returns Task<TValue> 返回值 AddOrUpdate(TKey, Task<TValue>, Func<TKey, Task<TValue>, Task<TValue>>) 使用指定的函数将键/值对添加到 TaskConcurrentDictionary<TKey, TValue> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。 public Task<TValue> AddOrUpdate(TKey key, Task<TValue> addValue, Func<TKey, Task<TValue>, Task<TValue>> updateValueFactory) Parameters key TKey 元素的键 addValue Task<TValue> 新增的内容 updateValueFactory Func<TKey, Task<TValue>, Task<TValue>> 修改的内容委托 Returns Task<TValue> 返回值 AddOrUpdate<TArg>(TKey, Func<TKey, TArg, Task<TValue>>, Func<TKey, Task<TValue>, TArg, Task<TValue>>, TArg) 使用指定的函数将键/值对添加到 TaskConcurrentDictionary<TKey, TValue> 如果密钥已经存在，更新系统中的密钥/值对。如果密钥不存在 则添加进去。 public Task<TValue> AddOrUpdate<TArg>(TKey key, Func<TKey, TArg, Task<TValue>> addValueFactory, Func<TKey, Task<TValue>, TArg, Task<TValue>> updateValueFactory, TArg factoryArgument) Parameters key TKey 元素的键 addValueFactory Func<TKey, TArg, Task<TValue>> 新增的内容委托 updateValueFactory Func<TKey, Task<TValue>, TArg, Task<TValue>> 修改的内容委托 factoryArgument TArg 传入的额外对象 Returns Task<TValue> 返回值 Type Parameters TArg Clear() 从 TaskConcurrentDictionary<TKey, TValue> 中移除所有的键和值。 public void Clear() ContainsKey(TKey) 确定 TaskConcurrentDictionary<TKey, TValue> 是否包含指定的键。 public bool ContainsKey(TKey key) Parameters key TKey 要在 TaskConcurrentDictionary<TKey, TValue> 中定位的键。 Returns bool 如果 TaskConcurrentDictionary<TKey, TValue> 包含具有指定键的元素，则为 true；否则为 false。 Exceptions ArgumentNullException key 为 null。 GetAsyncEnumerator(CancellationToken) 异步迭代器 public IAsyncEnumerator<KeyValuePair<TKey, TValue>> GetAsyncEnumerator(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns IAsyncEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() 返回循环访问 LazyConcurrentDictionary<TKey, TValue> 的枚举数。 public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> LazyConcurrentDictionary<TKey, TValue> 的一个枚举数。 GetOrAdd(TKey, Func<TKey, Task<TValue>>) 如果该键尚不存在，则使用指定函数将键/值对添加到 TaskConcurrentDictionary<TKey, TValue> public Task<TValue> GetOrAdd(TKey key, Func<TKey, Task<TValue>> valueFactory) Parameters key TKey 要添加的元素的键。 valueFactory Func<TKey, Task<TValue>> 用于为键生成值的函数 Returns Task<TValue> 键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为 valueFactory 返回的键的新值。 Exceptions ArgumentNullException valueFactory 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 GetOrAdd(TKey, TValue) 如果该键尚不存在，则使用指定函数将键/值对添加到 TaskConcurrentDictionary<TKey, TValue> public Task<TValue> GetOrAdd(TKey key, TValue value) Parameters key TKey 要添加的元素的键。 value TValue 用于为键生成值的函数 Returns Task<TValue> 键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为新值。 Exceptions ArgumentNullException value 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 Remove(TKey) 尝试从 TaskConcurrentDictionary<TKey, TValue> 中移除。 public bool Remove(TKey key) Parameters key TKey 要移除并返回的元素的键。 Returns bool 如果已成功移除对象，则为 true；否则为 false。 ToString() 显示结果 public override string ToString() Returns string TryAdd(TKey, Func<TKey, Task<TValue>>) 在 TaskConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public bool TryAdd(TKey key, Func<TKey, Task<TValue>> addValueFactory) Parameters key TKey 用作要添加的元素的键的对象。 addValueFactory Func<TKey, Task<TValue>> 作为要添加的元素的值的委托。 Returns bool 如果该键/值对已成功添加到 TaskConcurrentDictionary<TKey, TValue>，则为 true；如果该键已存在，则为 false。 Exceptions ArgumentNullException value 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 TryAdd(TKey, TValue) 在 TaskConcurrentDictionary<TKey, TValue> 中添加一个带有所提供的键和值的元素。 public bool TryAdd(TKey key, TValue value) Parameters key TKey 用作要添加的元素的键的对象。 value TValue 作为要添加的元素的值的对象。 Returns bool 如果该键/值对已成功添加到 TaskConcurrentDictionary<TKey, TValue>，则为 true；如果该键已存在，则为 false。 Exceptions ArgumentNullException value 为 null。 OverflowException 字典已包含最大数目的元素 (System.Int32.MaxValue)。 TryGetValue(TKey, out Task<TValue>) 尝试从 TaskConcurrentDictionary<TKey, TValue> 获取与指定的键关联的值。 public bool TryGetValue(TKey key, out Task<TValue> value) Parameters key TKey 要获取的值的键。 value Task<TValue> 当此方法返回时，将包含 TaskConcurrentDictionary<TKey, TValue> 中具有指定键的对象；如果操作失败，则包含默认值。 Returns bool 如果在 System.Collections.Concurrent.ConcurrentDictionary`2 中找到该键，则为 true；否则为 false。 Exceptions ArgumentNullException key 为 null。 TryRemove(TKey, out TValue) 尝试从 TaskConcurrentDictionary<TKey, TValue> 中移除。 public bool TryRemove(TKey key, out TValue value) Parameters key TKey 要移除并返回的元素的键。 value TValue 当此方法返回时，将包含从 TaskConcurrentDictionary<TKey, TValue> 中移除的对象；如果 key 不存在，则包含 TValue 类型。 Returns bool 如果已成功移除对象，则为 true；否则为 false。 TryUpdate(TKey, Func<TKey, Task<TValue>>, Task<TValue>) 尝试从 TaskConcurrentDictionary<TKey, TValue> 中修改数据（对比数据不一致时进行修改） public bool TryUpdate(TKey key, Func<TKey, Task<TValue>> addValueFactory, Task<TValue> comparisonValue) Parameters key TKey 要修改的元素的键 addValueFactory Func<TKey, Task<TValue>> 修改的内容委托 comparisonValue Task<TValue> 比较的内容 Returns bool 如果已成功修改对象，则为 true；否则为 false。 TryUpdate(TKey, Task<TValue>, Task<TValue>) 尝试从 TaskConcurrentDictionary<TKey, TValue> 中修改数据（对比数据不一致时进行修改） public bool TryUpdate(TKey key, Task<TValue> newValue, Task<TValue> comparisonValue) Parameters key TKey 要修改的元素的键 newValue Task<TValue> 修改的内容 comparisonValue Task<TValue> 比较的内容 Returns bool 如果已成功修改对象，则为 true；否则为 false。"
  },
  "api/Tool.Utils.Data.html": {
    "href": "api/Tool.Utils.Data.html",
    "title": "Namespace Tool.Utils.Data | Tool.Net",
    "keywords": "Namespace Tool.Utils.Data Classes ArrayExtension 对Array类进行升级 DataRowExtension 对DataRow进行升级 DataSetExtension 对DataSet进行升级 DataTableExtension 对DataTable进行升级 DictionaryExtension 对Dictionary进行升级 LazyConcurrentDictionary<TKey, TValue> 完全保证的多线程延迟加载字典，表示可由多个线程同时访问的键/值对的线程安全集合。 ListExtension 对List进行升级 TaskConcurrentDictionary<TKey, TValue> 完全保证的多线程可等待字典，表示可由多个线程同时访问的键/值对的线程安全集合。 Structs Enumerator<T> 返回 Array 的 Enumerator<T>。"
  },
  "api/Tool.Utils.DataHelper.html": {
    "href": "api/Tool.Utils.DataHelper.html",
    "title": "Class DataHelper | Tool.Net",
    "keywords": "Class DataHelper Namespace Tool.Utils Assembly Tool.Net.dll 数据集帮助类 public class DataHelper Inheritance object DataHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods ConvertDataTableToObjects<TEntity>(DataTable) 将DataTable转换成实体类对象数组IList<T> public static IList<TEntity> ConvertDataTableToObjects<TEntity>(DataTable dt) Parameters dt DataTable DataTable Returns IList<TEntity> 返回实体类对象数组 Type Parameters TEntity 实体类 ConvertRowToObject(Type, DataRow) 将DataRow转换成实体类对象 public static object ConvertRowToObject(Type objType, DataRow row) Parameters objType Type 实体类 row DataRow DataRow Returns object 返回实体类对象 ConvertRowToObject<TEntity>(DataRow) 将DataRow转换成实体类对象 public static TEntity ConvertRowToObject<TEntity>(DataRow row) Parameters row DataRow DataRow Returns TEntity 返回实体类对象 Type Parameters TEntity 实体类 DistillCommandParameter(string, string) 提取命令参数 public static IList<string> DistillCommandParameter(string sqlStatement, string paraPrefix) Parameters sqlStatement string paraPrefix string Returns IList<string> FillCommandParameterValue(IDbCommand, object) 填充命令参数值 public static void FillCommandParameterValue(IDbCommand command, object entityOrRow) Parameters command IDbCommand entityOrRow object GetColumnValue(object, string) 获取列值 public static object GetColumnValue(object entityOrRow, string columnName) Parameters entityOrRow object columnName string Returns object GetSafeDbValue(object) 获取安全值 public static object GetSafeDbValue(object val) Parameters val object Returns object RefreshEntityFields(object, DataRow) 刷新实体字段 public static void RefreshEntityFields(object entity, DataRow row) Parameters entity object row DataRow RefreshEntityFields(object, DataRow, IList<string>) 刷新实体字段 public static void RefreshEntityFields(object entity, DataRow row, IList<string> refreshFields) Parameters entity object row DataRow refreshFields IList<string>"
  },
  "api/Tool.Utils.DataTableProperty.html": {
    "href": "api/Tool.Utils.DataTableProperty.html",
    "title": "Class DataTableProperty | Tool.Net",
    "keywords": "Class DataTableProperty Namespace Tool.Utils Assembly Tool.Net.dll 表示一个 实体字段对应的表下标 public class DataTableProperty Inheritance object DataTableProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties DataType 对应的值类型 public Type DataType { get; init; } Property Value Type Index 表下标 public int Index { get; init; } Property Value int Name 字段名称 public string Name { get; } Property Value string Property 字段信息 public PropertyInfo Property { get; init; } Property Value PropertyInfo PropertyType 类字段类型 public Type PropertyType { get; } Property Value Type"
  },
  "api/Tool.Utils.DateConverter.html": {
    "href": "api/Tool.Utils.DateConverter.html",
    "title": "Class DateConverter | Tool.Net",
    "keywords": "Class DateConverter Namespace Tool.Utils Assembly Tool.Net.dll Json 标准或自定义日期和时间格式字符串。 public class DateConverter : JsonConverter<DateTime> Inheritance object JsonConverter JsonConverter<DateTime> DateConverter Inherited Members JsonConverter<DateTime>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DateConverter(string) 注册 时间格式实例 public DateConverter(string format) Parameters format string Properties Format 标准或自定义日期和时间格式字符串。 public string Format { get; } Property Value string Methods CanConvert(Type) 验证是否支持类型 public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool Read(ref Utf8JsonReader, Type, JsonSerializerOptions) 将字符串转换成原数据 public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns DateTime Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) 将原数据转换成字符串 public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value DateTime options JsonSerializerOptions"
  },
  "api/Tool.Utils.Encryption.AES.html": {
    "href": "api/Tool.Utils.Encryption.AES.html",
    "title": "Class AES | Tool.Net",
    "keywords": "Class AES Namespace Tool.Utils.Encryption Assembly Tool.Net.dll AES 加密 解密,秘钥长度为32位，不足时系统自动补足空字符。 public sealed class AES Inheritance object AES Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Fields Keys 对称算法, 65, 114, 101, 121, 111, 117, 109, 121, 83, 110, 111, 119, 109, 97, 110, 63 public static readonly byte[] Keys Field Value byte[] Methods Decrypt(string, string) 解密成字符串 public static string Decrypt(string cipherText, string cipherkey) Parameters cipherText string 密文 cipherkey string 密码密钥 Returns string 返回字符串 DecryptBuffer(byte[], string) 解密byte[] public static byte[] DecryptBuffer(byte[] cipherText, string cipherkey) Parameters cipherText byte[] 密文内容 cipherkey string 密码密钥 Returns byte[] Encrypt(string, string) 加密字符串 public static string Encrypt(string plainText, string cipherkey) Parameters plainText string 原字符串 cipherkey string 密码密钥 Returns string 返回加密的字符串 EncryptBuffer(byte[], string) 加密byte[] public static byte[] EncryptBuffer(byte[] plainText, string cipherkey) Parameters plainText byte[] 原内容 cipherkey string 密码密钥 Returns byte[] GetPassword(string) 获取AES实际加密密码 public static string GetPassword(string encryptKey) Parameters encryptKey string 原密码密钥 Returns string"
  },
  "api/Tool.Utils.Encryption.DES.html": {
    "href": "api/Tool.Utils.Encryption.DES.html",
    "title": "Class DES | Tool.Net",
    "keywords": "Class DES Namespace Tool.Utils.Encryption Assembly Tool.Net.dll DES加密,秘钥长度为8位，不足时系统自动补足空字符。 public class DES Inheritance object DES Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Fields Keys 加密规则, 18, 52, 86, 120, 144, 171, 205, 239 public static readonly byte[] Keys Field Value byte[] Methods Decrypt(string, string) 解密 public static string Decrypt(string decryptString, string decryptKey) Parameters decryptString string 密文 decryptKey string 秘钥 Returns string 返回明文 DecryptBuffer(byte[], string) 解密byte[] public static byte[] DecryptBuffer(byte[] plainText, string encryptKey) Parameters plainText byte[] 密文内容 encryptKey string 密码密钥 Returns byte[] Encrypt(string, string) 加密 public static string Encrypt(string encryptString, string encryptKey) Parameters encryptString string 明文 encryptKey string 秘钥 Returns string 返回密文 EncryptBuffer(byte[], string) 加密byte[] public static byte[] EncryptBuffer(byte[] plainText, string encryptKey) Parameters plainText byte[] 原内容 encryptKey string 密码密钥 Returns byte[] GetPassword(string) 获取DES实际加密密码 public static string GetPassword(string encryptKey) Parameters encryptKey string 原密码密钥 Returns string"
  },
  "api/Tool.Utils.Encryption.MD5ResultMode.html": {
    "href": "api/Tool.Utils.Encryption.MD5ResultMode.html",
    "title": "Enum MD5ResultMode | Tool.Net",
    "keywords": "Enum MD5ResultMode Namespace Tool.Utils.Encryption Assembly Tool.Net.dll 加密类型 public enum MD5ResultMode : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Strong = 0 强的加密 Weak = 1 弱的加密"
  },
  "api/Tool.Utils.Encryption.TextEncrypt.html": {
    "href": "api/Tool.Utils.Encryption.TextEncrypt.html",
    "title": "Class TextEncrypt | Tool.Net",
    "keywords": "Class TextEncrypt Namespace Tool.Utils.Encryption Assembly Tool.Net.dll 公共加密类 public class TextEncrypt Inheritance object TextEncrypt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods Base64Decode(string) Base64Decode public static string Base64Decode(string message) Parameters message string Returns string Base64Encode(string) Base64Encode public static string Base64Encode(string message) Parameters message string Returns string DSAEncryptPassword(string) DSA public static string DSAEncryptPassword(string password) Parameters password string Returns string EncryptPassword(string) MD5 public static string EncryptPassword(string password) Parameters password string Returns string GetPassword(string, int) 用于处理密码不够或密码过长的处理 public static string GetPassword(string encryptKey, int length) Parameters encryptKey string 原密码密钥 length int 密码要求长度 Returns string 返回实际密码 MD5EncryptPassword(string) MD5 public static string MD5EncryptPassword(string password) Parameters password string Returns string MD5EncryptPassword(string, MD5ResultMode) MD5 public static string MD5EncryptPassword(string password, MD5ResultMode mode) Parameters password string mode MD5ResultMode Returns string SHA1EncryptPassword(string) SHA1 public static string SHA1EncryptPassword(string password) Parameters password string Returns string SHA256(string) SHA256 public static string SHA256(string password) Parameters password string Returns string"
  },
  "api/Tool.Utils.Encryption.html": {
    "href": "api/Tool.Utils.Encryption.html",
    "title": "Namespace Tool.Utils.Encryption | Tool.Net",
    "keywords": "Namespace Tool.Utils.Encryption Classes AES AES 加密 解密,秘钥长度为32位，不足时系统自动补足空字符。 DES DES加密,秘钥长度为8位，不足时系统自动补足空字符。 TextEncrypt 公共加密类 Enums MD5ResultMode 加密类型"
  },
  "api/Tool.Utils.EntityBuilder.html": {
    "href": "api/Tool.Utils.EntityBuilder.html",
    "title": "Class EntityBuilder | Tool.Net",
    "keywords": "Class EntityBuilder Namespace Tool.Utils Assembly Tool.Net.dll 用于提高，对象构造（只支持无参构造），对象取值，对象赋值。 public class EntityBuilder Inheritance object EntityBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors EntityBuilder(Type) 创建构造模型对象 public EntityBuilder(Type classtype) Parameters classtype Type Properties ClassType 对象原型 public Type ClassType { get; } Property Value Type IsNew 是否可以构造 public bool IsNew { get; } Property Value bool KeyParameters 获取当前类所有字段字典 public IDictionary<string, PropertyInfo> KeyParameters { get; } Property Value IDictionary<string, PropertyInfo> New 获取对象 public object New { get; } Property Value object Parameters 对象下公开的字段 public PropertyInfo[] Parameters { get; } Property Value PropertyInfo[] Methods Get(object) 获取对象的字典数据 public IDictionary<string, object> Get(object _class) Parameters _class object 对象原型 Returns IDictionary<string, object> 字典 GetEntity(object) 获取 对象 模型 public static EntityBuilder GetEntity(object _class) Parameters _class object 对象 Returns EntityBuilder 实体模型 GetEntity(Type) 获取 对象 模型 public static EntityBuilder GetEntity(Type type) Parameters type Type 对象类型 Returns EntityBuilder 实体模型 GetParameterType(string, out Type) 根据字段名获取字段类型 public bool GetParameterType(string name, out Type type) Parameters name string 字段名 type Type 字段类型 Returns bool 是否查找到 Set(object, IDictionary<string, object>) 赋值对象 public void Set(object _class, IDictionary<string, object> parameters) Parameters _class object 对象原型 parameters IDictionary<string, object> 字典(字典如标记忽略大小写赋值，就能实现特定行为)"
  },
  "api/Tool.Utils.FileManager.html": {
    "href": "api/Tool.Utils.FileManager.html",
    "title": "Class FileManager | Tool.Net",
    "keywords": "Class FileManager Namespace Tool.Utils Assembly Tool.Net.dll 文件管理器 public abstract class FileManager Inheritance object FileManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods CopyDirectories(string, string) 复制目录 public static void CopyDirectories(string srcDir, string desDir) Parameters srcDir string 原目录 desDir string 到目录 CopyFile(string, string) 复制文件 public static void CopyFile(string srcFile, string desFile) Parameters srcFile string 原文件 desFile string 新文件的位置 CopyFileStream(string, string) 复制文件流 public static bool CopyFileStream(string srcFile, string desFile) Parameters srcFile string 原文件 desFile string 到文件 Returns bool Create(string, FsoMethod) 创建文件 public static void Create(string file, FsoMethod method) Parameters file string 路径 method FsoMethod 文件类型 Delete(string, FsoMethod) 删除 public static void Delete(string file, FsoMethod method) Parameters file string 路径 method FsoMethod 文件类型 Exists(string, FsoMethod) 是否存在文件或文件夹 public static bool Exists(string file, FsoMethod method) Parameters file string 路径 method FsoMethod 文件类型 Returns bool GetCurrentLogName(string, string, ref uint, out string) 用来探测一个日志文件的id public static string GetCurrentLogName(string directory, string levelName, ref uint i, out string sparepath) Parameters directory string 路径 levelName string 日志名称 i uint 存在数量 sparepath string 备用文件名 Returns string GetDirectoryFilesList(string, FsoMethod) 获取目录文件列表 public static DataTable GetDirectoryFilesList(string directory, FsoMethod method) Parameters directory string 路径 method FsoMethod 类型 Returns DataTable GetDirectoryFilesListForObject(string, FsoMethod) 获取对象的目录文件列表 public static IList<FolderInfo> GetDirectoryFilesListForObject(string directory, FsoMethod method) Parameters directory string 路径 method FsoMethod 类型 Returns IList<FolderInfo> GetDirectoryInfo(string) 获取目录信息 public static long[] GetDirectoryInfo(string directory) Parameters directory string 路径 Returns long[] GetDirectoryList(string, FsoMethod) 获取目录列表 public static DataTable GetDirectoryList(string directory, FsoMethod method) Parameters directory string 路径 method FsoMethod 类型 Returns DataTable GetDirectoryListForObject(string, FsoMethod) 获取对象的目录列表 public static IList<FolderInfo> GetDirectoryListForObject(string directory, FsoMethod method) Parameters directory string 路径 method FsoMethod 类型 Returns IList<FolderInfo> Move(string, string, FsoMethod) 移动 public static void Move(string srcFile, string desFile, FsoMethod method) Parameters srcFile string 原路径 desFile string 现路径 method FsoMethod 类型 ReadFile(string) 读取文件 public static string ReadFile(string file) Parameters file string 路径 Returns string ReadFile(string, Encoding) 读取文件 public static string ReadFile(string file, Encoding encoding) Parameters file string 路径 encoding Encoding 编码格式 Returns string ReadFileReturnBytes(string) 读取文件返回字节 public static byte[] ReadFileReturnBytes(string filePath) Parameters filePath string 路径 Returns byte[] WriteBuffToFile(byte[], int, int, string) 写入Buff ToFile 文件 public static void WriteBuffToFile(byte[] buff, int offset, int len, string filePath) Parameters buff byte[] 数据 offset int 开始 len int 结束 filePath string 路径 WriteBuffToFile(byte[], string) 写入Buff ToFile 文件 public static void WriteBuffToFile(byte[] buff, string filePath) Parameters buff byte[] 数据 filePath string 路径 WriteFile(string, string) public static void WriteFile(string file, string fileContent) Parameters file string 路径 fileContent string 内容 WriteFile(string, string, bool) 写入文件 public static void WriteFile(string file, string fileContent, bool append) Parameters file string 路径 fileContent string 内容 append bool 是否追加内容 WriteFile(string, string, bool, Encoding) 写入文件 public static void WriteFile(string file, string fileContent, bool append, Encoding encoding) Parameters file string 路径 fileContent string 内容 append bool 是否追加内容 encoding Encoding 数据类型 WriteFile(string, string, Encoding) 写入文件 public static void WriteFile(string file, string fileContent, Encoding encoding) Parameters file string 路径 fileContent string 内容 encoding Encoding 数据类型"
  },
  "api/Tool.Utils.FlashLogLevel.html": {
    "href": "api/Tool.Utils.FlashLogLevel.html",
    "title": "Enum FlashLogLevel | Tool.Net",
    "keywords": "Enum FlashLogLevel Namespace Tool.Utils Assembly Tool.Net.dll 日志等级 public enum FlashLogLevel Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Debug = 0 调试 Error = 2 异常 Fatal = 4 致命的 Info = 1 信息 Warn = 3 警告"
  },
  "api/Tool.Utils.FlashLogMessage.html": {
    "href": "api/Tool.Utils.FlashLogMessage.html",
    "title": "Class FlashLogMessage | Tool.Net",
    "keywords": "Class FlashLogMessage Namespace Tool.Utils Assembly Tool.Net.dll 日志内容 public record FlashLogMessage : IEquatable<FlashLogMessage> Inheritance object FlashLogMessage Implements IEquatable<FlashLogMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Properties Exception 异常信息 public Exception Exception { get; init; } Property Value Exception Level 日志级别 public FlashLogLevel Level { get; init; } Property Value FlashLogLevel LogDateTime 记录时间 public string LogDateTime { get; init; } Property Value string LogFilePath 日志存放路径，默认为空，是默认路径可以填写（绝对的日志存放路径） public string LogFilePath { get; init; } Property Value string Message 输出内容 public string Message { get; init; } Property Value string"
  },
  "api/Tool.Utils.FolderInfo.html": {
    "href": "api/Tool.Utils.FolderInfo.html",
    "title": "Class FolderInfo | Tool.Net",
    "keywords": "Class FolderInfo Namespace Tool.Utils Assembly Tool.Net.dll 文件详情类 public class FolderInfo Inheritance object FolderInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors FolderInfo() 无参构造 public FolderInfo() FolderInfo(string, string, string, byte, string, DateTime, long) 有参构造 public FolderInfo(string name, string fullName, string contentType, byte type, string path, DateTime lastWriteTime, long length) Parameters name string fullName string contentType string type byte path string lastWriteTime DateTime length long Properties ContentType 内容类型 public string ContentType { get; set; } Property Value string FsoType 文件类型 public FsoMethod FsoType { get; set; } Property Value FsoMethod FullName 文件名称 public string FullName { get; set; } Property Value string LastWriteTime 修改日期 public DateTime LastWriteTime { get; set; } Property Value DateTime Length 大小 public long Length { get; set; } Property Value long Name 名称 public string Name { get; set; } Property Value string Path 路径 public string Path { get; set; } Property Value string Type 文件类型 public byte Type { get; set; } Property Value byte"
  },
  "api/Tool.Utils.FsoMethod.html": {
    "href": "api/Tool.Utils.FsoMethod.html",
    "title": "Enum FsoMethod | Tool.Net",
    "keywords": "Enum FsoMethod Namespace Tool.Utils Assembly Tool.Net.dll 文件类型 public enum FsoMethod : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields All = 2 全部 File = 1 文件 Folder = 0 文件夹"
  },
  "api/Tool.Utils.FtpHelper.FTPHelper.html": {
    "href": "api/Tool.Utils.FtpHelper.FTPHelper.html",
    "title": "Class FTPHelper | Tool.Net",
    "keywords": "Class FTPHelper Namespace Tool.Utils.FtpHelper Assembly Tool.Net.dll FTP帮助类（推荐使用:FluentFTP） [Obsolete(\"FTP 过时 是因为 6.0 版本 将WebRequest 设置为了过时，目前还可用，后期可能取消 或 改用其他方式。\")] public class FTPHelper Inheritance object FTPHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors FTPHelper(string, string, string, string) 连接FTP服务器 public FTPHelper(string FtpServerIP, string FtpRemotePath, string FtpUserID, string FtpPassword) Parameters FtpServerIP string FTP连接地址 FtpRemotePath string 指定FTP连接成功后的当前目录, 如果不指定即默认为根目录 FtpUserID string 用户名 FtpPassword string 密码 Methods Delete(string) 删除文件 public void Delete(string fileName) Parameters fileName string Download(string, string) 下载 public void Download(string filePath, string fileName) Parameters filePath string fileName string FileExist(string) 判断当前目录下指定的文件是否存在 public bool FileExist(string RemoteFileName) Parameters RemoteFileName string 远程文件名 Returns bool GetAllList(string) 获取FTP文件列表(包括文件夹) public string[] GetAllList(string url) Parameters url string 请求地址 Returns string[] GetFileList(string) 获取当前目录下文件列表(不包括文件夹) public string[] GetFileList(string url) Parameters url string Returns string[] GetFileSize(string) 获取指定文件大小 public long GetFileSize(string filename) Parameters filename string Returns long GetFilesDetailList() 获取当前目录下明细(包含文件和文件夹) public string[] GetFilesDetailList() Returns string[] GotoDirectory(string, bool) 切换当前目录 public void GotoDirectory(string DirectoryName, bool IsRoot) Parameters DirectoryName string 目录地址 IsRoot bool true:绝对路径 false:相对路径 MakeDir(string) 创建文件夹 public void MakeDir(string dirName) Parameters dirName string MovieFile(string, string) 移动文件 public void MovieFile(string currentFilename, string newDirectory) Parameters currentFilename string newDirectory string ReName(string, string) 更改文件名 public void ReName(string currentFilename, string newFilename) Parameters currentFilename string newFilename string Upload(string) 上传 public void Upload(string filename) Parameters filename string"
  },
  "api/Tool.Utils.FtpHelper.FtpClient.TransferType.html": {
    "href": "api/Tool.Utils.FtpHelper.FtpClient.TransferType.html",
    "title": "Enum FtpClient.TransferType | Tool.Net",
    "keywords": "Enum FtpClient.TransferType Namespace Tool.Utils.FtpHelper Assembly Tool.Net.dll 传输模式:二进制类型、ASCII类型 public enum FtpClient.TransferType Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields ASCII = 1 ASCII类型传输 Binary = 0 Binary类型传输"
  },
  "api/Tool.Utils.FtpHelper.FtpClient.html": {
    "href": "api/Tool.Utils.FtpHelper.FtpClient.html",
    "title": "Class FtpClient | Tool.Net",
    "keywords": "Class FtpClient Namespace Tool.Utils.FtpHelper Assembly Tool.Net.dll FTP 操作类客户端 public class FtpClient Inheritance object FtpClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors FtpClient() 缺省构造函数 public FtpClient() FtpClient(string, string, string, string, int) 构造函数 public FtpClient(string remoteHost, string remotePath, string remoteUser, string remotePass, int remotePort) Parameters remoteHost string remotePath string remoteUser string remotePass string remotePort int Properties Connected 是否登录 public bool Connected { get; } Property Value bool RemoteHost FTP服务器IP地址 public string RemoteHost { get; set; } Property Value string RemotePass 用户登录密码 public string RemotePass { set; } Property Value string RemotePath 当前服务器目录 public string RemotePath { get; set; } Property Value string RemotePort FTP服务器端口 public int RemotePort { get; set; } Property Value int RemoteUser 登录用户账号 public string RemoteUser { set; } Property Value string Methods ChDir(string) 改变目录 public void ChDir(string strDirName) Parameters strDirName string 新的工作目录名 Connect() 建立连接 public void Connect() Delete(string) 删除 public void Delete(string strFileName) Parameters strFileName string 待删除文件名 Dir(string) 获得文件列表 public string[] Dir(string strMask) Parameters strMask string 文件名的匹配字符串 Returns string[] DisConnect() 关闭连接 public void DisConnect() Get(string, string) 下载一批文件 public void Get(string strFileNameMask, string strFolder) Parameters strFileNameMask string 文件名的匹配字符串 strFolder string 本地目录(不得以\\结束) Get(string, string, string) 下载一个文件 public void Get(string strRemoteFileName, string strFolder, string strLocalFileName) Parameters strRemoteFileName string 要下载的文件名 strFolder string 本地目录(不得以\\结束) strLocalFileName string 保存在本地时的文件名 GetFileInfo(string) 获取文件信息 public string GetFileInfo(string strFileName) Parameters strFileName string 文件名 Returns string 文件大小 GetFileSize(string) 获取文件大小 public long GetFileSize(string strFileName) Parameters strFileName string 文件名 Returns long 文件大小 GetNoBinary(string, string, string) 下载一个文件 public void GetNoBinary(string strRemoteFileName, string strFolder, string strLocalFileName) Parameters strRemoteFileName string 要下载的文件名 strFolder string 本地目录(不得以\\结束) strLocalFileName string 保存在本地时的文件名 GetTransferType() 获得传输模式 public FtpClient.TransferType GetTransferType() Returns FtpClient.TransferType 传输模式 MkDir(string) 创建目录 public void MkDir(string strDirName) Parameters strDirName string 目录名 NewPutByGuid(string, string) 创建一个唯一的文件 public void NewPutByGuid(string strFileName, string strGuid) Parameters strFileName string 文件路径 strGuid string 唯一字符串 Put(string) 上传一个文件 public void Put(string strFileName) Parameters strFileName string 本地文件名 Put(string, string) 上传一批文件 public void Put(string strFolder, string strFileNameMask) Parameters strFolder string 本地目录(不得以\\结束) strFileNameMask string 文件名匹配字符(可以包含*和?) PutByGuid(string, string) 上传一个文件 public void PutByGuid(string strFileName, string strGuid) Parameters strFileName string 本地文件名 strGuid string Rename(string, string) 重命名(如果新文件名与已有文件重名,将覆盖已有文件) public void Rename(string strOldFileName, string strNewFileName) Parameters strOldFileName string 旧文件名 strNewFileName string 新文件名 RmDir(string) 删除目录 public void RmDir(string strDirName) Parameters strDirName string 目录名 SendCommand(string) 发送命令并获取应答码和最后一行应答字符串 public void SendCommand(string strCommand) Parameters strCommand string 命令 SetTransferType(TransferType) 设置传输模式 public void SetTransferType(FtpClient.TransferType ttType) Parameters ttType FtpClient.TransferType 传输模式"
  },
  "api/Tool.Utils.FtpHelper.FtpOperater.html": {
    "href": "api/Tool.Utils.FtpHelper.FtpOperater.html",
    "title": "Class FtpOperater | Tool.Net",
    "keywords": "Class FtpOperater Namespace Tool.Utils.FtpHelper Assembly Tool.Net.dll FTP操作类 public class FtpOperater Inheritance object FtpOperater Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties FolderWX Ftp密码 public string FolderWX { get; set; } Property Value string FolderZJ Ftp密码 public string FolderZJ { get; set; } Property Value string Ftp 全局FTP访问变量 public FtpClient Ftp { get; set; } Property Value FtpClient Pass Ftp密码 public string Pass { get; set; } Property Value string Server Ftp服务器 public string Server { get; set; } Property Value string User Ftp用户 public string User { get; set; } Property Value string Methods AddMSCFile(string, string, string, string, string, string) 修改文件 public bool AddMSCFile(string ftpFolder, string ftpFileName, string localFolder, string localFileName, string BscInfo, string path) Parameters ftpFolder string 本地目录 ftpFileName string 本地文件名temp localFolder string 本地目录 localFileName string 本地文件名 BscInfo string path string 获得应用程序所在的完整的路径 Returns bool CanConnect() 测试FTP服务器是否可登陆 public bool CanConnect() Returns bool DelFile(string, string) 删除文件 public bool DelFile(string ftpFolder, string ftpFileName) Parameters ftpFolder string ftp目录 ftpFileName string ftp文件名 Returns bool GetFile(string, string, string, string) 下载文件 public bool GetFile(string ftpFolder, string ftpFileName, string localFolder, string localFileName) Parameters ftpFolder string ftp目录 ftpFileName string ftp文件名 localFolder string 本地目录 localFileName string 本地文件名 Returns bool GetFileInfo(string, string) 得到FTP上文件信息 public string GetFileInfo(string ftpFolder, string ftpFileName) Parameters ftpFolder string FTP目录 ftpFileName string ftp文件名 Returns string GetFileInfoConnected(string, string) 得到FTP上文件信息 public string GetFileInfoConnected(string ftpFolder, string ftpFileName) Parameters ftpFolder string FTP目录 ftpFileName string ftp文件名 Returns string GetFileList(string, string) 得到文件列表 public string[] GetFileList(string ftpFolder, string strMask) Parameters ftpFolder string FTP目录 strMask string Returns string[] FTP通配符号 GetFileNoBinary(string, string, string, string) 下载文件 public bool GetFileNoBinary(string ftpFolder, string ftpFileName, string localFolder, string localFileName) Parameters ftpFolder string ftp目录 ftpFileName string ftp文件名 localFolder string 本地目录 localFileName string 本地文件名 Returns bool GetFtpClient() 得到FTP传输对象 public FtpClient GetFtpClient() Returns FtpClient GetList(string) 得到文件列表 public string[] GetList(string strPath) Parameters strPath string Returns string[] PutFile(string, string) 上传文件 public bool PutFile(string ftpFolder, string ftpFileName) Parameters ftpFolder string ftp目录 ftpFileName string ftp文件名 Returns bool"
  },
  "api/Tool.Utils.FtpHelper.html": {
    "href": "api/Tool.Utils.FtpHelper.html",
    "title": "Namespace Tool.Utils.FtpHelper | Tool.Net",
    "keywords": "Namespace Tool.Utils.FtpHelper Classes FTPHelper FTP帮助类（推荐使用:FluentFTP） FtpClient FTP 操作类客户端 FtpOperater FTP操作类 Enums FtpClient.TransferType 传输模式:二进制类型、ASCII类型"
  },
  "api/Tool.Utils.HashHelper.html": {
    "href": "api/Tool.Utils.HashHelper.html",
    "title": "Class HashHelper | Tool.Net",
    "keywords": "Class HashHelper Namespace Tool.Utils Assembly Tool.Net.dll 提供用于计算指定文件哈希值的方法 例如计算文件的MD5值: String hashMd5=HashHelper.ComputeMD5(\"MyFile.txt\"); 例如计算文件的CRC32值: String hashCrc32 = HashHelper.ComputeCRC32(\"MyFile.txt\"); 例如计算文件的SHA1值: String hashSha1 =HashHelper.ComputeSHA1(\"MyFile.txt\"); public sealed class HashHelper Inheritance object HashHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods ComputeCRC32(string) 计算指定文件的CRC32值 public static string ComputeCRC32(string fileName) Parameters fileName string 指定文件的完全限定名称 Returns string 返回值的字符串形式 ComputeMD5(string) 计算指定文件的MD5值 public static string ComputeMD5(string fileName) Parameters fileName string 指定文件的完全限定名称 Returns string 返回值的字符串形式 ComputeSHA1(string) 计算指定文件的SHA1值 public static string ComputeSHA1(string fileName) Parameters fileName string 指定文件的完全限定名称 Returns string 返回值的字符串形式"
  },
  "api/Tool.Utils.HttpHelpers.html": {
    "href": "api/Tool.Utils.HttpHelpers.html",
    "title": "Class HttpHelpers | Tool.Net",
    "keywords": "Class HttpHelpers Namespace Tool.Utils Assembly Tool.Net.dll 提供部分的API请求访问类 (内置调用接口 替换为 HttpClient) 注意此类下所有函数调用皆无异常抛出，但为了方便问题排查，增加异常相关日志 public class HttpHelpers Inheritance object HttpHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Fields LogFilePath 相关请求异常日志输出位置 public const string LogFilePath = \"Log/HttpHelpers/\" Field Value string Properties DefaultEncoding 默认编码格式 public static Encoding DefaultEncoding { get; set; } Property Value Encoding Timeout 等待毫秒 public static double Timeout { get; set; } Property Value double Exceptions ArgumentOutOfRangeException 指定的超时值小于或等于零，并且不是系统超时值。穿线。超时。无穷大跨度。 InvalidOperationException 已在当前实例上启动操作。 ObjectDisposedException 当前实例已被释放。 Methods CreateHttpRequestMessage(HttpMethod, string) 获取可用的连接 public static HttpRequestMessage CreateHttpRequestMessage(HttpMethod method, string url) Parameters method HttpMethod url string Returns HttpRequestMessage ~HttpHelpers() 自动回收 protected ~HttpHelpers() FormatData(string) 高效解析http表单类文本 public static IDictionary<string, string> FormatData(string query) Parameters query string 待解析的http表单值 Returns IDictionary<string, string> Get(string, Action<HttpRequestHeaders>) GET 方式获取响应流 public static Stream Get(string url, Action<HttpRequestHeaders> onheaders = null) Parameters url string onheaders Action<HttpRequestHeaders> Returns Stream GetAsync(string, Action<HttpRequestHeaders>) GET 方式获取响应流(异步获取) public static Task<Stream> GetAsync(string url, Action<HttpRequestHeaders> onheaders = null) Parameters url string onheaders Action<HttpRequestHeaders> Returns Task<Stream> GetJsonAsync<T>(string, Action<HttpRequestHeaders>) GET 方式获取响应流 返回实体 (异步获取) public static Task<T> GetJsonAsync<T>(string url, Action<HttpRequestHeaders> onheaders = null) Parameters url string onheaders Action<HttpRequestHeaders> Returns Task<T> Type Parameters T GetJson<T>(string, Action<HttpRequestHeaders>) GET 方式获取响应流 返回实体 public static T GetJson<T>(string url, Action<HttpRequestHeaders> onheaders = null) Parameters url string onheaders Action<HttpRequestHeaders> Returns T Type Parameters T GetString(string, Action<HttpRequestHeaders>) GET 方式获取响应流 返回字符串 public static string GetString(string url, Action<HttpRequestHeaders> onheaders = null) Parameters url string onheaders Action<HttpRequestHeaders> Returns string GetStringAsync(string, Action<HttpRequestHeaders>) GET 方式获取响应流 返回字符串 (异步获取) public static Task<string> GetStringAsync(string url, Action<HttpRequestHeaders> onheaders = null) Parameters url string onheaders Action<HttpRequestHeaders> Returns Task<string> HeadHttpCode(string, Action<HttpRequestHeaders>) HEAD 方式获取响应的状态 public static HttpStatusCode HeadHttpCode(string url, Action<HttpRequestHeaders> onheaders = null) Parameters url string onheaders Action<HttpRequestHeaders> Returns HttpStatusCode Post(string, IDictionary<string, string>, Action<HttpRequestHeaders>) POST 方式获取响应流 public static Stream Post(string url, IDictionary<string, string> data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IDictionary<string, string> onheaders Action<HttpRequestHeaders> Returns Stream Post(string, IEnumerable<KeyValuePair<string, string>>, Action<HttpRequestHeaders>) POST 方式获取响应流 public static Stream Post(string url, IEnumerable<KeyValuePair<string, string>> data, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IEnumerable<KeyValuePair<string, string>> onheaders Action<HttpRequestHeaders> Returns Stream PostAsync(string, IDictionary<string, string>, Action<HttpRequestHeaders>) POST 方式获取响应流(异步获取) public static Task<Stream> PostAsync(string url, IDictionary<string, string> data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IDictionary<string, string> onheaders Action<HttpRequestHeaders> Returns Task<Stream> PostAsync(string, IEnumerable<KeyValuePair<string, string>>, Action<HttpRequestHeaders>) POST 方式获取响应流(异步获取) public static Task<Stream> PostAsync(string url, IEnumerable<KeyValuePair<string, string>> data, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IEnumerable<KeyValuePair<string, string>> onheaders Action<HttpRequestHeaders> Returns Task<Stream> PostJsonAsync<T>(string, IDictionary<string, string>, Action<HttpRequestHeaders>) POST 方式获取响应流 返回实体 (异步获取) public static Task<T> PostJsonAsync<T>(string url, IDictionary<string, string> data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IDictionary<string, string> onheaders Action<HttpRequestHeaders> Returns Task<T> Type Parameters T PostJsonAsync<T>(string, string, Action<HttpRequestHeaders>) POST 方式获取响应流 返回实体 (异步获取) public static Task<T> PostJsonAsync<T>(string url, string data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data string onheaders Action<HttpRequestHeaders> Returns Task<T> Type Parameters T PostJson<T>(string, IDictionary<string, string>, Action<HttpRequestHeaders>) POST 方式获取响应流 返回实体 public static T PostJson<T>(string url, IDictionary<string, string> data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IDictionary<string, string> onheaders Action<HttpRequestHeaders> Returns T Type Parameters T PostJson<T>(string, string, Action<HttpRequestHeaders>) POST 方式获取响应流 返回实体 public static T PostJson<T>(string url, string data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data string onheaders Action<HttpRequestHeaders> Returns T Type Parameters T PostString(string, IDictionary<string, string>, Action<HttpRequestHeaders>) POST 方式获取响应流 返回字符串 public static string PostString(string url, IDictionary<string, string> data, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IDictionary<string, string> onheaders Action<HttpRequestHeaders> Returns string PostString(string, string, Action<HttpRequestHeaders>) POST 方式获取响应流 返回字符串 public static string PostString(string url, string data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data string 字符串拼接的数据 onheaders Action<HttpRequestHeaders> Returns string PostStringAsync(string, IDictionary<string, string>, Action<HttpRequestHeaders>) POST 方式获取响应流 返回字符串 (异步获取) public static Task<string> PostStringAsync(string url, IDictionary<string, string> data, Action<HttpRequestHeaders> onheaders = null) Parameters url string data IDictionary<string, string> onheaders Action<HttpRequestHeaders> Returns Task<string> PostStringAsync(string, string, Action<HttpRequestHeaders>) POST 方式获取响应流 返回字符串 (异步获取) public static Task<string> PostStringAsync(string url, string data = null, Action<HttpRequestHeaders> onheaders = null) Parameters url string data string onheaders Action<HttpRequestHeaders> Returns Task<string> QueryString(IDictionary<string, string>) 根据字典高效组装成以转义的字符串 public static string QueryString(IDictionary<string, string> data) Parameters data IDictionary<string, string> 字典对象 Returns string Send(HttpRequestMessage) 获取请求结果 public static HttpResponseMessage Send(HttpRequestMessage requestMessage) Parameters requestMessage HttpRequestMessage 请求信息 Returns HttpResponseMessage SendAsync(HttpRequestMessage) 异步获取请求结果 public static Task<HttpResponseMessage> SendAsync(HttpRequestMessage requestMessage) Parameters requestMessage HttpRequestMessage 请求信息 Returns Task<HttpResponseMessage>"
  },
  "api/Tool.Utils.IntPtrHelper.html": {
    "href": "api/Tool.Utils.IntPtrHelper.html",
    "title": "Class IntPtrHelper | Tool.Net",
    "keywords": "Class IntPtrHelper Namespace Tool.Utils Assembly Tool.Net.dll 关于内存地址读写的操作帮助类 public class IntPtrHelper Inheritance object IntPtrHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods GetPidByProcessName(string) 根据进程名称获取进程ID public static int GetPidByProcessName(string processName) Parameters processName string 进程名字 Returns int ReadMemoryValue(int, int) 读取内存中的值 public static int ReadMemoryValue(int baseAddress, int processId) Parameters baseAddress int 内存地址 processId int 进程ID Returns int ReadMemoryValue(int, string) 读取内存中的值 public static int ReadMemoryValue(int baseAddress, string processName) Parameters baseAddress int 内存地址 processName string 进程名 Returns int ReadMemoryValue(IntPtr, int) 读取内存中的值 public static int ReadMemoryValue(IntPtr baseAddress, int processId) Parameters baseAddress IntPtr 内存地址 processId int 进程ID Returns int ReadMemoryValue(IntPtr, string) 读取内存中的值 public static int ReadMemoryValue(IntPtr baseAddress, string processName) Parameters baseAddress IntPtr 内存地址 processName string 进程名 Returns int WriteMemoryValue(int, int, int) 将值写入指定内存地址中 public static void WriteMemoryValue(int baseAddress, int processId, int value) Parameters baseAddress int 内存地址 processId int 进程ID value int 写入的值 WriteMemoryValue(int, string, int) 将值写入指定内存地址中 public static void WriteMemoryValue(int baseAddress, string processName, int value) Parameters baseAddress int 内存地址 processName string 进程名 value int 写入的值 WriteMemoryValue(IntPtr, int, int) 将值写入指定内存地址中 public static void WriteMemoryValue(IntPtr baseAddress, int processId, int value) Parameters baseAddress IntPtr 内存地址 processId int 进程ID value int 写入的值 WriteMemoryValue(IntPtr, string, int) 将值写入指定内存地址中 public static void WriteMemoryValue(IntPtr baseAddress, string processName, int value) Parameters baseAddress IntPtr 内存地址 processName string 进程名 value int 写入的值"
  },
  "api/Tool.Utils.IocCore.html": {
    "href": "api/Tool.Utils.IocCore.html",
    "title": "Class IocCore | Tool.Net",
    "keywords": "Class IocCore Namespace Tool.Utils Assembly Tool.Net.dll 提供一个完全独立的 Ioc 容器 public class IocCore : IAsyncDisposable, IDisposable Inheritance object IocCore Implements IAsyncDisposable IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors IocCore() 初始化 public IocCore() Properties Provider 提供用于获取注入对象的服务 public IServiceProvider Provider { get; } Property Value IServiceProvider Services 提供用于添加对象服务 public IServiceCollection Services { get; } Property Value IServiceCollection Methods Build() 创建用于获取服务对象 调用该函数，将会释放掉原本的服务 public void Build() Dispose() 释放相关资源 public void Dispose() DisposeAsync() 异步释放相关资源 public ValueTask DisposeAsync() Returns ValueTask RemoveAll() 清空所有已注册的服务 public void RemoveAll()"
  },
  "api/Tool.Utils.IocHelper.html": {
    "href": "api/Tool.Utils.IocHelper.html",
    "title": "Class IocHelper | Tool.Net",
    "keywords": "Class IocHelper Namespace Tool.Utils Assembly Tool.Net.dll 用于提供全局支持的 TOC 对象 服务生命周期 在Microsoft依赖项注入框架中，我们可以使用三种生命周期注册服务，分别是单例（Singleton）、瞬时（Transient）、作用域（Scoped），在上面的代码中， 我使用了AddSingleton()来注册服务。 使用Singleton服务的优点是我们不会创建多个服务实例，只会创建一个实例，保存到DI容器中，直到程序退出，这不仅效率高，而且性能高，但是有一个要注意的点， 如果在多线程中使用了Singleton,要考虑线程安全的问题，保证它不会有冲突。 瞬时（Transient）和单例（Singleton）模式是相反的，每次使用时，DI容器都是创建一个新的实例。 作用域（Scoped），在一个作用域内，会使用同一个实例，像EF Core的DbContext上下文就被注册为作用域服务。 public class IocHelper Inheritance object IocHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties IocCore 提供全局，使用的 依赖注入 服务 public static IocCore IocCore { get; } Property Value IocCore Methods NewIoc() 获取一个全新的 IOC 容器对象 public static IocCore NewIoc() Returns IocCore IOC 容器对象"
  },
  "api/Tool.Utils.JsonConverterHelper.html": {
    "href": "api/Tool.Utils.JsonConverterHelper.html",
    "title": "Class JsonConverterHelper | Tool.Net",
    "keywords": "Class JsonConverterHelper Namespace Tool.Utils Assembly Tool.Net.dll 获取 系统中可用的 Json 自定义转换对象 public class JsonConverterHelper Inheritance object JsonConverterHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods GetDBNullConverter() DBNull 将 {} 改Null输出 public static DBNullConverter GetDBNullConverter() Returns DBNullConverter DateConverter GetDateConverter(string) 时间类型格式对象 public static DateConverter GetDateConverter(string format = \"yyyy-MM-dd HH:mm:ss.fff\") Parameters format string 标准或自定义日期和时间格式字符串。 Returns DateConverter DateConverter"
  },
  "api/Tool.Utils.JsonHelper.html": {
    "href": "api/Tool.Utils.JsonHelper.html",
    "title": "Class JsonHelper | Tool.Net",
    "keywords": "Class JsonHelper Namespace Tool.Utils Assembly Tool.Net.dll 对 JsonSerializer 的拓展类 public sealed class JsonHelper Inheritance object JsonHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods GetArray(ArrayEnumerator) 将 JsonElement 原型对象 丢入格式成 数组 public static ArrayList GetArray(JsonElement.ArrayEnumerator element) Parameters element JsonElement.ArrayEnumerator 原型对象 Returns ArrayList 必然是数组结果 GetObject(ObjectEnumerator) 将 JsonElement 原型对象 丢入格式成 键值对 public static Dictionary<string, object> GetObject(JsonElement.ObjectEnumerator element) Parameters element JsonElement.ObjectEnumerator 原型对象 Returns Dictionary<string, object> 必然是键值对的结果 GetReturn(JsonElement) 将 JsonElement 原型对象 丢入格式成任意实际结果 public static object GetReturn(JsonElement element) Parameters element JsonElement 原型对象 Returns object 任意实际结果"
  },
  "api/Tool.Utils.JsonVar.html": {
    "href": "api/Tool.Utils.JsonVar.html",
    "title": "Struct JsonVar | Tool.Net",
    "keywords": "Struct JsonVar Namespace Tool.Utils Assembly Tool.Net.dll 一种获取 Json 格式数据的实现 public readonly struct JsonVar Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors JsonVar(object) 添加任意的数据，无规则。 public JsonVar(object data) Parameters data object 一类数据结构 Properties Count 当前 层 可能存在的 集合 长度 （string 会显示 字符长度） public int Count { get; } Property Value int Data 当前 Json 的数据结构 public object Data { get; } Property Value object this[int] 通过下标获取值 public JsonVar this[int i] { get; } Parameters i int 下标 Property Value JsonVar this[string] 通过键名获取值 public JsonVar this[string name] { get; } Parameters name string 键名 Property Value JsonVar ValueKind 大概确定 Json 数据的类型 public JsonValueKind ValueKind { get; } Property Value JsonValueKind Methods GetJson() 获取当前对象的Json字符串 public string GetJson() Returns string GetVar<T>() 将对象还原成 特定值 public T GetVar<T>() Returns T 得到的值 Type Parameters T 转换的值 ToString() 根据实际类型返回特定内容 public override string ToString() Returns string 结果 TryGet(out JsonVar, params object[]) 获取当前Json集合下可能存在的数据信息 public bool TryGet(out JsonVar jsonVar, params object[] keys) Parameters jsonVar JsonVar 返回存在的结果 keys object[] 查找的Key和下标 Returns bool bool Operators implicit operator JsonVar(ArrayList) ArrayList public static implicit operator JsonVar(ArrayList value) Parameters value ArrayList Returns JsonVar implicit operator JsonVar(Dictionary<string, object>) Dictionary<TKey, TValue> public static implicit operator JsonVar(Dictionary<string, object> value) Parameters value Dictionary<string, object> Returns JsonVar implicit operator JsonVar(string) string public static implicit operator JsonVar(string value) Parameters value string Returns JsonVar implicit operator bool(JsonVar) bool public static implicit operator bool(JsonVar value) Parameters value JsonVar Returns bool implicit operator ArrayList(JsonVar) ArrayList public static implicit operator ArrayList(JsonVar value) Parameters value JsonVar Returns ArrayList implicit operator Dictionary<string, object>(JsonVar) Dictionary<TKey, TValue> public static implicit operator Dictionary<string, object>(JsonVar value) Parameters value JsonVar Returns Dictionary<string, object> implicit operator decimal(JsonVar) decimal public static implicit operator decimal(JsonVar value) Parameters value JsonVar Returns decimal implicit operator double(JsonVar) double public static implicit operator double(JsonVar value) Parameters value JsonVar Returns double implicit operator int(JsonVar) int public static implicit operator int(JsonVar value) Parameters value JsonVar Returns int implicit operator long(JsonVar) long public static implicit operator long(JsonVar value) Parameters value JsonVar Returns long implicit operator string(JsonVar) string public static implicit operator string(JsonVar value) Parameters value JsonVar Returns string"
  },
  "api/Tool.Utils.Log.html": {
    "href": "api/Tool.Utils.Log.html",
    "title": "Class Log | Tool.Net",
    "keywords": "Class Log Namespace Tool.Utils Assembly Tool.Net.dll 日志工具类 public sealed class Log Inheritance object Log Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields LogFilePath public const string LogFilePath = \"Log\\\\\" Field Value string Properties IgnoreMethodName 用于打印异常信息时，忽略掉堆栈中的部分方法。 public HashSet<string> IgnoreMethodName { get; } Property Value HashSet<string> Instance 实现单例,不建议直接调用。 public static Log Instance { get; } Property Value Log IsAlive 日志任务是否已经启动了（没有启动时 false，启动后发生意外时 false， 其余时候一直都是 true ） public bool IsAlive { get; } Property Value bool IsEnd 日志结束（可以获取日志是否出现了，异常导致终止） public static bool IsEnd { get; } Property Value bool IsMoveNext 是否在方法名为《MoveNext》时验证是否是异步函数生成，获取显示实际名称 public bool IsMoveNext { get; set; } Property Value bool Methods Debug(string) 一般日志输出 public static void Debug(string msg) Parameters msg string 日志内容 Debug(string, Exception) 一般日志输出 public static void Debug(string msg, Exception ex) Parameters msg string 日志内容 ex Exception 异常对象 Debug(string, Exception, string) 一般日志输出 public static void Debug(string msg, Exception ex, string LogFilePath) Parameters msg string 日志内容 ex Exception 异常对象 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Debug(string, string) 一般日志输出 public static void Debug(string msg, string LogFilePath) Parameters msg string 日志内容 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 EnqueueMessage(string, FlashLogLevel, Exception, string) 写日志 public void EnqueueMessage(string message, FlashLogLevel level, Exception ex = null, string logFilePath = null) Parameters message string 日志文本 level FlashLogLevel 等级 ex Exception Exception logFilePath string 提供的路径可以是相对路径也可以是绝对路径 Error(string) 异常错误 public static void Error(string msg) Parameters msg string 日志内容 Error(string, Exception) 异常错误 public static void Error(string msg, Exception ex) Parameters msg string 日志内容 ex Exception 异常对象 Error(string, Exception, string) 异常错误 public static void Error(string msg, Exception ex, string LogFilePath) Parameters msg string 日志内容 ex Exception 异常对象 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Error(string, string) 异常错误 public static void Error(string msg, string LogFilePath) Parameters msg string 日志内容 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Fatal(string) 致命的错误 public static void Fatal(string msg) Parameters msg string 日志内容 Fatal(string, Exception) 致命的错误 public static void Fatal(string msg, Exception ex) Parameters msg string 日志内容 ex Exception 异常对象 Fatal(string, Exception, string) 致命的错误 public static void Fatal(string msg, Exception ex, string LogFilePath) Parameters msg string 日志内容 ex Exception 异常对象 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Fatal(string, string) 致命的错误 public static void Fatal(string msg, string LogFilePath) Parameters msg string 日志内容 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Info(string) 信息日志 public static void Info(string msg) Parameters msg string 日志内容 Info(string, Exception) 信息日志 public static void Info(string msg, Exception ex) Parameters msg string 日志内容 ex Exception 异常对象 Info(string, Exception, string) 信息日志 public static void Info(string msg, Exception ex, string LogFilePath) Parameters msg string 日志内容 ex Exception 异常对象 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Info(string, string) 信息日志 public static void Info(string msg, string LogFilePath) Parameters msg string 日志内容 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Warn(string) 警告日志 public static void Warn(string msg) Parameters msg string 日志内容 Warn(string, Exception) 警告日志 public static void Warn(string msg, Exception ex) Parameters msg string 日志内容 ex Exception 异常对象 Warn(string, Exception, string) 警告日志 public static void Warn(string msg, Exception ex, string LogFilePath) Parameters msg string 日志内容 ex Exception 异常对象 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径 Warn(string, string) 警告日志 public static void Warn(string msg, string LogFilePath) Parameters msg string 日志内容 LogFilePath string 提供的路径可以是相对路径也可以是绝对路径"
  },
  "api/Tool.Utils.MemorySegment-1.html": {
    "href": "api/Tool.Utils.MemorySegment-1.html",
    "title": "Class MemorySegment<T> | Tool.Net",
    "keywords": "Class MemorySegment<T> Namespace Tool.Utils Assembly Tool.Net.dll 提供内存连续模型 public sealed class MemorySegment<T> : ReadOnlySequenceSegment<T> Type Parameters T 类型 Inheritance object ReadOnlySequenceSegment<T> MemorySegment<T> Inherited Members ReadOnlySequenceSegment<T>.Memory ReadOnlySequenceSegment<T>.Next ReadOnlySequenceSegment<T>.RunningIndex object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors MemorySegment() 创建单一连续内存 public MemorySegment() MemorySegment(in ReadOnlyMemory<T>) 创建单一连续内存 public MemorySegment(in ReadOnlyMemory<T> memory) Parameters memory ReadOnlyMemory<T> 内存 MemorySegment(T[]) 创建单一连续内存 public MemorySegment(T[] array) Parameters array T[] 内存 MemorySegment(T[], int, int) 创建单一连续内存 public MemorySegment(T[] array, int start, int length) Parameters array T[] 内存 start int 开始读取位置 length int 读取长度 Properties EndNext 获取节点的最底层 public MemorySegment<T> EndNext { get; } Property Value MemorySegment<T> IsEmpty 获取连续内存是否为空 public bool IsEmpty { get; } Property Value bool Length 获取连续内存的总长度 public int Length { get; } Property Value int LongLength 获取连续内存的总长度 public long LongLength { get; } Property Value long Rank 层级数 public int Rank { get; } Property Value int Methods Append(in ReadOnlyMemory<T>) 添加连接的内存数据 public MemorySegment<T> Append(in ReadOnlyMemory<T> memory) Parameters memory ReadOnlyMemory<T> 内存 Returns MemorySegment<T> 新的连续内存 Append(T[]) 添加连接的内存数据 public MemorySegment<T> Append(T[] memory) Parameters memory T[] 内存 Returns MemorySegment<T> 新的连续内存 Copy(in ReadOnlyMemory<T>) 复制一份内存到连续内存中 public void Copy(in ReadOnlyMemory<T> memory) Parameters memory ReadOnlyMemory<T> 内存 Empty() 清空当前连续内存 public void Empty() ToReadOnlySequence() 创建可读的连续ReadOnlySequence<T>（顺序串联） public ReadOnlySequence<T> ToReadOnlySequence() Returns ReadOnlySequence<T> 返回ReadOnlySequence<T> ToReadOnlySequence(int, int) 创建可读的连续ReadOnlySequence<T>（顺序串联） public ReadOnlySequence<T> ToReadOnlySequence(int startIndex, int endIndex) Parameters startIndex int 开始位置 endIndex int 结尾位置 Returns ReadOnlySequence<T> 返回ReadOnlySequence<T> ToString() 获取相关描述 public override string ToString() Returns string"
  },
  "api/Tool.Utils.ObjectPool-1.html": {
    "href": "api/Tool.Utils.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Tool.Net",
    "keywords": "Class ObjectPool<T> Namespace Tool.Utils Assembly Tool.Net.dll 自定义的公共对象（重用模型） public class ObjectPool<T> : IDisposable where T : class, IDisposable, new() Type Parameters T Inheritance object ObjectPool<T> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ObjectPool() 初始化 public ObjectPool() ObjectPool(int) 初始化 public ObjectPool(int MaximumRetained) Parameters MaximumRetained int 默认保留最大容量 Properties MaximumRetained The maximum number of objects to retain in the pool. public int MaximumRetained { get; } Property Value int Methods Dispose() 释放资源 public void Dispose() Get() 获取可用的对象 public T Get() Returns T 返回对象 Return(T) 归还对象给管理器 public void Return(T obj) Parameters obj T 对象"
  },
  "api/Tool.Utils.Other.CodeTimer.html": {
    "href": "api/Tool.Utils.Other.CodeTimer.html",
    "title": "Class CodeTimer | Tool.Net",
    "keywords": "Class CodeTimer Namespace Tool.Utils.Other Assembly Tool.Net.dll 该类 CodeTimer 有助于在控制台方便时间码测试。 public static class CodeTimer Inheritance object CodeTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Time(int, Action) Times 测试。 public static string Time(int iteration, Action action) Parameters iteration int 迭代运行指定的行动。 action Action 操作运行。 Returns string Time(int, Action<int>) Times 测试。 public static string Time(int iteration, Action<int> action) Parameters iteration int 迭代运行指定的行动。 action Action<int> 操作运行。 Returns string Time(string, int, Action) Times 测试。 public static string Time(string name, int iteration, Action action) Parameters name string 当前测试的名称。 iteration int 迭代运行指定的行动。 action Action 操作运行。 Returns string Time(string, int, Action<int>) Times 测试。 public static string Time(string name, int iteration, Action<int> action) Parameters name string 当前测试的名称。 iteration int 迭代运行指定的行动。 action Action<int> 操作运行。 Returns string Time(string, int, Action<int>, bool) Times 测试。 public static string Time(string name, int iteration, Action<int> action, bool averageTime = false) Parameters name string 当前测试的名称。 iteration int 迭代运行指定的行动。可以理解为循环几次执行的方法 action Action<int> 操作运行。 averageTime bool 等于运行时间除以迭代数量 Returns string"
  },
  "api/Tool.Utils.Other.ConvertHzToPy.html": {
    "href": "api/Tool.Utils.Other.ConvertHzToPy.html",
    "title": "Class ConvertHzToPy | Tool.Net",
    "keywords": "Class ConvertHzToPy Namespace Tool.Utils.Other Assembly Tool.Net.dll 是ConvertHzToPzGb2312类的升级版 public class ConvertHzToPy Inheritance object ConvertHzToPy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ConvertHzToPy() 无参构造 public ConvertHzToPy() Methods Convert(string) 获取拼音 public static string Convert(string str) Parameters str string 汉字 Returns string GetShortPY(string) 获取拼音首字母 public static string GetShortPY(string str) Parameters str string 汉字 Returns string"
  },
  "api/Tool.Utils.Other.ConvertHzToPzGb2312.html": {
    "href": "api/Tool.Utils.Other.ConvertHzToPzGb2312.html",
    "title": "Class ConvertHzToPzGb2312 | Tool.Net",
    "keywords": "Class ConvertHzToPzGb2312 Namespace Tool.Utils.Other Assembly Tool.Net.dll 文字转拼音类·ConvertHzToPz_Gb2312 public class ConvertHzToPzGb2312 Inheritance object ConvertHzToPzGb2312 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ConvertHzToPzGb2312() 无参构造 public ConvertHzToPzGb2312() Methods Convert(string) 将字符串中的中文转成拼音 public static string Convert(string str) Parameters str string 字符串 Returns string 返回完整的拼音"
  },
  "api/Tool.Utils.Other.DllInjectionResult.html": {
    "href": "api/Tool.Utils.Other.DllInjectionResult.html",
    "title": "Enum DllInjectionResult | Tool.Net",
    "keywords": "Enum DllInjectionResult Namespace Tool.Utils.Other Assembly Tool.Net.dll 进程状态 public enum DllInjectionResult Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields DllNotFound = 0 未找到指定的DLL路径 GameProcessNotFound = 1 未找到指定名称的进程 InjectionFailed = 2 注入失败 Success = 3 注入成功 Remarks 代码由逆血提供支持"
  },
  "api/Tool.Utils.Other.DllInjector.html": {
    "href": "api/Tool.Utils.Other.DllInjector.html",
    "title": "Class DllInjector | Tool.Net",
    "keywords": "Class DllInjector Namespace Tool.Utils.Other Assembly Tool.Net.dll DLL注入类 public sealed class DllInjector Inheritance object DllInjector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties GetInstance 实例化当前类 public static DllInjector GetInstance { get; } Property Value DllInjector Methods Inject(string, string) 注入的DLL public DllInjectionResult Inject(string sProcName, string sDllPath) Parameters sProcName string 进程名称 sDllPath string 需要注入的DLL路径 Returns DllInjectionResult"
  },
  "api/Tool.Utils.Other.IniFile.html": {
    "href": "api/Tool.Utils.Other.IniFile.html",
    "title": "Class IniFile | Tool.Net",
    "keywords": "Class IniFile Namespace Tool.Utils.Other Assembly Tool.Net.dll INI文件读写类。 Copyright (C) Maticsoft public class IniFile Inheritance object IniFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors IniFile(string) 有参构造，ini文件的绝对路径 public IniFile(string INIPath) Parameters INIPath string Fields path INI文件的路径 public string path Field Value string Methods ClearAllSection() 删除ini文件下所有段落 public void ClearAllSection() ClearSection(string) 删除ini文件下personal段落下的所有键 public void ClearSection(string Section) Parameters Section string IniReadValue(string, string) 读取INI文件 public string IniReadValue(string Section, string Key) Parameters Section string 欲在其中查找条目的小节名称。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载这个ini文件所有小节的列表。 Key string 欲获取的项名或条目名。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载指定小节所有项的列表 Returns string IniReadValues(string, string) 读取INI文件 public byte[] IniReadValues(string Section, string Key) Parameters Section string 欲在其中查找条目的小节名称。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载这个ini文件所有小节的列表。 Key string 欲获取的项名或条目名。这个字串不区分大小写。如设为vbNullString，就在lpReturnedString缓冲区内装载指定小节所有项的列表 Returns byte[] IniWriteValue(string, string, string) 写INI文件 public void IniWriteValue(string Section, string Key, string Value) Parameters Section string 要在其中写入新字串的小节名称。这个字串不区分大小写 Key string 要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项 Value string 指定为这个项写入的字串值。用vbNullString表示删除这个项现有的字串"
  },
  "api/Tool.Utils.Other.Rmb.html": {
    "href": "api/Tool.Utils.Other.Rmb.html",
    "title": "Class Rmb | Tool.Net",
    "keywords": "Class Rmb Namespace Tool.Utils.Other Assembly Tool.Net.dll Rmb 的摘要说明。 用于转换人民币大小金额 public class Rmb Inheritance object Rmb Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods CmycurD(decimal) 转换人民币大小金额 public static string CmycurD(decimal num) Parameters num decimal 金额 Returns string 返回大写形式 CmycurD(string) 一个重载，将字符串先转换成数字在调用CmycurD(decimal num) public static string CmycurD(string numstr) Parameters numstr string 用户输入的金额，字符串形式未转成decimal Returns string"
  },
  "api/Tool.Utils.Other.StrToPinyin.html": {
    "href": "api/Tool.Utils.Other.StrToPinyin.html",
    "title": "Class StrToPinyin | Tool.Net",
    "keywords": "Class StrToPinyin Namespace Tool.Utils.Other Assembly Tool.Net.dll 获取汉子首字母类·StrToPinyin public class StrToPinyin Inheritance object StrToPinyin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors StrToPinyin() 无参构造 public StrToPinyin() Methods GetChineseSpell(string) 获得一个字符串的汉语拼音码 (首字母) public static string GetChineseSpell(string strText) Parameters strText string 字符串 Returns string 汉语拼音码,该字符串只包含大写的英文字母"
  },
  "api/Tool.Utils.Other.html": {
    "href": "api/Tool.Utils.Other.html",
    "title": "Namespace Tool.Utils.Other | Tool.Net",
    "keywords": "Namespace Tool.Utils.Other Classes CodeTimer 该类 CodeTimer 有助于在控制台方便时间码测试。 ConvertHzToPy 是ConvertHzToPzGb2312类的升级版 ConvertHzToPzGb2312 文字转拼音类·ConvertHzToPz_Gb2312 DllInjector DLL注入类 IniFile INI文件读写类。 Copyright (C) Maticsoft Rmb Rmb 的摘要说明。 用于转换人民币大小金额 StrToPinyin 获取汉子首字母类·StrToPinyin Enums DllInjectionResult 进程状态"
  },
  "api/Tool.Utils.ReflectionHelper.html": {
    "href": "api/Tool.Utils.ReflectionHelper.html",
    "title": "Class ReflectionHelper | Tool.Net",
    "keywords": "Class ReflectionHelper Namespace Tool.Utils Assembly Tool.Net.dll 获取Type 对象的封装类 public class ReflectionHelper Inheritance object ReflectionHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods GetType(string) 根据dll引用名索引dll的type （例如写法：Tool,Tool.Utils.ReflectionHelper） public static Type GetType(string typeAndAssName) Parameters typeAndAssName string 引用的绝对路径 Returns Type GetType(string, string) 获取当前项目进程中的dll public static Type GetType(string typeFullName, string assemblyName) Parameters typeFullName string 引用的绝对路径 assemblyName string dll名称 Returns Type"
  },
  "api/Tool.Utils.TaskHelper.TaskAsyncHelper.html": {
    "href": "api/Tool.Utils.TaskHelper.TaskAsyncHelper.html",
    "title": "Class TaskAsyncHelper | Tool.Net",
    "keywords": "Class TaskAsyncHelper Namespace Tool.Utils.TaskHelper Assembly Tool.Net.dll 实现异步Task对象的异步实现类 public static class TaskAsyncHelper Inheritance object TaskAsyncHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BeginTask(Func<Task>, AsyncCallback, object) 将一个异步任务对象转换成IAsyncResult对象 public static IAsyncResult BeginTask(Func<Task> taskFunc, AsyncCallback callback, object state) Parameters taskFunc Func<Task> 一个异步对象 callback AsyncCallback 异步完成时使用的回调对象 state object 附带的数据 Returns IAsyncResult 返回IAsyncResult EndTask(IAsyncResult) 用于结束异步完成任务 public static void EndTask(IAsyncResult ar) Parameters ar IAsyncResult 开始任务时的IAsyncResult对象"
  },
  "api/Tool.Utils.TaskHelper.html": {
    "href": "api/Tool.Utils.TaskHelper.html",
    "title": "Namespace Tool.Utils.TaskHelper | Tool.Net",
    "keywords": "Namespace Tool.Utils.TaskHelper Classes TaskAsyncHelper 实现异步Task对象的异步实现类"
  },
  "api/Tool.Utils.TextUtility.html": {
    "href": "api/Tool.Utils.TextUtility.html",
    "title": "Class TextUtility | Tool.Net",
    "keywords": "Class TextUtility Namespace Tool.Utils Assembly Tool.Net.dll 提供技术支持的类库 public class TextUtility Inheritance object TextUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods AddLast(string, string) 追加字符串 public static string AddLast(string originalVal, string lastStr) Parameters originalVal string 原始字符串 lastStr string 追加字符串 Returns string CreateAuthStr(int) 创建身份验证的秘钥 public static string CreateAuthStr(int len) Parameters len int 长度 Returns string CreateAuthStr(int, bool) 创建身份验证的秘钥 public static string CreateAuthStr(int len, bool onlyNum) Parameters len int 长度 onlyNum bool 复杂强度 Returns string CreateRandom(int, bool, bool, bool, bool, string) 创建身份验证的秘钥 public static string CreateRandom(int length, bool isuseNum, bool isuseLow, bool isuseUpp, bool isuseSpe, string custom) Parameters length int isuseNum bool 带数字 isuseLow bool 带字母小写 isuseUpp bool 带字母大写 isuseSpe bool 带上其他符号 custom string 自带字符串 Returns string CreateRandomLowercase(int) 创建随机小写 public static string CreateRandomLowercase(int len) Parameters len int 长度 Returns string CreateRandomNum(int) 创建随机数 public static string CreateRandomNum(int len) Parameters len int 长度 Returns string CreateRandomNum2(int) 创建随机数 public static string CreateRandomNum2(int len) Parameters len int 长度 Returns string CreateTemporaryPassword(int) 创建临时密码 public static string CreateTemporaryPassword(int length) Parameters length int 长度 Returns string CutLeft(string, int) 将字符串从左边开始删除 public static string CutLeft(string originalVal, int cutLength) Parameters originalVal string 字符串 cutLength int 从左开始删除几位 Returns string CutRight(string, int) 将字符串从右边开始删除 public static string CutRight(string originalVal, int cutLength) Parameters originalVal string 字符串 cutLength int 从右开始删除几位 Returns string CutString(string, int) 减少字符串数量 public static string CutString(string originalVal, int startIndex) Parameters originalVal string 字符串 startIndex int 从第几位开始 Returns string CutString(string, int, int) 减少字符串数量 public static string CutString(string originalVal, int startIndex, int cutLength) Parameters originalVal string 字符串 startIndex int 从第几位开始 cutLength int 到第几位结束 Returns string CutStringProlongSymbol(string, int) 切割字符串 public static string CutStringProlongSymbol(string originalVal, int cutLength) Parameters originalVal string 字符串 cutLength int 去掉几位 Returns string CutStringProlongSymbol(string, int, string) 切割字符串加上延长符号 public static string CutStringProlongSymbol(string originalVal, int cutLength, string prolongSymbol) Parameters originalVal string 字符串 cutLength int 去掉几位 prolongSymbol string 延长符号 Returns string CutStringTitle(object, int) 减少字符串标题 public static string CutStringTitle(object content, int cutLength) Parameters content object 字符串标题 cutLength int 减少几位 Returns string CutUrlReturnPath(string) 取出网址中的域名。 public static string CutUrlReturnPath(string url) Parameters url string 字符串 Returns string DiffDateAndTime(object, object) 日期和时间差异 public static string[] DiffDateAndTime(object todate, object fodate) Parameters todate object 开始日期 fodate object 结束日期 Returns string[] DiffDateAndTime(object, object, string, string, string, string, string, string) 日期和时间差异 public static string DiffDateAndTime(object todate, object fodate, string v1, string v2, string v3, string v4, string v5, string v6) Parameters todate object 开始日期 fodate object 结束日期 v1 string v2 string v3 string v4 string v5 string v6 string Returns string DiffDateDays(DateTime) 差异日期天数 public static int DiffDateDays(DateTime oneDateTime) Parameters oneDateTime DateTime 时间对象 Returns int DiffDateDays(string) 差异日期天数 public static int DiffDateDays(string oneDateTime) Parameters oneDateTime string 时间字符串 Returns int EmailEncode(string) 电子邮件编码 public static string EmailEncode(string originalStr) Parameters originalStr string 电子邮件字符串 Returns string EmptyTrimOrNull(string) 验证字符串是否为空，或是NULl，\"\"，空格 public static bool EmptyTrimOrNull(string text) Parameters text string Returns bool FormatDateSpan(object) 根据时间对象返回字符串的大概信息（例如：1年前，1月前等等） public static string FormatDateSpan(object dateSpan) Parameters dateSpan object 时间对象 Returns string FormatDateTime(DateTime, int) 几种时间格式 public static string FormatDateTime(DateTime oneDateVal, int formatType) Parameters oneDateVal DateTime 时间对象 formatType int 根据ID返回指定的类型 Returns string FormatDateTime(string, int) 格式日期时间 public static string FormatDateTime(string oneDateVal, int formatType) Parameters oneDateVal string 一个日期值 formatType int 格式日期 Returns string FormatIP(string, int) 格式的IP public static string FormatIP(string ip, int fields) Parameters ip string ip地址 fields int 选择格式类型 Returns string FormatMoney(decimal) 设置货币格式 public static string FormatMoney(decimal money) Parameters money decimal 货币数量 Returns string FormatSecondSpan(long) 根据时间戳返回 天时分秒 public static string FormatSecondSpan(long second) Parameters second long Returns string GetDateTimeByDays(int) 返回指定天数的时间 public static DateTime GetDateTimeByDays(int days) Parameters days int Returns DateTime GetDateTimeLongString() 获取当前日期时间长字符串 public static string GetDateTimeLongString() Returns string GetDateTimeLongString(string) 获取当前日期时间长字符串 public static string GetDateTimeLongString(string prefix) Parameters prefix string 前缀 Returns string GetDaysDate(DateTime) 返回相隔天数 public static int GetDaysDate(DateTime date) Parameters date DateTime Returns int GetEmailHostName(string) 获取电子邮件主机名 public static string GetEmailHostName(string strEmail) Parameters strEmail string 电子邮件字符串 Returns string GetFullPath(string) 根据当前输入的相对于项目的路径返回绝对路径 public static string GetFullPath(string strPath) Parameters strPath string 相对路径 Returns string GetNewSeed() 获取新种子 public static int GetNewSeed() Returns int InArray(string, string, string) 验证一个字符串数组里面是否包含一个字符串 public static bool InArray(string matchStr, string originalStr, string separator) Parameters matchStr string 一个字符串 originalStr string 分割字符 separator string 可以被分割字符分割的字符串 Returns bool 返回状态 InArray(string, string, string, bool) 在数组中 public static bool InArray(string matchStr, string strArray, string separator, bool ignoreCase) Parameters matchStr string 匹配字符串 strArray string 字符串数组 separator string 分离器 ignoreCase bool 是否忽略大小写 Returns bool InArray(string, string[]) 验证一个字符串数组里面是否包含一个字符串 public static bool InArray(string matchStr, string[] strArray) Parameters matchStr string 一个字符串 strArray string[] 字符串数组 Returns bool 返回状态 InArray(string, string[], bool) 在数组中 public static bool InArray(string matchStr, string[] strArray, bool ignoreCase) Parameters matchStr string 匹配字符串 strArray string[] 字符串数组 ignoreCase bool 是否忽略大小写 Returns bool InArrayIndexOf(string, string[]) 在数组索引中 public static int InArrayIndexOf(string originalStr, string[] strArray) Parameters originalStr string 原始字符串 strArray string[] 字符串数组 Returns int InArrayIndexOf(string, string[], bool) 在数组索引中 public static int InArrayIndexOf(string originalStr, string[] strArray, bool ignoreCase) Parameters originalStr string 原始字符串 strArray string[] 字符串数组 ignoreCase bool 是否忽略大小写 Returns int InIPArray(string, string[]) 在IP数组中是否包含该IP public static bool InIPArray(string ip, string[] ipArray) Parameters ip string 验证IP ipArray string[] IP集合 Returns bool IpAddressInRange(string, string, string) 判断IP地址在不在某个IP地址段（仅支持IPV4） public static bool IpAddressInRange(string input, string begin, string ends) Parameters input string 需要判断的IP地址 begin string 起始地址 ends string 结束地址 Returns bool IsPrivateNetwork(IPAddress) 根据传入ipv4地址，检测是否是局域网IP public static bool IsPrivateNetwork(IPAddress ipv4Address) Parameters ipv4Address IPAddress ipv4地址 Returns bool true/false IsPrivateNetwork(string) 根据传入ipv4地址，检测是否是局域网IP public static bool IsPrivateNetwork(string ipv4Address) Parameters ipv4Address string ipv4地址 Returns bool true/false JavaScriptEncode(object) JavaScript编码 public static string JavaScriptEncode(object obj) Parameters obj object 原始字符串 Returns string JavaScriptEncode(string) JavaScript编码 public static string JavaScriptEncode(string originalStr) Parameters originalStr string 原始字符串 Returns string Join(string, params string[]) 等同于Join方法，就是增加了验证 public static string Join(string separator, params string[] value) Parameters separator string value string[] Returns string JoinString(params string[]) 等同于Join方法，就是增加了验证 public static string JoinString(params string[] value) Parameters value string[] Returns string Length(string) 获取字符串长度 public static int Length(string originalVal) Parameters originalVal string Returns int RegexReplaceTags(string, string, params object[]) 正则替换标记 public static string RegexReplaceTags(string originalStr, string specialChares, params object[] entityClasses) Parameters originalStr string 原始字符串 specialChares string 特殊字符 entityClasses object[] 实体类 Returns string RepeatStr(string, int) 感觉有问题，可以自己玩一下 public static string RepeatStr(string repeatStr, int repeatCount) Parameters repeatStr string repeatCount int Returns string ReplaceCnChar(string) 移除掉字符串中所有的中文 public static string ReplaceCnChar(string originalVal) Parameters originalVal string Returns string ReplaceLuceneSpecialChar(string) 移除字符串中存在的所有符号 public static string ReplaceLuceneSpecialChar(string originalVal) Parameters originalVal string Returns string ReplaceStrUseSC(string, StringCollection) 替换字符串使用字符串数组 public static string ReplaceStrUseSC(string originalStr, StringCollection sc) Parameters originalStr string 原始字符串 sc StringCollection 要替换字符串数组 Returns string ReplaceStrUseSC(string, string[]) 替换字符串使用字符串数组 public static string ReplaceStrUseSC(string originalStr, string[] sc) Parameters originalStr string 原始字符串 sc string[] 要替换字符串数组 Returns string ReplaceStrUseStr(string, string, string) 替换字符串，使用其他字符串代替 public static string ReplaceStrUseStr(string originalStr, string replacedStr, string replaceStr) Parameters originalStr string 原始字符串 replacedStr string 要替换字符串 replaceStr string 替换为的字符串 Returns string SplitStrArray(string, string) 拆分成字符串数组 public static string[] SplitStrArray(string originalStr, string separator) Parameters originalStr string 原始字符串 separator string 分离器 Returns string[] SplitStrUseLines(string, int) 拆分字符串使用行 public static string SplitStrUseLines(string originalContent, int splitLines) Parameters originalContent string 原始内容 splitLines int 拆分线条 Returns string SplitStrUseStr(string, string) 拆分字符串使用 例如：123456，SplitStrUseStr(\"123456\",\".\") = .1.2.3.4.5.6. public static string SplitStrUseStr(string originalStr, string separator) Parameters originalStr string 原字符 separator string 分离器 Returns string SqlEncode(string) SQL编码 public static string SqlEncode(string strSQL) Parameters strSQL string 原本SQL Returns string TextDecode(string) 文本解码 public static string TextDecode(string originalStr) Parameters originalStr string 原始字符 Returns string TextEncode(string) 文本编码 public static string TextEncode(string originalStr) Parameters originalStr string 原始字符 Returns string TransformFirstToLower(string) 首字母转换 小写 public static string TransformFirstToLower(string originalVal) Parameters originalVal string 原始值 Returns string TransformFirstToUpper(string) 首字母转换 大写 public static string TransformFirstToUpper(string originalVal) Parameters originalVal string 原始值 Returns string"
  },
  "api/Tool.Utils.ThreadQueue.ActionLock.html": {
    "href": "api/Tool.Utils.ThreadQueue.ActionLock.html",
    "title": "Class ActionLock | Tool.Net",
    "keywords": "Class ActionLock Namespace Tool.Utils.ThreadQueue Assembly Tool.Net.dll 一个公共锁 public class ActionLock Inheritance object ActionLock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties WaitTimeout 锁定时长最大限制 （毫秒） public static int WaitTimeout { get; set; } Property Value int Methods End() 解锁 public static bool End() Returns bool 返回是否成功 Start() 上锁 public static bool Start() Returns bool 返回是否成功"
  },
  "api/Tool.Utils.ThreadQueue.ActionQueue-2.html": {
    "href": "api/Tool.Utils.ThreadQueue.ActionQueue-2.html",
    "title": "Class ActionQueue<T, TResult> | Tool.Net",
    "keywords": "Class ActionQueue<T, TResult> Namespace Tool.Utils.ThreadQueue Assembly Tool.Net.dll 一个(公共线程安全)消息队列任务模型 public static class ActionQueue<T, TResult> Type Parameters T TResult Inheritance object ActionQueue<T, TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Fields WaitTimeout 分配的任务队列线程完成后最大保留时间 public const int WaitTimeout = 60000 Field Value int Properties IsContinueWith 表示当前事件是否已经注册 public static bool IsContinueWith { get; } Property Value bool Methods Add(Action<T>, T) 添加无返回值任务 public static WaitAction<T, TResult> Add(Action<T> action, T state) Parameters action Action<T> 任务 state T 参数 Returns WaitAction<T, TResult> 获取WaitAction<T, TResult>对象 Add(Func<T, ValueTask<TResult>>, T) 添加有返回值任务 public static WaitAction<T, TResult> Add(Func<T, ValueTask<TResult>> func, T state) Parameters func Func<T, ValueTask<TResult>> 任务 state T 参数 Returns WaitAction<T, TResult> 获取WaitAction<T, TResult>对象 Add(WaitAction<T, TResult>) 添加队列任务 public static void Add(WaitAction<T, TResult> waitaction) Parameters waitaction WaitAction<T, TResult> 任务对象 Events ContinueWith 注册完成任务后触发的事件 public static event Action<WaitAction<T, TResult>> ContinueWith Event Type Action<WaitAction<T, TResult>>"
  },
  "api/Tool.Utils.ThreadQueue.AtomCountLock.html": {
    "href": "api/Tool.Utils.ThreadQueue.AtomCountLock.html",
    "title": "Class AtomCountLock | Tool.Net",
    "keywords": "Class AtomCountLock Namespace Tool.Utils.ThreadQueue Assembly Tool.Net.dll 一个原子计数锁，可以确保多线程下，可调用区域内只能调用固定次数 public class AtomCountLock : IDisposable Inheritance object AtomCountLock Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors AtomCountLock(uint) 初始化一个原子锁 public AtomCountLock(uint initialCount) Parameters initialCount uint 指定最大可用数量 Properties CurrentCount 当前调用次数 public uint CurrentCount { get; } Property Value uint InitialCount 最大阈值 public uint InitialCount { get; } Property Value uint Methods Dispose() 回收资源 public void Dispose() Reset() 将所有计数清空，将重新获得调用计数 public bool Reset() Returns bool Set() 没调用一次可获得一次调用计数 public bool Set() Returns bool Wait() 达到最大阈值，只上锁不计数 public bool Wait() Returns bool"
  },
  "api/Tool.Utils.ThreadQueue.TaskQueue-1.html": {
    "href": "api/Tool.Utils.ThreadQueue.TaskQueue-1.html",
    "title": "Class TaskQueue<T> | Tool.Net",
    "keywords": "Class TaskQueue<T> Namespace Tool.Utils.ThreadQueue Assembly Tool.Net.dll 一个消息队列任务模型（异步处理任务·线程安全） public class TaskQueue<T> Type Parameters T 传入对象 Inheritance object TaskQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TaskQueue(Func<T, ValueTask>) 创建执行需要的函数 public TaskQueue(Func<T, ValueTask> func) Parameters func Func<T, ValueTask> 队列处理的函数 TaskQueue(Func<T, ValueTask>, TaskCreationOptions) 创建执行需要的函数 public TaskQueue(Func<T, ValueTask> func, TaskCreationOptions creationOptions) Parameters func Func<T, ValueTask> 队列处理的函数 creationOptions TaskCreationOptions 异步线程属性 Properties IsContinueWith 表示当前事件是否已经注册 public bool IsContinueWith { get; } Property Value bool Methods Add(T) 添加一个新的任务（他会排队一个一个完成） public void Add(T state) Parameters state T 任务需要的参数 Events ContinueWith 注册完成任务后触发的事件 public event Action<T, Exception> ContinueWith Event Type Action<T, Exception>"
  },
  "api/Tool.Utils.ThreadQueue.TaskQueue-2.html": {
    "href": "api/Tool.Utils.ThreadQueue.TaskQueue-2.html",
    "title": "Class TaskQueue<T, TResult> | Tool.Net",
    "keywords": "Class TaskQueue<T, TResult> Namespace Tool.Utils.ThreadQueue Assembly Tool.Net.dll 一个消息队列任务模型（异步处理任务·线程安全） public class TaskQueue<T, TResult> Type Parameters T 传入对象 TResult 返回结果 Inheritance object TaskQueue<T, TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors TaskQueue(Func<T, ValueTask<TResult>>) 创建执行需要的函数 public TaskQueue(Func<T, ValueTask<TResult>> func) Parameters func Func<T, ValueTask<TResult>> 队列处理的函数 TaskQueue(Func<T, ValueTask<TResult>>, TaskCreationOptions) 创建执行需要的函数 public TaskQueue(Func<T, ValueTask<TResult>> func, TaskCreationOptions creationOptions) Parameters func Func<T, ValueTask<TResult>> 队列处理的函数 creationOptions TaskCreationOptions 异步线程属性 Fields WaitTimeout 分配的任务队列线程完成后最大保留时间 public const int WaitTimeout = 60000 Field Value int Properties CompleteCount 累计已完成的任务数 public ulong CompleteCount { get; } Property Value ulong Count 当前活动的任务数 public int Count { get; } Property Value int IsContinueWith 表示当前事件是否已经注册 public bool IsContinueWith { get; } Property Value bool TotalCount 累计已有的任务数 public ulong TotalCount { get; } Property Value ulong Methods Add(T) 添加一个新的任务（他会排队一个一个完成） public void Add(T state) Parameters state T 任务需要的参数 Events ContinueWith 注册完成任务后触发的事件 public event Action<T, TResult, Exception> ContinueWith Event Type Action<T, TResult, Exception>"
  },
  "api/Tool.Utils.ThreadQueue.TaskQueue.html": {
    "href": "api/Tool.Utils.ThreadQueue.TaskQueue.html",
    "title": "Class TaskQueue | Tool.Net",
    "keywords": "Class TaskQueue Namespace Tool.Utils.ThreadQueue Assembly Tool.Net.dll 一个消息队列任务模型（异步处理任务·线程安全） public static class TaskQueue Inheritance object TaskQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Properties CompleteCount 累计已完成的任务数 public static ulong CompleteCount { get; } Property Value ulong Count 当前活动的任务数 public static int Count { get; } Property Value int TotalCount 累计已有的任务数 public static ulong TotalCount { get; } Property Value ulong Methods Enqueue(object, Delegate, params object[]) 添加一个新的任务（他会排队一个一个完成） public static Task Enqueue(object callClass, Delegate action, params object[] args) Parameters callClass object 调用类信息 action Delegate 任务 args object[] 任务需要的参数 Returns Task Remarks 可等待的结果 Enqueue<T>(object, Delegate, params object[]) 添加一个新的任务（他会排队一个一个完成） public static Task<T> Enqueue<T>(object callClass, Delegate func, params object[] args) Parameters callClass object 调用类信息 func Delegate 任务 args object[] 任务需要的参数 Returns Task<T> Type Parameters T Remarks 可等待的结果 GetOrAdd(Delegate) 获取一个可以动态传递的委托（可复用保证线程安全） public static IActionDispatcher GetOrAdd(Delegate func) Parameters func Delegate 任务需要的参数 Returns IActionDispatcher Remarks IActionDispatcher StaticEnqueue(Delegate, params object[]) 添加一个新的任务（他会排队一个一个完成） public static Task StaticEnqueue(Delegate action, params object[] args) Parameters action Delegate 任务 args object[] 任务需要的参数 Returns Task Remarks 可等待的结果 StaticEnqueue<T>(Delegate, params object[]) 添加一个新的任务（他会排队一个一个完成） public static Task<T> StaticEnqueue<T>(Delegate func, params object[] args) Parameters func Delegate 任务 args object[] 任务需要的参数 Returns Task<T> Type Parameters T Remarks 可等待的结果"
  },
  "api/Tool.Utils.ThreadQueue.WaitAction-2.html": {
    "href": "api/Tool.Utils.ThreadQueue.WaitAction-2.html",
    "title": "Class WaitAction<T, TResult> | Tool.Net",
    "keywords": "Class WaitAction<T, TResult> Namespace Tool.Utils.ThreadQueue Assembly Tool.Net.dll 创建任务执行对象 public class WaitAction<T, TResult> : IDisposable Type Parameters T TResult Inheritance object WaitAction<T, TResult> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors WaitAction(Action<T>, T) 创建无返回结果的任务 public WaitAction(Action<T> action, T state) Parameters action Action<T> 任务 state T 参数 WaitAction(Func<T, ValueTask<TResult>>, T) 创建有返回结果的任务 public WaitAction(Func<T, ValueTask<TResult>> func, T state) Parameters func Func<T, ValueTask<TResult>> 任务 state T 参数 Properties Exception 任务执行中发生的异常 public Exception Exception { get; } Property Value Exception IsCompleted 任务完成情况 public bool IsCompleted { get; } Property Value bool IsException 是否发生异常 public bool IsException { get; } Property Value bool IsWait 是否正在调用Wait函数 public bool IsWait { get; } Property Value bool Result 任务完成后的结果 public TResult Result { get; } Property Value TResult State 需要的参数 public T State { get; } Property Value T WaitTimeout Wait函数最大等待时长 -1 无限制等待 public int WaitTimeout { get; set; } Property Value int Methods Dispose() 回收对象 public void Dispose() Run() 启动已就绪的任务 public ValueTask Run() Returns ValueTask Wait() 其他线程中可用等待获取的任务结果 public bool Wait() Returns bool 返回成功失败"
  },
  "api/Tool.Utils.ThreadQueue.html": {
    "href": "api/Tool.Utils.ThreadQueue.html",
    "title": "Namespace Tool.Utils.ThreadQueue | Tool.Net",
    "keywords": "Namespace Tool.Utils.ThreadQueue Classes ActionLock 一个公共锁 ActionQueue<T, TResult> 一个(公共线程安全)消息队列任务模型 AtomCountLock 一个原子计数锁，可以确保多线程下，可调用区域内只能调用固定次数 TaskQueue 一个消息队列任务模型（异步处理任务·线程安全） TaskQueue<T> 一个消息队列任务模型（异步处理任务·线程安全） TaskQueue<T, TResult> 一个消息队列任务模型（异步处理任务·线程安全） WaitAction<T, TResult> 创建任务执行对象"
  },
  "api/Tool.Utils.TypeExtension.html": {
    "href": "api/Tool.Utils.TypeExtension.html",
    "title": "Class TypeExtension | Tool.Net",
    "keywords": "Class TypeExtension Namespace Tool.Utils Assembly Tool.Net.dll 对Type进行升级 public static class TypeExtension Inheritance object TypeExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods DefaultForType(Type) 获取当前类型的默认值 public static object DefaultForType(this Type type) Parameters type Type Returns object GetFieldKey(object, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public static object GetFieldKey(this object obj, string name, out bool isexist) Parameters obj object 对象源 name string 变量名称 isexist bool 是否可以获取 Returns object 返回变量值 GetFieldKey(object, Type, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public static object GetFieldKey(this object obj, Type type, string name, out bool isexist) Parameters obj object 对象源 type Type 类型 name string 变量名称 isexist bool 是否可以获取 Returns object 返回变量值 GetFieldKey<T>(object, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public static object GetFieldKey<T>(this object obj, string name, out bool isexist) Parameters obj object 对象源 name string 变量名称 isexist bool 是否可以获取 Returns object 返回变量值 Type Parameters T GetPropertieFind(object, string, bool) 获取当前对象下指定名称的属性对象 public static PropertyDescriptor GetPropertieFind(this object obj, string name, bool ignoreCase = false) Parameters obj object 对象源 name string 属性名称 ignoreCase bool 是否忽略大小写 Returns PropertyDescriptor GetProperties(object) 获取当前对象下所有属性集合 public static PropertyDescriptorCollection GetProperties(this object obj) Parameters obj object 对象源 Returns PropertyDescriptorCollection 属性集合 GetProperties(Type) 获取当前对象下所有属性集合 public static PropertyDescriptorCollection GetProperties(Type componentType) Parameters componentType Type 对象源类型 Returns PropertyDescriptorCollection 属性集合 GetPropertyKey(object, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public static object GetPropertyKey(this object obj, string name, out bool isexist) Parameters obj object 对象源 name string 变量名称 isexist bool 是否可以获取 Returns object 返回变量值 GetPropertyKey(object, Type, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public static object GetPropertyKey(this object obj, Type type, string name, out bool isexist) Parameters obj object 对象源 type Type 类型 name string 变量名称 isexist bool 是否可以获取 Returns object 返回变量值 GetPropertyKey<T>(object, string, out bool) 获取指定变量值 (支持 public/private/protected) 静态时obj为null public static object GetPropertyKey<T>(this object obj, string name, out bool isexist) Parameters obj object 对象源 name string 变量名称 isexist bool 是否可以获取 Returns object 返回变量值 Type Parameters T GetPropertys(Type) 获取公共管理的属性构造器 public static TypePropertyDescriptor GetPropertys(this Type type) Parameters type Type 类型 Returns TypePropertyDescriptor 属性构造器 GetValue(object, PropertyDescriptor) 根据属性对象获取属性的值 public static object GetValue(this object obj, PropertyDescriptor descriptor) Parameters obj object 对象源 descriptor PropertyDescriptor 属性对象 Returns object 属性值 GetValue(object, string) 获取指定属性值（新模式）获取不到时 会抛出异常 public static object GetValue(this object obj, string name) Parameters obj object 对象源 name string 属性名称 Returns object 返回属性值 Exceptions Exception 字段不存在时会报错！ GetValue(object, string, bool) 获取指定属性值 public static object GetValue(this object obj, string name, bool ignoreCase) Parameters obj object 对象源 name string 属性名称 ignoreCase bool 是否忽略大小写 Returns object 返回属性值 InvokeAsync(Action) 创建异步返回模式 public static Task InvokeAsync(this Action @delegate) Parameters delegate Action Returns Task InvokeAsync<T1>(Action<T1>, T1) 创建异步模式 public static Task InvokeAsync<T1>(this Action<T1> @delegate, T1 arg1) Parameters delegate Action<T1> arg1 T1 Returns Task Type Parameters T1 InvokeAsync<TResult>(Func<TResult>) 创建异步返回模式 public static Task<TResult> InvokeAsync<TResult>(this Func<TResult> @delegate) Parameters delegate Func<TResult> Returns Task<TResult> Type Parameters TResult InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters delegate Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 arg7 T7 arg8 T8 arg9 T9 Returns Task<TResult> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 TResult InvokeAsync<T1, T2>(Action<T1, T2>, T1, T2) 创建异步模式 public static Task InvokeAsync<T1, T2>(this Action<T1, T2> @delegate, T1 arg1, T2 arg2) Parameters delegate Action<T1, T2> arg1 T1 arg2 T2 Returns Task Type Parameters T1 T2 InvokeAsync<T1, TResult>(Func<T1, TResult>, T1) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, TResult>(this Func<T1, TResult> @delegate, T1 arg1) Parameters delegate Func<T1, TResult> arg1 T1 Returns Task<TResult> Type Parameters T1 TResult InvokeAsync<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3) 创建异步模式 public static Task InvokeAsync<T1, T2, T3>(this Action<T1, T2, T3> @delegate, T1 arg1, T2 arg2, T3 arg3) Parameters delegate Action<T1, T2, T3> arg1 T1 arg2 T2 arg3 T3 Returns Task Type Parameters T1 T2 T3 InvokeAsync<T1, T2, TResult>(Func<T1, T2, TResult>, T1, T2) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, TResult>(this Func<T1, T2, TResult> @delegate, T1 arg1, T2 arg2) Parameters delegate Func<T1, T2, TResult> arg1 T1 arg2 T2 Returns Task<TResult> Type Parameters T1 T2 TResult InvokeAsync<T1, T2, T3, T4>(Action<T1, T2, T3, T4>, T1, T2, T3, T4) 创建异步模式 public static Task InvokeAsync<T1, T2, T3, T4>(this Action<T1, T2, T3, T4> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters delegate Action<T1, T2, T3, T4> arg1 T1 arg2 T2 arg3 T3 arg4 T4 Returns Task Type Parameters T1 T2 T3 T4 InvokeAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1, T2, T3) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, T3, TResult>(this Func<T1, T2, T3, TResult> @delegate, T1 arg1, T2 arg2, T3 arg3) Parameters delegate Func<T1, T2, T3, TResult> arg1 T1 arg2 T2 arg3 T3 Returns Task<TResult> Type Parameters T1 T2 T3 TResult InvokeAsync<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) 创建异步模式 public static Task InvokeAsync<T1, T2, T3, T4, T5>(this Action<T1, T2, T3, T4, T5> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters delegate Action<T1, T2, T3, T4, T5> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 Returns Task Type Parameters T1 T2 T3 T4 T5 InvokeAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, TResult> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters delegate Func<T1, T2, T3, T4, TResult> arg1 T1 arg2 T2 arg3 T3 arg4 T4 Returns Task<TResult> Type Parameters T1 T2 T3 T4 TResult InvokeAsync<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) 创建异步模式 public static Task InvokeAsync<T1, T2, T3, T4, T5, T6>(this Action<T1, T2, T3, T4, T5, T6> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters delegate Action<T1, T2, T3, T4, T5, T6> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 Returns Task Type Parameters T1 T2 T3 T4 T5 T6 InvokeAsync<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, TResult> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters delegate Func<T1, T2, T3, T4, T5, TResult> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 Returns Task<TResult> Type Parameters T1 T2 T3 T4 T5 TResult InvokeAsync<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) 创建异步模式 public static Task InvokeAsync<T1, T2, T3, T4, T5, T6, T7>(this Action<T1, T2, T3, T4, T5, T6, T7> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters delegate Action<T1, T2, T3, T4, T5, T6, T7> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 arg7 T7 Returns Task Type Parameters T1 T2 T3 T4 T5 T6 T7 InvokeAsync<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, TResult> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters delegate Func<T1, T2, T3, T4, T5, T6, TResult> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 Returns Task<TResult> Type Parameters T1 T2 T3 T4 T5 T6 TResult InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) 创建异步模式 public static Task InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T1, T2, T3, T4, T5, T6, T7, T8> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters delegate Action<T1, T2, T3, T4, T5, T6, T7, T8> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 arg7 T7 arg8 T8 Returns Task Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 InvokeAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, TResult> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters delegate Func<T1, T2, T3, T4, T5, T6, T7, TResult> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 arg7 T7 Returns Task<TResult> Type Parameters T1 T2 T3 T4 T5 T6 T7 TResult InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) 创建异步模式 public static Task InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters delegate Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 arg7 T7 arg8 T8 arg9 T9 Returns Task Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) 创建异步返回模式 public static Task<TResult> InvokeAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> @delegate, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters delegate Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> arg1 T1 arg2 T2 arg3 T3 arg4 T4 arg5 T5 arg6 T6 arg7 T7 arg8 T8 Returns Task<TResult> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 TResult IsDictionary(Type) 判断是否是字典类型 public static bool IsDictionary(this Type type) Parameters type Type 类型 Returns bool bool IsNumber(Type) 验证是否是数字类型 public static bool IsNumber(this Type type) Parameters type Type Returns bool bool IsString(Type) 验证是否是字符类型 public static bool IsString(this Type type) Parameters type Type Returns bool bool IsType(Type) 验证是否是系统变量 public static bool IsType(this Type type) Parameters type Type Returns bool bool SetFieldKey(object, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public static bool SetFieldKey(this object obj, string name, object value) Parameters obj object 对象源 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 SetFieldKey(object, Type, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public static bool SetFieldKey(this object obj, Type type, string name, object value) Parameters obj object 对象源 type Type 类型 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 SetFieldKey<T>(object, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public static bool SetFieldKey<T>(this object obj, string name, object value) Parameters obj object 对象源 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 Type Parameters T SetPropertyKey(object, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public static bool SetPropertyKey(this object obj, string name, object value) Parameters obj object 对象源 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 SetPropertyKey(object, Type, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public static bool SetPropertyKey(this object obj, Type type, string name, object value) Parameters obj object 对象源 type Type 类型 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 SetPropertyKey<T>(object, string, object) 修改指定变量值 (支持 public/private/protected) 静态时obj为null public static bool SetPropertyKey<T>(this object obj, string name, object value) Parameters obj object 对象源 name string 变量名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 Type Parameters T SetValue(object, PropertyDescriptor, object) 根据属性对象修改属性的值 public static void SetValue(this object obj, PropertyDescriptor descriptor, object value) Parameters obj object 对象源 descriptor PropertyDescriptor 属性对象 value object 修改属性的值 SetValue(object, string, object) 修改指定属性值（新模式） public static bool SetValue(this object obj, string name, object value) Parameters obj object 对象源 name string 属性名称 value object 修改的值 Returns bool 返回是否查找到并进行修改 SetValue(object, string, object, bool) 修改指定属性值 public static bool SetValue(this object obj, string name, object value, bool ignoreCase) Parameters obj object 对象源 name string 属性名称 value object 修改的值 ignoreCase bool 是否忽略大小写 Returns bool 返回是否查找到并进行修改"
  },
  "api/Tool.Utils.TypeHelper.html": {
    "href": "api/Tool.Utils.TypeHelper.html",
    "title": "Class TypeHelper | Tool.Net",
    "keywords": "Class TypeHelper Namespace Tool.Utils Assembly Tool.Net.dll 类型助手 public class TypeHelper Inheritance object TypeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods ChangeType(Type, object) 根据Type,返回可能存在的值 public static object ChangeType(Type targetType, object val) Parameters targetType Type val object Returns object GetClassSimpleName(Type) 获取类实例名称 public static string GetClassSimpleName(Type t) Parameters t Type Type Returns string GetDefaultValue(Type) 获取默认值 public static string GetDefaultValue(Type destType) Parameters destType Type Returns string GetTypeByRegularName(string) 按常规名称获取类型 public static Type GetTypeByRegularName(string regularName) Parameters regularName string Returns Type GetTypeRegularName(Type) 获取类型常规名称 public static string GetTypeRegularName(Type destType) Parameters destType Type Returns string GetTypeRegularNameOf(object) 获取类型的常规名称 public static string GetTypeRegularNameOf(object obj) Parameters obj object Returns string IsFixLength(Type) 是不是数据类型 public static bool IsFixLength(Type destDataType) Parameters destDataType Type Returns bool IsNumbericType(Type) 是数字类型 public static bool IsNumbericType(Type destDataType) Parameters destDataType Type Returns bool IsSimpleType(Type) 是简单类型 public static bool IsSimpleType(Type t) Parameters t Type Returns bool"
  },
  "api/Tool.Utils.TypeParse.html": {
    "href": "api/Tool.Utils.TypeParse.html",
    "title": "Class TypeParse | Tool.Net",
    "keywords": "Class TypeParse Namespace Tool.Utils Assembly Tool.Net.dll 判读该值是否是可以被强制转换 public sealed class TypeParse Inheritance object TypeParse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods ConvertDateTimeInt(DateTime) 转换时间为世界公认秒数。 public static double ConvertDateTimeInt(DateTime time) Parameters time DateTime 时间 Returns double ConvertIntDateTime(double) 转换世界公认秒数为时间格式 public static DateTime ConvertIntDateTime(double d) Parameters d double 秒数 Returns DateTime IsNumericArray(string[]) 判断是不是数字 public static bool IsNumericArray(string[] strNumber) Parameters strNumber string[] 判断值 数组 Returns bool 返回bool类型 SafeLongToInt32(long) 判断long中的值是不是在32位以内 public static int SafeLongToInt32(long expression) Parameters expression long 判断值 Returns int 返回int类型 StrToBool(object, bool) 判读该值是否是bool类型 public static bool StrToBool(object expression, bool defValue) Parameters expression object 判断值 defValue bool 当判断值为空时返回的值 Returns bool 返回bool类型 StrToFloat(object, float) 判读该值是否是float类型 public static float StrToFloat(object expression, float defValue) Parameters expression object 判断值 defValue float 当判断值为空时返回的值 Returns float 返回float类型 StrToInt(object, int) 判读该值是否是int类型 public static int StrToInt(object expression, int defValue) Parameters expression object 判断值 defValue int 当判断值为空时返回的值 Returns int 返回int类型"
  },
  "api/Tool.Utils.UserSystem.html": {
    "href": "api/Tool.Utils.UserSystem.html",
    "title": "Enum UserSystem | Tool.Net",
    "keywords": "Enum UserSystem Namespace Tool.Utils Assembly Tool.Net.dll 根据 Agent 判断当前请求用户的设备名 枚举 public enum UserSystem Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Android = 0 安卓系统 MQQBrowser = 5 QQ、微信、QQ浏览器 Macintosh = 7 简介：麦金塔电脑（Macintosh，简称Mac，香港俗称Mac机，大陆亦有人称作苹果机或麦金塔电脑），是苹果电脑其中一系列的个人电脑。 Unknown = 8 未知操作设备 Windows = 6 Windows NT是纯32,64位操作系统 Windows_Phone = 4 Windows Phone(简称为WP)是微软于2010年10月21日正式发布的一款手机操作系统 iPad = 3 苹果平板 iPhone = 1 苹果系统 iPod = 2 iPod是苹果公司设计和销售的系列便携式多功能数字多媒体播放器。"
  },
  "api/Tool.Utils.Utility.html": {
    "href": "api/Tool.Utils.Utility.html",
    "title": "Class Utility | Tool.Net",
    "keywords": "Class Utility Namespace Tool.Utils Assembly Tool.Net.dll 常用方法类 public class Utility Inheritance object Utility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Fields ASSEMBLY_VERSION 汇编版本 public const string ASSEMBLY_VERSION = \"3.1.0\" Field Value string Methods ConvertVersionStr2Int(string) IP位移操作 public static int ConvertVersionStr2Int(string strVersion) Parameters strVersion string IP地址 Returns int DataTableToJson(DataTable) 将DataTable 对象 转换成 JOSN 字符串 public static StringBuilder DataTableToJson(DataTable dt) Parameters dt DataTable 数据源 Returns StringBuilder JOSN 字符串 DataTableToJson(DataTable, bool) 将DataTable 对象 转换成 JOSN 字符串 public static StringBuilder DataTableToJson(DataTable dt, bool dtDispose) Parameters dt DataTable 数据源 dtDispose bool 是否释放数据源 Returns StringBuilder JOSN 字符串 GetAppSetting(string) 获取 .config 下面的 appSettings 节点内的节点配置内容 public static string GetAppSetting(string key) Parameters key string Returns string GetCookie(string) 获取Cookie中的值 public static string GetCookie(string strName) Parameters strName string 键值名 Returns string 返回值 GetDistance(double, double, double, double) 计算两点位置的距离，返回两点的距离，单位：米 该公式为GOOGLE提供，误差小于0.2米 public static double GetDistance(double lng1, double lat1, double lng2, double lat2) Parameters lng1 double 第一点经度 lat1 double 第一点纬度 lng2 double 第二点经度 lat2 double 第二点纬度 Returns double 返回相隔距离 GetDistance(long) 计算两点位置的距离，返回两点的距离，单位：米 该公式为GOOGLE提供，误差小于0.2米 public static IList<int> GetDistance(long size) Parameters size long 一个数字 Returns IList<int> 返回一个数组（每个位） GetHostName() 获取本地计算机的主机名。 public static string GetHostName() Returns string 包含本地计算机的 DNS 主机名的字符串。 GetIPAddressAsync(string, AddressFamily) 获取域名下的第一个IP public static Task<IPAddress> GetIPAddressAsync(string Host = null, AddressFamily family = AddressFamily.InterNetwork) Parameters Host string 域名（为空时获取本机IP信息） family AddressFamily 指定获取的类型 Returns Task<IPAddress> 存在就返回第一个，不存在null GetIPAddressListAsync(string) 获取域名下的所有IP信息 public static Task<IPAddress[]> GetIPAddressListAsync(string Host = null) Parameters Host string 域名（为空时获取本机IP信息） Returns Task<IPAddress[]> GetIntegerSomeBit(int, int) 取整数的某一位 public static int GetIntegerSomeBit(int _Resource, int _Mask) Parameters _Resource int 要取某一位的整数 _Mask int 要取的位置索引，自右至左为0-7 Returns int 返回某一位的值（0或者1） GetOSVersion() 获取操作系统版本 public static string GetOSVersion() Returns string 返回十六进制字符串 GetTextFromHTML(string) 从HTML获取文本 public static string GetTextFromHTML(string HTML) Parameters HTML string HTML字符串 Returns string 返回内容 HtmlDecode(string) 将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。 public static string HtmlDecode(string str) Parameters str string 要解码的字符串。 Returns string 一个已解码的字符串。 HtmlEncode(string) 将字符串转换为 HTML 编码的字符串。 public static string HtmlEncode(string str) Parameters str string 要编码的字符串。 Returns string 编码的字符串。 IP2Int(string) 将IP地址转换为纯数字 public static long IP2Int(string ip) Parameters ip string 正确的IP Returns long 返回纯数字 Int2IP(long) IP 地址的长值。 例如，Big-Endian 格式的值 0x2414188f 可能为 IP 地址\"143.24.20.36\"。 public static string Int2IP(long ipNumber) Parameters ipNumber long 数字类型的IP信息 Returns string IP地址 IsNumericArray(params string[]) 验证该string数组里面是否都是可以被转为int类型的数据 public static bool IsNumericArray(params string[] strNumber) Parameters strNumber string[] string数组 Returns bool 返回bool状态 MD5(string) MD5加密 （32） public static string MD5(string s) Parameters s string 原文 Returns string 密文 SearchUTF8File(string) 查找指定目录下的所有.htm后缀的文件并返回字符串编码是UTF-8的文件路径 public static string[] SearchUTF8File(string directory) Parameters directory string 指定的目录，绝对路径 Returns string[] 返回是UTF-8格式的.htm路径 SequenceCompare(in ReadOnlySpan<byte>, in ReadOnlySpan<byte>) 比较两个数组是否相同 public static bool SequenceCompare(in ReadOnlySpan<byte> x, in ReadOnlySpan<byte> y) Parameters x ReadOnlySpan<byte> 对比一 y ReadOnlySpan<byte> 对比二 Returns bool 结果 SetIntegerSomeBit(int, int, bool) 将整数的某位置为0或1 public static int SetIntegerSomeBit(int _Mask, int a, bool flag) Parameters _Mask int 整数的某位 a int 整数 flag bool 是否置1，TURE表示置1，FALSE表示置0 Returns int 返回修改过的值 StrToBool(object, bool) 判读该值是否是bool类型 public static bool StrToBool(object expression, bool defValue) Parameters expression object 判断值 defValue bool 当判断值为空时返回的值 Returns bool 返回bool类型 StrToBool(string, bool) 判读该值是否是bool类型 public static bool StrToBool(string expression, bool defValue) Parameters expression string 判断值 defValue bool 当判断值为空时返回的值 Returns bool 返回bool类型 StrToFloat(object, float) 判读该值是否是float类型 public static float StrToFloat(object strValue, float defValue) Parameters strValue object 判断值 defValue float 当判断值为空时返回的值 Returns float 返回float类型 StrToFloat(string, float) 判读该值是否是float类型 public static float StrToFloat(string strValue, float defValue) Parameters strValue string 判断值 defValue float 当判断值为空时返回的值 Returns float 返回float类型 StrToInt(object, int) 判读该值是否是int类型 public static int StrToInt(object expression, int defValue) Parameters expression object 判断值 defValue int 当判断值为空时返回的值 Returns int 返回int类型 StrToInt(string, int) 判读该值是否是int类型 public static int StrToInt(string expression, int defValue) Parameters expression string 判断值 defValue int 当判断值为空时返回的值 Returns int 返回int类型 ToColor(string) 根据十六进制颜色值返回Color 颜色对象 public static Color ToColor(string color) Parameters color string 十六进制颜色值 例如：#000000 Returns Color 返回Color 颜色对象 UrlDecode(string) 将已经为在 URL 中传输而编码的字符串转换为解码的字符串。 public static string UrlDecode(string str) Parameters str string 要解码的字符串。 Returns string 一个已解码的字符串。 UrlEncode(string) 对 URL 字符串进行编码。 public static string UrlEncode(string str) Parameters str string 要编码的文本。 Returns string 编码的字符串。"
  },
  "api/Tool.Utils.Validate.CardDetail.html": {
    "href": "api/Tool.Utils.Validate.CardDetail.html",
    "title": "Class Validate.CardDetail | Tool.Net",
    "keywords": "Class Validate.CardDetail Namespace Tool.Utils Assembly Tool.Net.dll 银行卡信息 public class Validate.CardDetail Inheritance object Validate.CardDetail Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Constructors CardDetail(bool, string) 有参构造 验证失败时使用 public CardDetail(bool Validated, string VerificationResult) Parameters Validated bool VerificationResult string CardDetail(bool, string, string, string, string, string) 有参构造 验证成功时使用 public CardDetail(bool Validated, string CardNumber, string Bank, string BankName, string CardType, string VerificationResult) Parameters Validated bool 银行卡验证结果 CardNumber string 银行卡卡号 Bank string 银行标记名 BankName string 银行名称 CardType string 银行卡类型编号 VerificationResult string 验证结果 Properties Bank 银行标记名 public string Bank { get; } Property Value string BankImageStream 银行图片字节流 public Stream BankImageStream { get; } Property Value Stream BankName 银行名称 public string BankName { get; } Property Value string CardNumber 银行卡卡号 public string CardNumber { get; } Property Value string CardType 银行卡类型编号 public string CardType { get; } Property Value string CardTypeName 银行卡类型 public string CardTypeName { get; } Property Value string Validated 银行卡验证结果 public bool Validated { get; } Property Value bool VerificationResult 验证结果 public string VerificationResult { get; } Property Value string"
  },
  "api/Tool.Utils.Validate.html": {
    "href": "api/Tool.Utils.Validate.html",
    "title": "Class Validate | Tool.Net",
    "keywords": "Class Validate Namespace Tool.Utils Assembly Tool.Net.dll 各种验证类，包含正则表达式 public sealed class Validate Inheritance object Validate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods CheckAgent(string) 根据 Agent 判断当前请求用户的设备名 public static UserSystem CheckAgent(string UserAgent = null) Parameters UserAgent string 平台信息，为空时，获取默认信息 Returns UserSystem UserSystem枚举 CheckedDataRow(DataRow) 判断DataRow对象中的是否为空，行为空，对象为空 public static bool CheckedDataRow(DataRow dr) Parameters dr DataRow DataRow对象 Returns bool 返回bool类型 CheckedDataSet(DataSet) 判断DataSet对象中的是否为空，行为空，表为空，对象为空 public static bool CheckedDataSet(DataSet ds) Parameters ds DataSet DataSet对象 Returns bool 返回bool类型 CheckedDataTable(DataTable) 判断DataTable对象中的是否为空，行为空，对象为空 public static bool CheckedDataTable(DataTable dt) Parameters dt DataTable DataTable对象 Returns bool 返回bool类型 CheckedObjcetArray(object[]) 判断Array对象中的是否为空 public static bool CheckedObjcetArray(object[] obj) Parameters obj object[] 数组 Returns bool 返回bool类型 GetCardDetail(string) 根据银行卡获取信息 public static Validate.CardDetail GetCardDetail(string cardNo) Parameters cardNo string 银行卡 Returns Validate.CardDetail GetGdIpRegion(string) 根据IP获取所在城市地区（该秘钥有dll内部提供，如有问题请联系dll开发者）（高德） public static dynamic GetGdIpRegion(string ip) Parameters ip string IP地址 Returns dynamic 返回所在城市地区 GetGdIpRegion(string, string) 根据IP获取所在城市地区（高德） public static dynamic GetGdIpRegion(string ip, string key) Parameters ip string IP地址 key string 高德秘钥 Returns dynamic 返回所在城市地区 GetIpRegion(string) 根据IP获取所在城市地区（该秘钥有dll内部提供，如有问题请联系dll开发者）（百度） public static dynamic GetIpRegion(string ip) Parameters ip string IP地址 Returns dynamic 返回所在城市地区 GetIpRegion(string, string) 根据IP获取所在城市地区（百度） public static dynamic GetIpRegion(string ip, string ak) Parameters ip string IP地址 ak string 百度秘钥 Returns dynamic 返回所在城市地区 GetTbIpRegion(string) 淘宝获取IP详细信息（不举建使用该API） public static dynamic GetTbIpRegion(string ip) Parameters ip string IP地址 Returns dynamic 返回所在城市地区 IsBase64String(string) 判断是否是 Base64 格式的字符串 public static bool IsBase64String(string expression) Parameters expression string 字符串 Returns bool 返回bool类型 IsCnChar(string) 判断是否是 Char 类型数据 public static bool IsCnChar(string expression) Parameters expression string 字符串 Returns bool IsCnCharAndWordAndNum(string) 判断是否是 Char 类型数据 public static bool IsCnCharAndWordAndNum(string expression) Parameters expression string 字符串 Returns bool IsDate(string) 判断是否是时间类型数据 public static bool IsDate(string dateval) Parameters dateval string 字符串 Returns bool IsDecimalFraction(string) 判断是否是十进制分数 public static bool IsDecimalFraction(string expression) Parameters expression string 字符串 Returns bool 返回bool类型 IsDoEmail(string) 判断是否是电子邮件格式 public static bool IsDoEmail(string strEmail) Parameters strEmail string 字符串 Returns bool IsDomain(string) 判断是否是域名格式 public static bool IsDomain(string strHost) Parameters strHost string Returns bool IsDouble(object) 判断是否是Double格式 public static bool IsDouble(object expression) Parameters expression object Returns bool IsEmail(string) 判断值是不是邮箱格式 public static bool IsEmail(string strEmail) Parameters strEmail string 判断值 Returns bool 返回bool类型 IsFileName(string) 判断值是不是文件名 public static bool IsFileName(string filename) Parameters filename string 判断值 Returns bool IsIDCard(string) 判断值是不是合法的身份证 public static bool IsIDCard(string strIDCard) Parameters strIDCard string 判断值 Returns bool IsIP(string) 验证IP地址是否合法 public static bool IsIP(string ipval) Parameters ipval string 待验证的IP Returns bool 返回bool类型 IsIPAndPort(string) 是不是有效的IP和端口 public static bool IsIPAndPort(string ipval) Parameters ipval string 判断值 Returns bool 返回bool类型 IsIPSect(string) 是不是有效的IP public static bool IsIPSect(string ipval) Parameters ipval string 判断值 Returns bool 返回bool类型 IsImage(string) 判断值是不是图像 public static bool IsImage(string filename) Parameters filename string 文件名称 Returns bool IsLongDate(string) 是不是长日期 public static bool IsLongDate(string dateval) Parameters dateval string 字符串 Returns bool IsMobileCode(string) 是不是移动电话号码 public static bool IsMobileCode(string strMobile) Parameters strMobile string 字符串 Returns bool IsNegativeInt(string) 是不是负整数 public static bool IsNegativeInt(string expression) Parameters expression string 字符串 Returns bool IsNickName(string) 是否是昵称 public static bool IsNickName(string strVal) Parameters strVal string 字符串 Returns bool IsNotNull(object) 判断expVal里面是否有值 public static bool IsNotNull(object expVal) Parameters expVal object 判断值 Returns bool 返回bool类型 IsNull(object) 判断expVal里面是否为空 public static bool IsNull(object expVal) Parameters expVal object 判断值 Returns bool 返回bool类型 IsNumeric(object) 判断是不是数字 public static bool IsNumeric(object expression) Parameters expression object 判断值 Returns bool 返回bool类型 IsNumericArray(string[]) 验证这个string数组是否全是可以强转为int的对象 public static bool IsNumericArray(string[] strNumber) Parameters strNumber string[] Returns bool IsPhoneCode(string) 验证是否是合格的电话号码 public static bool IsPhoneCode(string strPhone) Parameters strPhone string 号码 Returns bool IsPhysicalPath(string) 验证是否是物理路径 public static bool IsPhysicalPath(string s) Parameters s string 路径 Returns bool IsPositiveInt(string) 验证是否是正整数 public static bool IsPositiveInt(string expression) Parameters expression string 字符串 Returns bool IsPositiveInt64(string) 验证是否是正整数64位的 public static bool IsPositiveInt64(string expression) Parameters expression string 字符串 Returns bool IsPostalCode(string) 验证是否是邮政编码 public static bool IsPostalCode(string strPostalCode) Parameters strPostalCode string 字符串 Returns bool IsRelativePath(string) 验证是否是相对路径 public static bool IsRelativePath(string s) Parameters s string 字符串 Returns bool IsSQL(string) 检测字符串中是否包含SQL注入 public static bool IsSQL(string sqlExpression) Parameters sqlExpression string 要检测的字符串 Returns bool 返回结果 IsSafeInputWords(string) 验证是否是安全的输入词 public static bool IsSafeInputWords(string expression) Parameters expression string 字符串 Returns bool IsSafeSqlString(string) 验证是否是安全的Sql字符串 public static bool IsSafeSqlString(string expression) Parameters expression string 字符串 Returns bool IsSafety(string) 验证是否是安全的Sql字符串 public static bool IsSafety(string s) Parameters s string 字符串 Returns bool IsShortDate(string) 验证字符串是不是短日期 public static bool IsShortDate(string dateval) Parameters dateval string 要检测的字符串 Returns bool 返回结果 IsSpecifyWordAndNum(string, int, int) 检测字符串是不是指定单词和数字 public static bool IsSpecifyWordAndNum(string expression, int start, int end) Parameters expression string 要检测的字符串 start int 开始下标 end int 结束下标 Returns bool 返回结果 IsTime(string) 验证字符串是不是时间格式 public static bool IsTime(string timeval) Parameters timeval string 要检测的字符串 Returns bool 返回结果 IsURL(string) 验证字符串是不是有效的Url链接 public static bool IsURL(string strUrl) Parameters strUrl string 要检测的字符串 Returns bool 返回结果 IsUnicode(string) 验证字符串是不是Unicode编码格式 public static bool IsUnicode(string s) Parameters s string 要检测的字符串 Returns bool 返回结果 IsUserName(string) 验证字符串是不是中文名称 public static bool IsUserName(string strVal) Parameters strVal string 要检测的字符串 Returns bool 返回结果 IsWordAndNum(string) 检测字符串是不是单词和数字 public static bool IsWordAndNum(string expression) Parameters expression string 要检测的字符串 Returns bool 返回结果"
  },
  "api/Tool.Utils.Validator.html": {
    "href": "api/Tool.Utils.Validator.html",
    "title": "Class Validator | Tool.Net",
    "keywords": "Class Validator Namespace Tool.Utils Assembly Tool.Net.dll 相关正则类（包含常用的正则表达式）高达65种供大家参考学习，使用。 public class Validator Inheritance object Validator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Fields reg 数字 public const string reg = \"^[0-9]*$\" Field Value string reg1 n位的数字 public const string reg1 = \"^\\\\d{n}$\" Field Value string reg10 非零的正整数 public const string reg10 = \"^[1-9]\\\\d*$\" Field Value string reg10_1 非零的正整数 public const string reg10_1 = \"^([1-9][0-9]*){1,3}$\" Field Value string reg10_2 非零的正整数 public const string reg10_2 = \"^\\\\+?[1-9][0-9]*$\" Field Value string reg11 非零的负整数 public const string reg11 = \"^\\\\-[1-9][]0-9″*$\" Field Value string reg11_1 非零的负整数 public const string reg11_1 = \"^-[1-9]\\\\d*$\" Field Value string reg12 非负整数 public const string reg12 = \"^\\\\d+$\" Field Value string reg12_1 非负整数 public const string reg12_1 = \"^[1-9]\\\\d*|0$\" Field Value string reg13 非正整数 public const string reg13 = \"^-[1-9]\\\\d*|0$\" Field Value string reg13_1 非正整数 public const string reg13_1 = \"^((-\\\\d+)|(0+))$\" Field Value string reg14 非负浮点数 public const string reg14 = \"^\\\\d+(\\\\.\\\\d+)?$\" Field Value string reg14_1 非负浮点数 public const string reg14_1 = \"^[1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*|0?\\\\.0+|0$\" Field Value string reg15 非正浮点数 public const string reg15 = \"^((-\\\\d+(\\\\.\\\\d+)?)|(0+(\\\\.0+)?))$\" Field Value string reg15_1 非正浮点数 public const string reg15_1 = \"^(-([1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*))|0?\\\\.0+|0$\" Field Value string reg16 正浮点数 public const string reg16 = \"^[1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*$\" Field Value string reg16_1 正浮点数 public const string reg16_1 = \"^(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\" Field Value string reg17 负浮点数 public const string reg17 = \"^-([1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*)$\" Field Value string reg17_1 负浮点数 public const string reg17_1 = \"^(-(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\" Field Value string reg18 浮点数 public const string reg18 = \"^(-?\\\\d+)(\\\\.\\\\d+)?$\" Field Value string reg18_1 浮点数 public const string reg18_1 = \"^-?([1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*|0?\\\\.0+|0)$\" Field Value string reg19 汉字 public const string reg19 = \"^[\\\\u4e00-\\\\u9fa5]{0,}$\" Field Value string reg2 至少n位的数字 public const string reg2 = \"^\\\\d{n,}$\" Field Value string reg20 英文和数字 public const string reg20 = \"^[A-Za-z0-9]+$\" Field Value string reg20_1 英文和数字 public const string reg20_1 = \"^[A-Za-z0-9]{4,40}$\" Field Value string reg21 长度为3-20的所有字符 public const string reg21 = \"^.{3,20}$\" Field Value string reg22 由26个英文字母组成的字符串 public const string reg22 = \"^[A-Za-z]+$\" Field Value string reg23 由26个大写英文字母组成的字符串 public const string reg23 = \"^[A-Z]+$\" Field Value string reg24 由26个小写英文字母组成的字符串 public const string reg24 = \"^[a-z]+$\" Field Value string reg25 由数字和26个英文字母组成的字符串 public const string reg25 = \"^[A-Za-z0-9]+$\" Field Value string reg26 由数字、26个英文字母或者下划线组成的字符串 public const string reg26 = \"^\\\\w+$\" Field Value string reg26_1 由数字、26个英文字母或者下划线组成的字符串 public const string reg26_1 = \"^\\\\w{3,20}$\" Field Value string reg27 中文、英文、数字包括下划线 public const string reg27 = \"^[\\\\u4E00-\\\\u9FA5A-Za-z0-9_]+$\" Field Value string reg28 中文、英文、数字但不包括下划线等符号 public const string reg28 = \"^[\\\\u4E00-\\\\u9FA5A-Za-z0-9]+$\" Field Value string reg28_1 中文、英文、数字但不包括下划线等符号 public const string reg28_1 = \"^[\\\\u4E00-\\\\u9FA5A-Za-z0-9]{2,20}$\" Field Value string reg29 可以输入含有^%’,;=?$\\”等字符 public const string reg29 = \"[^%&’,;=?$\\\\x22]+\" Field Value string reg3 m-n位的数字 public const string reg3 = \"^\\\\d{m,n}$\" Field Value string reg30 禁止输入含有~的字符 public const string reg30 = \"[^~\\\\x22]+\" Field Value string reg31 Email地址 public const string reg31 = \"^\\\\w+([-+.]\\\\w+)*@\\\\w+([-.]\\\\w+)*\\\\.\\\\w+([-.]\\\\w+)*$\" Field Value string reg32 域名 public const string reg32 = \"[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\" Field Value string reg33 InternetURL public const string reg33 = \"[a-zA-z]+://[^\\\\s]*\" Field Value string reg33_1 InternetURL public const string reg33_1 = \"^http://([\\\\w-]+\\\\.)+[\\\\w-]+(/[\\\\w-./?%&=]*)?$\" Field Value string reg34 手机号码 public const string reg34 = \"^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\\\d{8}$\" Field Value string reg35 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX) public const string reg35 = \"^($$\\\\d{3,4}-)|\\\\d{3.4}-)?\\\\d{7,8}$\" Field Value string reg36 国内电话号码(0511-4405222、021-87888822) public const string reg36 = \"\\\\d{3}-\\\\d{8}|\\\\d{4}-\\\\d{7}\" Field Value string reg37 身份证号(15位、18位数字) public const string reg37 = \"^\\\\d{15}|\\\\d{18}$\" Field Value string reg38 短身份证号码(数字、字母x结尾) public const string reg38 = \"^([0-9]){7,18}(x|X)?$\" Field Value string reg38_1 短身份证号码(数字、字母x结尾) public const string reg38_1 = \"^\\\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$\" Field Value string reg39 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线) public const string reg39 = \"^[a-zA-Z][a-zA-Z0-9_]{4,15}$\" Field Value string reg4 零和非零开头的数字 public const string reg4 = \"^(0|[1-9][0-9]*)$\" Field Value string reg40 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线) public const string reg40 = \"^[a-zA-Z]\\\\w{5,17}$\" Field Value string reg41 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间) public const string reg41 = \"^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\" Field Value string reg42 日期格式 public const string reg42 = \"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}\" Field Value string reg43 一年的12个月(01～09和1～12) public const string reg43 = \"^(0?[1-9]|1[0-2])$\" Field Value string reg44 一个月的31天(01～09和1～31) public const string reg44 = \"^((0?[1-9])|((1|2)[0-9])|30|31)$\" Field Value string reg45 钱的输入格式： 有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000” public const string reg45 = \"^[1-9][0-9]*$\" Field Value string reg46 这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式 public const string reg46 = \"^(0|[1-9][0-9]*)$\" Field Value string reg47 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号 public const string reg47 = \"^(0|-?[1-9][0-9]*)$\" Field Value string reg48 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分 public const string reg48 = \"^[0-9]+(.[0-9]+)?$\" Field Value string reg49 必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10” 和 “10.2” 是通过的 public const string reg49 = \"^[0-9]+(.[0-9]{2})?$\" Field Value string reg5 非零开头的最多带两位小数的数字 public const string reg5 = \"^([1-9][0-9]*)+(.[0-9]{1,2})?$\" Field Value string reg50 这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样 public const string reg50 = \"^[0-9]+(.[0-9]{1,2})?$\" Field Value string reg51 这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样 public const string reg51 = \"^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$\" Field Value string reg52 1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须 public const string reg52 = \"^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$\" Field Value string reg53 备注：这就是最终结果了，别忘了”+”可以用”*”替代。如果你觉得空字符串也可以接受的话(奇怪，为什么?)最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里 xml文件 public const string reg53 = \"^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\\\\\.[x|X][m|M][l|L]$\" Field Value string reg54 中文字符的正则表达式 public const string reg54 = \"[\\\\u4e00-\\\\u9fa5]\" Field Value string reg55 双字节字符 (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) public const string reg55 = \"[^\\\\x00-\\\\xff]\" Field Value string reg56 空白行的正则表达式，可用来删除空白行 public const string reg56 = \"\\\\n\\\\s*\\\\r\" Field Value string reg57 HTML标记的正则表达式 public const string reg57 = \"<(\\\\S*?)[^>]*>.*?</\\\\1>|<.*? />\" Field Value string reg58 首尾空白字符的正则表达式 public const string reg58 = \"^\\\\s*|\\\\s*$)\" Field Value string reg58_1 首尾空白字符的正则表达式 public const string reg58_1 = \"(^\\\\s*)|(\\\\s*$\" Field Value string reg59 腾讯QQ号 public const string reg59 = \"[1-9][0-9]{4,}\" Field Value string reg6 带1-2位小数的正数或负数 public const string reg6 = \"^(\\\\-)?\\\\d+(\\\\.\\\\d{1,2})?$\" Field Value string reg60 中国邮政编码 public const string reg60 = \"[1-9]\\\\d{5}(?!\\\\d)\" Field Value string reg61 IP地址 public const string reg61 = \"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\" Field Value string reg62 IP地址 public const string reg62 = \"((?:(?:25[0-5]|2[0-4]\\\\\\\\d|[01]?\\\\\\\\d?\\\\\\\\d)\\\\\\\\.){3}(?:25[0-5]|2[0-4]\\\\\\\\d|[01]?\\\\\\\\d?\\\\\\\\d))\" Field Value string reg63 提取[]的值 public const string reg63 = \"(?is)(?<=\\\\[)(.*)(?=\\\\])\" Field Value string reg64 提取()的值 public const string reg64 = \"(?is)(?<=\\\\()(.*)(?=\\\\))\" Field Value string reg65 提取{}的值 public const string reg65 = \"(?is)(?<=\\\\{)(.*)(?=\\\\})\" Field Value string reg7 正数、负数、和小数 public const string reg7 = \"^(\\\\-|\\\\+)?\\\\d+(\\\\.\\\\d+)?$\" Field Value string reg8 有两位小数的正实数 public const string reg8 = \"^[0-9]+(.[0-9]{2})?$\" Field Value string reg9 有1~3位小数的正实数 public const string reg9 = \"^[0-9]+(.[0-9]{1,3})?$\" Field Value string Methods IsChineseCharacter(string) 验证只包含汉字 public static bool IsChineseCharacter(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsDateTime(string) 验证日期 public static bool IsDateTime(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsDecimal(string) 验证小数 public static bool IsDecimal(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsEmail(string) 验证电子邮箱 [@字符前可以包含字母、数字、下划线和点号；@字符后可以包含字母、数字、下划线和点号；@字符后至少包含一个点号且点号不能是最后一个字符；最后一个点号后只能是字母或数字] public static bool IsEmail(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsEnglishCharacter(string) 验证只包含英文字母 public static bool IsEnglishCharacter(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIDCard(string) 验证身份证号（不区分一二代身份证号） public static bool IsIDCard(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIDCard15(string) 验证一代身份证号（15位数） [长度为15位的数字；匹配对应省份地址；生日能正确匹配] public static bool IsIDCard15(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIDCard18(string) 验证二代身份证号（18位数，GB11643-1999标准） [长度为18位；前17位为数字，最后一位(校验码)可以为大小写x；匹配对应省份地址；生日能正确匹配；校验码能正确匹配] public static bool IsIDCard18(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIPv4(string) 验证IPv4地址 [第一位和最后一位数字不能是0或255；允许用0补位] public static bool IsIPv4(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIPv6(string) 验证IPv6地址 [可用于匹配任何一个合法的IPv6地址] public static bool IsIPv6(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsInteger(string) 验证整数 public static bool IsInteger(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIntegerAndEnglishCharacter(string) 验证只包含数字和英文字母 public static bool IsIntegerAndEnglishCharacter(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIntegerLength(string, int, int) 验证数字长度范围（数字前端的0计长度） [若要验证固定长度，可传入相同的两个长度数值] public static bool IsIntegerLength(string input, int lengthBegin, int lengthEnd) Parameters input string 待验证的字符串 lengthBegin int 长度范围起始值（含） lengthEnd int 长度范围结束值（含） Returns bool 是否匹配 IsIntegerNotNagtive(string) 验证非负整数 public static bool IsIntegerNotNagtive(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsIntegerPositive(string) 验证正整数 public static bool IsIntegerPositive(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsLatitude(string) 验证纬度 public static bool IsLatitude(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsLongitude(string) 验证经度 public static bool IsLongitude(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsMatch(string, bool, string) 验证字符串是否匹配正则表达式描述的规则 public static bool IsMatch(string inputStr, bool ifValidateWhiteSpace, string patternStr) Parameters inputStr string 待验证的字符串 ifValidateWhiteSpace bool 是否验证空白字符串 patternStr string 正则表达式字符串 Returns bool 是否匹配 IsMatch(string, string) 验证字符串是否匹配正则表达式描述的规则 public static bool IsMatch(string inputStr, string patternStr) Parameters inputStr string 待验证的字符串 patternStr string 正则表达式字符串 Returns bool 是否匹配 IsMatch(string, string, bool) 验证字符串是否匹配正则表达式描述的规则 public static bool IsMatch(string inputStr, string patternStr, bool ifIgnoreCase = true) Parameters inputStr string 待验证的字符串 patternStr string 正则表达式字符串 ifIgnoreCase bool 匹配时是否不区分大小写 Returns bool 是否匹配 IsMatch(string, string, bool, bool) 验证字符串是否匹配正则表达式描述的规则 public static bool IsMatch(string inputStr, string patternStr, bool ifIgnoreCase, bool ifValidateWhiteSpace) Parameters inputStr string 待验证的字符串 patternStr string 正则表达式字符串 ifIgnoreCase bool 匹配时是否不区分大小写 ifValidateWhiteSpace bool 是否验证空白字符串 Returns bool 是否匹配 IsMobilePhoneNumber(string) 验证手机号码 [可匹配\"(+86)013325656352\"，括号可以省略，+号可以省略，(+86)可以省略，11位手机号前的0可以省略；11位手机号第二位数可以是3、4、5、8中的任意一个] public static bool IsMobilePhoneNumber(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsNumber(string) 验证数字(double类型) [可以包含负号和小数点] public static bool IsNumber(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsPhoneNumber(string) 验证电话号码（可以是固定电话号码或手机号码） [固定电话：[3位或4位区号；区号可以用小括号括起来；区号可以省略；区号与本地号间可以用减号或空格隔开；可以有3位数的分机号，分机号前要加减号]] [手机号码：[可匹配\"(+86)013325656352\"，括号可以省略，+号可以省略，(+86)可以省略，手机号前的0可以省略；手机号第二位数可以是3、4、5、8中的任意一个]] public static bool IsPhoneNumber(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsStringByteLength(string, int, int) 验证字符串字节数长度范围 [若要验证固定长度，可传入相同的两个长度数值；每个汉字为两个字节长度] public static bool IsStringByteLength(string input, int lengthBegin, int lengthEnd) Parameters input string 待验证的字符串 lengthBegin int 长度范围起始值（含） lengthEnd int 长度范围结束值（含） Returns bool IsStringInclude(string, bool, bool, bool) 验证字符串包含内容 public static bool IsStringInclude(string input, bool withEnglishCharacter, bool withNumber, bool withChineseCharacter) Parameters input string 待验证的字符串 withEnglishCharacter bool 是否包含英文字母 withNumber bool 是否包含数字 withChineseCharacter bool 是否包含汉字 Returns bool 是否匹配 IsStringLength(string, int, int) 验证字符串长度范围 [若要验证固定长度，可传入相同的两个长度数值] public static bool IsStringLength(string input, int lengthBegin, int lengthEnd) Parameters input string 待验证的字符串 lengthBegin int 长度范围起始值（含） lengthEnd int 长度范围结束值（含） Returns bool 是否匹配 IsStringLengthByInclude(string, bool, bool, bool, int, int) 验证字符串长度范围 [若要验证固定长度，可传入相同的两个长度数值] public static bool IsStringLengthByInclude(string input, bool withEnglishCharacter, bool withNumber, bool withChineseCharacter, int lengthBegin, int lengthEnd) Parameters input string 待验证的字符串 withEnglishCharacter bool 是否包含英文字母 withNumber bool 是否包含数字 withChineseCharacter bool 是否包含汉字 lengthBegin int 长度范围起始值（含） lengthEnd int 长度范围结束值（含） Returns bool 是否匹配 IsStringLengthOnlyNumberAndEnglishCharacter(string, int, int) 验证字符串长度范围（字符串内只包含数字和/或英文字母） [若要验证固定长度，可传入相同的两个长度数值] public static bool IsStringLengthOnlyNumberAndEnglishCharacter(string input, int lengthBegin, int lengthEnd) Parameters input string 待验证的字符串 lengthBegin int 长度范围起始值（含） lengthEnd int 长度范围结束值（含） Returns bool 是否匹配 IsTelePhoneNumber(string) 验证固定电话号码 [3位或4位区号；区号可以用小括号括起来；区号可以省略；区号与本地号间可以用减号或空格隔开；可以有3位数的分机号，分机号前要加减号] public static bool IsTelePhoneNumber(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsURL(string) 验证网址（可以匹配IPv4地址但没对IPv4地址进行格式验证；IPv6暂时没做匹配） [允许省略\"://\"；可以添加端口号；允许层级；允许传参；域名中至少一个点号且此点号前要有内容] public static bool IsURL(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配 IsZipCode(string) 验证邮政编码 public static bool IsZipCode(string input) Parameters input string 待验证的字符串 Returns bool 是否匹配"
  },
  "api/Tool.Utils.html": {
    "href": "api/Tool.Utils.html",
    "title": "Namespace Tool.Utils | Tool.Net",
    "keywords": "Namespace Tool.Utils Classes AppSettings 获取配置文件数据 (允许修改原文件异步队列式更新) Crc32 提供 CRC32 算法的实现 DBNullConverter Json DBNull 将 {} 改Null输出 DataHelper 数据集帮助类 DataTableProperty 表示一个 实体字段对应的表下标 DateConverter Json 标准或自定义日期和时间格式字符串。 EntityBuilder 用于提高，对象构造（只支持无参构造），对象取值，对象赋值。 FileManager 文件管理器 FlashLogMessage 日志内容 FolderInfo 文件详情类 HashHelper 提供用于计算指定文件哈希值的方法 例如计算文件的MD5值: String hashMd5=HashHelper.ComputeMD5(\"MyFile.txt\"); 例如计算文件的CRC32值: String hashCrc32 = HashHelper.ComputeCRC32(\"MyFile.txt\"); 例如计算文件的SHA1值: String hashSha1 =HashHelper.ComputeSHA1(\"MyFile.txt\"); HttpHelpers 提供部分的API请求访问类 (内置调用接口 替换为 HttpClient) 注意此类下所有函数调用皆无异常抛出，但为了方便问题排查，增加异常相关日志 IntPtrHelper 关于内存地址读写的操作帮助类 IocCore 提供一个完全独立的 Ioc 容器 IocHelper 用于提供全局支持的 TOC 对象 服务生命周期 在Microsoft依赖项注入框架中，我们可以使用三种生命周期注册服务，分别是单例（Singleton）、瞬时（Transient）、作用域（Scoped），在上面的代码中， 我使用了AddSingleton()来注册服务。 使用Singleton服务的优点是我们不会创建多个服务实例，只会创建一个实例，保存到DI容器中，直到程序退出，这不仅效率高，而且性能高，但是有一个要注意的点， 如果在多线程中使用了Singleton,要考虑线程安全的问题，保证它不会有冲突。 瞬时（Transient）和单例（Singleton）模式是相反的，每次使用时，DI容器都是创建一个新的实例。 作用域（Scoped），在一个作用域内，会使用同一个实例，像EF Core的DbContext上下文就被注册为作用域服务。 JsonConverterHelper 获取 系统中可用的 Json 自定义转换对象 JsonHelper 对 JsonSerializer 的拓展类 Log 日志工具类 MemorySegment<T> 提供内存连续模型 ObjectPool<T> 自定义的公共对象（重用模型） ReflectionHelper 获取Type 对象的封装类 TextUtility 提供技术支持的类库 TypeExtension 对Type进行升级 TypeHelper 类型助手 TypeParse 判读该值是否是可以被强制转换 Utility 常用方法类 Validate 各种验证类，包含正则表达式 Validate.CardDetail 银行卡信息 Validator 相关正则类（包含常用的正则表达式）高达65种供大家参考学习，使用。 Structs JsonVar 一种获取 Json 格式数据的实现 Enums FlashLogLevel 日志等级 FsoMethod 文件类型 UserSystem 根据 Agent 判断当前请求用户的设备名 枚举"
  },
  "api/Tool.Web.Api.ApiAshx.html": {
    "href": "api/Tool.Web.Api.ApiAshx.html",
    "title": "Class ApiAshx | Tool.Net",
    "keywords": "Class ApiAshx Namespace Tool.Web.Api Assembly Tool.Net.dll 针对于新版Ashx路由模式，的同步，异步，支持 该控制器，相对于Mvc的控制器轻，应有功能都有，可自由扩展。 方便实现，您最想实现的效果，最大的优点还是因为他轻量级。 Api 方法创建示例： public GetApi( context) => Json(new { msg = \"路由版本api。\" }); Api 方法创建示例：(异步实现) public async GetTaskApi( context) => await JsonAsync(new { msg = \"路由版本api。\" }); public abstract class ApiAshx : IHttpAsynApi, IHttpApi, IDisposable Inheritance object ApiAshx Implements IHttpAsynApi IHttpApi IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties ApiKey 获取当前请求的接口唯一ID public string ApiKey { get; } Property Value string ContentLength 指定客户端发送的内容长度（以字节计）。 public long? ContentLength { get; } Property Value long? 客户端发送的内容的长度（以字节为单位）。 ContentType 获取或设置传入请求的 MIME 内容类型。(ContentType) public string ContentType { get; set; } Property Value string 表示传入请求的 MIME 内容类型的字符串，例如，“text/html”。 其他常见 MIME 类型包括“audio.wav”、“image/gif”和“application/pdf”。 Context 获取当前 请求获取 HttpContext 对象。 public HttpContext Context { get; } Property Value HttpContext Cookies 获取客户端发送的 Cookie 的集合。 public IRequestCookieCollection Cookies { get; } Property Value IRequestCookieCollection 表示客户端的 Cookie 变量的 System.Web.HttpCookieCollection 对象。 HttpMethod 获取客户端使用的 HTTP 数据传输方法（如 GET、POST 或 HEAD）。 public string HttpMethod { get; } Property Value string 客户端使用的 HTTP 数据传输方法。 Request 获取当前 HTTP 请求的 HttpRequest 对象。 public HttpRequest Request { get; } Property Value HttpRequest RequestBody 获取传入的 HTTP 实体主体的内容。 public Stream RequestBody { get; } Property Value Stream 表示传入的 HTTP 内容主体的内容的 System.IO.Stream 对象。 Response 获取当前 HTTP 响应的 HttpResponse 对象。 public HttpResponse Response { get; } Property Value HttpResponse ResponseBody 启用到输出 HTTP 内容主体的二进制输出。 public Stream ResponseBody { get; } Property Value Stream 表示输出 HTTP 内容主体的原始内容的 Stream。 Exceptions Exception Body 不可用。 RouteData 路由模式 public AshxRouteData RouteData { get; } Property Value AshxRouteData Session 为当前 HTTP 请求获取 ISession 对象。 public ISession Session { get; } Property Value ISession TotalBytes 获取当前输入流中的字节数。 public long TotalBytes { get; } Property Value long 输入流中的字节数。 Methods AshxException(AshxException) 当前API接口发生异常时触发 protected virtual void AshxException(AshxException ex) Parameters ex AshxException 异常信息 Initialize(Ashx) 当链接真实有效时被执行，默认返回成功。（该方法是用于给使用者重写的） protected virtual bool Initialize(Ashx ashx) Parameters ashx Ashx 当前可以被调起的接口信息 Returns bool 当前请求会根据返回状态决定是否继续执行接口方法 Json(object) Json 格式输出，将 System.Object 写入 HTTP 响应流。 public void Json(object obj) Parameters obj object 要写入 HTTP 输出流的 System.Object。 Json(object, JsonSerializerOptions) Json 格式输出，将 System.Object 写入 HTTP 响应流。 public void Json(object obj, JsonSerializerOptions JsonOptions) Parameters obj object 要写入 HTTP 输出流的 System.Object。 JsonOptions JsonSerializerOptions Json 特殊格式输出 JsonAsync(object) Json 格式输出，将 System.Object 写入 HTTP 响应流。 public Task JsonAsync(object obj) Parameters obj object 要写入 HTTP 输出流的 System.Object。 Returns Task JsonAsync(object, JsonSerializerOptions) Json 格式输出，将 System.Object 写入 HTTP 响应流。 public Task JsonAsync(object obj, JsonSerializerOptions JsonOptions) Parameters obj object 要写入 HTTP 输出流的 System.Object。 JsonOptions JsonSerializerOptions Json 特殊格式输出 Returns Task OnResult(Ashx) 在请求正常完成结束时触发 protected virtual void OnResult(Ashx ashx) Parameters ashx Ashx 获取接口信息 Redirect(string) 将请求重定向到新 URL 并指定该新 URL。 public void Redirect(string url) Parameters url string 目标位置。 Exceptions Exception 在发送了 HTTP 头之后尝试重定向。 Redirect(string, bool) 将客户端重定向到新的 URL。 指定新的 URL 并指定当前页的执行是否应终止。 public void Redirect(string url, bool endResponse) Parameters url string 目标的位置。 endResponse bool 指示当前页的执行是否应终止。 Exceptions ArgumentNullException url 为 null。 ArgumentException url 包含换行符。 Exception 在发送了 HTTP 头之后尝试重定向。 ApplicationException 页请求是回调的结果。 Write(object) 将 System.Object 写入 HTTP 响应流。 public void Write(object obj) Parameters obj object 要写入 HTTP 输出流的 System.Object。 Write(object, WriteType) 将 System.Object 写入 HTTP 响应流。 public void Write(object obj, WriteType contentType) Parameters obj object 要写入 HTTP 输出流的 System.Object。 contentType WriteType 返回客户端的类型 Write(string) 将一个字符串写入 HTTP 响应输出流。 public void Write(string test) Parameters test string 要写入 HTTP 输出流的字符串。 WriteAsync(object) 将 System.Object 写入 HTTP 响应流。 public Task WriteAsync(object obj) Parameters obj object 要写入 HTTP 输出流的 System.Object。 Returns Task WriteAsync(object, WriteType) 将 System.Object 写入 HTTP 响应流。 public Task WriteAsync(object obj, WriteType contentType) Parameters obj object 要写入 HTTP 输出流的 System.Object。 contentType WriteType 返回客户端的类型 Returns Task WriteAsync(string) 将一个字符串写入 HTTP 响应输出流。 public Task WriteAsync(string test) Parameters test string 要写入 HTTP 输出流的字符串。 Returns Task"
  },
  "api/Tool.Web.Api.ApiCore.ApiParameter.html": {
    "href": "api/Tool.Web.Api.ApiCore.ApiParameter.html",
    "title": "Class ApiParameter | Tool.Net",
    "keywords": "Class ApiParameter Namespace Tool.Web.Api.ApiCore Assembly Tool.Net.dll Api 调用函数 参数值范围可控 public class ApiParameter : Parameter Inheritance object Parameter ApiParameter Inherited Members Parameter.GetParameter Parameter.Name Parameter.Type Parameter.SpaceType Parameter.ParameterType Parameter.DefaultValue Parameter.IsDBNull Parameter.IsType Parameter.ParameterObj object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ApiParameter(Parameter, AshxState, ref bool) 构造Api验证参数 public ApiParameter(Parameter parameter, AshxState state, ref bool isbody) Parameters parameter Parameter 参数 state AshxState 类型 isbody bool 是否已获取body Properties GetVal 获取当前函数参数的值类型 public Val GetVal { get; } Property Value Val KeyName 获取当前实际生效的Key名称 public string KeyName { get; } Property Value string"
  },
  "api/Tool.Web.Api.ApiCore.AshxHandlerOrAsync.html": {
    "href": "api/Tool.Web.Api.ApiCore.AshxHandlerOrAsync.html",
    "title": "Class AshxHandlerOrAsync | Tool.Net",
    "keywords": "Class AshxHandlerOrAsync Namespace Tool.Web.Api.ApiCore Assembly Tool.Net.dll 同步Ashx的请求实现或异步Ashx的请求实现 public static class AshxHandlerOrAsync Inheritance object AshxHandlerOrAsync Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Fields AshxVersion 当前Ashx版本号 public const string AshxVersion = \"3.9.0\" Field Value string AshxVersionHeaderAsyncName Ashx路由模式的表头 异步 public const string AshxVersionHeaderAsyncName = \"X-AshxApi-Async-Version\" Field Value string AshxVersionHeaderName Ashx路由模式的表头 同步 public const string AshxVersionHeaderName = \"X-AshxApi-Version\" Field Value string MinAshxVersionHeaderAsyncName Ashx路由模式的表头 异步 （极小） public const string MinAshxVersionHeaderAsyncName = \"X-MinApi-Async-Version\" Field Value string MinAshxVersionHeaderName Ashx路由模式的表头 同步（极小） public const string MinAshxVersionHeaderName = \"X-MinApi-Version\" Field Value string Methods CustomOutput(HttpContext, string, string, int) 设置失败，请求错误状态，自定义输出结果 public static Task CustomOutput(HttpContext HttpContext, string ContentType, string test, int StatusCode) Parameters HttpContext HttpContext ContentType string test string StatusCode int Returns Task"
  },
  "api/Tool.Web.Api.ApiCore.AshxOptions.html": {
    "href": "api/Tool.Web.Api.ApiCore.AshxOptions.html",
    "title": "Class AshxOptions | Tool.Net",
    "keywords": "Class AshxOptions Namespace Tool.Web.Api.ApiCore Assembly Tool.Net.dll Ashx 相关选项，提高使用 public class AshxOptions Inheritance object AshxOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors AshxOptions() 初始化对象 public AshxOptions() Properties EnableEndpointRouting 是否使用终结点模式路由 (目前公测阶段 3.0 功能完善版) public bool EnableEndpointRouting { get; set; } Property Value bool IsAsync 是否采用异步线程池，处理每次请求路由的过程 public bool IsAsync { get; set; } Property Value bool JsonOptions 允许注册 全局JsonSerializerOptions Json 序列化条件。 默认 AshxOptions.JsonOptionsDefault 值 public JsonSerializerOptions JsonOptions { get; set; } Property Value JsonSerializerOptions JsonOptionsDefault 默认Json序列化配置 public static JsonSerializerOptions JsonOptionsDefault { get; } Property Value JsonSerializerOptions"
  },
  "api/Tool.Web.Api.ApiCore.IHttpApi.html": {
    "href": "api/Tool.Web.Api.ApiCore.IHttpApi.html",
    "title": "Interface IHttpApi | Tool.Net",
    "keywords": "Interface IHttpApi Namespace Tool.Web.Api.ApiCore Assembly Tool.Net.dll Tool 框架自定接口，同步 public interface IHttpApi : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods Initialize(Ashx) 验证用户验证操作 bool Initialize(Ashx ashx) Parameters ashx Ashx 对象 Returns bool Request(object[]) 通过实现 注入实现 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。 void Request(object[] _objs) Parameters _objs object[] SetRouteData(AshxRouteData) 初始化绑定路由规则，必须第一个调用 void SetRouteData(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 路由规则信息"
  },
  "api/Tool.Web.Api.ApiCore.IHttpAsynApi.html": {
    "href": "api/Tool.Web.Api.ApiCore.IHttpAsynApi.html",
    "title": "Interface IHttpAsynApi | Tool.Net",
    "keywords": "Interface IHttpAsynApi Namespace Tool.Web.Api.ApiCore Assembly Tool.Net.dll Tool 框架自定接口，异步 public interface IHttpAsynApi : IHttpApi, IDisposable Inherited Members IHttpApi.SetRouteData(AshxRouteData) IHttpApi.Initialize(Ashx) IHttpApi.Request(object[]) IDisposable.Dispose() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods ContinueWith(Task) 完成后任务 void ContinueWith(Task task) Parameters task Task 任务信息 TaskRequest(object[]) 启动对 HTTP 处理程序的异步调用。 Task TaskRequest(object[] _objs) Parameters _objs object[] 处理该请求所需的数据。 Returns Task 包含有关线程状态信息的 Task。"
  },
  "api/Tool.Web.Api.ApiCore.IMinHttpApi.html": {
    "href": "api/Tool.Web.Api.ApiCore.IMinHttpApi.html",
    "title": "Interface IMinHttpApi | Tool.Net",
    "keywords": "Interface IMinHttpApi Namespace Tool.Web.Api.ApiCore Assembly Tool.Net.dll Tool 框架自定接口，同步 （最小API） public interface IMinHttpApi Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods Initialize(AshxRouteData) 验证用户验证操作 bool Initialize(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 对象 Returns bool Request(AshxRouteData, object[]) 通过实现 注入实现 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。 void Request(AshxRouteData ashxRoute, object[] _objs) Parameters ashxRoute AshxRouteData _objs object[]"
  },
  "api/Tool.Web.Api.ApiCore.IMinHttpAsynApi.html": {
    "href": "api/Tool.Web.Api.ApiCore.IMinHttpAsynApi.html",
    "title": "Interface IMinHttpAsynApi | Tool.Net",
    "keywords": "Interface IMinHttpAsynApi Namespace Tool.Web.Api.ApiCore Assembly Tool.Net.dll Tool 框架自定接口，异步（最小API） public interface IMinHttpAsynApi : IMinHttpApi Inherited Members IMinHttpApi.Initialize(AshxRouteData) IMinHttpApi.Request(AshxRouteData, object[]) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods ContinueWith(Task, AshxRouteData) 完成后任务 void ContinueWith(Task task, AshxRouteData ashxRoute) Parameters task Task 任务信息 ashxRoute AshxRouteData 路由信息对象 TaskRequest(AshxRouteData, object[]) 启动对 HTTP 处理程序的异步调用。 Task TaskRequest(AshxRouteData ashxRoute, object[] _objs) Parameters ashxRoute AshxRouteData 路由信息对象 _objs object[] 处理该请求所需的数据。 Returns Task 包含有关线程状态信息的 Task。"
  },
  "api/Tool.Web.Api.ApiCore.html": {
    "href": "api/Tool.Web.Api.ApiCore.html",
    "title": "Namespace Tool.Web.Api.ApiCore | Tool.Net",
    "keywords": "Namespace Tool.Web.Api.ApiCore Classes ApiParameter Api 调用函数 参数值范围可控 AshxHandlerOrAsync 同步Ashx的请求实现或异步Ashx的请求实现 AshxOptions Ashx 相关选项，提高使用 Interfaces IHttpApi Tool 框架自定接口，同步 IHttpAsynApi Tool 框架自定接口，异步 IMinHttpApi Tool 框架自定接口，同步 （最小API） IMinHttpAsynApi Tool 框架自定接口，异步（最小API）"
  },
  "api/Tool.Web.Api.ApiOut.html": {
    "href": "api/Tool.Web.Api.ApiOut.html",
    "title": "Class ApiOut | Tool.Net",
    "keywords": "Class ApiOut Namespace Tool.Web.Api Assembly Tool.Net.dll 系统默认 MinApi Api输出结果 抽象类，用于普通返回值，特殊返回值建议您自己实现。 public abstract class ApiOut : IApiOut Inheritance object ApiOut Implements IApiOut Derived FileOut JsonOut RedirectOut ViewOut WriteOut Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ApiOut() 无参构造 protected ApiOut() Properties ContentType 输出类型 public abstract string ContentType { get; set; } Property Value string StatusCode HTTP 返回 Code public abstract int StatusCode { get; set; } Property Value int Methods EventStream(Func<EventStream, Task>, int) SSE服务器事件流 public static EventStreamOut EventStream(Func<EventStream, Task> func, int retry = 3000) Parameters func Func<EventStream, Task> 流任务 retry int 超时重连时间 Returns EventStreamOut 输出对象 EventStreamAsync(Func<EventStream, Task>, int) SSE服务器事件流 public static Task<EventStreamOut> EventStreamAsync(Func<EventStream, Task> func, int retry = 3000) Parameters func Func<EventStream, Task> 流任务 retry int 超时重连时间 Returns Task<EventStreamOut> 输出对象 ExecuteOutAsync(AshxRouteData) 系统回调，用于完成该请求任务的输出 public abstract Task ExecuteOutAsync(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 包含所有有效信息 Returns Task 异步任务 File(string, byte[]) 向客户端返回下载的资源文件 public static FileOut File(string name, byte[] bytes) Parameters name string 文件名称 bytes byte[] 文件字节流 Returns FileOut 输出对象 File(string, Stream) 向客户端返回下载的资源文件 public static FileOut File(string name, Stream fileStream) Parameters name string 文件名称 fileStream Stream 文件流对象 Returns FileOut 输出对象 FileAsync(string, byte[]) 异步向客户端返回下载的资源文件 public static Task<FileOut> FileAsync(string name, byte[] bytes) Parameters name string 文件名称 bytes byte[] 文件字节流 Returns Task<FileOut> 输出对象 FileAsync(string, Stream) 异步向客户端返回下载的资源文件 public static Task<FileOut> FileAsync(string name, Stream fileStream) Parameters name string 文件名称 fileStream Stream 文件流对象 Returns Task<FileOut> 输出对象 Json(object) 向客户端返回JSON数据 public static JsonOut Json(object obj) Parameters obj object 源数据 Returns JsonOut 输出对象 Json(object, JsonSerializerOptions) 向客户端返回JSON数据 public static JsonOut Json(object obj, JsonSerializerOptions JsonOptions) Parameters obj object 源数据 JsonOptions JsonSerializerOptions Json 转换条件 Returns JsonOut 输出对象 JsonAsync(object) 异步向客户端返回JSON数据 public static Task<JsonOut> JsonAsync(object obj) Parameters obj object 源数据 Returns Task<JsonOut> 输出对象 JsonAsync(object, JsonSerializerOptions) 异步向客户端返回JSON数据 public static Task<JsonOut> JsonAsync(object obj, JsonSerializerOptions JsonOptions) Parameters obj object 源数据 JsonOptions JsonSerializerOptions Json 转换条件 Returns Task<JsonOut> 输出对象 NoContent() 无输出结果 public static NoContentOut NoContent() Returns NoContentOut 输出对象 NoContentAsync() 无输出结果 public static Task<NoContentOut> NoContentAsync() Returns Task<NoContentOut> 输出对象 PathView(string) 向客户端返回页面 public static ViewOut PathView(string pathName) Parameters pathName string 源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径 的文件夹名称 支持多重文件 不能包含文件 Returns ViewOut 输出对象 PathViewAsync(string) 异步向客户端返回页面 public static Task<ViewOut> PathViewAsync(string pathName) Parameters pathName string 源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径 的文件夹名称 支持多重文件 不能包含文件 Returns Task<ViewOut> 输出对象 Redirect(string) 向客户端返回重定向的URl public static RedirectOut Redirect(string url) Parameters url string 跳转的URL Returns RedirectOut 输出对象 RedirectAsync(string) 异步向客户端返回重定向的URl public static Task<RedirectOut> RedirectAsync(string url) Parameters url string 跳转的URL Returns Task<RedirectOut> 输出对象 View() 向客户端返回页面（默认模式路径：wwwroot文件夹下，加上控制器名和接口名：/Views/Api/Get.html） public static ViewOut View() Returns ViewOut 输出对象 View(string) 向客户端返回页面 public static ViewOut View(string viewName) Parameters viewName string 源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径 Returns ViewOut 输出对象 ViewAsync() 异步向客户端返回页面（默认模式路径：ApiView文件夹下，加上控制器名和接口名：/Views/Api/Get.html） public static Task<ViewOut> ViewAsync() Returns Task<ViewOut> 输出对象 ViewAsync(string) 异步向客户端返回页面 public static Task<ViewOut> ViewAsync(string viewName) Parameters viewName string 源数据(是wwwroot文件夹下面的相对路径)，不支持绝对路径 Returns Task<ViewOut> 输出对象 Write(object) 向客户端返回Text数据 public static WriteOut Write(object obj) Parameters obj object 源数据 Returns WriteOut 输出对象 WriteAsync(object) 异步向客户端返回Text数据 public static Task<WriteOut> WriteAsync(object obj) Parameters obj object 源数据 Returns Task<WriteOut> 输出对象"
  },
  "api/Tool.Web.Api.ApiVal.html": {
    "href": "api/Tool.Web.Api.ApiVal.html",
    "title": "Class ApiVal | Tool.Net",
    "keywords": "Class ApiVal Namespace Tool.Web.Api Assembly Tool.Net.dll 用于 Api 请求参数，类型定义，区分不同阐述的值。 [AttributeUsage(AttributeTargets.Parameter, Inherited = false)] public class ApiVal : Attribute Inheritance object Attribute ApiVal Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ApiVal(Val) 设置当前参数的值来源 public ApiVal(Val bodyState) Parameters bodyState Val 值来源类型 ApiVal(Val, string) 设置当前参数的值来源 public ApiVal(Val bodyState, string name) Parameters bodyState Val 值来源类型 name string 获取值实际对应的Key Properties IsName 获取设置，获取值名称是否生效。 public bool IsName { get; } Property Value bool Name 获取设置，当前获取对象的名称（针对于名称奇特，无法用代码表示的名称） public string Name { get; } Property Value string State 请求指定参数的类型 public Val State { get; } Property Value Val"
  },
  "api/Tool.Web.Api.Ashx.html": {
    "href": "api/Tool.Web.Api.Ashx.html",
    "title": "Class Ashx | Tool.Net",
    "keywords": "Class Ashx Namespace Tool.Web.Api Assembly Tool.Net.dll 针对于一般处理程序，备注一般处理程序必须继承于（ApiAshx 类才会生效） 所有状态（用于更好的使用API） [Serializable] [AttributeUsage(AttributeTargets.Method, Inherited = false)] public class Ashx : Attribute Inheritance object Attribute Ashx Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors Ashx() 用于实现构造(带默认参数) public Ashx() Properties CrossDomain 表示当前请求是否支持跨域请求，设置您的跨域对象 public CrossDomain CrossDomain { get; } Property Value CrossDomain ID 表示为该方法指定了一个名称，用于对外的访问安全。（注明：第一次设置的时候生效，后期修改无效。） public string ID { get; set; } Property Value string IsMethods 表示当前方法是否包含在被调起方法内。（注明：第一次设置的时候生效，后期修改无效。） public bool IsMethods { get; set; } Property Value bool IsMinApi 标注当前请求是否是请求的最小API public bool IsMinApi { get; } Property Value bool IsOnAshxEvent 获取当前调用方法是不是事件方法，声明事件方法必须使用 OnAshxEvent 类作为返回值。 public bool IsOnAshxEvent { get; } Property Value bool IsTask 标注当前请求是否是异步方法（注明：该参数只支持 ApiAshx/MinApi 的新路由方式支持） public bool IsTask { get; } Property Value bool Methods 表示该方法的名称 public string Methods { get; } Property Value string Parameters 表示该方法所包含的访问参数 public ApiParameter[] Parameters { get; } Property Value ApiParameter[] State 请求的一个状态 public AshxState State { get; set; } Property Value AshxState Methods GetAttribute<T>() 根据指定的自定义类获取当前接口对象上的Attribute（自定义类） public T GetAttribute<T>() where T : Attribute Returns T 返回Attribute（自定义类） Type Parameters T 指定的Attribute（自定义类） GetAttributes() 获取当前接口对象上的所有Attribute（自定义类） public Attribute[] GetAttributes() Returns Attribute[] 返回所有的Attribute（自定义类） TryGetValue(Type, out Attribute) 获取自定义类，根据Type获取 （缓存效率更高。） public bool TryGetValue(Type key, out Attribute value) Parameters key Type 自定义类的Type value Attribute 返回的类 Returns bool 返回Attribute（自定义类） TryGetValue<T>(out T) 获取自定义类，根据Type获取 （缓存效率更高。） public bool TryGetValue<T>(out T value) where T : Attribute Parameters value T 返回的类 Returns bool 返回Attribute（自定义类） Type Parameters T 指定的Attribute（自定义类）"
  },
  "api/Tool.Web.Api.AshxException.html": {
    "href": "api/Tool.Web.Api.AshxException.html",
    "title": "Class AshxException | Tool.Net",
    "keywords": "Class AshxException Namespace Tool.Web.Api Assembly Tool.Net.dll Api的异常处理类 [Serializable] public class AshxException : Exception, ISerializable Inheritance object Exception AshxException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties ExceptionHandled 表示该异常是否已经处理 public bool ExceptionHandled { get; set; } Property Value bool ID 表示为该方法指定了一个名称，用于对外的访问安全 public string ID { get; set; } Property Value string IsParameters 表示异常输出结果是否包含详细接口调用数据 public bool IsParameters { get; set; } Property Value bool JsonOptions Json配置对象 public JsonSerializerOptions JsonOptions { get; } Property Value JsonSerializerOptions Methods 表示该方法的名称 public string Methods { get; set; } Property Value string Parameters 获取可读的请求参数信息 public IReadOnlyDictionary<string, (Val val, string name, object obj)> Parameters { get; } Property Value IReadOnlyDictionary<string, (Val val, string name, object obj)> State 请求的一个状态 public AshxState State { get; } Property Value AshxState Methods ToParameters() 获取接口调用参数文字版 public string ToParameters() Returns string 文字表达 ToString() 创建并返回当前异常的字符串表示形式。 public override string ToString() Returns string 当前异常的字符串表示形式。"
  },
  "api/Tool.Web.Api.AshxState.html": {
    "href": "api/Tool.Web.Api.AshxState.html",
    "title": "Enum AshxState | Tool.Net",
    "keywords": "Enum AshxState Namespace Tool.Web.Api Assembly Tool.Net.dll 针对于Api需要接受相应的状态 public enum AshxState : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields All = 0 该状态表示都包含。 Delete = 32 请求服务器删除指定的页面。 Get = 2 该状态表示 get通过地址栏传输。（get参数有长度限制（受限于url长度）） Head = 1 只请求页面的首部。 Patch = 16 实体中包含一个表，表中说明与该URI所表示的原内容的区别。 Post = 4 该状态表示 post通过报文传输。（post无限制） Put = 8 从客户端向服务器传送的数据取代指定的文档的内容。"
  },
  "api/Tool.Web.Api.CrossDomain.html": {
    "href": "api/Tool.Web.Api.CrossDomain.html",
    "title": "Class CrossDomain | Tool.Net",
    "keywords": "Class CrossDomain Namespace Tool.Web.Api Assembly Tool.Net.dll 指定允许其他域名访问，可跨域 相关配置： 'Access-Control-Allow-Origin:http://172.20.0.206' 一般用法（*，指定域，动态设置），3是因为*不允许携带认证头和cookies 'Access-Control-Allow-Credentials:true' 是否允许后续请求携带认证信息（cookies）,该值只能是true,否则不返回 'Access-Control-Allow-Methods:HEAD,GET,POST,PUT,PATCH,DELETE' 允许的请求类型 'Access-Control-Allow-Headers:x-requested-with,content-type' 允许的请求头字段 [Serializable] [AttributeUsage(AttributeTargets.Method, Inherited = false)] public class CrossDomain : Attribute Inheritance object Attribute CrossDomain Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties Credentials 是否允许后续请求携带认证信息（cookies）,该值只能是true,否则不返回 public bool Credentials { get; set; } Property Value bool Headers 允许的请求头字段 例如：content-type public string Headers { get; set; } Property Value string Methods 允许的请求类型 可选：HEAD,GET,POST,PUT,PATCH,DELETE public string Methods { get; set; } Property Value string Origin 表示当前跨域请求运行的域名 public string Origin { get; set; } Property Value string"
  },
  "api/Tool.Web.Api.EventStreamOut.html": {
    "href": "api/Tool.Web.Api.EventStreamOut.html",
    "title": "Class EventStreamOut | Tool.Net",
    "keywords": "Class EventStreamOut Namespace Tool.Web.Api Assembly Tool.Net.dll SSE服务器事件流 public class EventStreamOut : IApiOut Inheritance object EventStreamOut Implements IApiOut Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors EventStreamOut(Func<EventStream, Task>, int) 创建流任务 public EventStreamOut(Func<EventStream, Task> func, int retry = 3000) Parameters func Func<EventStream, Task> 任务 retry int 超时多久或断线后重连（浏览器行为）"
  },
  "api/Tool.Web.Api.FileOut.html": {
    "href": "api/Tool.Web.Api.FileOut.html",
    "title": "Class FileOut | Tool.Net",
    "keywords": "Class FileOut Namespace Tool.Web.Api Assembly Tool.Net.dll 系统默认 ApiOut 输出对象的实现类，文件输出处理 public class FileOut : ApiOut, IApiOut Inheritance object ApiOut FileOut Implements IApiOut Inherited Members ApiOut.Json(object) ApiOut.JsonAsync(object) ApiOut.Json(object, JsonSerializerOptions) ApiOut.JsonAsync(object, JsonSerializerOptions) ApiOut.Write(object) ApiOut.WriteAsync(object) ApiOut.View() ApiOut.View(string) ApiOut.PathView(string) ApiOut.ViewAsync() ApiOut.ViewAsync(string) ApiOut.PathViewAsync(string) ApiOut.File(string, Stream) ApiOut.FileAsync(string, Stream) ApiOut.File(string, byte[]) ApiOut.FileAsync(string, byte[]) ApiOut.Redirect(string) ApiOut.RedirectAsync(string) ApiOut.NoContent() ApiOut.NoContentAsync() ApiOut.EventStream(Func<EventStream, Task>, int) ApiOut.EventStreamAsync(Func<EventStream, Task>, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors FileOut(string, byte[]) 初始化构造 public FileOut(string name, byte[] bytes) Parameters name string 文件名称 bytes byte[] 文件字节流 FileOut(string, Stream) 初始化构造 public FileOut(string name, Stream fileStream) Parameters name string 文件名称 fileStream Stream 文件流对象 Properties ContentType 下载的文件格式 public override string ContentType { get; set; } Property Value string FileStream 资源流对象 public Stream FileStream { get; set; } Property Value Stream Name 下载文件名称 public string Name { get; set; } Property Value string StatusCode 下载的状态码 public override int StatusCode { get; set; } Property Value int Methods ExecuteOutAsync(AshxRouteData) 下载核心任务对象 public override Task ExecuteOutAsync(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 核心传输对象 Returns Task 返回任务"
  },
  "api/Tool.Web.Api.IApiOut.html": {
    "href": "api/Tool.Web.Api.IApiOut.html",
    "title": "Interface IApiOut | Tool.Net",
    "keywords": "Interface IApiOut Namespace Tool.Web.Api Assembly Tool.Net.dll MinApi Api 返回结果接口，用于实现各种返回输出 public interface IApiOut Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Methods HttpOutput(AshxRouteData) 系统回调，获取输出结果函数 Task HttpOutput(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 包含所有有效信息 Returns Task"
  },
  "api/Tool.Web.Api.JsonOut.html": {
    "href": "api/Tool.Web.Api.JsonOut.html",
    "title": "Class JsonOut | Tool.Net",
    "keywords": "Class JsonOut Namespace Tool.Web.Api Assembly Tool.Net.dll 系统默认 ApiOut 输出对象的实现类，JSON格式处理 public class JsonOut : ApiOut, IApiOut Inheritance object ApiOut JsonOut Implements IApiOut Inherited Members ApiOut.Json(object) ApiOut.JsonAsync(object) ApiOut.Json(object, JsonSerializerOptions) ApiOut.JsonAsync(object, JsonSerializerOptions) ApiOut.Write(object) ApiOut.WriteAsync(object) ApiOut.View() ApiOut.View(string) ApiOut.PathView(string) ApiOut.ViewAsync() ApiOut.ViewAsync(string) ApiOut.PathViewAsync(string) ApiOut.File(string, Stream) ApiOut.FileAsync(string, Stream) ApiOut.File(string, byte[]) ApiOut.FileAsync(string, byte[]) ApiOut.Redirect(string) ApiOut.RedirectAsync(string) ApiOut.NoContent() ApiOut.NoContentAsync() ApiOut.EventStream(Func<EventStream, Task>, int) ApiOut.EventStreamAsync(Func<EventStream, Task>, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors JsonOut(object) 创建Json输出对象 public JsonOut(object data) Parameters data object 可被序列化的数据源 JsonOut(object, JsonSerializerOptions) 创建Json输出对象 public JsonOut(object data, JsonSerializerOptions jsonOptions) Parameters data object 可被序列化的数据源 jsonOptions JsonSerializerOptions Json 转换条件 Properties ContentType 输出类型 public override string ContentType { get; set; } Property Value string Data 输出结果数据 public object Data { get; set; } Property Value object JsonOptions Json 转换条件 public JsonSerializerOptions JsonOptions { get; set; } Property Value JsonSerializerOptions StatusCode HTTP 返回 Code public override int StatusCode { get; set; } Property Value int Methods ExecuteOutAsync(AshxRouteData) 实现JSON格式的输出 public override Task ExecuteOutAsync(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 当前请求对象 Returns Task"
  },
  "api/Tool.Web.Api.MinApi.html": {
    "href": "api/Tool.Web.Api.MinApi.html",
    "title": "Class MinApi | Tool.Net",
    "keywords": "Class MinApi Namespace Tool.Web.Api Assembly Tool.Net.dll 针对于新版Ashx路由模式，的同步，异步，支持（此Api为最轻量级，请严格遵循实现写法） 给你一个快的理由，因为该路由接口类在启动路由时就已经创建，中途调用，无需创建新的实例，达到最大性能优化。 同时请注意您这个Api类对象的生命周期，将伴随着整个Web应用程序一致，也就意味着类中的所有对象将不是安全的，请合理声明类变量使用。 Api 方法创建示例： public GetApi( context) => ApiOut.Json(new { msg = \"最小，路由版本api。\" }); Api 方法创建示例：(异步实现) public async GetTaskApi( context) => await ApiOut.JsonAsync(new { msg = \"最小，路由版本api。\" }); public abstract class MinApi : IMinHttpAsynApi, IMinHttpApi Inheritance object MinApi Implements IMinHttpAsynApi IMinHttpApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Methods AshxException(AshxException) 当前API接口发生异常时触发 protected virtual IApiOut AshxException(AshxException ex) Parameters ex AshxException 异常信息 Returns IApiOut Initialize(AshxRouteData) 当链接真实有效时被执行，默认返回成功。（该方法是用于给使用者重写的） protected virtual IApiOut Initialize(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 当前请求的AshxRouteData路由，包含全部详情信息 Returns IApiOut 返回输出结果，当为null的时候，表示继续执行，不为空执行输出结果。 OnResult(AshxRouteData) 在请求正常完成结束时触发 protected virtual void OnResult(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 获取接口信息"
  },
  "api/Tool.Web.Api.NoContentOut.html": {
    "href": "api/Tool.Web.Api.NoContentOut.html",
    "title": "Class NoContentOut | Tool.Net",
    "keywords": "Class NoContentOut Namespace Tool.Web.Api Assembly Tool.Net.dll 无返回结果 public class NoContentOut : IApiOut Inheritance object NoContentOut Implements IApiOut Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持"
  },
  "api/Tool.Web.Api.OnAshxEvent.html": {
    "href": "api/Tool.Web.Api.OnAshxEvent.html",
    "title": "Class OnAshxEvent | Tool.Net",
    "keywords": "Class OnAshxEvent Namespace Tool.Web.Api Assembly Tool.Net.dll 针对于继承 ApiAshx 的类，用于事件方法接口，需要另一个模块驱动的消息接口，可以使用 public sealed class OnAshxEvent : IDisposable Inheritance object OnAshxEvent Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors OnAshxEvent(Action<OnAshxEvent>) 完成该有的配置 public OnAshxEvent(Action<OnAshxEvent> Event) Parameters Event Action<OnAshxEvent> 当前长连接要执行的消息方法 OnAshxEvent(Action<OnAshxEvent>, string) 完成该有的配置 public OnAshxEvent(Action<OnAshxEvent> Event, string GuId) Parameters Event Action<OnAshxEvent> 当前长连接要执行的消息方法 GuId string 配置的访问事件ID Properties ContentType 获取或设置输出流的 HTTP MIME 类型。 public string ContentType { get; set; } Property Value string Remarks 输出流的 HTTP MIME 类型。 默认值为“text/html”。 Data 用户数据 public object Data { get; set; } Property Value object DelayTime 表示当前长连接可以维持的毫秒数 （默认60秒） public int DelayTime { get; set; } Property Value int GuId 类似于ID,必须是唯一的，用于被调用 public string GuId { get; set; } Property Value string IsFlush 是否先向客户端输出空包，将不会阻塞线程 public bool IsFlush { get; set; } Property Value bool OnAshx 用于表示当前事件的执行情况 public OnAshxEventState OnAshx { get; } Property Value OnAshxEventState Methods Dispose() 释放由 OnAshxEvent 类的当前实例使用的所有资源。 public void Dispose() IsStartEvent(string) 触发已有的事件 public static bool IsStartEvent(string GuId) Parameters GuId string 事件ID Returns bool 返回是否存在 IsStartEvent(string, object) 触发已有的事件 public static bool IsStartEvent(string GuId, object Data) Parameters GuId string 事件ID Data object 传入的数据 Returns bool 返回是否存在"
  },
  "api/Tool.Web.Api.OnAshxEventState.html": {
    "href": "api/Tool.Web.Api.OnAshxEventState.html",
    "title": "Enum OnAshxEventState | Tool.Net",
    "keywords": "Enum OnAshxEventState Namespace Tool.Web.Api Assembly Tool.Net.dll 对异步事件类的状态 public enum OnAshxEventState Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Default = 0 表示，无任何动作！ OnlyID = 3 表示，因出现新的相同的ID链接，前一个将被强制关闭，以保证唯一性！ Success = 1 表示，被触发了！ Timeout = 2 表示，超时了！"
  },
  "api/Tool.Web.Api.RedirectOut.html": {
    "href": "api/Tool.Web.Api.RedirectOut.html",
    "title": "Class RedirectOut | Tool.Net",
    "keywords": "Class RedirectOut Namespace Tool.Web.Api Assembly Tool.Net.dll 系统默认 ApiOut 跳转地址的实现类，跳转地址302 public class RedirectOut : ApiOut, IApiOut Inheritance object ApiOut RedirectOut Implements IApiOut Inherited Members ApiOut.Json(object) ApiOut.JsonAsync(object) ApiOut.Json(object, JsonSerializerOptions) ApiOut.JsonAsync(object, JsonSerializerOptions) ApiOut.Write(object) ApiOut.WriteAsync(object) ApiOut.View() ApiOut.View(string) ApiOut.PathView(string) ApiOut.ViewAsync() ApiOut.ViewAsync(string) ApiOut.PathViewAsync(string) ApiOut.File(string, Stream) ApiOut.FileAsync(string, Stream) ApiOut.File(string, byte[]) ApiOut.FileAsync(string, byte[]) ApiOut.Redirect(string) ApiOut.RedirectAsync(string) ApiOut.NoContent() ApiOut.NoContentAsync() ApiOut.EventStream(Func<EventStream, Task>, int) ApiOut.EventStreamAsync(Func<EventStream, Task>, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors RedirectOut(string) 初始化构造 public RedirectOut(string url) Parameters url string 目标位置 Properties ContentType 重定向表头 public override string ContentType { get; set; } Property Value string StatusCode 重定向状态码 public override int StatusCode { get; set; } Property Value int Url 目标位置 public string Url { get; set; } Property Value string Methods ExecuteOutAsync(AshxRouteData) 重定向核心任务函数 public override Task ExecuteOutAsync(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 核心传输对象 Returns Task 返回任务"
  },
  "api/Tool.Web.Api.Val.html": {
    "href": "api/Tool.Web.Api.Val.html",
    "title": "Enum Val | Tool.Net",
    "keywords": "Enum Val Namespace Tool.Web.Api Assembly Tool.Net.dll 值来源的类型 public enum Val : byte Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields AllData = 11 只包含 Query 和 Form 的值 支持其他类型强转。 AllMode = 2 将Query和Form 的值，找到提供给 实体类（接收实体类） Body = 13 获取接收的 Body 数据流，接收对象必须是 Stream 或 PipeReader 或 Memory<T> 对象 BodyJson = 14 获取接收的 Body 数据流, 转换成可用的 Json 实体类对象，或JsonVar BodyString = 15 获取接收的 Body 数据流, 转换成可用的 string 字符串 Cookie = 6 获取Cookie下面的某个键的值，支持其他类型强转。 File = 7 获取上传的文件对象，接收对象必须是IFormFile Files = 8 获取上传的文件对象集合，接收对象必须是IFormFileCollection Form = 1 表单提交数据 支持其他类型强转。 FormMode = 4 将Form 的值，找到提供给 实体类（接收实体类） Header = 5 获取Header下面的某个键的值，支持其他类型强转。 Query = 0 URL ? 之后 传入的数据 支持其他类型强转。 QueryMode = 3 将Query 的值，找到提供给 实体类（接收实体类） RouteKey = 12 获取请求的路由格式 指定的键 的值 支持其他类型强转。 Service = 9 获取注册的对象（ServiceProvider） Session = 10 目前 支持 String 和 byte[] , Json 自动转对象，以及其他类型强转。 Remarks 代码由逆血提供支持"
  },
  "api/Tool.Web.Api.ViewOut.html": {
    "href": "api/Tool.Web.Api.ViewOut.html",
    "title": "Class ViewOut | Tool.Net",
    "keywords": "Class ViewOut Namespace Tool.Web.Api Assembly Tool.Net.dll 系统默认 ApiOut 输出对象的实现类，视图页面输出处理 public class ViewOut : ApiOut, IApiOut Inheritance object ApiOut ViewOut Implements IApiOut Inherited Members ApiOut.Json(object) ApiOut.JsonAsync(object) ApiOut.Json(object, JsonSerializerOptions) ApiOut.JsonAsync(object, JsonSerializerOptions) ApiOut.Write(object) ApiOut.WriteAsync(object) ApiOut.View() ApiOut.View(string) ApiOut.PathView(string) ApiOut.ViewAsync() ApiOut.ViewAsync(string) ApiOut.PathViewAsync(string) ApiOut.File(string, Stream) ApiOut.FileAsync(string, Stream) ApiOut.File(string, byte[]) ApiOut.FileAsync(string, byte[]) ApiOut.Redirect(string) ApiOut.RedirectAsync(string) ApiOut.NoContent() ApiOut.NoContentAsync() ApiOut.EventStream(Func<EventStream, Task>, int) ApiOut.EventStreamAsync(Func<EventStream, Task>, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors ViewOut(bool, string) 创建输出视图的实现类 public ViewOut(bool isView, string viewName) Parameters isView bool 是否使用系统格式视图 viewName string 路径或名字 Properties ContentType 输出类型 public override string ContentType { get; set; } Property Value string IsView 是否采用默认定位地址模式？ public bool IsView { get; set; } Property Value bool StatusCode HTTP 返回 Code public override int StatusCode { get; set; } Property Value int ViewName 表示地址 public string ViewName { get; set; } Property Value string Methods ExecuteOutAsync(AshxRouteData) 实现页面内容的输出（采用异步IO读取） public override Task ExecuteOutAsync(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 当前请求对象 Returns Task"
  },
  "api/Tool.Web.Api.WriteOut.html": {
    "href": "api/Tool.Web.Api.WriteOut.html",
    "title": "Class WriteOut | Tool.Net",
    "keywords": "Class WriteOut Namespace Tool.Web.Api Assembly Tool.Net.dll 系统默认 ApiOut 输出对象的实现类，文本格式处理 public class WriteOut : ApiOut, IApiOut Inheritance object ApiOut WriteOut Implements IApiOut Inherited Members ApiOut.Json(object) ApiOut.JsonAsync(object) ApiOut.Json(object, JsonSerializerOptions) ApiOut.JsonAsync(object, JsonSerializerOptions) ApiOut.Write(object) ApiOut.WriteAsync(object) ApiOut.View() ApiOut.View(string) ApiOut.PathView(string) ApiOut.ViewAsync() ApiOut.ViewAsync(string) ApiOut.PathViewAsync(string) ApiOut.File(string, Stream) ApiOut.FileAsync(string, Stream) ApiOut.File(string, byte[]) ApiOut.FileAsync(string, byte[]) ApiOut.Redirect(string) ApiOut.RedirectAsync(string) ApiOut.NoContent() ApiOut.NoContentAsync() ApiOut.EventStream(Func<EventStream, Task>, int) ApiOut.EventStreamAsync(Func<EventStream, Task>, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors WriteOut(string) 向客户端输出文本数据 public WriteOut(string text) Parameters text string 文本内容 Properties ContentType 输出类型 public override string ContentType { get; set; } Property Value string StatusCode HTTP 返回 Code public override int StatusCode { get; set; } Property Value int Text 输出结果数据 public string Text { get; set; } Property Value string Methods ExecuteOutAsync(AshxRouteData) 实现文本格式的输出 public override Task ExecuteOutAsync(AshxRouteData ashxRoute) Parameters ashxRoute AshxRouteData 当前请求对象 Returns Task"
  },
  "api/Tool.Web.Api.WriteType.html": {
    "href": "api/Tool.Web.Api.WriteType.html",
    "title": "Enum WriteType | Tool.Net",
    "keywords": "Enum WriteType Namespace Tool.Web.Api Assembly Tool.Net.dll 返回客户端的类型 public enum WriteType Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Fields Html = 0 (文本页面)text/html Json = 1 JSON（JavaScript Object Notation）application/json Text = 3 文本输出。text/plain Xml = 2 可扩展标记语言（英语：eXtensible Markup Language，简称: XML），是一种标记语言。 application/xml"
  },
  "api/Tool.Web.Api.html": {
    "href": "api/Tool.Web.Api.html",
    "title": "Namespace Tool.Web.Api | Tool.Net",
    "keywords": "Namespace Tool.Web.Api Classes ApiAshx 针对于新版Ashx路由模式，的同步，异步，支持 该控制器，相对于Mvc的控制器轻，应有功能都有，可自由扩展。 方便实现，您最想实现的效果，最大的优点还是因为他轻量级。 Api 方法创建示例： public GetApi( context) => Json(new { msg = \"路由版本api。\" }); Api 方法创建示例：(异步实现) public async GetTaskApi( context) => await JsonAsync(new { msg = \"路由版本api。\" }); ApiOut 系统默认 MinApi Api输出结果 抽象类，用于普通返回值，特殊返回值建议您自己实现。 ApiVal 用于 Api 请求参数，类型定义，区分不同阐述的值。 Ashx 针对于一般处理程序，备注一般处理程序必须继承于（ApiAshx 类才会生效） 所有状态（用于更好的使用API） AshxException Api的异常处理类 CrossDomain 指定允许其他域名访问，可跨域 相关配置： 'Access-Control-Allow-Origin:http://172.20.0.206' 一般用法（*，指定域，动态设置），3是因为*不允许携带认证头和cookies 'Access-Control-Allow-Credentials:true' 是否允许后续请求携带认证信息（cookies）,该值只能是true,否则不返回 'Access-Control-Allow-Methods:HEAD,GET,POST,PUT,PATCH,DELETE' 允许的请求类型 'Access-Control-Allow-Headers:x-requested-with,content-type' 允许的请求头字段 EventStreamOut SSE服务器事件流 FileOut 系统默认 ApiOut 输出对象的实现类，文件输出处理 JsonOut 系统默认 ApiOut 输出对象的实现类，JSON格式处理 MinApi 针对于新版Ashx路由模式，的同步，异步，支持（此Api为最轻量级，请严格遵循实现写法） 给你一个快的理由，因为该路由接口类在启动路由时就已经创建，中途调用，无需创建新的实例，达到最大性能优化。 同时请注意您这个Api类对象的生命周期，将伴随着整个Web应用程序一致，也就意味着类中的所有对象将不是安全的，请合理声明类变量使用。 Api 方法创建示例： public GetApi( context) => ApiOut.Json(new { msg = \"最小，路由版本api。\" }); Api 方法创建示例：(异步实现) public async GetTaskApi( context) => await ApiOut.JsonAsync(new { msg = \"最小，路由版本api。\" }); NoContentOut 无返回结果 OnAshxEvent 针对于继承 ApiAshx 的类，用于事件方法接口，需要另一个模块驱动的消息接口，可以使用 RedirectOut 系统默认 ApiOut 跳转地址的实现类，跳转地址302 ViewOut 系统默认 ApiOut 输出对象的实现类，视图页面输出处理 WriteOut 系统默认 ApiOut 输出对象的实现类，文本格式处理 Interfaces IApiOut MinApi Api 返回结果接口，用于实现各种返回输出 Enums AshxState 针对于Api需要接受相应的状态 OnAshxEventState 对异步事件类的状态 Val 值来源的类型 WriteType 返回客户端的类型"
  },
  "api/Tool.Web.Builder.IAshxBuilder.html": {
    "href": "api/Tool.Web.Builder.IAshxBuilder.html",
    "title": "Interface IAshxBuilder | Tool.Net",
    "keywords": "Interface IAshxBuilder Namespace Tool.Web.Builder Assembly Tool.Net.dll Ashx核心标准接口 public interface IAshxBuilder Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) AshxServiceExtensions.AddHttpContext(IAshxBuilder) Properties Application 提供整个请求服务者（依赖注入） IApplicationBuilder Application { get; set; } Property Value IApplicationBuilder IsHttpContext 是否注入HttpContext对象 bool IsHttpContext { get; set; } Property Value bool Services 容器核心对象 IServiceCollection Services { get; } Property Value IServiceCollection"
  },
  "api/Tool.Web.Builder.IgnoreUrlMiddleware.html": {
    "href": "api/Tool.Web.Builder.IgnoreUrlMiddleware.html",
    "title": "Class IgnoreUrlMiddleware | Tool.Net",
    "keywords": "Class IgnoreUrlMiddleware Namespace Tool.Web.Builder Assembly Tool.Net.dll URL 拦截器中间件 public class IgnoreUrlMiddleware Inheritance object IgnoreUrlMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors IgnoreUrlMiddleware(RequestDelegate, ILoggerFactory) 注册 URL 拦截器 public IgnoreUrlMiddleware(RequestDelegate next, ILoggerFactory loggerFactory) Parameters next RequestDelegate loggerFactory ILoggerFactory Properties Urls 现有的拦截器配置 public static HashSet<PathString> Urls { get; } Property Value HashSet<PathString> Methods InvokeAsync(HttpContext) 处理每次请求 验证是否需要拦截 public Task InvokeAsync(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "api/Tool.Web.Builder.html": {
    "href": "api/Tool.Web.Builder.html",
    "title": "Namespace Tool.Web.Builder | Tool.Net",
    "keywords": "Namespace Tool.Web.Builder Classes IgnoreUrlMiddleware URL 拦截器中间件 Interfaces IAshxBuilder Ashx核心标准接口"
  },
  "api/Tool.Web.EventStream.html": {
    "href": "api/Tool.Web.EventStream.html",
    "title": "Class EventStream | Tool.Net",
    "keywords": "Class EventStream Namespace Tool.Web Assembly Tool.Net.dll SSE服务器事件流 public class EventStream : IEventStream Inheritance object EventStream Implements IEventStream Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors EventStream(Func<EventStream, Task>, HttpContext, int) SSE服务器事件流 public EventStream(Func<EventStream, Task> func, HttpContext context, int retry = 3000) Parameters func Func<EventStream, Task> 流回复任务 context HttpContext 连接对象 retry int 指定浏览器重新发起连接的时间间隔 Properties ContentEncoding 输出的编码格式 public Encoding ContentEncoding { get; set; } Property Value Encoding Context 连接对象 public HttpContext Context { get; } Property Value HttpContext LastEventID 最后一次接收到的事件的标识符 public int LastEventID { get; set; } Property Value int Retry 告知断开后多久重连 public int Retry { get; set; } Property Value int Methods ExecuteResultAsync() 开始挂起输出流，直到Func<T, TResult> 函数完成为止。 public Task ExecuteResultAsync() Returns Task 任务 ServerSent<T>(T, string, string) 发送通知 public Task ServerSent<T>(T t, string @event = \"message\", string id = \"\") where T : class Parameters t T event string id string Returns Task Type Parameters T"
  },
  "api/Tool.Web.Hosting.DiyContainerBuilder.html": {
    "href": "api/Tool.Web.Hosting.DiyContainerBuilder.html",
    "title": "Class DiyContainerBuilder | Tool.Net",
    "keywords": "Class DiyContainerBuilder Namespace Tool.Web.Hosting Assembly Tool.Net.dll Diy容器数据 public class DiyContainerBuilder Inheritance object DiyContainerBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DiyContainerBuilder() 初始化 public DiyContainerBuilder() Methods Build() 完成服务模型注册 public IServiceProvider Build() Returns IServiceProvider Populate(IServiceCollection) 将默认的依赖注入的对象填入新的容器 public void Populate(IServiceCollection services) Parameters services IServiceCollection 服务"
  },
  "api/Tool.Web.Hosting.DiyServiceProviderFactory.html": {
    "href": "api/Tool.Web.Hosting.DiyServiceProviderFactory.html",
    "title": "Class DiyServiceProviderFactory | Tool.Net",
    "keywords": "Class DiyServiceProviderFactory Namespace Tool.Web.Hosting Assembly Tool.Net.dll Diy 依赖注入工厂 public class DiyServiceProviderFactory : IServiceProviderFactory<DiyContainerBuilder> Inheritance object DiyServiceProviderFactory Implements IServiceProviderFactory<DiyContainerBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DiyServiceProviderFactory() 初始化 public DiyServiceProviderFactory() Methods CreateBuilder(IServiceCollection) 创建一个新的 DiyContainerBuilder 用于注册服务 public DiyContainerBuilder CreateBuilder(IServiceCollection services) Parameters services IServiceCollection Returns DiyContainerBuilder CreateServiceProvider(DiyContainerBuilder) 使用 DiyContainerBuilder 构建 Autofac 容器，并返回一个 IServiceProvider public IServiceProvider CreateServiceProvider(DiyContainerBuilder containerBuilder) Parameters containerBuilder DiyContainerBuilder Returns IServiceProvider Exceptions ArgumentNullException"
  },
  "api/Tool.Web.Hosting.html": {
    "href": "api/Tool.Web.Hosting.html",
    "title": "Namespace Tool.Web.Hosting | Tool.Net",
    "keywords": "Namespace Tool.Web.Hosting Classes DiyContainerBuilder Diy容器数据 DiyServiceProviderFactory Diy 依赖注入工厂"
  },
  "api/Tool.Web.HttpContextExtension.html": {
    "href": "api/Tool.Web.HttpContextExtension.html",
    "title": "Class HttpContextExtension | Tool.Net",
    "keywords": "Class HttpContextExtension Namespace Tool.Web Assembly Tool.Net.dll 对HttpContext进行升级 public static class HttpContextExtension Inheritance object HttpContextExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Properties Accessor 获取全局HttpContext对象 public static IHttpContextAccessor Accessor { get; } Property Value IHttpContextAccessor Current 获取当前http请求的HttpContext对象，带异常提示。 public static HttpContext Current { get; } Property Value HttpContext CurrentPath 当前路径 public static string CurrentPath { get; } Property Value string CurrentSchemeHost 获取有关当前请求的 域名部分 的信息。 public static string CurrentSchemeHost { get; } Property Value string CurrentUrl 获取有关当前请求的 URL 的信息。 public static string CurrentUrl { get; } Property Value string Methods AddHttpException(HttpContext, int, string, Exception, params object[]) 设置错误，并指定错误号 public static Exception AddHttpException(this HttpContext context, int StatusCode, string format, Exception error, params object[] args) Parameters context HttpContext StatusCode int format string error Exception args object[] Returns Exception AddHttpException(HttpContext, int, string, params object[]) 设置错误，并指定错误号 public static Exception AddHttpException(this HttpContext context, int StatusCode, string format, params object[] args) Parameters context HttpContext StatusCode int format string args object[] Returns Exception GetSchemeHost(HttpContext) 获取当前请求地址的 主要信息（支持代理模式信息获取） public static (string scheme, string host) GetSchemeHost(this HttpContext context) Parameters context HttpContext HttpContext Returns (string scheme, string host) 返回连接协议和原始主机请求地址 GetService<T>(HttpContext) 获取服务（在 System.IServiceProvider 从中检索服务对象。） public static T GetService<T>(this HttpContext context) Parameters context HttpContext HttpContext Returns T 类型为 T 或 null 的服务对象（如果没有此类服务）。 Type Parameters T 要获取的服务对象的类型。 GetUserIp(HttpContext) 获取客户端请求的IP地址（支持代理模式信息获取） 有验证IP是否合法合规 public static string GetUserIp(this HttpContext context) Parameters context HttpContext HttpContext Returns string 返回IP地址 GetUserIps(HttpContext) 获取客户端请求的IP地址（支持代理模式信息获取） 有验证IP是否合法合规 public static string GetUserIps(this HttpContext context) Parameters context HttpContext HttpContext Returns string 返回IP地址或多个地址', '隔开 StreamMove(Stream, Stream, int) 将文件流分流写入 public static Task StreamMove(Stream ReadStream, Stream WriteStream, int minlen) Parameters ReadStream Stream 原文件流 WriteStream Stream 更新文件流 minlen int 最小资源大小 Returns Task"
  },
  "api/Tool.Web.HttpRequestExtension.html": {
    "href": "api/Tool.Web.HttpRequestExtension.html",
    "title": "Class HttpRequestExtension | Tool.Net",
    "keywords": "Class HttpRequestExtension Namespace Tool.Web Assembly Tool.Net.dll 对HttpRequest进行升级 public static class HttpRequestExtension Inheritance object HttpRequestExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods ALLToMode<M>(HttpRequest, bool) 根据前端页面表单填写的信息存入自定义实体(QueryString或Form) public static M ALLToMode<M>(this HttpRequest reques, bool istype = true) where M : new() Parameters reques HttpRequest HttpRequest istype bool 表示在转换实体过程中出现异常的处理方式，默认为true，抛出异常。 Returns M 返回对象 Type Parameters M 实体类 CheckAgent(HttpRequest) 根据 Agent 判断当前请求用户的设备名 public static UserSystem CheckAgent(this HttpRequest request) Parameters request HttpRequest Returns UserSystem UserSystem枚举 GetFormString(HttpRequest, string) 获取客户端Post方式提交的表单 public static string GetFormString(this HttpRequest request, string strName) Parameters request HttpRequest HttpRequest strName string 名称 Returns string 值 GetQueryString(HttpRequest, string) 获取客户端GET方式提交的数据 public static string GetQueryString(this HttpRequest request, string strName) Parameters request HttpRequest HttpRequest 对象 strName string 名称 Returns string GetString(HttpRequest, string) 包涵两种方式的数据（优先获取Query，获取不到时获取Form） public static string GetString(this HttpRequest request, string strName) Parameters request HttpRequest HttpRequest strName string 名称 Returns string GetToMode<M>(HttpRequest, bool) 根据前端页面表单填写的信息存入自定义实体(QueryString) public static M GetToMode<M>(this HttpRequest reques, bool istype = true) where M : new() Parameters reques HttpRequest HttpRequest istype bool 表示在转换实体过程中出现异常的处理方式，默认为true，抛出异常。 Returns M 返回对象 Type Parameters M 实体类 IsRange(HttpRequest, out List<Range>, long) 获取是否是下载请求 public static bool IsRange(this HttpRequest request, out List<Range> range, long Length) Parameters request HttpRequest HttpRequest range List<Range> 相关对象信息数组 Length long 当前流对象总大小 Returns bool PostToMode<M>(HttpRequest, bool) 根据前端页面表单填写的信息存入自定义实体(Form) public static M PostToMode<M>(this HttpRequest reques, bool istype = true) where M : new() Parameters reques HttpRequest HttpRequest istype bool 表示在转换实体过程中出现异常的处理方式，默认为true，抛出异常。 Returns M 返回对象 Type Parameters M 实体类 Save(IFormFile, string) 保存上传的文件 public static Task Save(this IFormFile formFile, string filename) Parameters formFile IFormFile 上传资源对象 filename string 保存文件的完整地址(当地址存在时会覆盖原有文件) Returns Task"
  },
  "api/Tool.Web.HttpResponseExtension.html": {
    "href": "api/Tool.Web.HttpResponseExtension.html",
    "title": "Class HttpResponseExtension | Tool.Net",
    "keywords": "Class HttpResponseExtension Namespace Tool.Web Assembly Tool.Net.dll 对HttpResponse进行升级 public static class HttpResponseExtension Inheritance object HttpResponseExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods AppendCookie(HttpResponse, string, string) 添加 Cookie 信息 public static void AppendCookie(this HttpResponse response, string key, string value) Parameters response HttpResponse 对象 key string 键 value string 值 AppendHeader(HttpResponse, string, string) 将 HTTP 头添加到输出流。 public static void AppendHeader(this HttpResponse response, string name, string value) Parameters response HttpResponse 对象 name string 要添加到输出流的 HTTP 头的名称。 value string 要追加到头中的字符串。 Exceptions NotSupportedException 已发送的 HTTP 标头之后追加标头。 Flush(HttpResponse) 向客户端发送当前所有缓冲的输出。(里面实现的异步方式) public static void Flush(this HttpResponse response) Parameters response HttpResponse 对象 FlushAsync(HttpResponse) 向客户端发送当前所有缓冲的输出。(里面实现的异步方式) public static Task FlushAsync(this HttpResponse response) Parameters response HttpResponse 对象 Returns Task Write(HttpResponse, byte[]) 输出HTTP流 public static void Write(this HttpResponse response, byte[] bytes) Parameters response HttpResponse 对象 bytes byte[] 数据流 Write(HttpResponse, byte[], int, int) 输出HTTP流 public static void Write(this HttpResponse response, byte[] bytes, int offset, int count) Parameters response HttpResponse 对象 bytes byte[] 数据流 offset int 读取开始位置 count int 读取数量 Write(HttpResponse, object) 输出HTTP流 public static void Write(this HttpResponse response, object obj) Parameters response HttpResponse 对象 obj object 输出内容 Write(HttpResponse, string) 输出HTTP流 public static void Write(this HttpResponse response, string txt) Parameters response HttpResponse 对象 txt string 输出内容 WriteAsync(HttpResponse, byte[]) 输出HTTP流 public static Task WriteAsync(this HttpResponse response, byte[] bytes) Parameters response HttpResponse 对象 bytes byte[] 数据流 Returns Task WriteAsync(HttpResponse, byte[], int, int) 输出HTTP流 public static Task WriteAsync(this HttpResponse response, byte[] bytes, int offset, int count) Parameters response HttpResponse 对象 bytes byte[] 数据流 offset int 读取开始位置 count int 读取数量 Returns Task WriteAsync(HttpResponse, object) 输出HTTP流 public static Task WriteAsync(this HttpResponse response, object obj) Parameters response HttpResponse 对象 obj object 输出内容 Returns Task WriteAsync(HttpResponse, string) 输出HTTP流 public static Task WriteAsync(this HttpResponse response, string txt) Parameters response HttpResponse 对象 txt string 输出内容 Returns Task"
  },
  "api/Tool.Web.IEventStream.html": {
    "href": "api/Tool.Web.IEventStream.html",
    "title": "Interface IEventStream | Tool.Net",
    "keywords": "Interface IEventStream Namespace Tool.Web Assembly Tool.Net.dll HTTP协议的事件流（EventStream）简称SSE 接口 public interface IEventStream Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties ContentEncoding 输出的编码格式 Encoding ContentEncoding { get; } Property Value Encoding LastEventID 最后一次接收到的事件的标识符 int LastEventID { get; } Property Value int Retry 告知断开后多久重连 int Retry { get; } Property Value int Methods ExecuteResultAsync() 开始挂起输出流，直到Func<T, TResult> 函数完成为止。 Task ExecuteResultAsync() Returns Task 任务"
  },
  "api/Tool.Web.Range.html": {
    "href": "api/Tool.Web.Range.html",
    "title": "Class Range | Tool.Net",
    "keywords": "Class Range Namespace Tool.Web Assembly Tool.Net.dll 向请求添加指定范围的字节范围标头。 public class Range Inheritance object Range Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors Range(long, long) 初始化 public Range(long from, long to) Parameters from long to long Fields From 开始发送数据的位置。 public long From Field Value long To 停止发送数据的位置。 public long To Field Value long"
  },
  "api/Tool.Web.Routing.AshxRouteAttribute.html": {
    "href": "api/Tool.Web.Routing.AshxRouteAttribute.html",
    "title": "Class AshxRouteAttribute | Tool.Net",
    "keywords": "Class AshxRouteAttribute Namespace Tool.Web.Routing Assembly Tool.Net.dll 对Api接口以及控制器使用路由配置 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, Inherited = false)] public class AshxRouteAttribute : Attribute Inheritance object Attribute AshxRouteAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors AshxRouteAttribute(string) public AshxRouteAttribute(string template) Parameters template string Properties Name 路由名称 public string Name { get; set; } Property Value string Template 路由规则 public string Template { get; } Property Value string"
  },
  "api/Tool.Web.Routing.AshxRouteData.html": {
    "href": "api/Tool.Web.Routing.AshxRouteData.html",
    "title": "Class AshxRouteData | Tool.Net",
    "keywords": "Class AshxRouteData Namespace Tool.Web.Routing Assembly Tool.Net.dll 封装有关路由的信息。 public class AshxRouteData Inheritance object AshxRouteData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors AshxRouteData(RouteContext, JsonSerializerOptions, ILogger, bool) 使用指定路由和路由处理程序初始化 AshxRouteData 类的新实例。 public AshxRouteData(RouteContext routeContext, JsonSerializerOptions jsonOptions, ILogger Logger, bool IsAsync) Parameters routeContext RouteContext 封装与所定义路由匹配的 HTTP 请求的相关信息。 jsonOptions JsonSerializerOptions json配置对象 Logger ILogger 日志模块 IsAsync bool Properties Action 当前的方法名 public string Action { get; } Property Value string Area 当前的控制器的命名空间 public string Area { get; } Property Value string Controller 当前的控制器 public string Controller { get; } Property Value string DataTokens 获取在 ASP.NET 路由确定路由是否匹配请求时，传递到路由处理程序但未使用的自定义值的集合。 public RouteValueDictionary DataTokens { get; } Property Value RouteValueDictionary 一个包含自定义值的对象。 GetAshx 获取当前对象的 Ashx public Ashx GetAshx { get; } Property Value Ashx GetRouteData 获取有关所请求路由的信息。 public virtual RouteData GetRouteData { get; } Property Value RouteData 一个对象，该对象包含有关所请求路由的信息。 Handler 获取或设置处理所请求路由的对象。 public RequestDelegate Handler { get; set; } Property Value RequestDelegate 一个处理路由请求的对象。 HttpContext 获取有关 HTTP 请求的信息。 public virtual HttpContext HttpContext { get; } Property Value HttpContext 一个对象，该对象包含有关 HTTP 请求的信息。 IsAshx 获取当前对象的 Ashx 是否为空 public bool IsAshx { get; } Property Value bool IsAsync 是否采用异步线程池，处理每次请求路由的过程 public virtual bool IsAsync { get; } Property Value bool Key 每次请求生成的Id public string Key { get; } Property Value string Logger 日志信息 public virtual ILogger Logger { get; } Property Value ILogger Routers 获取或设置表示路由的对象。 public IList<IRouter> Routers { get; } Property Value IList<IRouter> 一个表示路由定义的对象。 Service 获取有关所请求路由的信息。 public virtual IServiceProvider Service { get; } Property Value IServiceProvider 一个对象，该对象包含有关所请求路由的信息。 Values 获取路由的 URL 参数值和默认值的集合。 public RouteValueDictionary Values { get; } Property Value RouteValueDictionary 一个对象，其中包含根据 URL 和默认值分析得出的值。 Methods GetNewJsonOptions() 获取一个新的 JsonSerializerOptions 对象 原对象来源于 AddAshx 时注册值 public JsonSerializerOptions GetNewJsonOptions() Returns JsonSerializerOptions 新的 JsonSerializerOptions 对象 GetRequired(string) 使用指定标识符检索值。 public object GetRequired(string valueName) Parameters valueName string 要检索的值的键。 Returns object 其键与 valueName 匹配的 System.Web.Routing.RouteData.Values 属性中的元素。 Exceptions InvalidOperationException valueName 的值不存在。 GetRequiredString(string) 使用指定标识符检索值。 public string GetRequiredString(string valueName) Parameters valueName string 要检索的值的键。 Returns string 其键与 valueName 匹配的 System.Web.Routing.RouteData.Values 属性中的元素。 Exceptions InvalidOperationException valueName 的值不存在。"
  },
  "api/Tool.Web.Routing.html": {
    "href": "api/Tool.Web.Routing.html",
    "title": "Namespace Tool.Web.Routing | Tool.Net",
    "keywords": "Namespace Tool.Web.Routing Classes AshxRouteAttribute 对Api接口以及控制器使用路由配置 AshxRouteData 封装有关路由的信息。"
  },
  "api/Tool.Web.Session.DiySession.html": {
    "href": "api/Tool.Web.Session.DiySession.html",
    "title": "Class DiySession | Tool.Net",
    "keywords": "Class DiySession Namespace Tool.Web.Session Assembly Tool.Net.dll 用于提供实现自定义Session public abstract class DiySession : ISession Inheritance object DiySession Implements ISession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SessionExtension.Get(ISession, string) SessionExtension.Get<T>(ISession, string) SessionExtension.Set(ISession, string, object) SessionExtension.Set(ISession, string, string) SessionExtension.SetAvailable(ISession, bool) SessionExtension.Set<T>(ISession, string, T) SessionExtension.TryGetValue(ISession, string, out string) SessionExtension.TryGetValue(ISession, string, Type, out object) SessionExtension.TryGetValue<T>(ISession, string, out T) ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Properties Context 提供当前请求信息模块 public HttpContext Context { get; } Property Value HttpContext Id SessionId public string Id { get; } Property Value string IsAvailable Session 是否可用（可用时将自动标记，可用标志） public bool IsAvailable { get; set; } Property Value bool Logger 提供日志输出模块 public ILogger Logger { get; } Property Value ILogger Methods Clear() 清空 Session 的全部键值 public abstract void Clear() GetKeys() 提供 Session 的全部键 public abstract IEnumerable<string> GetKeys() Returns IEnumerable<string> Initialize() 创建Session对象的认证流程 public virtual Task Initialize() Returns Task Remove(string) 删除 Session 指定的键值 public abstract void Remove(string key) Parameters key string 指定的键 Set(string, byte[]) 添加键值的方法 public abstract void Set(string key, byte[] value) Parameters key string 键 value byte[] 值 SetId(string) 设置Id值 protected void SetId(string id) Parameters id string SessionId ToString() 显示说明 public override string ToString() Returns string TryGetValue(string, out byte[]) 获取键值的方法 public abstract bool TryGetValue(string key, out byte[] value) Parameters key string 键 value byte[] 值 Returns bool 返回是否存在"
  },
  "api/Tool.Web.Session.DiySessionMiddleware.html": {
    "href": "api/Tool.Web.Session.DiySessionMiddleware.html",
    "title": "Class DiySessionMiddleware | Tool.Net",
    "keywords": "Class DiySessionMiddleware Namespace Tool.Web.Session Assembly Tool.Net.dll AsSession中间件 public class DiySessionMiddleware Inheritance object DiySessionMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DiySessionMiddleware(RequestDelegate, ILoggerFactory, DiySessionOptions) 创建AsSession协议 public DiySessionMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, DiySessionOptions sessionOptions) Parameters next RequestDelegate loggerFactory ILoggerFactory sessionOptions DiySessionOptions Properties SessionName 表明Session存储名称 public string SessionName { get; } Property Value string Methods InvokeAsync(HttpContext) 处理每次请求,配置AsSession public Task InvokeAsync(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "api/Tool.Web.Session.DiySessionOptions.html": {
    "href": "api/Tool.Web.Session.DiySessionOptions.html",
    "title": "Class DiySessionOptions | Tool.Net",
    "keywords": "Class DiySessionOptions Namespace Tool.Web.Session Assembly Tool.Net.dll 自定义的Session对象，必须完成的实现方法 public class DiySessionOptions Inheritance object DiySessionOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.Add<T>(object, object, object) ObjectExtension.CopyEntity(object, object, params string[]) ObjectExtension.EntityToJson(object) ObjectExtension.EntityToJson(object, bool) ObjectExtension.EntityToJson(object, bool, string) ObjectExtension.GetIntPtr(object) ObjectExtension.GetIntPtrInt(object) ObjectExtension.Read<T>(object, int, object, int, int) ObjectExtension.Read<T>(object, object, int, int) ObjectExtension.ToBase64String(object) ObjectExtension.ToBytes(object) ObjectExtension.ToBytes(object, out Type) ObjectExtension.ToJson(object) ObjectExtension.ToJson(object, JsonSerializerOptions) ObjectExtension.ToJsonWeb(object) ObjectExtension.ToJsonWeb(object, Action<JsonSerializerOptions>) ObjectExtension.ToTryVar<T>(object, T) ObjectExtension.ToVar(object, string) ObjectExtension.ToVar(object, Type, bool) ObjectExtension.ToVar<T>(object) ObjectExtension.ToXml(object) DictionaryExtension.GetDictionary(object) DictionaryExtension.SetDictionary(object, IDictionary<string, object>) DictionaryExtension.ToDictionary(object) DictionaryExtension.ToDictionary<T>(object) DictionaryExtension.ToIDictionary(object) DictionaryExtension.ToIDictionary<T>(object) TypeExtension.GetFieldKey(object, string, out bool) TypeExtension.GetFieldKey(object, Type, string, out bool) TypeExtension.GetFieldKey<T>(object, string, out bool) TypeExtension.GetPropertieFind(object, string, bool) TypeExtension.GetProperties(object) TypeExtension.GetPropertyKey(object, string, out bool) TypeExtension.GetPropertyKey(object, Type, string, out bool) TypeExtension.GetPropertyKey<T>(object, string, out bool) TypeExtension.GetValue(object, PropertyDescriptor) TypeExtension.GetValue(object, string) TypeExtension.GetValue(object, string, bool) TypeExtension.SetFieldKey(object, string, object) TypeExtension.SetFieldKey(object, Type, string, object) TypeExtension.SetFieldKey<T>(object, string, object) TypeExtension.SetPropertyKey(object, string, object) TypeExtension.SetPropertyKey(object, Type, string, object) TypeExtension.SetPropertyKey<T>(object, string, object) TypeExtension.SetValue(object, PropertyDescriptor, object) TypeExtension.SetValue(object, string, object) TypeExtension.SetValue(object, string, object, bool) Remarks 代码由逆血提供支持 Constructors DiySessionOptions() 初始化对象 public DiySessionOptions() Fields IsSign IsAvailable为true时，特点的标志 public const string IsSign = \".1\" Field Value string Properties Cookie 获取或设置用户（所有用户共用配置） public CookieOptions Cookie { get; } Property Value CookieOptions GetKey 注册一个可以自由控制的开关，以及自由规则的键值。 默认提供SessionId值 返回值 为空，时取消设置SessionId行为。 public Func<HttpContext, string, Task<string>> GetKey { get; set; } Property Value Func<HttpContext, string, Task<string>> SessionName 表明Session存储名称 public string SessionName { get; set; } Property Value string Sign 标记值（可以设置为特定值，默认：IsSign值） public string Sign { get; set; } Property Value string Methods GetDiySession<T>() 自定义Session必须完成的注册流程 public void GetDiySession<T>() where T : DiySession, new() Type Parameters T 实现的基类"
  },
  "api/Tool.Web.Session.html": {
    "href": "api/Tool.Web.Session.html",
    "title": "Namespace Tool.Web.Session | Tool.Net",
    "keywords": "Namespace Tool.Web.Session Classes DiySession 用于提供实现自定义Session DiySessionMiddleware AsSession中间件 DiySessionOptions 自定义的Session对象，必须完成的实现方法"
  },
  "api/Tool.Web.SessionExtension.html": {
    "href": "api/Tool.Web.SessionExtension.html",
    "title": "Class SessionExtension | Tool.Net",
    "keywords": "Class SessionExtension Namespace Tool.Web Assembly Tool.Net.dll 对ISession进行升级 public static class SessionExtension Inheritance object SessionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 代码由逆血提供支持 Methods Get(ISession, string) 获取Session数据（无值不发生异常） public static string Get(this ISession session, string key) Parameters session ISession ISession key string 键值名称 Returns string 返回一个值 Get<T>(ISession, string) 获取Session数据（无值不发生异常） public static T Get<T>(this ISession session, string key) Parameters session ISession ISession key string 键值名称 Returns T 返回一个值 Type Parameters T 实体对象 Set(ISession, string, object) 增加一个键值对，如果存在仅修改值 public static void Set(this ISession session, string key, object value) Parameters session ISession ISession key string 键值名称 value object 值，全部以string值保存 Set(ISession, string, string) 增加一个键值对，如果存在仅修改值 public static void Set(this ISession session, string key, string value) Parameters session ISession ISession key string 键值名称 value string 值 SetAvailable(ISession, bool) 仅对DiySession设置有效，设置为true后会为其名称，增加有效用户类似标志 public static void SetAvailable(this ISession session, bool isAvailable) Parameters session ISession 对象 isAvailable bool 可用性状态 Set<T>(ISession, string, T) 增加一个键值对，如果存在仅修改值 public static void Set<T>(this ISession session, string key, T value) where T : new() Parameters session ISession ISession key string 键值名称 value T 获得的值 Type Parameters T TryGetValue(ISession, string, out string) 获取Session数据 public static bool TryGetValue(this ISession session, string key, out string value) Parameters session ISession ISession key string 键值名称 value string 获得的值 Returns bool 返回一个值，如果键值名称不存在则返回NULL TryGetValue(ISession, string, Type, out object) 获取Session数据 public static bool TryGetValue(this ISession session, string key, Type type, out object value) Parameters session ISession ISession key string 键值名称 type Type 转换成对象的类型 value object 获得的值 Returns bool 返回一个值，如果键值名称不存在则返回NULL TryGetValue<T>(ISession, string, out T) 获取Session数据 public static bool TryGetValue<T>(this ISession session, string key, out T value) where T : new() Parameters session ISession ISession key string 键值名称 value T 获得的值 Returns bool 返回一个值，如果键值名称不存在则返回NULL Type Parameters T"
  },
  "api/Tool.Web.html": {
    "href": "api/Tool.Web.html",
    "title": "Namespace Tool.Web | Tool.Net",
    "keywords": "Namespace Tool.Web Classes EventStream SSE服务器事件流 HttpContextExtension 对HttpContext进行升级 HttpRequestExtension 对HttpRequest进行升级 HttpResponseExtension 对HttpResponse进行升级 Range 向请求添加指定范围的字节范围标头。 SessionExtension 对ISession进行升级 Interfaces IEventStream HTTP协议的事件流（EventStream）简称SSE 接口"
  },
  "api/Tool.html": {
    "href": "api/Tool.html",
    "title": "Namespace Tool | Tool.Net",
    "keywords": "Namespace Tool Classes BoolExtension 对Bool进行升级 ByteExtension 对Byte进行升级 CharExtension 对char进行升级 DateTimeExtension 对DateTime进行升级 DecimalExtension 对Decimal进行升级 DoubleExtension 对Double进行升级 FloatExtension 对Float进行升级 IntExtension 对Int进行升级 LongExtension 对long进行升级 ObjectExtension 对object类进行升级 ShortExtension 对Short进行升级 StringExtension 对string类进行升级 UintExtension 对uint进行升级 UlongExtension 对ulong进行升级 UshortExtension 对ushort进行升级 Structs GlobalObj 全局公共对象，支持线程安全访问 Delegates ObjectExtension.ThreadStart 表示在 System.Threading.Thread 上执行的方法。"
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | Tool.Net",
    "keywords": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Tool.Net",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | Tool.Net",
    "keywords": "Introduction"
  }
}